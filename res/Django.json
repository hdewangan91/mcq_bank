[{"q":"<p>While working on a Django project, you came across some additional details and changes that you want to review. You are not sure how to make those changes but you learned about the concept of migration in Django. Which of the following code can help you apply migration in your project wishlist:</p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>$ python manage.py makemigrations\nMigrations for 'wishlist':\nwishlist/migrations/0003_auto.py:\n- Alter field wish on wishlist</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>$ python manage.py makemigrations\nMigrations for 'wishlist':\nwishlist/migrations/0003_auto.py:\n- Alteration field wish on wishlist</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>$ python manage.py makemigrations\nwishlist/migrations/0003_auto.py:\n- Alter field wish on wishlist</code></pre>\n\t</li>\n</ol>","a":[{"id":1671203,"option":"1","correct":true},{"id":1671204,"option":"2","correct":false},{"id":1671205,"option":"3","correct":false},{"id":1671206,"option":"None of these","correct":false}]},{"q":"<p>While working on a Django project, you learned about the concept of class-based view. It&nbsp;allows you to respond to different HTTP request methods with different class instance methods. Which of the following code can handle HTTP GET in a view function:</p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>from django.http import HttpResponse\nfrom django.views import View\nclass CBV(View):\ndef neth(self, request):\n# &lt;view logic&gt;\nreturn HttpResponse('ans')</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>from django.http import HttpResponse\nfrom django.views import View\nclass CBV():\ndef neth(self, request):\n# &lt;view logic&gt;\nreturn ans</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>from django.http import HttpResponse\nfrom django.views import View\ndef neth(self, request):\n# &lt;view logic&gt;\nreturn HttpResponse('ans')</code></pre>\n\t</li>\n</ol>","a":[{"id":1670872,"option":"1","correct":true},{"id":1670873,"option":"2","correct":false},{"id":1670874,"option":"3","correct":false},{"id":1670875,"option":"None of these","correct":false}]},{"q":"<p>You are working on a Django project.&nbsp;Your task is to access a book&nbsp;library over HTTP using the views as an API. It is preferable to ask the API when the most recent book got published. Which of the following code will you use for the same:</p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>from django.urls import path\nfrom books.views import BookListView\nurlpatterns = [path('books/', BookListView.as_view()),]</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>from django.urls import path\nfrom books.views import BookListView\nurlpatterns = [path(BookListView.as_view()),]</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>from books.views import BookListView\nurlpatterns = [path('books/', BookListView.as_view()),]</code></pre>\n\t</li>\n</ol>","a":[{"id":1670804,"option":"1","correct":true},{"id":1670805,"option":"2","correct":false},{"id":1670806,"option":"3","correct":false},{"id":1670807,"option":"None of these","correct":false}]},{"q":"<p>While working on a Django project, you came across many errors in your code but you are unable to find them. You know about the concept of <em>logging</em> in Django but were unaware of its implementation. Which of the following code will you use to print all the messages in the console:</p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>LOGGING = {\n'version': 1,\n'disable_existing_loggers': False,\n'handlers': {\n'console': {\n'class': 'logging.StreamHandler',\n},},\n'root': {\n'handlers': ['console'],\n'level': 'WARNING',\n},\n}</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>LOGGING = {\n'version': 1,\n'disable_existing_loggers': False,\n'handlers': {\n'console': {\n'class': 'logging.StreamHandler',\n},},}</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>LOGGING = {\n'version': 1,\n'disable_existing_loggers': False,\n'root': {\n'handlers': ['console'],\n'level': 'WARNING',\n},\n}</code></pre>\n\t</li>\n</ol>","a":[{"id":1670888,"option":"1","correct":true},{"id":1670889,"option":"2","correct":false},{"id":1670890,"option":"3","correct":false},{"id":1670891,"option":"None of these","correct":false}]},{"q":"<p>You are working on models in Django. Which of the following code will you use to create a model that defines a class called <em>STUDENT</em>&nbsp;that contains the name,&nbsp;age, and email ID of students:</p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>from django.db import models\nclass STUDENT(models.Model):\n   Name = models.CharField(max_length=35)\n   Age  = models.IntegerField()\n   Email= models.EmailField(max_length=50)</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>from django.db import models\nclass STUDENT(models.Model):\n   Name = STUDENT.models.CharField(max_length=35)\n   Age  = STUDENT.models.IntegerField()\n   Email= STUDENT.models.EmailField(max_length=50)\n</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>from django.db import models\nclass STUDENT(models.Model):\n   Name = model.CharField(max_length=35)\n   Age  = model.IntegerField()\n   Email= model.EmailField(max_length=50)\n</code></pre>\n\t</li>\n</ol>","a":[{"id":1668667,"option":"1","correct":true},{"id":1668668,"option":"2","correct":false},{"id":1668669,"option":"3","correct":false},{"id":1668670,"option":"None of these","correct":false}]},{"q":"<p>You are working on a Django<em> </em>project. Your task is to retrieve information from a model called&nbsp;<em>STUDENT</em><strong>&nbsp;</strong>such that the output is sorted in ascending order on the basis of age and it must contain all the students whose last name starts with '<em>Agar</em>'. Which of the following code will you use to perform this task:</p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>from user.models import STUDENT  \nStudent.objects.filter(last_name__contains = 'Agar') &amp; \nStudent.objects.all().order_by('age')       </code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>from user.models import STUDENT  \nStudent.objects.copy(last_name__contains = 'Agar') &amp; \nStudent.objects.all().order('age')</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>from models import STUDENT  \nStudent.objects.query(last_name__contains = 'Agar') &amp; \nStudent.objects.all().order_by('age')</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>from user.models import STUDENT  \nStudent.objects.filter(last_name__contains = 'Agar') &amp; \nStudent.objects.all('age')       </code></pre>\n\t</li>\n</ol>","a":[{"id":1668879,"option":"1","correct":true},{"id":1668880,"option":"2","correct":false},{"id":1668881,"option":"3","correct":false},{"id":1668882,"option":"4","correct":false}]},{"q":"<p>You are working on a Django<strong>&nbsp;</strong>project. Which of the following code will you use to retrieve all the&nbsp;information from a model called&nbsp;<em>STUDENT</em>:</p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>&gt;&gt;&gt; from user.models import STUDENT\n&gt;&gt;&gt; queryset = STUDENT.objects.all()  </code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>&gt;&gt;&gt; from models import STUDENT\n&gt;&gt;&gt; queryset = STUDENT.objects.all()  </code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>&gt;&gt;&gt; from user.models import STUDENT\n&gt;&gt;&gt; queryset = STUDENT.objects()  </code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>&gt;&gt;&gt; from models.users import STUDENT\n&gt;&gt;&gt; queryset = STUDENT.objects.all()  </code></pre>\n\t</li>\n</ol>","a":[{"id":1668763,"option":"1","correct":true},{"id":1668764,"option":"2","correct":false},{"id":1668765,"option":"3","correct":false},{"id":1668766,"option":"4","correct":false}]},{"q":"<p>Alice is working on Template Usage in Django. He is using <em>django.template.loader</em> module. Then in this scenario, which of the following functions can she use to load templates?</p>\n\n<p><strong>Functions</strong></p>\n\n<ol>\n\t<li>get_template()</li>\n\t<li>render_template()</li>\n\t<li>select_template()</li>\n</ol>","a":[{"id":1689858,"option":"1 and 2","correct":false},{"id":1689859,"option":"2 and 3","correct":false},{"id":1689860,"option":"1 and 3","correct":true},{"id":1689861,"option":"All of these","correct":false}]},{"q":"<p>Bob is working on Templates in <em>Django</em>. He wants to render the Roll No. of students. Then in this scenario which of the following option is correct about {{ RollNo }} in Django templates:</p>\n\n<p><strong>Option</strong></p>\n\n<ol>\n\t<li>It will be displayed as {{ RollNo }} in HTML.</li>\n\t<li>The RollNo will be replaced with their values.</li>\n\t<li>{{ RollNo }} will be the only output.</li>\n</ol>","a":[{"id":1689854,"option":"1","correct":false},{"id":1689855,"option":"2","correct":true},{"id":1689856,"option":"3","correct":false},{"id":1689857,"option":"None of these","correct":false}]},{"q":"<p>Alice is working on SchemaEditor in <em>Django</em>. She wants to use some methods in SchemaEditor. Then in this scenario, which of the following methods can she use?</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>add_index()</li>\n\t<li>add_model()</li>\n\t<li>execute()</li>\n\t<li>delete_model()</li>\n</ol>\n\n<p> </p>","a":[{"id":1689850,"option":"1, 2 and 3","correct":false},{"id":1689851,"option":"2, 3 and 4","correct":false},{"id":1689852,"option":"1, 3 and 4","correct":true},{"id":1689853,"option":"All of these","correct":false}]},{"q":"<p>Bob is working on writing views on <em>Django</em> application. He wants to write a view that shows the detail of an item if exists or throws an error if not. Then in this scenario which of the following code should he choose:</p>\n\n<p><strong>Code 1</strong></p>\n\n<pre class=\"prettyprint\"><code>from django.http import Http404\nfrom django.shortcuts import render\n\nfrom .models import Item\n\ndef detail(request, item_id):\n    try:\n        item = Item.objects.get(pk=item_id)\n    except Item.DoesNotExist:\n        raise Http404(\"Item does not exist\")\n\n    return render(request, 'hack/detail.html', {'item': item})</code></pre>\n\n<p><strong>Code 2</strong></p>\n\n<pre class=\"prettyprint\"><code>from django.shortcuts import get_object_or_404, render\n\nfrom .models import Item\n\ndef detail(request, item_id):\n    item = get_object_or_404(Item, pk=item_id)\n    return render(request, 'hack/detail.html', {'item': item})</code></pre>\n\n<p><strong>Code 3</strong></p>\n\n<pre class=\"prettyprint\"><code>from django.http import Http404\nfrom django.shortcuts import render\n\nfrom .models import Item\n\ndef detail(request, item_id):\n    try:\n        item = Item.objects.get(pk=item_id)\n    except Item.DoesNotExist:\n        raise Http404(\"Item does not exist\")\n\n    return render(request, 'hack/detail.html', {\n        'item' = item,\n    })</code></pre>\n\n<p><strong>Code 4</strong></p>\n\n<pre class=\"prettyprint\"><code>from django.shortcuts import get_object_or_404, render\n\nfrom .models import Item\n\ndef detail(request, item_id):\n    item = get_object_or_404(Item, pk=item_id)\n    return render(request, 'hack/detail.html', {\n        'item' = item,\n    })</code></pre>\n\n<p> </p>","a":[{"id":1687161,"option":"1 and 2","correct":true},{"id":1687162,"option":"2 and 3","correct":false},{"id":1687163,"option":"3 and 4","correct":false},{"id":1687164,"option":"1 and 4","correct":false}]},{"q":"<p>Alice is writing a view for her <em>Django </em>App. She wants to write a view that shows a list of questions with respect to recent dates. Then which of the following code, she can use in this scenario:</p>\n\n<p><strong>Code 1:</strong></p>\n\n<pre class=\"prettyprint\"><code>from django.http import HttpResponse\nfrom django.template import loader\nfrom django.shortcuts import render\n\nfrom .models import Question\n\ndef hacker(request):\n    question_list = Question.objects.order_by('-pub_date')[:10]\n    template = loader.get_template('hack/index.html')\n    context = {\n        'question_list': question_list,\n    }\n    return HttpResponse(template.render(context, request))</code></pre>\n\n<p><strong>Code 2:</strong></p>\n\n<pre class=\"prettyprint\"><code>from django.http import HttpResponse\nfrom django.template import loader\nfrom django.shortcuts import render\n\nfrom .models import Question\n\ndef hacker(request):\n    question_list = Question.objects.order_by('-pub_date')[:10\\]\n    context = {'question_list': question_list}\n    return render('hack/index.html')</code></pre>\n\n<p><strong>Code 3:</strong></p>\n\n<pre class=\"prettyprint\"><code>from django.http import HttpResponse\nfrom django.template import loader\nfrom django.shortcuts import render\n\nfrom .models import Question\n\ndef hacker(request):\n    question_list = Question.objects.order_by('-pub_date')[:10]\n    template = loader.get_template('hack/index.html')\n    context = {\n        'question_list': question_list\n    }\n    return HttpResponse(render(context, request))</code></pre>\n\n<p><strong>Code 4:</strong></p>\n\n<pre class=\"prettyprint\"><code>from django.http import HttpResponse\nfrom django.template import loader\nfrom django.shortcuts import render\n\nfrom .models import Question\n\ndef hacker(request):\n    question_list = Question.objects.order_by('-pub_date')[:10\\]\n    context = {'question_list': question_list}\n    return render(request, 'hack/index.html', context)</code></pre>\n\n<p> </p>","a":[{"id":1686148,"option":"1 and 2","correct":false},{"id":1686149,"option":"2 and 3","correct":false},{"id":1686150,"option":"3 and 4","correct":false},{"id":1686151,"option":"1 and 4","correct":true}]},{"q":"<p>Alice is creating a project in <em>Django</em>. Following are the steps given for the initial setup of the project. Then in this scenario which of the following option should she choose:</p>\n\n<p><strong>Steps</strong></p>\n\n<p>a)</p>\n\n<pre class=\"prettyprint\"><code>$ python -m django --version</code></pre>\n\n<p>b)</p>\n\n<pre class=\"prettyprint\"><code>$ django-admin startproject Hacker\n</code></pre>\n\n<p>c)</p>\n\n<pre class=\"prettyprint\"><code>$ python manage.py runserver\n</code></pre>\n\n<p><em>(<strong> Note</strong>: Alice is using Linux environment )</em></p>","a":[{"id":1672931,"option":"a, c, b","correct":false},{"id":1672932,"option":"a, b, c","correct":true},{"id":1672933,"option":"c, b, a","correct":false},{"id":1672934,"option":"None of the above","correct":false}]},{"q":"<p>Alice is working on URL Design in <em>Django</em>. She wants a clean and elegant URL scheme for the web application. Which of the following option she can use in this scenario?</p>\n\n<p> </p>","a":[{"id":1672803,"option":"URLregex","correct":false},{"id":1672804,"option":"URLconf","correct":true},{"id":1672805,"option":"URLattrib","correct":false},{"id":1672806,"option":"URLvalue","correct":false}]},{"q":"<p>Bob is working on Shortcut Functions in <em>Django</em>. He wants to introduce controlled coupling.Then which of the following code he can use in this scenario:</p>\n\n<p><strong>Code</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>from django.shortcuts import render\n\ndef hacker(request):\n   return render(request, 'hack/index.html')</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>from django.shortcuts import redirect \n\ndef hacker(request):\n   return redirect ('hack/index.html')</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>from django.template import loader\n\ndef hacker(request):\n   request HttpResponse(loader.get_template('hack/index.html'))</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>from django.shortcuts import get_object_or_404\n\ndef hacker(request):\n   obj = get_object_or_404(MyModel)</code></pre>\n\n<p> </p>","a":[{"id":1671211,"option":"1, 2 and 3","correct":false},{"id":1671212,"option":"2, 3 and 4","correct":false},{"id":1671213,"option":"1, 2 and 4","correct":true},{"id":1671214,"option":"All of these","correct":false}]},{"q":"<p>Bob is working on Security Middleware in <em>Django</em>. He wants to provide security enhancement to the request response cycle. Then which of the following option he can use in this scenario:</p>\n\n<p><strong>Options</strong></p>\n\n<p>1. </p>\n\n<pre class=\"prettyprint\"><code>SECURE_BROWSER_XSS_FILTER</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>SECURE_SSL_HOST</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>SECURE_HSTS_SECONDS</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>SECURE_REDIRECT_EXEMPT</code></pre>\n\n<p> </p>","a":[{"id":1671199,"option":"1, 2 and 3","correct":false},{"id":1671200,"option":"2, 3 and 4","correct":false},{"id":1671201,"option":"1, 3 and 4","correct":false},{"id":1671202,"option":"All of these","correct":true}]},{"q":"<p>Alice is working on Security on <em>Django</em>. She wants to check that the HTTP referer header is set to a URL on the same origin. Then which of the following options are correct in this scenario:</p>\n\n<p><strong>Option</strong></p>\n\n<p>1. X-Frame-Options middleware</p>\n\n<p>2. django.http.HttpRequest.get_host() method.</p>\n\n<p>3. CsrfViewMiddleware</p>\n\n<p>4. None of these</p>","a":[{"id":1671102,"option":"1","correct":false},{"id":1671103,"option":"2","correct":false},{"id":1671104,"option":"3","correct":true},{"id":1671105,"option":"4","correct":false}]},{"q":"<p>Alice is working on Admin action in <em>Django</em>. She wants to write a function that gets called when the action is triggered from the Admin. Then in this scenario which are the arguments an action function takes:</p>\n\n<ol>\n\t<li>modeladmin</li>\n\t<li>queryset</li>\n\t<li>status</li>\n\t<li>request</li>\n</ol>","a":[{"id":1670457,"option":"1, 2 and 3","correct":false},{"id":1670458,"option":"2, 3 and 4","correct":false},{"id":1670459,"option":"1, 2 and 4","correct":true},{"id":1670460,"option":"None of these","correct":false}]},{"q":"<p>Bob is working on Queries in <em>Django</em>. He wants to delete objects in bulk from QuerySet.Then which of the following code are correct in this scenario:</p>\n\n<p><strong>Code</strong></p>\n\n<p>1. </p>\n\n<pre class=\"prettyprint\"><code>Entry = Hacker.objects.all()\nEntry.delete()</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>Entry.objects.filter.delete()</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>Entry = Hacker.objects()\nEntry.delete()</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>Entry.objects.filter.all.delete()</code></pre>\n\n<p> </p>","a":[{"id":1670453,"option":"1 and 2","correct":true},{"id":1670454,"option":"2 and 3","correct":false},{"id":1670455,"option":"3 and 4","correct":false},{"id":1670456,"option":"None of these","correct":false}]},{"q":"<p>Bob is working on QuerySets in <em>Django</em>. He wants to use use the query expression API. Then in this scenario, a class is said to follow the query expression API when it implements which of the following methods:</p>\n\n<p><strong>Options</strong></p>\n\n<p>1. get_lookup()</p>\n\n<p>2. get_transform()</p>\n\n<p>3. as_sql()</p>\n\n<p>4. as_vendorname()</p>","a":[{"id":1669947,"option":"1, 2, and 3","correct":false},{"id":1669948,"option":"2, 3 and 4","correct":false},{"id":1669949,"option":"1, 2 and 4","correct":false},{"id":1669950,"option":"All of these","correct":true}]},{"q":"<p>Alice is working on Field in <em>Django</em>. She wants to use arguments in Field. Then what are the available arguments to all field types she can use in this scenario:</p>\n\n<p><strong>Options</strong></p>\n\n<p>1. Field.blank</p>\n\n<p>2. Field.null</p>\n\n<p>3. Field.void</p>\n\n<p>4. Field.unique</p>","a":[{"id":1669943,"option":"1, 2 and 3","correct":false},{"id":1669944,"option":"1, 2 and 4","correct":true},{"id":1669945,"option":"2, 3 and 4","correct":false},{"id":1669946,"option":"All of these","correct":false}]},{"q":"<p>Alice is working on <em>Django</em> admin. She wants to perform some administrative tasks. Then which of these following options are available in this scenario:</p>\n\n<p><strong>Option</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>django-admin check auth admin Hacker</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>django-admin compilemessages\n</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>django-admin runserver</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>django-admin flush</code></pre>\n\n<p> </p>","a":[{"id":1665247,"option":"1, 2 and 3","correct":false},{"id":1665248,"option":"2, 3 and 4","correct":false},{"id":1665249,"option":"1, 2 and 4","correct":false},{"id":1665250,"option":"All of these","correct":true}]},{"q":"<p>John is working on Validation Error in <em>Django</em>. He wants to raise a Validation Error on invalid input. Then which of the following code in this scenario are good:</p>\n\n<p><strong>Code 1</strong></p>\n\n<pre class=\"prettyprint\"><code>ValidationError('_Invalid value')</code></pre>\n\n<p><strong>Code 2</strong></p>\n\n<pre class=\"prettyprint\"><code>ValidationError(_('Invalid value'), code=\"invalid\")</code></pre>\n\n<p><strong>Code 3</strong></p>\n\n<pre class=\"prettyprint\"><code>ValidationError(_('Invalid value'))</code></pre>\n\n<p><strong>Code 4 </strong></p>\n\n<pre class=\"prettyprint\"><code>ValidationError('Invalid value')\n</code></pre>\n\n<p> </p>","a":[{"id":1665239,"option":"1 and 2\r\n","correct":false},{"id":1665240,"option":"2 and 3","correct":true},{"id":1665241,"option":"3 and 4","correct":false},{"id":1665242,"option":"All of the above.","correct":false}]},{"q":"<p>Alice is working on Form assets in <em>Django</em>. She wants to implement an easy-to-use web form that looks attractive. Then which of these following functionality in this scenario are correct:</p>\n\n<p><strong>Functionality</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>from django import forms\n\nclass Hacker(forms.TextInput):\n   class Media:\n      css = { 'all': ('style.css') }\n      js = ('app.js', 'home.js')\n\nH = Hacker()\nprint(H.media)\n</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>from django import forms\n\nclass Hacker(forms.TextInput):\n   @property\n   def media(self):\n      return forms.Media(css={'all':('style.css',)}, js=('app.js','home.js'))\n</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>from django import forms\n\nclass Hacker(forms.TextInput):\n   extend = False\n   class Media:\n      css = { 'all': ('style.css') }\n      js = ('app.js', 'home.js')\n\nH = Hacker()\nprint(H.media)\n</code></pre>\n\n<p> </p>","a":[{"id":1665235,"option":"1 and 2","correct":false},{"id":1665236,"option":"2 and 3","correct":false},{"id":1665237,"option":"1 and 3","correct":false},{"id":1665238,"option":"All of these","correct":true}]},{"q":"<p>Alice is working on Decorators in Django. She has implemented conditional view processing. Then which of the following option decorators can be used to control caching behavior on particular views in this scenario:</p>\n\n<p><strong>Option</strong> </p>\n\n<p>1. cache_control()</p>\n\n<p>2. condition()</p>\n\n<p>3. etag()</p>\n\n<p>4. never_cache()</p>","a":[{"id":1664913,"option":"1 and 2 ","correct":false},{"id":1664914,"option":"2 and 3","correct":true},{"id":1664915,"option":"1 and 3","correct":false},{"id":1664916,"option":"3 and 4","correct":false}]},{"q":"<p>Bob is working on decorators in Django. He wants to apply to view to support HTTP features. Then which of the following functionality he can perform in this scenario:</p>\n\n<p><strong>Functionality</strong> </p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>from django.views.decorators.http import require_http_methods\n\n@require_http_methods([\"Get\", \"Post\"])\ndef hacker(request):\n   pass</code></pre>\n\n<p>2. </p>\n\n<pre class=\"prettyprint\"><code>from django.views.decorators.http import require_http_methods\n\n@require_http_methods([\"GET\", \"POST\"])\ndef hacker(request):\n   pass</code></pre>\n\n<p>3. </p>\n\n<pre class=\"prettyprint\"><code>from django.views.decorators.http import require_http_methods\n\n@require_http_methods(GET, POST)\ndef hacker(request):\n   pass</code></pre>\n\n<p> </p>","a":[{"id":1664909,"option":"1","correct":false},{"id":1664910,"option":"2","correct":true},{"id":1664911,"option":"3","correct":false},{"id":1664912,"option":"None of these","correct":false}]},{"q":"<p>Alice is working on a web application using <em>Django</em>. She wants to search some data in the database with user input. She requires student names that contain '<em>Brown</em>'. Then which of the following statements in this scenario are correct:</p>\n\n<p><strong>Code 1</strong></p>\n\n<pre class=\"prettyprint\"><code>Students.objects.filter(name__contains='Brown')</code></pre>\n\n<p><strong>Code 2</strong></p>\n\n<pre class=\"prettyprint\"><code>Students.objects.filter(name__unaccent__icontains='Brown')</code></pre>\n\n<p><strong>Code 3</strong></p>\n\n<pre class=\"prettyprint\"><code>Students.objects.filter(name__unaccent__similar='Brown')</code></pre>\n\n<p><strong>Statements</strong></p>\n\n<p>1. 1 and 3</p>\n\n<p>2. 1 and 2</p>\n\n<p>3. 2 and 3</p>\n\n<p>4. 1, 2, and 3</p>","a":[{"id":1663192,"option":"1","correct":false},{"id":1663193,"option":"2","correct":true},{"id":1663194,"option":"3","correct":false},{"id":1663195,"option":"4","correct":false}]},{"q":"<p>Alice is working on Transactions in <em>Django</em>. If She is required to implement Database transactions, then which of the following statement is/are true about Django Database transactions in this scenario:</p>\n\n<p><strong>Statement</strong></p>\n\n<ol>\n\t<li>Django uses transactions to guarantee the integrity of ORM operations that require multiple queries.</li>\n\t<li>Each query is immediately committed to the database as Django's default behavior.</li>\n\t<li>Django provides a single API to control database transactions.</li>\n\t<li>Django didn't perform auto-commit. </li>\n</ol>","a":[{"id":1663188,"option":"1, 2 and 3","correct":true},{"id":1663189,"option":"2, 3 and 4","correct":false},{"id":1663190,"option":"1, 2 and 4","correct":false},{"id":1663191,"option":"1, 3 and 4","correct":false}]},{"q":"<p>Bob is working on Manager in <em>Django</em> and he wants to perform database query operations to Django models. Then which of the following code options are correct in this scenario:</p>\n\n<p><strong>Option</strong></p>\n\n<p>1. </p>\n\n<pre class=\"prettyprint\"><code>from django.db import models\n\nclass Hacker(models.Model):\n   hacker = models.Manager()</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>from django.db import models\n\nclass Hacker(models.Model):\n   hacker = Manager()</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>from django.db import models\n\nclass Hacker(models.Manager):\n   def hacker(self):\n      return 0</code></pre>\n\n<p> </p>","a":[{"id":1663184,"option":"1 and 2","correct":false},{"id":1663185,"option":"2 and 3","correct":false},{"id":1663186,"option":"1 and 3","correct":true},{"id":1663187,"option":"1, 2 and 3","correct":false}]},{"q":"<p>Ben is working on Model Form in <em>Django</em>. He wants to create a form that lets user submit their details. Given is the implementation for it, then which of these following lines of code must be used to replace the commented lines in the code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>from django.forms import ModelForm\nfrom .models import Project\n\nclass ProjectForm(ModelForm):\n   class Meta:\n      //comment1\n      //comment2\n\nform = ProjectForm()</code></pre>\n\n<p><strong>Line 1</strong></p>\n\n<pre class=\"prettyprint\"><code>model = Project\n</code></pre>\n\n<p><strong>Line 2</strong></p>\n\n<pre class=\"prettyprint\"><code>fields = ['Name', 'ID', 'Date']\n</code></pre>\n\n<p><strong>Line 3</strong></p>\n\n<pre class=\"prettyprint\"><code>fields = ('Name', 'ID', 'Date')\n</code></pre>\n\n<p><strong>Replacement patterns</strong></p>\n\n<p>1. </p>\n\n<p>Comment 1: Line 1</p>\n\n<p>Comment 2: Line 3</p>\n\n<p>2.</p>\n\n<p>Comment 1: Line 1</p>\n\n<p>Comment 2: Line 2</p>\n\n<p>3.</p>\n\n<p>Comment 1: Line 2</p>\n\n<p>Comment 2: Line 2</p>","a":[{"id":1662606,"option":"1","correct":false},{"id":1662607,"option":"2","correct":true},{"id":1662608,"option":"3","correct":false},{"id":1662609,"option":"None of these","correct":false}]},{"q":"<p>Mike is working on Models in <em>Django</em>. He wants to create a model that defines a class User which has a Username and Password. Then which of the options in this scenario is/are correct:</p>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>from django.db import models\nclass User(models.Model):\n   username = models.CharField(max_length=35)\n   password = models.CharField(max_length=40)\n</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>from django.db import models\nclass User(models.Model):\n   username = User.models.CharField(max_length=35)\n   password = User.models.CharField(max_length=40)\n</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>from django.db import models\nclass User(models.Model):\n   username = Model.CharField(max_length=35)\n   password = Model.CharField(max_length=40)\n</code></pre>\n\n<p> </p>","a":[{"id":1662050,"option":"1","correct":true},{"id":1662051,"option":"2","correct":false},{"id":1662052,"option":"3","correct":false},{"id":1662053,"option":"All of these","correct":false}]},{"q":"<p>Alice is working on <em>Django</em> and she wants to create a form on her website which obtains the user name. Then which of the template she can use from the given functionality:</p>\n\n<p><strong>Option</strong> </p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>&lt;form action = \"url\" method = \"post\"&gt;\n   &lt;label for=\"name\"&gt;Name: &lt;/label&gt;\n   &lt;input id=\"name\" type=\"text\" name=\"name\" value=\"{{present_name}}\"&gt;\n   &lt;input type=\"submit\" value=\"OK\"&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>&lt;form action = \"url\" method = \"get\"&gt;\n   &lt;label for=\"name\"&gt;Name: &lt;/label&gt;\n   &lt;input id=\"name\" type=\"text\" name=\"name\" value=\"{{present_name}}\" maxlength=\"100\" required&gt;\n   &lt;input type=\"submit\" value=\"OK\"&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>&lt;form action = \"url\" method = \"post\"&gt;\n   &lt;label for=\"name\"&gt;Name: &lt;/label&gt;\n   &lt;input id=\"name\" type=\"text\" name=\"name\" value=\"{{present_name}} required\"&gt;\n   &lt;input type=\"submit\" value=\"OK\"&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p> </p>\n\n<p> </p>","a":[{"id":1661239,"option":"1 and 3","correct":true},{"id":1661240,"option":"1 and 2","correct":false},{"id":1661241,"option":"2 and 3","correct":false},{"id":1661242,"option":"1, 2 and 3","correct":false}]},{"q":"<p>Alice is working on Django and she wants to implement Django Templates. Which of the following option is the syntax of the Django templates constructs?</p>\n\n<p><strong>Option</strong> </p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>{{ hello }}</code></pre>\n\n<p>2. </p>\n\n<pre class=\"prettyprint\"><code>{% hello %}</code></pre>\n\n<p>3. </p>\n\n<pre class=\"prettyprint\"><code>{{ hello | hello }}</code></pre>\n\n<p>4. </p>\n\n<pre class=\"prettyprint\"><code>{# hello #}</code></pre>\n\n<p> </p>","a":[{"id":1661235,"option":"1 and 2 ","correct":false},{"id":1661236,"option":"1, 2 and 3","correct":false},{"id":1661237,"option":"1 and 3","correct":false},{"id":1661238,"option":"All of the above","correct":true}]},{"q":"<p>Bob is working on a Django project. He wants to manage the Django project directory structure and he found __init__.py in the project directory. Which of the option is correct about __init__.py file?</p>\n\n<p><strong>Option</strong></p>\n\n<p>1. It is an empty file that tells Python that the current directory should be considered as a Python package.</p>\n\n<p>2. It is the first file to be loaded in a module.</p>\n\n<p>3. It is essentially the constructor of your directory.</p>\n\n<p> </p>","a":[{"id":1661231,"option":"1 and 2","correct":false},{"id":1661232,"option":"2 and 3","correct":false},{"id":1661233,"option":"1 and 3","correct":false},{"id":1661234,"option":"1, 2 and 3","correct":true}]},{"q":"<p>Alice is working on encoding in <strong>Django</strong>. She wants to use a function which can convert back and forth between strings and bytestrings. Then in this scenerio which of the following utility function of Django she can use:</p>\n\n<p><strong>Option</strong> </p>\n\n<ol>\n\t<li>smart_str()</li>\n\t<li>force_str()</li>\n\t<li>str_to_bytes()</li>\n\t<li>smart_bytes()</li>\n</ol>","a":[{"id":1687470,"option":"1, 2 and 3","correct":false},{"id":1687471,"option":"2, 3 and 4","correct":false},{"id":1687472,"option":"1, 2 and 4","correct":true},{"id":1687473,"option":"All of these","correct":false}]},{"q":"<p>Bob started working on <strong>Django</strong>. He installs Django in his system by the following code. He wants to find the version of Django, then in this scenerio which of the following option he can use:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>python -m pip install Django</code></pre>\n\n<p> </p>","a":[{"id":1672807,"option":"print(django.version())","correct":false},{"id":1672808,"option":"print(django.get_version())","correct":true},{"id":1672809,"option":"print(django.getVersion())","correct":false},{"id":1672810,"option":"None of the above","correct":false}]}]
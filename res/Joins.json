[{"q":"<p>Consider the tables given alongside. Write a query to get a list of bookreviewer names, book title and stars in an order where bookreviewer names come first, the book title second, and lastly the number of stars assigned to the book.</p>\n\n<pre class=\"prettyprint\"><code>CREATE TABLE bookreviewer(\n rev_id int,\n rev_name varchar(30),\n PRIMARY KEY(rev_id)\n );\n\nCREATE TABLE books(\n book_id int,\n book_title varchar(30),\n year_published int,\n book_lang varchar(30),\n PRIMARY KEY(book_id)\n );\n\nCREATE TABLE review(\n book_id int,\n rev_id int,\n stars float,\n reviewcount int,\n FOREIGN KEY(rev_id) REFERENCES bookreviewer(rev_id),\n FOREIGN KEY(book_id) REFERENCES books(book_id)\n );</code></pre>\n\n<p><strong>Options:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT rev_name, book_title, stars\nFROM books\nINNER JOIN review ON books.book_id = review.book_id\nINNER JOIN bookreviewer ON bookreviewer.rev_id = review.rev_id\nWHERE rev_name IS NOT NULL\nORDER BY rev_name, book_title, stars;</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT rev_name, book_title, stars\nFROM books \nNATURAL JOIN review \nNATURAL JOIN bookreviewer\nWHERE rev_name IS NOT NULL\nORDER BY rev_name, book_title, stars;</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT rev_name, book_title, stars\nFROM books, review, bookreviewer\nWHERE books.book_id = review.book_id \nAND bookreviewer.rev_id = review.rev_id AND rev_name IS NOT NULL\nORDER BY rev_name, book_title, stars;</code></pre>\n\t</li>\n\t<li>\n\t<p>All of 1, 2 and 3</p>\n\t</li>\n</ol>","a":[{"id":1619041,"option":"1","correct":false},{"id":1619042,"option":"2","correct":false},{"id":1619043,"option":"3","correct":false},{"id":1619044,"option":"4","correct":true}]},{"q":"<p>You have created three tables as shown alongside. You want to get a list of all delivery executives along with customer name, city, grade, order id, date, and order amount that satisfy the given conditions.</p>\n\n<p>1. Executive who works for one or more shipments.</p>\n\n<p>2. Customer has placed one or more orders. Which of these queries can be used to achieve this?</p>\n\n<pre class=\"prettyprint\"><code>Create TABLE delivexec(\n exec_id int,\n exec_name varchar(30),\n city varchar(30),\n commission float,\n PRIMARY KEY(exec_id)\n );\n\nCreate TABLE shipment(\n shipment_id int,\n cust_name varchar(30),\n city varchar(30),\n grade int,\n exec_id int,\n PRIMARY KEY(shipment_id),\n FOREIGN KEY(exec_id) REFERENCES delivexec(exec_id)\n );\n \nCREATE TABLE orders (\nord_id int,\nord_amt int,\nord_date date,\nexec_id int,\nshipment_id int,\nPRIMARY KEY(ord_id),\nFOREIGN KEY(exec_id) REFERENCES delivexec(exec_id),\nFOREIGN KEY(shipment_id) REFERENCES shipment(shipment_id)\n);</code></pre>\n\n<p><strong>options:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT a.cust_name,a.city,a.grade, \nb.exec_name AS \"Salesman\", \nc.ord_id, c.ord_date, c.ord_amt \nFROM shipment a \nRIGHT OUTER JOIN delivexec b \nON b.exec_id=a.exec_id \nRIGHT OUTER JOIN orders c \nON c.shipment_id=a.shipment_id;</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT a.cust_name,a.city,a.grade, \nb.exec_name AS \"Salesman\", \nc.ord_id, c.ord_date, c.ord_amt \nFROM shipment a \nRIGHT OUTER JOIN delivexec b \nON b.exec_id=a.exec_id \nLEFT OUTER JOIN orders c \nON c.shipment_id=a.shipment_id;</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT a.cust_name,a.city,a.grade, \nb.exec_name AS \"Salesman\", \nc.ord_id, c.ord_date, c.ord_amt \nFROM shipment a \nLEFT OUTER JOIN delivexec b \nON b.exec_id=a.exec_id \nLEFT OUTER JOIN orders c \nON c.shipment_id=a.shipment_id;</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<p>None of these</p>\n\t</li>\n</ol>","a":[{"id":1619050,"option":"1","correct":true},{"id":1619051,"option":"2","correct":false},{"id":1619052,"option":"3","correct":false},{"id":1619053,"option":"4","correct":false}]},{"q":"<p>Consider the tables given alongside. You want to get a list of delivery executives who have been assigned to a shipment in a different city along with the following details:</p>\n\n<p>1. Name of customer</p>\n\n<p>2. Customer city</p>\n\n<p>3. Executive city</p>\n\n<p>4. Commission</p>\n\n<p>Which of these queries should you execute if you only want to get details of delivery executives with more than 12% percent commission?</p>\n\n<pre class=\"prettyprint\"><code>Create TABLE delivexec(\n exec_id int,\n exec_name varchar(30),\n city varchar(30),\n commission float,\n PRIMARY KEY(exec_id)\n );\n\nCreate TABLE shipment(\n shipment_id int,\n cust_name varchar(30),\n city varchar(30),\n grade int,\n exec_id int,\n PRIMARY KEY(shipment_id),\n FOREIGN KEY(exec_id) REFERENCES delivexec(exec_id)\n );</code></pre>\n\n<p><strong>options:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT b.cust_name AS \"Customer\", \nb.city, a.exec_name AS \"Delivery Executive\", a.city,a.commission \nFROM delivexec a \nINNER JOIN shipment b \nON a.exec_id =b.exec_id \nWHERE a.commission&gt;.12 \nAND a.city&lt;&gt;b.city;</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT b.cust_name AS \"Customer\", \nb.city, a.exec_name AS \"Delivery Executive\", a.city,a.commission \nFROM delivexec a \nINNER JOIN shipment b \nON a.exec_id =b.exec_id \nWHERE a.commission&gt;.12 \nAND a.city!=b.city;</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT b.cust_name AS \"Customer\", \nb.city, a.exec_name AS \"Delivery Executive\", a.city,a.commission \nFROM delivexec a \nINNER JOIN shipment b \nON a.exec_id =b.exec_id \nWHERE a.commission&gt;.12 \nAND a.city NOTEQUAL b.city;</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<p>Both 1 and 2</p>\n\t</li>\n</ol>","a":[{"id":1619036,"option":"1","correct":false},{"id":1619037,"option":"2","correct":false},{"id":1619038,"option":"3","correct":false},{"id":1619039,"option":"4","correct":true}]},{"q":"<p>You have created three tables as shown alongside. Write a SQL query statement to make a cartesian product between delivered and shipment i.e. each shipment will appear for all customers and vice versa for that shipment that belongs to a city. [<em>Note:</em> Records should be displayed in ascending order of the city of delivery executive]</p>\n\n<pre class=\"prettyprint\"><code>Create TABLE delivexec(\n exec_id int,\n exec_name varchar(30),\n city varchar(30),\n commission float,\n PRIMARY KEY(exec_id)\n );\n\nCreate TABLE shipment(\n shipment_id int,\n cust_name varchar(30),\n city varchar(30),\n grade int,\n exec_id int,\n PRIMARY KEY(shipment_id),\n FOREIGN KEY(exec_id) REFERENCES delivexec(exec_id)\n );\n \nCREATE TABLE orders (\nord_id int,\nord_amt int,\nord_date date,\nexec_id int,\nshipment_id int,\nPRIMARY KEY(ord_id),\nFOREIGN KEY(exec_id) REFERENCES delivexec(exec_id),\nFOREIGN KEY(shipment_id) REFERENCES shipment(shipment_id)\n);</code></pre>\n\n<p><strong>options:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT * \nFROM delivexec a \nCROSS JOIN shipment b \nWHERE a.city IS NOT NULL;</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT * \nFROM delivexec a \nCROSS JOIN shipment b \nWHERE a.city EXISTS;</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT * \nFROM delivexec a \nCROSS JOIN shipment b;</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<p>None of these</p>\n\t</li>\n</ol>","a":[{"id":1619032,"option":"1","correct":true},{"id":1619033,"option":"2","correct":false},{"id":1619034,"option":"3","correct":false},{"id":1619035,"option":"4","correct":false}]},{"q":"<p>Consider the tables employees, departments, and locations tables given alongside Which of the following SQL query can be used to generate the name, department name, and city of all the employees who earn more than <em>25000</em>?</p>\n\n<pre class=\"prettyprint\"><code>CREATE TABLE employees(\nemp_id INT, NOT NULL, PRIMARY KEY,\nemp_name VARCHAR(50),\nsalary int,\nmgr_id int,\ndept_id int\n);\n\nCREATE TABLE departments(\ndept_id int NOT NULL, PRIMARY KEY,\ndept_name varchar(50),\nmgr_id,\nlocation_id int\n);\n\nCREATE TABLE locations(\nlocation_id int NOT NULL, PRIMARY KEY,\ncity varchar(30)\n);</code></pre>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT emp_name, dept, city\nFROM employees e\nJOIN departments d\nUSING (dept_id)\nJOIN locations l\nUSING (location_id)\nWHERE salary &gt; 25000;</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT emp_name, dept, city\nFROM employees e, departments d, locations l\nJOIN ON (e.dept= d.deptid)\nAND (d.location_id =l.location_id)\nAND salary &gt; 25000;</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT emp_name, dept_name, city\nFROM employees e, departments d, locations l\nWHERE e.dept= d.dept\nAND d.location_id = l.location_id\nAND salary &gt; 25000;</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<p>Both 1 and 3</p>\n\t</li>\n</ol>","a":[{"id":1619027,"option":"1","correct":false},{"id":1619028,"option":"2","correct":false},{"id":1619029,"option":"3","correct":false},{"id":1619030,"option":"4","correct":true}]},{"q":"<p>Which of the following options are valid with respect to the queries given below?</p>\n\n<p>Q1</p>\n\n<pre class=\"prettyprint\"><code>SELECT * FROM t1 WHERE NOT EXISTS (SELECT id FROM t2 WHERE t1.id=t2.id);</code></pre>\n\n<p>Q2</p>\n\n<pre class=\"prettyprint\"><code>SELECT table1.* FROM table1 LEFT JOIN table2 ON table1.id=table2.id WHERE table2.id IS NULL;</code></pre>\n\n<p> </p>","a":[{"id":1619023,"option":"Both Q1 and Q2 are optimised","correct":false},{"id":1619024,"option":"Only Q1 is optimised","correct":false},{"id":1619025,"option":"Only Q2 is optimised","correct":true},{"id":1619026,"option":"Neither Q1 nor Q2 is optimised","correct":false}]},{"q":"<p>You have created three tables as shown alongside. Now, you want to get a list of all delivery executives irrespective of the number of shipments they have been assigned to. Which of these queries can you use to achieve this?</p>\n\n<pre class=\"prettyprint\"><code>Create TABLE delivexec(\n exec_id int,\n exec_name varchar(30),\n city varchar(30),\n commission float,\n PRIMARY KEY(exec_id)\n );\n\nCreate TABLE shipment(\n shipment_id int,\n cust_name varchar(30),\n city varchar(30),\n grade int,\n exec_id int,\n PRIMARY KEY(shipment_id),\n FOREIGN KEY(exec_id) REFERENCES delivexec(exec_id)\n );\n \nCREATE TABLE orders (\nord_id int,\nord_amt int,\nord_date date,\nexec_id int,\nshipment_id int,\nPRIMARY KEY(ord_id),\nFOREIGN KEY(exec_id) REFERENCES delivexec(exec_id),\nFOREIGN KEY(shipment_id) REFERENCES shipment(shipment_id)\n);</code></pre>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT a.cust_name,a.city,a.grade, \nb.exec_name AS \"Delivery Executive\", b.city \nFROM delivexec b \nLEFT OUTER JOIN shipment a \nON b.exec_id=a.exec_id \nORDER BY b.exec_id;</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT a.cust_name,a.city,a.grade, \nb.exec_name AS \"Delivery Executive\", b.city \nFROM delivexec b \nRIGHT OUTER JOIN shipment a \nON b.exec_id=a.exec_id \nORDER BY b.exec_id;</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>\"SELECT a.cust_name,a.city,a.grade, \nb.exec_name AS \"\"Delivery Executive\"\", b.city \nFROM delivexec b \nFULL OUTER JOIN shipment a \nON b.exec_id=a.exec_id \nORDER BY b.exec_id;\"</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<p>All 1, 2, 3</p>\n\t</li>\n</ol>","a":[{"id":1619018,"option":"1","correct":true},{"id":1619019,"option":"2","correct":false},{"id":1619020,"option":"3","correct":false},{"id":1619021,"option":"4","correct":false}]},{"q":"<p>Consider the tables doctor and resident given below.</p>\n\n<pre class=\"prettyprint\"><code>CREATE TABLE `doctor` (\n `doc_id` int(11) NOT NULL AUTO_INCREMENT,\n `fname` varchar(255) NOT NULL,\n `lname` varchar(255) NOT NULL,\n PRIMARY KEY (`doc_id`)\n)\n\nCREATE TABLE `resident` (\n `res_id` int(11) NOT NULL AUTO_INCREMENT,\n `fname` varchar(255) NOT NULL,\n `lname` varchar(255) NOT NULL,\n `doc_id` int(11) DEFAULT NULL,\n PRIMARY KEY (`res_id`),\n KEY `doc_id` (`doc_id`),\n CONSTRAINT `res_ibfk_1` FOREIGN KEY (`doc_id`) REFERENCES `doctor` (`doc_id`)\n);\n\n</code></pre>\n\n<p>Which of the following query can you use to get the information on residents and their doctors, excluding residents who are not assigned to a doctor?</p>\n\n<p>[<em>Note</em>: Not all residents have a doctor, and not all doctors are assigned to residents]</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT r.fname AS resident_name, d.fname AS doctor_name\nFROM resident AS r\nINNER JOIN doctor AS d ON r.doc_id = d.doc_id;</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT r.fname AS resident_name, d.fname AS doctor_name\nFROM resident AS r\nLEFT JOIN doctor AS d ON r.doc_id = d.doc_id;</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT r.fname AS resident_name, d.fname AS doctor_name\nFROM resident AS r\nRIGHT JOIN resident AS a ON r.doc_id = d.doc_id;</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<p>Either 1 or 2</p>\n\t</li>\n</ol>","a":[{"id":1619013,"option":"1","correct":true},{"id":1619014,"option":"2","correct":false},{"id":1619015,"option":"3","correct":false},{"id":1619016,"option":"4","correct":false}]},{"q":"<p>Consider the tables stalls and menus given alongside. Which of these queries can you use to display the ID of the stalls that sell items A and B, but not C?</p>\n\n<pre class=\"prettyprint\"><code>CREATE TABLE stalls(\nid int, \nname char(10),\nPRIMARY KEY (id)\n);\n\nCREATE TABLE menus(\nmenu_id int,\nstalls_id int, \nitem char(10),\nPRIMARY KEY (menius_id),\nFOREIGN KEY(stalls_id) REFERENCES customers \n);</code></pre>\n\n<p><strong>options:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT DISTINCT id, name\nFROM stalls s\nJOIN menus m\nON m.menu_id = .id\nWHERE customer_id IN (SELECT customer_id \n FROM orders \n WHERE product_name = 'A') \nAND customer_id IN (SELECT customer_id \n FROM orders \n WHERE product_name = 'B') \nAND customer_id NOT IN (SELECT customer_id \n FROM orders \n WHERE product_name = 'C');</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT DISTINCT id, name\nFROM orders o\nJOIN customers c\nON o.customer_id = c.id\nWHERE customer_id IN (SELECT customer_id \n FROM orders \n WHERE product_name = 'A' and 'B') \nAND customer_id NOT IN (SELECT customer_id \n FROM orders \n WHERE product_name = 'C');</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<p>Either 1 or 2</p>\n\t</li>\n\t<li>\n\t<p>Neither 1 nor 2</p>\n\t</li>\n</ol>","a":[{"id":1619009,"option":"1","correct":true},{"id":1619010,"option":"2","correct":false},{"id":1619011,"option":"3","correct":false},{"id":1619012,"option":"4","correct":false}]},{"q":"<p>Consider the tables books and review given alongside. Write a query to find all the years which published a book that received a 3 or 4 rating.</p>\n\n<pre class=\"prettyprint\"><code>CREATE TABLE books(\n book_id int,\n book_title varchar(30),\n year_published int,\n book_lang varchar(30),\n PRIMARY KEY(book_id)\n );\n\nCREATE TABLE review(\n book_id int,\n rev_id int,\n stars float,\n reviewcount int,\n FOREIGN KEY(rev_id) REFERENCES bookreviewer(rev_id),\n FOREIGN KEY(book_id) REFERENCES books(book_id)\n );</code></pre>\n\n<p><strong>options:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT DISTINCT year_published\nFROM books, review\nWHERE books.book_id = review.book_id \nAND stars IN (3, 4)\nORDER BY year_published;</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT DISTINCT year_published\nFROM books\nINNER JOIN review \nON books.book_id = review.book_id\nWHERE stars IN (3, 4)\nORDER BY year_published;</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<p>Both 1 and 2</p>\n\t</li>\n\t<li>\n\t<p>Neither 1 nor 2</p>\n\t</li>\n</ol>","a":[{"id":1619005,"option":"1","correct":false},{"id":1619006,"option":"2","correct":false},{"id":1619007,"option":"3","correct":true},{"id":1619008,"option":"4","correct":false}]},{"q":"<p>Consider the tables bookreviewer and review given alongside. Write a query to list the names of all reviewers who have rated a book with a NULL value.</p>\n\n<pre class=\"prettyprint\"><code>CREATE TABLE bookreviewer(\n rev_id int,\n rev_name varchar(30),\n PRIMARY KEY(rev_id)\n );\n \nCREATE TABLE review(\n book_id int,\n rev_id int,\n stars float,\n reviewcount int,\n FOREIGN KEY(rev_id) REFERENCES bookreviewer(rev_id)\n );</code></pre>\n\n<p><strong>options:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT rev_name\nFROM bookreviewer\nINNER JOIN review USING(rev_id)\nWHERE stars IS NULL;</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT rev_name\nFROM bookreviewer\nLEFT JOIN review USING(rev_id)\nWHERE stars IS NULL;</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT rev_name\nFROM bookreviewer\nRIGHT JOIN review USING(rev_id)\nWHERE stars IS NULL;</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<p>Both 1 and 3</p>\n\t</li>\n</ol>","a":[{"id":1619000,"option":"1","correct":false},{"id":1619001,"option":"2","correct":false},{"id":1619002,"option":"3","correct":false},{"id":1619003,"option":"4","correct":true}]},{"q":"<p>Which of the following SQL queries is valid with respect to LEFT OUTER JOIN?</p>\n\n<p>I.</p>\n\n<pre class=\"prettyprint\"><code>SELECT d.dept_id, d.dept_name FROM employees e, departments d WHERE e.dept_id = d.dept_id;</code></pre>\n\n<p>II.</p>\n\n<pre class=\"prettyprint\"><code> SELECT e.emp_name, d.dept_name FROM employees e LEFT OUTER JOIN departments d ON e.dept_id = d.dept_id;</code></pre>\n\n<p> </p>","a":[{"id":1618996,"option":"Only I","correct":false},{"id":1618997,"option":"Only II","correct":true},{"id":1618998,"option":"Both I and II","correct":false},{"id":1618999,"option":"Neither I nor II","correct":false}]},{"q":"<p>Consider the tables, Employees, and Departments given alongside. Which of the following SQL query will print the employee names, salary, and the department name for employees with designation as 'Designer'?</p>\n\n<pre class=\"prettyprint\"><code>CREATE TABLE Employees (\nemp_id int NOT NULL PRIMARY KEY,\nemp_name, VARCHAR(30),\nemp_designation VARCHAR(30),\nemp_salary int\n);\nCREATE TABLE Departments(\ndept_id; int NOT NULL PRIMARY KEY,\nemp_id int;\ndept_name VARCHAR(30)\n);</code></pre>\n\n<p><strong>options:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT e.emp_name, d.dept_name, e.emp_salary \nFROM Employees e \nJOIN Departments d \nON e.emp_id = d.emp_id \nHAVING e.emp_designation = 'Designer';</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT e.emp_name, d.dept_name, e.emp_salary \nFROM Employees e \nJOIN Departments d \nON e.emp_id = d.emp_id \nWHERE e.emp_designation = 'Designer';</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<p>Both 1 and 2</p>\n\t</li>\n\t<li>\n\t<p>None of these</p>\n\t</li>\n</ol>","a":[{"id":1618992,"option":"1","correct":false},{"id":1618993,"option":"2","correct":true},{"id":1618994,"option":"3","correct":false},{"id":1618995,"option":"4","correct":false}]},{"q":"<p>Consider the tables, Employees, and EmployeeTitle given alongside. Which of the following SQL query(s) will print the details of the distinct employees who are managers?</p>\n\n<pre class=\"prettyprint\"><code>CREATE TABLE Employees (\nemp_id int,\nemp_name VARCHAR(30),\ndept_name VARCHAR(30),\njoining_date date,\nPRIMARY KEY(emp_id)\n);\n\nCREATE TABLE EmployeeTitle(\nemp_ref_id int,\nemp_title VARCHAR(30),\nFOREIGN KEY(emp_ref_id) REFERENCES Employees(emp_id)\n);</code></pre>\n\n<p><strong>options:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT UNIQUE Employees.emp_name, EmployeeTitle.emp_title \nFROM Employees \nLEFT JOIN EmployeeTitle \nON Employees.emp_id = EmployeeTitle.emp_ref_id \nWHERE emp_title IN ('Manager');</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT DISTINCT Employees.emp_name, EmployeeTitle.emp_title \nFROM Employees \nINNER JOIN EmployeeTitle \nON Employees.emp_id = EmployeeTitle.emp_ref_id \nAND emp_title IN ('Manager');</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<p>Either 1 or 2</p>\n\t</li>\n\t<li>\n\t<p>Neither 1 nor 2</p>\n\t</li>\n</ol>","a":[{"id":1618988,"option":"1","correct":false},{"id":1618989,"option":"2","correct":false},{"id":1618990,"option":"3","correct":true},{"id":1618991,"option":"4","correct":false}]},{"q":"<p>Which of the following SQL queries is valid with respect to RIGHT OUTER JOIN in a MS/SQL server?</p>\n\n<p>I.</p>\n\n<pre class=\"prettyprint\"><code>SELECT r.resident_flats, a.apartment_names FROM apartments a RIGHT OUTER JOIN residents r ON r.resident_flat_id(+) = a.resident_flat_id;</code></pre>\n\n<p>II.</p>\n\n<pre class=\"prettyprint\"><code>SELECT a.apartment_id, a.apartment_names FROM residents r, apartments r WHERE a.apartment_id = r.apartment_id;</code></pre>\n\n<p> </p>","a":[{"id":1618984,"option":"Only I","correct":true},{"id":1618985,"option":"Only II","correct":false},{"id":1618986,"option":"Both I and II","correct":false},{"id":1618987,"option":"Neither I nor II","correct":false}]},{"q":"<p>You have created three tables as shown alongside. Now, you want to get a list of delivery executives who have been assigned at least one shipment. Which of these queries can you use to achieve this?</p>\n\n<pre class=\"prettyprint\"><code>Create TABLE delivexec(\n exec_id int,\n exec_name varchar(30),\n city varchar(30),\n commission float,\n PRIMARY KEY(exec_id)\n );\n\nCreate TABLE shipment(\n shipment_id int,\n cust_name varchar(30),\n city varchar(30),\n grade int,\n exec_id int,\n PRIMARY KEY(shipment_id),\n FOREIGN KEY(exec_id) REFERENCES delivexec(exec_id)\n );\n \nCREATE TABLE orders (\nord_id int,\nord_amt int,\nord_date date,\nexec_id int,\nshipment_id int,\nPRIMARY KEY(ord_id),\nFOREIGN KEY(exec_id) REFERENCES delivexec(exec_id),\nFOREIGN KEY(shipment_id) REFERENCES shipment(shipment_id)\n);</code></pre>\n\n<p><strong>options:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT a.cust_name,a.city,a.grade, \nb.exec_name AS \"Delivery Executive\", b.city \nFROM shipment a \nLEFT OUTER JOIN delivexec b \nON b.exec_id=a.exec_id \nORDER BY b.exec_id;</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT a.cust_name,a.city,a.grade, \nb.exec_name AS \"Delivery Executive\", b.city \nFROM shipment a \nRIGHT OUTER JOIN delivexec b \nON b.exec_id=a.exec_id \nORDER BY b.exec_id;</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT a.cust_name,a.city,a.grade, \nb.exec_name AS \"Delivery Executive\", b.city \nFROM shipment a \nFULL OUTER JOIN delivexec b \nON b.exec_id=a.exec_id \nORDER BY b.exec_id;</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<p>Either 1 or 2</p>\n\t</li>\n</ol>","a":[{"id":1618979,"option":"1","correct":true},{"id":1618980,"option":"2","correct":false},{"id":1618981,"option":"3","correct":false},{"id":1618982,"option":"4","correct":false}]},{"q":"<p>Consider the tables delivexec, shipment, and orders given alongside. Which of these queries should you execute to make a list in ascending order for shipments that hold a grade less than 2?</p>\n\n<pre class=\"prettyprint\"><code>Create TABLE delivexec(\n exec_id int,\n exec_name varchar(30),\n city varchar(30),\n commission float,\n PRIMARY KEY(exec_id)\n );\n\nCreate TABLE shipment(\n shipment_id int,\n cust_name varchar(30),\n city varchar(30),\n grade int,\n exec_id int,\n PRIMARY KEY(shipment_id),\n FOREIGN KEY(exec_id) REFERENCES delivexec(exec_id)\n );\n \nCREATE TABLE orders (\nord_id int,\nord_amt int,\nord_date date,\nexec_id int,\nshipment_id int,\nPRIMARY KEY(ord_id),\nFOREIGN KEY(exec_id) REFERENCES delivexec(exec_id),\nFOREIGN KEY(shipment_id) REFERENCES shipment(shipment_id)\n);</code></pre>\n\n<p><strong>options:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT a.cust_name,a.city,a.grade, \nb.exec_name AS \"Delivery Executive\", b.city \nFROM shipment a \nFULL JOIN delivexec b \nON a.exec_id=b.exec_id \nWHERE a.grade&lt;2 \nORDER BY a.shipment_id;</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT a.cust_name,a.city,a.grade, \nb.exec_name AS \"Delivery Executive\", b.city \nFROM shipment a \nLEFT OUTER JOIN delivexec b \nON a.exec_id=b.exec_id \nWHERE a.grade&lt;2 \nORDER BY a.shipment_id;</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<p>Either 1 or 2</p>\n\t</li>\n\t<li>\n\t<p>None of these</p>\n\t</li>\n</ol>","a":[{"id":1618975,"option":"1","correct":false},{"id":1618976,"option":"2","correct":false},{"id":1618977,"option":"3","correct":true},{"id":1618978,"option":"4","correct":false}]},{"q":"<p>You want to retrieve details of patients in a particular hospital that have been assigned doctors with the name \"John\". Which of the queries given alongside can be used to do so?</p>\n\n<pre class=\"prettyprint\"><code>I. SELECT Doctor.doct_id, Patient.pat_id, Doctor.doct_name\nFROM Doctor, Patient\nWHERE Doctor.doct_id = Patient.doct_id\nAND Doctor.doct_name = \"John\";\n\nII. SELECT Doctor.doct_id, Patient.pat_id, Doctor.doct_name\nFROM Doctor JOIN Patient\n ON Doctor.doct_id = Patient.doct_id\nWHERE Doctor.doct_name = \"John\";</code></pre>\n\n<p> </p>","a":[{"id":1618971,"option":"Only I","correct":false},{"id":1618972,"option":"Only II\r\n","correct":false},{"id":1618973,"option":"Both I and II","correct":true},{"id":1618974,"option":"Neither I nor II","correct":false}]},{"q":"<p>Consider the tables, sales and product given below. Write a query to list the details of all products that acquired sales in the year 2015.</p>\n\n<pre class=\"prettyprint\"><code>Consider the following tables\nCreate TABLE delivexec(\n exec_id int,\n exec_name varchar(30),\n city varchar(30),\n commission float,\n PRIMARY KEY(exec_id)\n );\n\nCreate TABLE shipment(\n shipment_id int,\n cust_name varchar(30),\n city varchar(30),\n grade int,\n exec_id int,\n PRIMARY KEY(shipment_id),\n FOREIGN KEY(exec_id) REFERENCES delivexec(exec_id)\n );\n \nCREATE TABLE orders (\nord_id int,\nord_amt int,\nord_date date,\nexec_id int,\nshipment_id int,\nPRIMARY KEY(ord_id),\nFOREIGN KEY(exec_id) REFERENCES delivexec(exec_id),\nFOREIGN KEY(shipment_id) REFERENCES shipment(shipment_id)\n);\n</code></pre>\n\n<p>Which of the following queries is equivalent to the query given alongside?</p>\n\n<p><strong>options:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT cust_name, exec_name, ord_id, ord_date \nFROM delivexec, orders, shipment \nWHERE orders.exec_id = delivexec.exec_id \n AND orders.shipment_id = shipment.shipment_id;</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT shipment.cust_name, delivexec.exec_name, orders.ord_id, orders.ord_date \nFROM orders \nINNER JOIN shipment\nON orders.shipment_id= shipment.shipment_id \nINNER JOIN delivexec \nON orders.exec_id = delivexec.exec_id;</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT shipment.cust_name, delivexec.exec_name, orders.ord_id, orders.ord_date \nFROM orders \nINNER JOIN shipment\nON orders.shipment_id= shipment.shipment_id \nJOIN delivexec \nON orders.exec_id = delivexec.exec_id(+);</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT shipment.cust_name, delivexec.exec_name, orders.ord_id, orders.ord_date \nFROM orders \nINNER JOIN shipment\nON orders.shipment_id= shipment.shipment_id \nINNER JOIN delivexec \nON orders.exec_id(+) = delivexec.exec_id;</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1618967,"option":"1","correct":true},{"id":1618968,"option":"2","correct":false},{"id":1618969,"option":"3","correct":false},{"id":1618970,"option":"4","correct":false}]},{"q":"<p>Consider the tables, sales, and products given alongside. Write a query to list all the details of products regardless of whether they have made sales.</p>\n\n<pre class=\"prettyprint\"><code>CREATE TABLE product(\nproduct_id int PRIMARY KEY,\nprod_name\n);\n\nCREATE TABLE sales(\nsale_id int PRIMARY KEY,\nproduct_id int,\ndate timestamp,\nquantity int,\nprice int\n);</code></pre>\n\n<p><strong>options:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT product.product_name, sale_id, date, quantity, price \nFROM product \nRIGHT JOIN sales \nON product.product_id = sales.product_id;</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT sale_id, date, quantity, price, product.product_name\nFROM sales\nWHERE product_id IN (SELECT product_id\n FROM product);</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT product.product_name, sale_id, date, quantity, price \nFROM product \nLEFT JOIN sales \nON product.product_id = sales.product_id;</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT sale_id, date, quantity, price, product.product_name \nFROM sales \nINNER JOIN product \nON sales.product_id = product.product_id;</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1618963,"option":"1","correct":false},{"id":1618964,"option":"2","correct":false},{"id":1618965,"option":"3","correct":true},{"id":1618966,"option":"4","correct":false}]},{"q":"<p>Consider the table given alongside. Which of these queries can you execute to get the following details of an order?</p>\n\n<p>1. Order id</p>\n\n<p>2. Order amount</p>\n\n<p>3. Order date</p>\n\n<p>4. Delivery executive assigned</p>\n\n<p>5. Customer name</p>\n\n<p>6. Commission received by delivery executive</p>\n\n<pre class=\"prettyprint\"><code>Create TABLE delivexec(\n exec_id int,\n exec_name varchar(30),\n city varchar(30),\n commission float,\n PRIMARY KEY(exec_id)\n );\n\nCreate TABLE shipment(\n shipment_id int,\n cust_name varchar(30),\n city varchar(30),\n grade int,\n exec_id int,\n PRIMARY KEY(shipment_id),\n FOREIGN KEY(exec_id) REFERENCES delivexec(exec_id)\n );\n \nCREATE TABLE orders (\nord_id int,\nord_amt int,\nord_date date,\nexec_id int,\nshipment_id int,\nPRIMARY KEY(ord_id),\nFOREIGN KEY(exec_id) REFERENCES delivexec(exec_id),\nFOREIGN KEY(shipment_id) REFERENCES shipment(shipment_id)\n);</code></pre>\n\n<p><strong>options:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT a.ord_id,a.ord_date,a.ord_amt,\nb.cust_name AS \"Customer\", \nc.exec_name AS \"Delivery Executive\", c.commission \nFROM orders a \nINNER JOIN shipment b \nON a.shipment_id=b.shipment_id;</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT a.ord_id,a.ord_date,a.ord_amt,\nb.cust_name AS \"Customer\", \nc.exec_name AS \"Delivery Executive\", c.commission \nFROM orders a \nINNER JOIN shipment b \nON a.shipment_id=b.shipment_id \nINNER JOIN delivexec c \nON a.exec_id=c.exec_id;</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT a.ord_id,a.ord_date,a.ord_amt,\nb.cust_name AS \"Customer\", \nc.exec_name AS \"Delivery Executive\", c.commission \nFROM orders a \nINNER JOIN delivexec c \nON a.exec_id=c.exec_id;</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<p>None of these</p>\n\t</li>\n</ol>","a":[{"id":1618959,"option":"1","correct":false},{"id":1618960,"option":"2","correct":true},{"id":1618961,"option":"3","correct":false},{"id":1618962,"option":"4","correct":false}]},{"q":"<p>Which of the given SQL queries represent the implementation of EQUI-JOIN?</p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT artist.artist_id, album.artist_id, album_name, artist_name \nFROM artist, album \nWHERE artist.artist_id = album.artist_id(+);</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT artist.artist_id, album.artist_id, album_name, artist_name \nFROM artist, album \nWHERE artist.artist_id(+) = album.artist_id;</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT artist.artist_id, album.artist_id, album_name, artist_name \nFROM artist, album \nWHERE artist.artist_id = album.artist_id;</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<p>None of these</p>\n\t</li>\n</ol>\n\n<p> </p>","a":[{"id":1618955,"option":"1","correct":false},{"id":1618956,"option":"2","correct":false},{"id":1618957,"option":"3","correct":true},{"id":1618958,"option":"4","correct":false}]},{"q":"<p>Consider the tables, employees, and managers given alongside Which of the following queries will retrieve all the records in the right table regardless of any of those records matching with the left table?</p>\n\n<pre class=\"prettyprint\"><code>CREATE TABLE managers(\nmanager_id int PRIMARY KEY,\nmgr_name varchar(30)\n);\n\nCREATE TABLE employees(\nemp_id int PRIMARY KEY,\nemp_name VARCHAR(30),\nmgr_id int,\nFOREIGN KEY(mgr_id) REFERENCES managers(mgr_id)\n);</code></pre>\n\n<p><strong>options:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT * from employees \nRIGHT INNER JOIN managers \nON employees.mgr_id = manager.manager_id;</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT * from employees \nLEFT OUTER JOIN managers \nON employees.mgr_id = manager.manager_id;</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT * from employees \nRIGHT OUTER JOIN managers \nON employees.mgr_id = manager.manager_id;</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT * from employees \nLEFT INNER JOIN managers \nON employees.mgr_id = manager.manager_id;</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1618951,"option":"1","correct":false},{"id":1618952,"option":"2","correct":false},{"id":1618953,"option":"3","correct":true},{"id":1618954,"option":"4","correct":false}]},{"q":"<p>Consider the tables employees and managers given alongside. Which of these joins can you use to retrieve all records from both tables joining records from the left table, that match records from the right table?</p>\n\n<pre class=\"prettyprint\"><code>CREATE TABLE managers(\nmanager_id int PRIMARY KEY,\nmgr_name varchar(30)\n);\n\nCREATE TABLE employees(\nemp_id int PRIMARY KEY,\nemp_name VARCHAR(30),\nmgr_id int,\nFOREIGN KEY(mgr_id) REFERENCES managers(manager_id)\n);</code></pre>\n\n<p> </p>\n\n<p> </p>","a":[{"id":1618947,"option":"FULL OUTER JOIN","correct":false},{"id":1618948,"option":"FULL JOIN","correct":false},{"id":1618949,"option":"CARTESIAN JOIN","correct":false},{"id":1618950,"option":"Both 1 and 2","correct":true}]},{"q":"<p>Consider the tables given alongside. What can you do to get a list of employees along with the departments that they belong to?</p>\n\n<pre class=\"prettyprint\"><code>CREATE TABLE locations(\nlocation_id int,\ncity varchar(30),\nPRIMARY KEY(location_id)\n);\n\nCREATE TABLE departments(\ndept_id int,\ndept_name varchar(50),\nlocation_id int,\nPRIMARY KEY(dept_id),\nFOREIGN KEY(location_id) REFERENCES locations(location_id)\n);\n\nCREATE TABLE employees(\nemp_id INT,\nemp_name VARCHAR(50),\nsalary int,\ndept_id int,\nPRIMARY KEY(emp_id),\nFOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);</code></pre>\n\n<p><strong>options:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT employees.emp_name AS \"Employee\", departments.dept_name\nFROM employees, departments\nWHERE employees.dept_id = departments.dept_id;</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT employees.emp_name AS \"Employee\", departments.dept_name\nFROM employees\nJOIN departments\nON employees.dept_id = departments.dept_id;</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<p>Both 1 and 2</p>\n\t</li>\n\t<li>\n\t<p>Neither 1 nor 2</p>\n\t</li>\n</ol>","a":[{"id":1618943,"option":"1","correct":false},{"id":1618944,"option":"2","correct":false},{"id":1618945,"option":"3","correct":true},{"id":1618946,"option":"4","correct":false}]},{"q":"<p>You have two tables employee and department that have 10 records. In the given context, determine the type of join being used in the query given alongside.</p>\n\n<pre class=\"prettyprint\"><code>SELECT employee.emp_id, department.emp_id, name, dept_id \nFROM employee, department;</code></pre>\n\n<p> </p>","a":[{"id":1618939,"option":"Inner Join","correct":false},{"id":1618940,"option":"Outer Join","correct":false},{"id":1618941,"option":"Equi-Join","correct":false},{"id":1618942,"option":"Cartesian Join","correct":true}]},{"q":"<p>You have the tables sales and product given alongside. Which of these queries can be used to get the details of products that have acquired sales?</p>\n\n<pre class=\"prettyprint\"><code>CREATE TABLE product(\nproduct_id int,\nprod_name varchar(30),\nPRIMARY KEY(product_id)\n);\n\nCREATE TABLE sales(\nsale_id int,\nproduct_id int,\nsales_date date,\nquantity int,\nprice int,\nPRIMARY KEY(sale_id),\nFOREIGN KEY(product_id) REFERENCES product(product_id)\n);</code></pre>\n\n<p><strong>options:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT sale_id, sales_date, quantity, price, product.prod_name \nFROM sales \nOUTER JOIN product \nON sales.product_id = product.product_id;</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT sale_id, date, quantity, price, product.product_name\nFROM sales\nWHERE product_id IN (SELECT product_id\n FROM product);</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT sale_id, sales_date, quantity, price, product.prod_name \nFROM sales \nINNER JOIN product \nON sales.product_id = product.product_id;</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT sale_id, sales_date, quantity, price, product.prod_name \nFROM sales \nNATURAL JOIN product \nON sales.product_id = product.product_id;</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1618935,"option":"1","correct":false},{"id":1618936,"option":"2","correct":false},{"id":1618937,"option":"3","correct":true},{"id":1618938,"option":"4","correct":false}]},{"q":"<p>You have two tables Shipment and Delivexec as shown alongside. You want to create a report using equi joins to display the name of the customer, the name of the delivery executive, and the city. Which of these queries can be used to achieve this?</p>\n\n<pre class=\"prettyprint\"><code>Create TABLE delivexec(\n exec_id int,\n exec_name varchar(30),\n city varchar(30),\n commission int,\n PRIMARY KEY(exec_id)\n );\n\nCreate TABLE shipment(\n shipment_id int,\n cust_name varchar(30),\n city varchar(30),\n grade int,\n exec_id int,\n PRIMARY KEY(shipment_id),\n FOREIGN KEY(exec_id) REFERENCES delivexec(exec_id)\n );</code></pre>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT s.exec_name, d.city, d.cust_name \nFROM shipment s, delivexec d \nWHERE s.exec_id=d.exec_id;</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>SELECT d.exec_name, s.city, s.cust_name \nFROM shipment s, delivexec d \nWHERE s.exec_id=d.exec_id;</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<p>Either 1 or 2</p>\n\t</li>\n\t<li>\n\t<p>None of these</p>\n\t</li>\n</ol>","a":[{"id":1618931,"option":"1","correct":false},{"id":1618932,"option":"2","correct":true},{"id":1618933,"option":"3","correct":false},{"id":1618934,"option":"4","correct":false}]},{"q":"<p>Which of the following operation is being performed in the following SQL query?</p>\n\n<pre class=\"prettyprint\"><code>SELECT student.stu_name, subject.sub_name, subject.marks\n FROM student, subject\n WHERE (subject.student_id= student.student_id)\n AND subject.stu_marks &gt; 60;</code></pre>\n\n<p> </p>","a":[{"id":1616794,"option":"Outer Join","correct":false},{"id":1616795,"option":"Self Join","correct":false},{"id":1616796,"option":"Inner Join","correct":true},{"id":1616797,"option":"Full Outer Join","correct":false}]},{"q":"<p>Consider the table employee and employee_details given alongside Which of the following queries is optimized and better to use?</p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code> SELECT name FROM employee WHERE (salary, age ) = (SELECT MAX (salary), MAX (age) FROM employee_details) AND dept = 'Electronics';</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>SELECT name FROM employee WHERE salary = (SELECT MAX(salary) FROM employee_details) AND age = (SELECT MAX(age) FROM employee_details) AND emp_dept = 'Electronics';</code></pre>\n\n<pre class=\"prettyprint\"><code>CREATE TABLE employee(\nid int, \nsalary int,\nage int,\nPRIMARY KEY (id)\n);\n\nCREATE TABLE employee_details(\nemployee_id int,\nemp_dept char(10),\nFOREIGN KEY(employee_id) REFERENCES employees\n);</code></pre>\n\n<p> </p>","a":[{"id":1619046,"option":"Only 1","correct":true},{"id":1619047,"option":"Only 2","correct":false},{"id":1619048,"option":"Both 1 and 2","correct":false},{"id":1619049,"option":"Neither 1 nor 2","correct":false}]},{"q":"<p>You are now working on SQL commands. Below are the details of tables <strong>Students </strong>and <strong>Results</strong>.</p>\n\n<p><strong>Table : Students</strong></p>\n\n<table border=\"1\" style=\"width: 250px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 115px;\"><strong>id</strong></td>\n\t\t\t<td style=\"text-align: center; width: 120px;\"><strong>name</strong></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 115px;\">1</td>\n\t\t\t<td style=\"text-align: center; width: 120px;\">Alice</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 115px;\">2</td>\n\t\t\t<td style=\"text-align: center; width: 120px;\">Bob</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 115px;\">3</td>\n\t\t\t<td style=\"text-align: center; width: 120px;\">Ben</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 115px;\">4</td>\n\t\t\t<td style=\"text-align: center; width: 120px;\">Mike</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p><strong>Table : Results</strong></p>\n\n<table border=\"1\" style=\"width: 250px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 114px;\"><strong>id</strong></td>\n\t\t\t<td style=\"text-align: center; width: 120px;\"><strong>marks</strong></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 114px;\">2</td>\n\t\t\t<td style=\"text-align: center; width: 120px;\">9</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 114px;\">4</td>\n\t\t\t<td style=\"text-align: center; width: 120px;\">8</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 114px;\">5</td>\n\t\t\t<td style=\"text-align: center; width: 120px;\">10</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>Below is a <strong>MySQL </strong>query that is implemented using joins.</p>\n\n<p><strong>Query :&nbsp;</strong></p>\n\n<pre class=\"prettyprint\"><code>SELECT Students.id, Results.marks FROM Students INNER JOIN Results ON Students.id=Results.id;</code></pre>\n\n<p>Which of the following options is the output of the above <strong>MySQL</strong> Query?</p>\n\n<p>1.</p>\n\n<table border=\"1\" style=\"width: 250px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 112px;\"><strong>id</strong></td>\n\t\t\t<td style=\"text-align: center; width: 122px;\"><strong>marks</strong></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 112px;\">1</td>\n\t\t\t<td style=\"text-align: center; width: 122px;\">NULL</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 112px;\">2</td>\n\t\t\t<td style=\"text-align: center; width: 122px;\">9</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 112px;\">3</td>\n\t\t\t<td style=\"text-align: center; width: 122px;\">NULL</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 112px;\">4</td>\n\t\t\t<td style=\"text-align: center; width: 122px;\">8</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>2.</p>\n\n<table border=\"1\" style=\"width: 250px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 110px;\"><strong>id</strong></td>\n\t\t\t<td style=\"text-align: center; width: 125px;\"><strong>marks</strong></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 110px;\">2</td>\n\t\t\t<td style=\"text-align: center; width: 125px;\">9</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 110px;\">4</td>\n\t\t\t<td style=\"text-align: center; width: 125px;\">8</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 110px;\">5</td>\n\t\t\t<td style=\"text-align: center; width: 125px;\">NULL</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>3.</p>\n\n<table border=\"1\" style=\"width: 250px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 106px;\"><strong>id</strong></td>\n\t\t\t<td style=\"text-align: center; width: 129px;\"><strong>marks</strong></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 106px;\">2</td>\n\t\t\t<td style=\"text-align: center; width: 129px;\">9</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 106px;\">4</td>\n\t\t\t<td style=\"text-align: center; width: 129px;\">8</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>4.</p>\n\n<table border=\"1\" style=\"width: 250px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 104px;\"><strong>id</strong></td>\n\t\t\t<td style=\"text-align: center; width: 130px;\"><strong>marks</strong></td>\n\t\t</tr>\n\t</tbody>\n</table>","a":[{"id":736082,"option":"1","correct":false},{"id":736083,"option":"2","correct":false},{"id":736084,"option":"3","correct":true},{"id":736085,"option":"4","correct":false}]},{"q":"<p>Consider you have tables <strong>Students </strong>and <strong>Results. </strong></p>\n\n<p><strong>Table : Students</strong></p>\n\n<table border=\"1\" style=\"width: 242px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 102px;\"><strong>id</strong></td>\n\t\t\t<td style=\"text-align: center; width: 124px;\"><strong>name</strong></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 102px;\">2</td>\n\t\t\t<td style=\"text-align: center; width: 124px;\">Bob</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 102px;\">4</td>\n\t\t\t<td style=\"text-align: center; width: 124px;\">Mike</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 102px;\">1</td>\n\t\t\t<td style=\"text-align: center; width: 124px;\">Alice</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 102px;\">3</td>\n\t\t\t<td style=\"text-align: center; width: 124px;\">Ben</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p><strong>Table : Results</strong></p>\n\n<table border=\"1\" style=\"width: 240px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 101px;\"><strong>id</strong></td>\n\t\t\t<td style=\"text-align: center; width: 124px;\"><strong>marks</strong></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 101px;\">4</td>\n\t\t\t<td style=\"text-align: center; width: 124px;\">9</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 101px;\">2</td>\n\t\t\t<td style=\"text-align: center; width: 124px;\">10</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 101px;\">5</td>\n\t\t\t<td style=\"text-align: center; width: 124px;\">8</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 101px;\">1</td>\n\t\t\t<td style=\"text-align: center; width: 124px;\">7</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 101px;\">6</td>\n\t\t\t<td style=\"text-align: center; width: 124px;\">6</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>Below you are given a <strong>MySQL </strong>query that does not include <strong>joins</strong>.</p>\n\n<p><strong>Query :</strong></p>\n\n<pre class=\"prettyprint\"><code>SELECT SUM(Results.marks) FROM Students, Results WHERE Students.id=Results.id;\n</code></pre>\n\n<p>Now if you implement the above <strong>MySQL </strong>query with <strong>joins </strong>then which of the following options will give the same output as the above query?</p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>SELECT SUM(Results.marks) FROM Students INNER JOIN Results;</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>SELECT SUM(Results.marks) FROM Students INNER JOIN Results ON Students.id=Results.id;\n</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>SELECT SUM(Results.marks) FROM Students RIGHT JOIN Results ON Students.id=Results.id;</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>SELECT SUM(Results.marks) FROM Students RIGHT JOIN Results;</code></pre>\n\n<p> </p>","a":[{"id":736098,"option":"1","correct":false},{"id":736099,"option":"2","correct":true},{"id":736100,"option":"3","correct":false},{"id":736101,"option":"4","correct":false}]},{"q":"<p>Consider you have tables <strong>Students </strong>and <strong>Results. </strong></p>\n\n<p><strong>Table: Students</strong></p>\n\n<table border=\"1\" style=\"width: 262px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 99px;\"><strong>id</strong></td>\n\t\t\t<td style=\"text-align: center; width: 147px;\"><strong>name</strong></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 99px;\">2</td>\n\t\t\t<td style=\"text-align: center; width: 147px;\">Bob</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 99px;\">4</td>\n\t\t\t<td style=\"text-align: center; width: 147px;\">Mike</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 99px;\">1</td>\n\t\t\t<td style=\"text-align: center; width: 147px;\">Alice</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 99px;\">3</td>\n\t\t\t<td style=\"text-align: center; width: 147px;\">Ben</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p><strong>Table : Results</strong></p>\n\n<table border=\"1\" style=\"width: 260px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 97px;\"><strong>id</strong></td>\n\t\t\t<td style=\"text-align: center; width: 147px;\"><strong>marks</strong></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 97px;\">4</td>\n\t\t\t<td style=\"text-align: center; width: 147px;\">9</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 97px;\">2</td>\n\t\t\t<td style=\"text-align: center; width: 147px;\">10</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 97px;\">5</td>\n\t\t\t<td style=\"text-align: center; width: 147px;\">8</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 97px;\">1</td>\n\t\t\t<td style=\"text-align: center; width: 147px;\">9</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 97px;\">6</td>\n\t\t\t<td style=\"text-align: center; width: 147px;\">10</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>Below you are given a <strong>MySQL </strong>query that returns the number of students and their marks from the tables Students and Results who score the same marks for every mark value.</p>\n\n<pre class=\"prettyprint\"><code>SELECT count(Students.id), Results.marks FROM Students INNER JOIN Results ON Students.id=Results.id GROUP BY Results.marks;</code></pre>\n\n<p>Now if you implement the above <strong>MySQL </strong>query without using <strong>joins </strong>then which of the following queries will give the same output as the above query?</p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>SELECT count(Students.id), Results.marks FROM Students, Results WHERE Students.id=Results.id GROUP BY Results.marks;</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>SELECT count(Students.id), Results.marks FROM Students, Results WHERE Students.id=Results.id;</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>SELECT count(Students.id), Results.marks FROM Students, Results GROUP BY Results.marks;</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>SELECT count(Students.id), Results.marks FROM Students, Results GROUP BY Results.marks WHERE Students.id=Results.id;</code></pre>\n\n<p> </p>","a":[{"id":736118,"option":"1","correct":true},{"id":736119,"option":"2","correct":false},{"id":736120,"option":"3","correct":false},{"id":736121,"option":"4","correct":false}]},{"q":"<p>Consider you have tables <strong>Students </strong>and <strong>Results. </strong></p>\n\n<p><strong>Table : Students</strong></p>\n\n<table border=\"1\" style=\"width: 225px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 99px;\"><strong>id</strong></td>\n\t\t\t<td style=\"text-align: center; width: 110px;\"><strong>name</strong></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 99px;\">2</td>\n\t\t\t<td style=\"text-align: center; width: 110px;\">Bob</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 99px;\">4</td>\n\t\t\t<td style=\"text-align: center; width: 110px;\">Mike</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 99px;\">1</td>\n\t\t\t<td style=\"text-align: center; width: 110px;\">Alice</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 99px;\">3</td>\n\t\t\t<td style=\"text-align: center; width: 110px;\">Ben</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p><strong>Table : Results</strong></p>\n\n<table border=\"1\" style=\"width: 223px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 93px;\"><strong>id</strong></td>\n\t\t\t<td style=\"text-align: center; width: 114px;\"><strong>marks</strong></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 93px;\">4</td>\n\t\t\t<td style=\"text-align: center; width: 114px;\">9</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 93px;\">2</td>\n\t\t\t<td style=\"text-align: center; width: 114px;\">10</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 93px;\">5</td>\n\t\t\t<td style=\"text-align: center; width: 114px;\">8</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 93px;\">1</td>\n\t\t\t<td style=\"text-align: center; width: 114px;\">9</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 93px;\">6</td>\n\t\t\t<td style=\"text-align: center; width: 114px;\">10</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p><strong>Query :</strong></p>\n\n<pre class=\"prettyprint\"><code>SELECT count(Students.id), Results.marks FROM Students INNER JOIN Results ON Students.id=Results.id GROUP BY Results.marks;</code></pre>\n\n<p>Which one of the following options is the output of the above <strong>MySQL</strong> query?</p>\n\n<p><strong>1.</strong></p>\n\n<table border=\"1\" style=\"width: 219px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 88px;\"><strong>count(id)</strong></td>\n\t\t\t<td style=\"text-align: center; width: 115px;\"><strong>marks</strong></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 88px;\">2</td>\n\t\t\t<td style=\"text-align: center; width: 115px;\">9</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 88px;\">1</td>\n\t\t\t<td style=\"text-align: center; width: 115px;\">10</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p> </p>\n\n<p><strong>2.</strong></p>\n\n<table border=\"1\" style=\"width: 215px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 89px;\"><strong>count(id)</strong></td>\n\t\t\t<td style=\"text-align: center; width: 110px;\"><strong>marks</strong></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 89px;\">1</td>\n\t\t\t<td style=\"text-align: center; width: 110px;\">10</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 89px;\">2</td>\n\t\t\t<td style=\"text-align: center; width: 110px;\">9</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p> </p>\n\n<p><strong>3.</strong></p>\n\n<table border=\"1\" style=\"width: 213px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 89px;\"><strong>count(id)</strong></td>\n\t\t\t<td style=\"text-align: center; width: 108px;\"><strong>marks</strong></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 89px;\">2</td>\n\t\t\t<td style=\"text-align: center; width: 108px;\">10</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 89px;\">2</td>\n\t\t\t<td style=\"text-align: center; width: 108px;\">9</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p> </p>\n\n<p><strong>4.</strong></p>\n\n<table border=\"1\" style=\"width: 214px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 88px;\"><strong>count(id)</strong></td>\n\t\t\t<td style=\"text-align: center; width: 111px;\"><strong>marks</strong></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 88px;\">2</td>\n\t\t\t<td style=\"text-align: center; width: 111px;\">9</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 88px;\">2</td>\n\t\t\t<td style=\"text-align: center; width: 111px;\">10</td>\n\t\t</tr>\n\t</tbody>\n</table>","a":[{"id":736094,"option":"1","correct":true},{"id":736095,"option":"2","correct":false},{"id":736096,"option":"3","correct":false},{"id":736097,"option":"4","correct":false}]},{"q":"<p>Consider you have tables <strong>Students </strong>and <strong>Results. </strong></p>\n\n<p><strong>Table : Students</strong></p>\n\n<table border=\"1\" style=\"width: 250px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 109px;\"><strong>id</strong></td>\n\t\t\t<td style=\"text-align: center; width: 126px;\"><strong>name</strong></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 109px;\">2</td>\n\t\t\t<td style=\"text-align: center; width: 126px;\">Bob</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 109px;\">4</td>\n\t\t\t<td style=\"text-align: center; width: 126px;\">Mike</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 109px;\">1</td>\n\t\t\t<td style=\"text-align: center; width: 126px;\">Alice</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 109px;\">3</td>\n\t\t\t<td style=\"text-align: center; width: 126px;\">Ben</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p><strong>Table : Results</strong></p>\n\n<table border=\"1\" style=\"width: 250px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 105px;\"><strong>id</strong></td>\n\t\t\t<td style=\"text-align: center; width: 129px;\"><strong>marks</strong></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 105px;\">4</td>\n\t\t\t<td style=\"text-align: center; width: 129px;\">9</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 105px;\">2</td>\n\t\t\t<td style=\"text-align: center; width: 129px;\">10</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 105px;\">5</td>\n\t\t\t<td style=\"text-align: center; width: 129px;\">8</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 105px;\">1</td>\n\t\t\t<td style=\"text-align: center; width: 129px;\">7</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 105px;\">6</td>\n\t\t\t<td style=\"text-align: center; width: 129px;\">6</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p><strong>Query :</strong></p>\n\n<pre class=\"prettyprint\"><code>SELECT Students.id, Results.marks FROM Students LEFT JOIN Results ON Students.id=Results.id where Results.marks&gt;8;</code></pre>\n\n<p>Which one of the following options is the output of the above <strong>MySQL</strong> query?</p>\n\n<p><strong>1.</strong></p>\n\n<table border=\"1\" style=\"width: 250px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 104px;\"><strong>id</strong></td>\n\t\t\t<td style=\"text-align: center; width: 130px;\"><strong>marks</strong></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 104px;\">4</td>\n\t\t\t<td style=\"text-align: center; width: 130px;\">9</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 104px;\">2</td>\n\t\t\t<td style=\"text-align: center; width: 130px;\">10</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p> </p>\n\n<p><strong>2.</strong></p>\n\n<table border=\"1\" style=\"width: 250px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 98px;\"><strong>id</strong></td>\n\t\t\t<td style=\"text-align: center; width: 137px;\"><strong>marks</strong></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 98px;\">2</td>\n\t\t\t<td style=\"text-align: center; width: 137px;\">10</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 98px;\">4</td>\n\t\t\t<td style=\"text-align: center; width: 137px;\">9</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p> </p>\n\n<p><strong>3.</strong></p>\n\n<table border=\"1\" style=\"width: 250px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 96px;\"><strong>id</strong></td>\n\t\t\t<td style=\"text-align: center; width: 138px;\"><strong>marks</strong></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 96px;\">2</td>\n\t\t\t<td style=\"text-align: center; width: 138px;\">10</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 96px;\">4</td>\n\t\t\t<td style=\"text-align: center; width: 138px;\">9</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 96px;\">1</td>\n\t\t\t<td style=\"text-align: center; width: 138px;\">NULL</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 96px;\">3</td>\n\t\t\t<td style=\"text-align: center; width: 138px;\">NULL</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p> </p>\n\n<p><strong>4.</strong></p>\n\n<table border=\"1\" style=\"width: 250px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 98px;\"><strong>id</strong></td>\n\t\t\t<td style=\"text-align: center; width: 136px;\"><strong>marks</strong></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 98px;\">2</td>\n\t\t\t<td style=\"text-align: center; width: 136px;\">10</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 98px;\">4</td>\n\t\t\t<td style=\"text-align: center; width: 136px;\">9</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center; width: 98px;\">1</td>\n\t\t\t<td style=\"text-align: center; width: 136px;\">NULL</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p> </p>","a":[{"id":736090,"option":"1","correct":false},{"id":736091,"option":"2","correct":true},{"id":736092,"option":"3","correct":false},{"id":736093,"option":"4","correct":false}]},{"q":"<p>You are given the tables <strong>Hack_Table</strong>,&nbsp;<strong>HackData_Table</strong>,<strong>&nbsp;</strong>and <strong>HackStats_Table</strong>. If you are required to execute the following SQL query, then determine its output.</p>\n\n<p><strong>Table:&nbsp;Hack_Table</strong></p>\n\n<table border=\"1\" style=\"width: 200px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\"><strong>hack_id</strong></td>\n\t\t\t<td style=\"text-align: center;\"><strong>hack_firstname</strong></td>\n\t\t\t<td style=\"text-align: center;\"><strong>id</strong></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">101</td>\n\t\t\t<td style=\"text-align: center;\">Bob</td>\n\t\t\t<td style=\"text-align: center;\">111</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">201</td>\n\t\t\t<td style=\"text-align: center;\">Mary</td>\n\t\t\t<td style=\"text-align: center;\">222</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">301</td>\n\t\t\t<td style=\"text-align: center;\">Anita</td>\n\t\t\t<td style=\"text-align: center;\">333</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">401</td>\n\t\t\t<td style=\"text-align: center;\">Paul</td>\n\t\t\t<td style=\"text-align: center;\">444</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p><strong>Table: HackData_Table</strong></p>\n\n<table border=\"1\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\"><strong>hack_id</strong></td>\n\t\t\t<td style=\"text-align: center;\"><strong>hack_lastname</strong></td>\n\t\t\t<td style=\"text-align: center;\"><strong>emp_id</strong></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">101</td>\n\t\t\t<td style=\"text-align: center;\">Ben</td>\n\t\t\t<td style=\"text-align: center;\">2003</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">201</td>\n\t\t\t<td style=\"text-align: center;\">Alice</td>\n\t\t\t<td style=\"text-align: center;\">1001</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">301</td>\n\t\t\t<td style=\"text-align: center;\">Smith</td>\n\t\t\t<td style=\"text-align: center;\">7008</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">401</td>\n\t\t\t<td style=\"text-align: center;\">Wilson</td>\n\t\t\t<td style=\"text-align: center;\">8005</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">501</td>\n\t\t\t<td style=\"text-align: center;\">Miller</td>\n\t\t\t<td style=\"text-align: center;\">5008</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p><strong>Table: HackStats_Table</strong></p>\n\n<table border=\"1\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\"><strong>stats</strong></td>\n\t\t\t<td style=\"text-align: center;\"><strong>id</strong></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">20</td>\n\t\t\t<td style=\"text-align: center;\">111</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">35</td>\n\t\t\t<td style=\"text-align: center;\">222</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">53</td>\n\t\t\t<td style=\"text-align: center;\">333</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">76</td>\n\t\t\t<td style=\"text-align: center;\">444</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">89</td>\n\t\t\t<td style=\"text-align: center;\">555</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p><strong>SQL Query</strong></p>\n\n<pre class=\"prettyprint\"><code>SELECT Hack_Table.hack_id,HackData_Table.hack_lastname, HackData_Table.emp_id , HackStats_Table.stats FROM ((Hack_Table INNER JOIN HackData_Table ON Hack_Table.hack_id = HackData_Table.hack_id) INNER JOIN HackStats_Table ON Hack_Table.id = HackStats_Table.id and HackStats_Table.stats &gt;20 );\n</code></pre>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<table border=\"1\">\n\t\t<tbody>\n\t\t\t<tr>\n\t\t\t\t<td style=\"text-align: center;\"><strong>hack_id</strong></td>\n\t\t\t\t<td style=\"text-align: center;\"><strong>hack_lastname</strong></td>\n\t\t\t\t<td style=\"text-align: center;\"><strong>emp_id</strong></td>\n\t\t\t\t<td style=\"text-align: center;\"><strong>stats</strong></td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td style=\"text-align: center;\">201</td>\n\t\t\t\t<td style=\"text-align: center;\">Alice</td>\n\t\t\t\t<td style=\"text-align: center;\">1001</td>\n\t\t\t\t<td style=\"text-align: center;\">35</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td style=\"text-align: center;\">301</td>\n\t\t\t\t<td style=\"text-align: center;\">Smith</td>\n\t\t\t\t<td style=\"text-align: center;\">7008</td>\n\t\t\t\t<td style=\"text-align: center;\">53</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td style=\"text-align: center;\">401</td>\n\t\t\t\t<td style=\"text-align: center;\">Wilson</td>\n\t\t\t\t<td style=\"text-align: center;\">8005</td>\n\t\t\t\t<td style=\"text-align: center;\">76</td>\n\t\t\t</tr>\n\t\t</tbody>\n\t</table>\n\n\t<p>&nbsp;</p>\n\t</li>\n\t<li>\n\t<table border=\"1\">\n\t\t<tbody>\n\t\t\t<tr>\n\t\t\t\t<td style=\"text-align: center;\"><strong>hack_id</strong></td>\n\t\t\t\t<td style=\"text-align: center;\"><strong>hack_lastname</strong></td>\n\t\t\t\t<td style=\"text-align: center;\"><strong>emp_id</strong></td>\n\t\t\t\t<td style=\"text-align: center;\"><strong>stats</strong></td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td style=\"text-align: center;\">201</td>\n\t\t\t\t<td style=\"text-align: center;\">Alice</td>\n\t\t\t\t<td style=\"text-align: center;\">1001</td>\n\t\t\t\t<td style=\"text-align: center;\">35</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td style=\"text-align: center;\">301</td>\n\t\t\t\t<td style=\"text-align: center;\">Smith</td>\n\t\t\t\t<td style=\"text-align: center;\">7008</td>\n\t\t\t\t<td style=\"text-align: center;\">53</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td style=\"text-align: center;\">401</td>\n\t\t\t\t<td style=\"text-align: center;\">Wilson</td>\n\t\t\t\t<td style=\"text-align: center;\">8005</td>\n\t\t\t\t<td style=\"text-align: center;\">76</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td style=\"text-align: center;\">501</td>\n\t\t\t\t<td style=\"text-align: center;\">Miller</td>\n\t\t\t\t<td style=\"text-align: center;\">5008</td>\n\t\t\t\t<td style=\"text-align: center;\">89</td>\n\t\t\t</tr>\n\t\t</tbody>\n\t</table>\n\t<br>\n\t&nbsp;</li>\n\t<li>\n\t<table border=\"1\">\n\t\t<tbody>\n\t\t\t<tr>\n\t\t\t\t<td style=\"text-align: center;\"><strong>hack_id</strong></td>\n\t\t\t\t<td style=\"text-align: center;\"><strong>hack_lastname</strong></td>\n\t\t\t\t<td style=\"text-align: center;\"><strong>emp_id</strong></td>\n\t\t\t\t<td style=\"text-align: center;\"><strong>stats</strong></td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td style=\"text-align: center;\">401</td>\n\t\t\t\t<td style=\"text-align: center;\">Wilson</td>\n\t\t\t\t<td style=\"text-align: center;\">8005</td>\n\t\t\t\t<td style=\"text-align: center;\">76</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td style=\"text-align: center;\">501</td>\n\t\t\t\t<td style=\"text-align: center;\">Miller</td>\n\t\t\t\t<td style=\"text-align: center;\">5008</td>\n\t\t\t\t<td style=\"text-align: center;\">89</td>\n\t\t\t</tr>\n\t\t</tbody>\n\t</table>\n\n\t<p>&nbsp;</p>\n\t</li>\n\t<li>\n\t<table border=\"1\">\n\t\t<tbody>\n\t\t\t<tr>\n\t\t\t\t<td style=\"text-align: center;\"><strong>hack_id</strong></td>\n\t\t\t\t<td style=\"text-align: center;\"><strong>hack_lastname</strong></td>\n\t\t\t\t<td style=\"text-align: center;\"><strong>emp_id</strong></td>\n\t\t\t\t<td style=\"text-align: center;\"><strong>stats</strong></td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td style=\"text-align: center;\">101</td>\n\t\t\t\t<td style=\"text-align: center;\">Ben</td>\n\t\t\t\t<td style=\"text-align: center;\">2003</td>\n\t\t\t\t<td style=\"text-align: center;\">20</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td style=\"text-align: center;\">201</td>\n\t\t\t\t<td style=\"text-align: center;\">Alice</td>\n\t\t\t\t<td style=\"text-align: center;\">1001</td>\n\t\t\t\t<td style=\"text-align: center;\">35</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td style=\"text-align: center;\">301</td>\n\t\t\t\t<td style=\"text-align: center;\">Smith</td>\n\t\t\t\t<td style=\"text-align: center;\">7008</td>\n\t\t\t\t<td style=\"text-align: center;\">53</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td style=\"text-align: center;\">401</td>\n\t\t\t\t<td style=\"text-align: center;\">Wilson</td>\n\t\t\t\t<td style=\"text-align: center;\">8005</td>\n\t\t\t\t<td style=\"text-align: center;\">76</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td style=\"text-align: center;\">501</td>\n\t\t\t\t<td style=\"text-align: center;\">Miller</td>\n\t\t\t\t<td style=\"text-align: center;\">5008</td>\n\t\t\t\t<td style=\"text-align: center;\">89</td>\n\t\t\t</tr>\n\t\t</tbody>\n\t</table>\n\t</li>\n</ol>","a":[{"id":382130,"option":"4","correct":false},{"id":382131,"option":"1","correct":true},{"id":382132,"option":"2","correct":false},{"id":382133,"option":"3","correct":false}]},{"q":"<p>Based on the following tables, what is the output of the SQL query:</p>\n\n<p>Table: <strong>STUDENT</strong></p>\n\n<table class=\"pd-table\">\n\t<thead>\n\t\t<tr>\n\t\t\t<th>ID</th>\n\t\t\t<th>NAME</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>Ben</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>Bob</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>Mike</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>4</td>\n\t\t\t<td>Alice</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>Table: <strong>TEACHER</strong></p>\n\n<table class=\"pd-table\">\n\t<thead>\n\t\t<tr>\n\t\t\t<th>ID</th>\n\t\t\t<th>NAME</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>Lisa</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>5</td>\n\t\t\t<td>Mary</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>John</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>6</td>\n\t\t\t<td>Paul</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p><strong>Query</strong> </p>\n\n<pre class=\"prettyprint\"><code>SELECT ID FROM STUDENT EXCEPT SELECT ID FROM TEACHER;\n</code></pre>\n\n<p> 1. </p>\n\n<table border=\"1\" style=\"width: 38px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td style=\"width: 26px;\"><strong>ID</strong></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"width: 26px;\">2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"width: 26px;\">4</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p> </p>\n\n<p>2.</p>\n\n<table border=\"1\" style=\"width: 38px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td style=\"width: 26px;\"><strong>ID</strong></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"width: 26px;\">1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"width: 26px;\">3</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p> </p>\n\n<p> 3. </p>\n\n<table border=\"1\" style=\"width: 38px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td style=\"width: 26px;\"><strong>ID</strong></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"width: 26px;\">5</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"width: 26px;\">6</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p> </p>\n\n<p>4.</p>\n\n<table border=\"1\" style=\"width: 38px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td style=\"width: 26px;\"><strong>ID</strong></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"width: 26px;\">2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"width: 26px;\">4</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"width: 26px;\">5</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"width: 26px;\">6</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p> </p>","a":[{"id":376596,"option":"1","correct":true},{"id":376597,"option":"2","correct":false},{"id":376598,"option":"3","correct":false},{"id":376599,"option":"4","correct":false}]},{"q":"<p>Which SQL join will return the shaded region in the following diagram:</p>\n<p><img alt=\"enter image description here\" src=\"https://he-s3.s3.amazonaws.com/media/uploads/e753e24.png\" /></p>","a":[{"id":376592,"option":"Full outer join","correct":false},{"id":376593,"option":"Inner join","correct":false},{"id":376594,"option":"Left outer join","correct":true},{"id":376595,"option":"Right outer join","correct":false}]},{"q":"<p>Which SQL join will return the shaded area in the following diagram:</p>\n<p><img alt=\"enter image description here\" src=\"https://he-s3.s3.amazonaws.com/media/uploads/6ecf5d7.png\" /></p>","a":[{"id":376600,"option":"Full outer join","correct":true},{"id":376601,"option":"Inner join","correct":false},{"id":376602,"option":"Left outer join","correct":false},{"id":376603,"option":"Right outer join","correct":false}]},{"q":"<p>You have two tables called <strong>Employee</strong> and <strong>Department</strong>.</p>\n\n<p><strong>Employee</strong></p>\n\n<table class=\"pd-table\">\n\t<thead>\n\t\t<tr>\n\t\t\t<th>Field</th>\n\t\t\t<th>Type</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">EmployeeId</td>\n\t\t\t<td style=\"text-align: center;\">int</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">EmployeeName</td>\n\t\t\t<td style=\"text-align: center;\">text</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">DepartmentId</td>\n\t\t\t<td style=\"text-align: center;\">int</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p><strong>Department</strong></p>\n\n<table class=\"pd-table\">\n\t<thead>\n\t\t<tr>\n\t\t\t<th>Field</th>\n\t\t\t<th>Type</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">DepartmentId</td>\n\t\t\t<td style=\"text-align: center;\">int</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">DepartmentName</td>\n\t\t\t<td style=\"text-align: center;\">text</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>Sample:</p>\n\n<p><strong>Employee</strong></p>\n\n<table class=\"pd-table\">\n\t<thead>\n\t\t<tr>\n\t\t\t<th>EmployeeId</th>\n\t\t\t<th>EmployeeName</th>\n\t\t\t<th>DepartmentId</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">1</td>\n\t\t\t<td style=\"text-align: center;\">Bob</td>\n\t\t\t<td style=\"text-align: center;\">1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">2</td>\n\t\t\t<td style=\"text-align: center;\">John</td>\n\t\t\t<td style=\"text-align: center;\">1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">3</td>\n\t\t\t<td style=\"text-align: center;\">Mike</td>\n\t\t\t<td style=\"text-align: center;\">1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">4</td>\n\t\t\t<td style=\"text-align: center;\">Mary</td>\n\t\t\t<td style=\"text-align: center;\">2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">5</td>\n\t\t\t<td style=\"text-align: center;\">Anita</td>\n\t\t\t<td style=\"text-align: center;\">2</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>Sample:</p>\n\n<p><strong>Department</strong></p>\n\n<table class=\"pd-table\">\n\t<thead>\n\t\t<tr>\n\t\t\t<th>DepartmentId</th>\n\t\t\t<th>DepartmentName</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">1</td>\n\t\t\t<td style=\"text-align: center;\">IT</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">2</td>\n\t\t\t<td style=\"text-align: center;\">HR</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">3</td>\n\t\t\t<td style=\"text-align: center;\">Payroll</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">4</td>\n\t\t\t<td style=\"text-align: center;\">Admin</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p><strong>Sample Output</strong></p>\n\n<table class=\"pd-table\">\n\t<thead>\n\t\t<tr>\n\t\t\t<th>DepartmentName</th>\n\t\t\t<th>EmployeeName</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">IT</td>\n\t\t\t<td style=\"text-align: center;\">Bob</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">IT</td>\n\t\t\t<td style=\"text-align: center;\">John</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">IT</td>\n\t\t\t<td style=\"text-align: center;\">Mike</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">HR</td>\n\t\t\t<td style=\"text-align: center;\">Mary</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">HR</td>\n\t\t\t<td style=\"text-align: center;\">Anita</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>Using the <strong>Employee</strong> and <strong>Department</strong> tables, which of the following queries will return the <strong>same sample output:</strong></p>\n\n<p><strong>Queries</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>select DepartmentName,EmployeeName from Employee JOIN Department ON Department.DepartmentId=Employee.DepartmentId;</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>select DepartmentName,EmployeeName from Employee LEFT JOIN Department ON Department.DepartmentId=Employee.DepartmentId;</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>select DepartmentName,EmployeeName from Employee RIGHT JOIN Department ON Department.DepartmentId=Employee.DepartmentId;\n</code></pre>","a":[{"id":259453,"option":"Only 1","correct":false},{"id":259454,"option":"Only 2","correct":false},{"id":259455,"option":" 1 and 2","correct":true},{"id":259456,"option":"1 and 3","correct":false}]}]
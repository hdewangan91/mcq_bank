[{"q":"<p>Determine the output of the given code snippet:</p>\n\n<p><strong>Code snippet</strong></p>\n\n<pre class=\"prettyprint\"><code>abstract class School {\npublic School() {\nSystem.out.println(\"School\");\nmyMethod();\n}\nabstract void myMethod();\n}\nclass Teacher extends School {\npublic Teacher() {\nSystem.out.println(\"Teacher\");\nnew School();\n}\n@Override\nvoid myMethod() {\nSystem.out.println(\"Abstract\");\n}\n}\npublic class Main {\npublic static void main(String[] args) {\nSchool sch = new Teacher();\nsch.myMethod();\n}\n}</code></pre>","a":[{"id":1655817,"option":"Teacher School Abstract","correct":false},{"id":1655818,"option":"School Teacher School Abstract","correct":false},{"id":1655819,"option":"Teacher School Abstract Abstract","correct":false},{"id":1655820,"option":"Compilation Error","correct":true}]},{"q":"<p>What will be the output of the following code snippet given below?<br>\n<strong>Code -</strong></p>\n\n<pre class=\"prettyprint\"><code>abstract class School \n{\n    int i = 0;\n    public School() \n    {\n        display();\n        i=2;\n    }\n    abstract void myMethod();\n    void display()\n    {\n        System.out.println(i);\n    }\n}\ninterface Student\n{\n    abstract void myMethod();\n}\nclass Teacher extends School implements Student \n{\n    public Teacher() \n    {\n        super();\n        i=1;\n    }\n    @Override\n    public void myMethod() \n    {\n        new Teacher();\n    }\n}\nclass Marks extends Teacher\n{\n    public Marks()\n    {\n        i=5;\n        myMethod();\n    }\n}\npublic class Main \n{\n    public static void main(String[] args) \n    {\n        Marks stu = new Marks();\n    }\n}</code></pre>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>0\n0</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>2</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>5\n0</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>2\n2</code></pre>\n\t</li>\n</ol>","a":[{"id":1655821,"option":"1","correct":true},{"id":1655822,"option":"2","correct":false},{"id":1655823,"option":"3","correct":false},{"id":1655824,"option":"4","correct":false}]},{"q":"<p>What is the output of the following Pseudocode:</p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>ABSTRACT CLASS Myclass1:\n    ABSTRACT STATIC CLASS Myclass2:\n        SET STATIC VAR INTEGER i = 0\n        PUBLIC VOID FUNCTION func1:\n            //Nothing new is added here\n        END\n        STATIC VOID FUNCTION func2:\n            PRINT i //Myclass1.Myclass2.i\n        END\n            \nPUBLIC CLASS Main inherits CLASS Myclass1.Myclass2 and defines:\n    PUBLIC VOID FUNCTION func1:\n        SET VAR i = 1 \n        PUBLIC FUNCTION Main:\n        SET OBJECT obj as new Object for Class Main() /*This is the object created for the class \n                                                      Myclass1.Myclass2 */\n        INVOKE obj.func1\n        INVOKE Myclass1.func2\n    END</code></pre>","a":[{"id":1700790,"option":"1","correct":true},{"id":1700791,"option":"0","correct":false},{"id":1700792,"option":"Garbage value","correct":false},{"id":1700793,"option":"Compilation error","correct":false}]},{"q":"<p>Which of the following statements is not correct about the C# code snippet given below?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>public class Hackerearth\n{\n    public virtual void hack(int h)\n    { \n        \n    }\n}\n\npublic abstract class hacker : Hackerearth\n{\n    public abstract override void hack(int h);\n}\n\npublic class hack_class : hacker\n{\n    public override void hack(int h)\n    { \n        \n    }\n}</code></pre>\n\n<p><strong>Statements:</strong></p>\n\n<ol>\n\t<li>The abstract class cannot override the virtual method with an abstract method.</li>\n\t<li>The method hack&nbsp;on the&nbsp;class hack_class cannot call the method hack on class Hackerearth.</li>\n</ol>","a":[{"id":1419632,"option":"Only Statement 1","correct":true},{"id":1419633,"option":"Only Statement 2","correct":false},{"id":1419634,"option":"Both 1 and 2","correct":false},{"id":1419635,"option":"None of the statements ","correct":false}]},{"q":"<p>Consider the two class definitions given alongside. Which of the following statements about the respective segment of code describes it correctly?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>public abstract class Diagram {\npublic String name;\n \npublic Diagram (String d) {\nname = d;\n}\npublic String toString( ) {\nreturn name;\n}\npublic abstract double calculatePerimeter( ); \npublic abstract double calculateArea( );\n} \n \n public class Circle extends Diagram {\nprivate double radius;\nprivate final double PI = 3.14;\n \npublic Circle (double r, String name){\nsuper(name);\nradius = r;\n} \npublic String toString( ) {\nreturn \"A circle of radius\" + radius; \n}\npublic double getPerimeter( ) {\nreturn 2*PI*radius;\n}\npublic double calculateArea( ) {\nreturn PI*radius*radius;\n}\n}</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<p>The class Circle cannot be instantiated, as it inherits from an abstract class</p>\n\n<p><strong>2.</strong></p>\n\n<p>The class Circle is a subclass of Diagram, and thus all the methods in Diagram are automatically implemented in Circle</p>\n\n<p><strong>3.</strong></p>\n\n<p>The class Circle does not need to implement the method calculatePerimeter( ) as it already has a getPerimeter( ) method</p>\n\n<p><strong>4.</strong></p>\n\n<p>This code will not compile</p>","a":[{"id":1656009,"option":"1","correct":false},{"id":1656010,"option":"2","correct":false},{"id":1656011,"option":"3","correct":false},{"id":1656012,"option":"4","correct":true}]},{"q":"<p>What will be the output of the C# code snippet given below?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nnamespace Interfaces\n{ \n    abstract class hack1\n    {\n        public int a;\n        public abstract void hack_opr();\n        \n    } \n    class hack2 : hack1\n    {\n        public int b;\n        public int s;\n        public override void hack_opr() \n        {\n            s = a + b;\n            Console.WriteLine(+a + \",\" + b);\n            Console.WriteLine(s);\n            \n        }\n        \n    } \n    class Hackerearth\n    {\n        static void Main(string[] args)\n        {\n            hack1 h1 = new hack2 ();\n            h1.a = 10;\n            hack2 h2 = new hack2 ();\n            h2.b = 35;\n            h1.hack_opr();\n        }\n        \n    }\n}</code></pre>\n\n<p> </p>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>10,0\n10\n</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>10,35\n45</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>0,10\n10</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>0,0\n0</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1419137,"option":"1","correct":true},{"id":1419138,"option":"2","correct":false},{"id":1419139,"option":"3","correct":false},{"id":1419140,"option":"4","correct":false}]},{"q":"<p>Which of the following statements is correct about the method(s) defined in the abstract class in the C# code snippet given below?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System; \nabstract class hack \n{ \n    public int hack_opr1(int Num1, int Num2) \n    { \n        return Num1 - Num2; \n        \n    } \n    public abstract int hack_opr2(int Num1, int Num2); \n    \n} \nclass hack1 : hack \n{ \n    public override int hack_opr2(int Num1, int Num2) \n    { \n        return Num1 / Num2; \n        \n    }\n    \n} \nclass Hackerearth\n{ \n    public static void Main() \n    {\n        hack1 h = new hack1(); \n        Console.WriteLine(h.hack_opr1(85, 63)); \n        Console.WriteLine(h.hack_opr2(50, 25)); \n        \n    } \n    \n}</code></pre>\n\n<p> </p>","a":[{"id":1419112,"option":"An abstract is defined in the abstract class","correct":false},{"id":1419113,"option":"A non-abstract is defined in the non-abstract class","correct":false},{"id":1419114,"option":"A non-abstract is defined in the abstract class","correct":true},{"id":1419115,"option":"None of these","correct":false}]},{"q":"<p>Which lines in the C# code snippet given below produces an error?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>public abstract class Parent   // line 1\n\n{ \n    public abstract void A();   // line 2\n    public void D()    //line 3\n    { \n        \n    }\n    protected void E()   // line 4\n    { \n        \n    }\n    private void F()   // line 5\n    { \n        \n    }\n    \n}\npublic class Child : Parent   // line 6\n \n { \n     public override void A()   // line 7\n     { \n         \n     }\n     public void B()   // line 8\n     {\n         D();   // line 9\n         E();   // line 10\n         F();   // line 11\n         \n     } \n     \n }\n \npublic class SubChild  // line 12\n {\n     public static void C()   // line 13\n     {\n         Parent obj = new Parent ();   // line 14\n         Child obj1= new Child ();   // line 15\n         obj1.A();   // line 16\n         obj1.B();   // line 17\n         obj1.D();   // line 18\n         \n     } \n     \n }</code></pre>\n\n<p> </p>","a":[{"id":1419127,"option":"Line 14, Line 9","correct":false},{"id":1419128,"option":"Line 11, Line 15","correct":false},{"id":1419129,"option":"Line 11, Line 14","correct":true},{"id":1419130,"option":"Line 15, Line 10","correct":false}]},{"q":"<p>Which of the following C# code snippets throws an error when executed?<br>\n<br>\n<strong>Code Snippets:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>using System;\nnamespace DemoClass\n{ \n    abstract class Dog\n    { \n        public void Call() \n        { \n            Console.WriteLine(\"Call Method\"); \n            \n        } \n        \n        abstract void Breed(); \n        \n    } \n    class Program \n    { \n        static void Main(string[] args) \n        { \n            \n        } \n        \n    } \n}</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>using System;\nnamespace DemoClass \n{ \n    abstract class Dog \n    { \n        public void Call() \n        { \n            Console.WriteLine(\"Call Method\"); \n            \n        } \n        \n        public abstract void Breed(); \n        \n    } \n    class Program \n    { \n        static void Main(string[] args) \n        { \n            \n        } \n        \n    } \n}</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1419637,"option":"1","correct":true},{"id":1419638,"option":"2","correct":false},{"id":1419639,"option":"Both 1 and 2","correct":false},{"id":1419640,"option":"None of these","correct":false}]},{"q":"<p>In C#, you have an interface named 'Breed' which has a method 'Name'. Which of the following code snippets can you use to implement this interface using an abstract class 'Dog' such that the interface method maps on to the abstract class method?<br>\n<br>\n<br>\n<strong>Code Snippets:</strong></p>\n\n<p>1. </p>\n\n<pre class=\"prettyprint\"><code>abstract class Dog : Breed\n{\n    public abstract void Name();\n}</code></pre>\n\n<p> </p>\n\n<p>2. </p>\n\n<pre class=\"prettyprint\"><code>abstract class Dog.Breed\n{\n    public abstract void Name();\n}</code></pre>\n\n<p> </p>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>abstract class Dog : Breed\n{\n\n}</code></pre>\n\n<p> </p>","a":[{"id":1419607,"option":"1 and 2","correct":false},{"id":1419608,"option":"2 and 3","correct":false},{"id":1419609,"option":"only 1","correct":true},{"id":1419610,"option":"1 and 3","correct":false}]},{"q":"<p>Which of the following syntaxes can be used in place of XXX and YYY so that the C# code snippet given below executes successfully?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System; \nabstract class absClass \n{ \n    protected int theNumber; \n    public abstract int numbers \n    { \n        XXX\n        YYY\n        \n    } \n} \n\nclass absDerived : absClass \n{ \n    public override int numbers \n    { \n        get\n        { \n            return theNumber; \n            \n        } \n        set\n        { \n            theNumber= value; \n            \n        } \n        \n    } \n    \n} \n \nclass MainClass\n{ \n    public static void Main() \n    { \n        absDerived d = new absDerived(); \n        d.numbers = 5; \n        Console.WriteLine(d.numbers); \n        \n    } \n}</code></pre>\n\n<p> </p>\n\n<p> </p>\n\n<p><strong>Syntaxes:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>XXX- set.theNumber(); \nYYY- get.theNumber();\n</code></pre>\n\t<br>\n\t </li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>XXX- get theNumber; \nYYY- set theNumber;\n</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>XXX- set; \nYYY- get;\n</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>XXX- get() = new theNumber(); \nYYY- set() = new theNumber();\n</code></pre>\n\t \n\n\t<p> </p>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1419117,"option":"1 ","correct":false},{"id":1419118,"option":"2 ","correct":false},{"id":1419119,"option":"3","correct":true},{"id":1419120,"option":"4","correct":false}]},{"q":"<p>In C++, which of the following statements is true?</p>","a":[{"id":134099,"option":"An instance cannot be created for an abstract base class","correct":true},{"id":134100,"option":"An instance can be created for an abstract base class","correct":false},{"id":134101,"option":"Instances for abstract base classes do not exist","correct":false},{"id":134102,"option":"None of these","correct":false}]},{"q":"<p>Which line in the C# code snippet given below gives an error?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;  // line 1\nabstract class AreaClass   // line 2\n{ \n    abstract public int Area(); // line 3\n    \n} \nclass Circle: AreaClass  // line 4\n{ \n    int radius = 0;   // line 5\n    public Circle(int r)  // line 6\n    { \n        radius = r;   // line 7\n        \n    } \n    public override int Area()   // line 8\n    { \n        return 3.14 * radius * radius;   // line 9\n        \n    } \n    \n} \nclass MainClass  // line 10\n{ \n    public static void Main()   // line 11\n    { \n        Circle c = new Circle(7);   // line 12\n        Console.WriteLine(\"Area = \" + c.Area()); // line 13\n        \n    } \n    \n}</code></pre>\n\n<p> </p>","a":[{"id":1419107,"option":"Line 3","correct":false},{"id":1419108,"option":"Line 9","correct":true},{"id":1419109,"option":"Line 2","correct":false},{"id":1419110,"option":"Line 7","correct":false}]},{"q":"<p>What is the output of the following C# code snippet?<br>\n<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\nclass Hackster\n{\n    static void Main(string[] args)\n    {\n        hack3 h3 = new hack3(); \n        Hack h4 = h3;\n        h4.hack1();\n        h3.hack1();  \n        h3.hack2(); \n        \n    }\n} \n\nabstract class Hack\n{\n    public virtual void hack1() \n    {\n        Console.WriteLine(\"Hi\");\n    }\n \n    public void hack2()\n    {\n        Console.WriteLine(\"Hi from Hackerearth\");\n    }\n}\n\nclass hack3 : Hack\n{\n    public override void hack1()\n    {\n        Console.WriteLine(\"Hello from Hackerearth\");\n        \n    }\n}\n</code></pre>\n\n<p><br>\n<strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hi\nHello from Hackerearth\nHi from Hackerearth\n</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hello from Hackerearth\nHi\nHi from Hackerearth\n</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hello from Hackerearth\nHello from Hackerearth\nHi from Hackerearth\n</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hello from Hackerearth\nHi\nHello from Hackerearth\n</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1419352,"option":"1","correct":false},{"id":1419353,"option":"2","correct":false},{"id":1419354,"option":"3","correct":true},{"id":1419355,"option":"4","correct":false}]},{"q":"<p>In C++, when can a class be declared <strong>abstract</strong>?</p>","a":[{"id":153640,"option":"If it has at least one pure virtual method","correct":true},{"id":153641,"option":"If it has at least one abstract method","correct":false},{"id":153642,"option":"By using the keyword abstract","correct":false},{"id":153643,"option":"None of these","correct":false}]},{"q":"<p>In C++, which of the following is indicated in the declaration with the syntax<strong> \" = 0\"</strong> in the member function's declaration in the <strong>abstract </strong>class?</p>","a":[{"id":132797,"option":"Member function  ","correct":false},{"id":132798,"option":"Pure virtual function  ","correct":true},{"id":132799,"option":"Derived class  ","correct":false},{"id":132800,"option":"Main class","correct":false}]},{"q":"<p>What is the output of the C# code snippet given below?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System; \n \nnamespace AbstractClassDemo \n{ \n    abstract class Dog \n    { \n        \n    } \n    class Program \n    { \n        static void Main(string[] args) \n        { \n            Dog dog = new Dog(); \n            \n        } \n        \n    } \n}</code></pre>\n\n<p> </p>","a":[{"id":1419612,"option":"It will throw an error","correct":true},{"id":1419613,"option":"It will create an instance of the class Dog","correct":false},{"id":1419614,"option":"It will create a non abstract object of class Dog","correct":false},{"id":1419615,"option":"None of these","correct":false}]},{"q":"<p>Which of these lines of code produces a compiler error when the code snippet given below is executed:</p>\n\n<pre class=\"prettyprint\"><code>public class SampleClass : IControl, ISurface //L1\n{\n void IControl.Paint()\n {\n System.Console.WriteLine(\"IControl.Paint\");\n }\n void ISurface.Paint()\n {\n System.Console.WriteLine(\"ISurface.Paint\");\n }\n}\nSampleClass obj = new SampleClass();\nobj.Paint(); //L2\nIControl c = obj;\nc.Paint(); //L3\nISurface s = obj;\ns.Paint(); //L4</code></pre>\n\n<p> </p>","a":[{"id":1419627,"option":"L1","correct":false},{"id":1419628,"option":"L2","correct":true},{"id":1419629,"option":"L3","correct":false},{"id":1419630,"option":"L4","correct":false}]},{"q":"<p>In Java, which of these keywords will you use to create a class that represents a concept rather than objects?</p>\n\n<p> </p>","a":[{"id":673331,"option":"static ","correct":false},{"id":673332,"option":"final","correct":false},{"id":673333,"option":"abstract","correct":true},{"id":673334,"option":"None of these","correct":false}]},{"q":"<p>What will be the output of the following Java code?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>class Hackerearth\n{  \n    public static void main(String []args)\n    {  \n        hack2 h= new hack2();  \n        h.hack_method();  \n        h.hack_method2();  \n        \n    }  \n}  \nabstract class hack1\n{  \n    hack1()\n    {\n        System.out.println(\"hello\");\n        \n    }  \n   abstract void hack_method();  \n   \n   void hack_method2()\n   {\n       System.out.println(\"hi\");\n       \n   }  \n}   \nclass hack2 extends hack1\n{  \n    void hack_method()\n    {\n        System.out.println(\"hackerearth\");\n        \n    }  \n}  </code></pre>\n\n<p><br>\n<br>\n<strong>Output:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hello\nhackerearth\nhi\n</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hello\nhi\nhackerearth\n</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hackerearth\nhello\nhi\n</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":663036,"option":"3","correct":false},{"id":663037,"option":"1","correct":true},{"id":663038,"option":"2","correct":false},{"id":663039,"option":"The code gives a runtime error","correct":false}]},{"q":"<p>Which of the following statements about <strong>abstract classes </strong>in Java are true:</p>\n\n<ol>\n\t<li>An abstract class can contain only abstract methods.</li>\n\t<li>An abstract method cannot be declared static.</li>\n\t<li>An abstract method in a class can override an abstract method in its superclass without providing an implementation.</li>\n\t<li>You can declare a class as abstract even though it does not have any abstract methods.</li>\n</ol>","a":[{"id":673335,"option":"1, 3, and 4","correct":false},{"id":673336,"option":"1, 2, and 4","correct":false},{"id":673337,"option":"2, 3, and 4","correct":true},{"id":673338,"option":"1, 2, and 3","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include&lt;iostream&gt; \nusing namespace std; \n\nclass Base \n{ \n    int x; \n    public: \n        virtual void fun() = 0; \n        int getX() \n        { \n            return x; \n        } \n}; \n\nclass Derived: public Base \n{ \n\tint y; \n    public: \n\tvoid fun() \n    { \n        cout &lt;&lt; \"Hello HackerEarth!\"; \n    } \n}; \nint main(void) \n{ \n\tDerived d; \n\td.fun(); \n\treturn 0; \n} \n</code></pre>\n\n<p> </p>","a":[{"id":133314,"option":"Hello HackerEarth!","correct":true},{"id":133315,"option":"Prints nothing as an output","correct":false},{"id":133316,"option":"Compilation error","correct":false},{"id":133317,"option":"Runtime error","correct":false}]},{"q":"<p>In Java, which of the following methods are declared by the <strong>Set </strong>interface:</p>\n\n<ol>\n\t<li>add()</li>\n\t<li>remove()</li>\n\t<li>delete()</li>\n\t<li>contains()</li>\n</ol>","a":[{"id":578174,"option":"1 and 2","correct":false},{"id":578175,"option":"1, 2, and 4","correct":true},{"id":578176,"option":"1, 3, and 4","correct":false},{"id":578177,"option":"1 and 4","correct":false}]}]
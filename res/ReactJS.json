[{"q":"<p>Mary is assigned the work of Page Routing for a ReactJS web app. She has to route if the user tries to access a page that does not exist then it should redirect to the home page. In this scenario, what should Mary replace on line 16 with the given options?<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>import React from \"react\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\n\nimport Menu from \"./Menu\";\nimport About from \"./About\";\nimport Contact from \"./Contact\";\nimport Services from \"./Services\";\n\nconst MyApp = () =&gt; {\n  return (\n    &lt;div&gt;\n      &lt;Menu /&gt;\n      &lt;Switch&gt;\n        &lt;Route exact path=\"/\" component={About}&gt;&lt;/Route&gt;\n        &lt;Route path=\"/contact\" component={Contact}&gt;&lt;/Route&gt;\n        &lt;Route path=\"/services\" component={Services}&gt;&lt;/Route&gt;\n        //Line 16\n      &lt;/Switch&gt;\n    &lt;div/&gt;\n  );\n};\n\nexport default MyApp;</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1</strong></p>\n\n<pre class=\"prettyprint\"><code>&lt;Route component={home}&gt;&lt;/Route&gt;</code></pre>\n\n<p><strong>2</strong></p>\n\n<pre class=\"prettyprint\"><code>&lt;Redirect to=\"/\" /&gt;</code></pre>\n\n<p><strong>3</strong></p>\n\n<pre class=\"prettyprint\"><code>&lt;Switch to=\"home\" /&gt;</code></pre>\n\n<p><strong>4</strong></p>\n\n<pre class=\"prettyprint\"><code>&lt;Route to=\"/\" /&gt;</code></pre>\n\n<p> </p>","a":[{"id":1642726,"option":"1","correct":false},{"id":1642727,"option":"2","correct":true},{"id":1642728,"option":"3","correct":false},{"id":1642729,"option":"4","correct":false}]},{"q":"<p>Ben was given a development build ReactJS web app and he was given the task to optimize before deployment. In this scenario, which of the option(s) should he choose from the following.</p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1</strong></p>\n\n<pre class=\"prettyprint\"><code>Using useMemo( )</code></pre>\n\n<p><strong>2</strong></p>\n\n<pre class=\"prettyprint\"><code>Using React.Pure.Component</code></pre>\n\n<p><strong>3</strong></p>\n\n<pre class=\"prettyprint\"><code>Using Hot Reload</code></pre>\n\n<p> </p>","a":[{"id":1642363,"option":"1","correct":true},{"id":1642364,"option":"2","correct":false},{"id":1642365,"option":"3","correct":false},{"id":1642366,"option":"All the Above","correct":false}]},{"q":"<p>Lisa is building a Checker component and she uses that component in the main file as shown below. She wants to perform additional checks on the application before deployment. In this scenario, for what cases can she use &lt;React.StrictMode&gt; to perform checks?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport Checker from \"./Checker\";\n\nconst parent = document.getElementById(\"root\");\nReactDOM.render(\n &lt;React.StrictMode&gt;\n   &lt;Checker/&gt;\n &lt;/React.StrictMode&gt;,\n parent\n);</code></pre>\n\n<p> </p>","a":[{"id":1642045,"option":"To warn about the usage of findDOMNode","correct":true},{"id":1642046,"option":"To identify components with safe lifecycle methods","correct":false},{"id":1642047,"option":"To use legacy string API","correct":false},{"id":1642048,"option":"All the above","correct":false}]},{"q":"<p>Anita wants to extract Components with Keys in ReactJS as shown in the following code. She has to complete the commented code on line 9 so she can return the component with data from the array. Then which of the following codes she should replace in order to complete the following component.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>import React from 'react';\n\nconst data = [11, 24, 39, 45, 56];\n\nfunction EachItem(props) {\n  return &lt;li&gt;{props.value}&lt;/li&gt;;\n}\n\nfunction NList(props) {\n  const data = props.data;\n  const listItems = //Line 9\n  return (\n    &lt;ul&gt;\n      {listItems}\n    &lt;/ul&gt;\n  );\n}\n\nReactDOM.render(\n  &lt;NList data={data} /&gt;,\n  document.getElementById('root')\n);</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>data.filter((dataN) =&gt; &lt;EachItem value={dataN} /&gt;</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>data.map((dataN) =&gt; &lt;EachItem key={dataN.toString()} value={dataN} /&gt;);</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>data.filter((dataN) =&gt; &lt;EachItem key={dataN.toString()} value={dataN} /&gt;);</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>data.map((dataN) =&gt; &lt;EachItem value={dataN} /&gt;</code></pre>\n\n<p> </p>","a":[{"id":1640287,"option":"1","correct":false},{"id":1640288,"option":"2","correct":true},{"id":1640289,"option":"3","correct":false},{"id":1640290,"option":"4","correct":false}]},{"q":"<p>Lisa is working on displaying feedbacks taken from different branches using Components in ReactJS. Which of the codes should be replaced on comment line 13 in the DisplayFeedback component?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Branch1, Branch2} from './branches';\n\nconst feedbacks= {\n  feedback1: Branch1,\n  feedback2: Branch2\n};\n\nfunction DisplayFeedback(props) {\n  //Line 13\n}</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>return &lt;feedbacks[props.branches.feedbackFrom] story={props.feedback} /&gt;;</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>const Feedback = feedbacks[props.feedbackFrom];\nreturn &lt;Feedback feedback={props.feedback} /&gt;;</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>const Feedback = feedbacks[props.branches.feedbackFrom];\nreturn &lt;Feedback feedback={props.feedback} /&gt;;</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>return &lt;feedbacks[props.feedbackFrom] story={props.feedback} /&gt;;</code></pre>\n\n<p> </p>","a":[{"id":1639497,"option":"1","correct":false},{"id":1639498,"option":"2","correct":true},{"id":1639499,"option":"3","correct":false},{"id":1639500,"option":"4","correct":false}]},{"q":"<p>Mary is given the task of creating a component that displays the revenue generated in ReactJS. She wrote the following code with JSX and has to compile the same component without using JSX. Which of the following codes are equivalent to the given code?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>class Calculate extends React.Component {\n  render() {\n    return &lt;div&gt;Today's Revenue{this.props.total}&lt;/div&gt;;\n  }\n}\n\nReactDOM.render(\n  &lt;Calculate total=\"$349\" /&gt;,\n  document.getElementById('root')\n);</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>class Calculate extends React.Component {\n  render() {\n    return React.createElement('div', null, `Today's Revenue ${this.props.total}`);\n  }\n}\n\nReactDOM.render(\n  React.createElement(Calculate, {total: '$349'}, null),\n  document.getElementById('root')\n);</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>class Calculate extends React.Component {\n  render() {\n    return React.createElement('div', null, `Today's Revenue ${this.props.total}`);\n  }\n}\n\nconst newE = React.createElement;\n\nReactDOM.render(\n  newE(Calculate, {total: '$349'}, number),\n  document.getElementById('root')\n);</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>class Calculate extends React.Component {\n  render() {\n    return React.createElement('div', '/div', `Today's Revenue ${this.props.total}`);\n  }\n}\n\nReactDOM.render(\n  React.createElement(Calculate, {total: '$349'}, null),\n  document.getElementById('root')\n);</code></pre>\n\n<p> </p>","a":[{"id":1639493,"option":"Only 1","correct":true},{"id":1639494,"option":"Only 2","correct":false},{"id":1639495,"option":"Only 3","correct":false},{"id":1639496,"option":"1 and 2","correct":false}]},{"q":"<p>John is working on displaying child elements received from parent elements using PropTypes in ReactJS. He wants to specify that only a single child can be passed to a component as children by type checking. In this scenario, what should John replace on line 4 with the given options?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>import PropTypes from 'prop-types';\n\nSingle.PropTypes = {\n  child: //Line 4\n};\n\nclass Single extends React.Component {\n  render() {\n    const child = this.props.child;\n    return (\n      &lt;div&gt;\n        {child}\n      &lt;/div&gt;\n    );\n  }\n}\n\nReactDOM.render( &lt;Single/&gt;,document.getElementById('disp'));\n</code></pre>\n\n<p><strong>Option</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>PropTypes.object.isRequired</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>PropTypes.element.isRequired</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>PropTypes.instance.isRequired</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>PropTypes.elementType.isRequired</code></pre>\n\n<p> </p>","a":[{"id":1639407,"option":"1","correct":false},{"id":1639408,"option":"2","correct":true},{"id":1639409,"option":"3","correct":false},{"id":1639410,"option":"4","correct":false}]},{"q":"<p>Bob has created the following class in ReactJS to print some data received through props. To handle this he has to define the PropTypes for class in order to parse the received data. Then in this scenario which of these following lines of code must be used to replace the commented line 5 in the code?<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>import React from 'react';\nimport { PropTypes } from 'prop-types';\n\nclass Printer extends React.Component {\n  Printer.propTypes = {\n    numbersData: //Line 5\n  };\n\n  render() {\n    const numbersData = this.props.numbersData.map(data=&gt; &lt;p&gt;{data}&lt;/p&gt;);\n    return (\n      &lt;div&gt;\n        &lt;li className=\"btn\"&gt;{numbersData}&lt;/li&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n\nexport default Printer;</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>PropTypes.instanceOf(PropTypes.data)</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>PropTypes.objectOf(PropTypes.data)</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>PropTypes.arrayOf(PropTypes.data)</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>PropTypes.anyOf(PropTypes.data)</code></pre>\n\n<p> </p>","a":[{"id":1639403,"option":"1","correct":false},{"id":1639404,"option":"2","correct":false},{"id":1639405,"option":"3","correct":true},{"id":1639406,"option":"4","correct":false}]},{"q":"<p>Paul has created a counter class with a state object and initialized it with a count of <em>0</em>. He wants to update the counter using the States in ReactJS. Then which of these following lines of code must be used to replace the commented line in the <em>handleCount</em> function.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>class Counter extends Component {\n  constructor() {\n      super();\n      this.state = {\n        counter: 0\n      }\n  }\n   \n  handleCount(value) {\n      //Code\n  }\n\n  state = { counter: 0 };\n   \n  render() {\n    &lt;h1&gt;Count: {this.state.counter}&lt;/h1&gt;\n  }\n   \n}</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>this.State.setState((previousState) =&gt; ({counter: previousState.counter + value}));</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>this.setState((previousState) =&gt; ({counter: previousState.counter + value}));</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>this.State.updateState((previousState) =&gt; ({counter: previousState.counter + value}));</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>this.updateState((previousState) =&gt; ({counter: previousState.counter + value}));</code></pre>\n\n<p> </p>","a":[{"id":1638841,"option":"1","correct":false},{"id":1638842,"option":"2","correct":true},{"id":1638843,"option":"3","correct":false},{"id":1638844,"option":"4","correct":false}]},{"q":"<p>Ben wants to attach event listeners to the existing markup in ReactJS. Therefore, he wants to render HTML contents by DOMServer as a container. Then in this scenario what function should he use?</p>","a":[{"id":1637778,"option":"ReactDOM.render()","correct":false},{"id":1637779,"option":"ReactDOM.hydrate()","correct":true},{"id":1637780,"option":"ReactDOM.createPortal()","correct":false},{"id":1637781,"option":"All the Above","correct":false}]},{"q":"<p>Among the following given scenarios where can you use Refs in ReactJS?</p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<p>To trigger imperative animations</p>\n\n<p><strong>2</strong>.</p>\n\n<p>To integrate third-party DOM libraries</p>\n\n<p><strong>3.</strong></p>\n\n<p>To change the value of a parent component from child</p>","a":[{"id":1637698,"option":"1 and 2","correct":true},{"id":1637699,"option":"2 and 3","correct":false},{"id":1637700,"option":"3 and 4","correct":false},{"id":1637701,"option":"All the Above","correct":false}]},{"q":"<p>John is working on creating a component to translate raw data into rich HTML in ReactJS. Since a state reduces predictability and increases the complexity. Whereas props are immutable as far as the Component receiving them is concerned. In this scenario, what should John use for his component?</p>","a":[{"id":1637706,"option":"Stateless Component","correct":false},{"id":1637707,"option":"Stateful Component ","correct":false},{"id":1637708,"option":"Props","correct":false},{"id":1637709,"option":"1 and 3","correct":true}]},{"q":"<p>Lisa is working on States in ReactJS. She has implemented in ES5 by using the following code. If she is required to implement in ES6, then which of the following codes are equivalent.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>var MyApp = React.createClass({\n\n    getInitialState: function() {\n\n        return { name: 'hacker' };\n\n    },\n\n    render: function() {\n\n        return &lt;h3&gt;Hey, {this.state.name}!&lt;/h3&gt;;\n\n    }\n\n});</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>class MyApp extends React.component {\n    constructor() {\n        this.state = { name: 'hacker' };\n    }\n    function render() {\n        return &lt;h3&gt;Hello, {this.state.name}!&lt;/h3&gt;;\n    }\n}</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>class MyApp extends React.Component {\n    constructor() {\n        super();\n        this.state = { name: 'hacker' };\n    }\n    render() function{\n        return &lt;h3&gt;Hello, {this.state.name}!&lt;/h3&gt;;\n    }\n}</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>class MyApp extends React.Component {\n    constructor() {\n        this.state = { name: 'hacker' };\n    }\n    render() {\n        return &lt;h3&gt;Hey, {this.state.name}!&lt;/h3&gt;;\n    }\n}</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>class MyApp extends React.Component {\n    constructor() {\n        super();\n        this.state = { name: 'hacker' };\n    }\n    render() {\n        return &lt;h3&gt;Hey, {this.state.name}!&lt;/h3&gt;;\n    }\n}</code></pre>\n\n<p> </p>","a":[{"id":1632533,"option":"1","correct":false},{"id":1632534,"option":"2","correct":false},{"id":1632535,"option":"3","correct":false},{"id":1632536,"option":"4","correct":true}]},{"q":"<p>Bob has created the following class in ReactJS to handle the submission of names through the form that is provided in the code. He has to complete the codes for handleChange() and handleSubmit() functions to submit the form successfully. Then which of these following lines of code must be used to replace the commented lines in the code.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>class NewUserCreation extends React.Component {\n\n  handleChange(e) {\n    //Code 1\n  }\n\n  handleSubmit(e) {\n    //Code 2\n    alert('Thank you ' + this.state.value);\n    // Code 3\n  }\n \n  render() {\n       return (        \n              &lt;form className=\"form-group\" onSubmit={this.handleSubmit}&gt;\n                &lt;label&gt; Full Name:\n                   &lt;input type=\"text\" className=\"form-control\" value={this.state.value}\n                          onChange={this.handleChange}/&gt;\n                &lt;/label&gt;\n                &lt;input className=\"btn btn-primary\" type=\"submit\" value=\"Submit\" /&gt;\n              &lt;/form&gt;\n       );\n  }\n}\n}</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p><strong>Line 1.</strong></p>\n\n<pre class=\"prettyprint\"><code>this.setState({value: e.target.value});</code></pre>\n\n<p><strong>Line 2.</strong></p>\n\n<pre class=\"prettyprint\"><code>e.preventDefault();</code></pre>\n\n<p><strong>Line 3.</strong></p>\n\n<pre class=\"prettyprint\"><code>this.submitState({value: e.target.value});</code></pre>\n\n<p><strong>Line 4:</strong></p>\n\n<pre class=\"prettyprint\"><code>None</code></pre>\n\n<p><strong>Replacement patterns</strong></p>\n\n<p><strong>1. </strong></p>\n\n<p>Code 1: Line 1<br>\nCode 2: Line 2<br>\nCode 2: Line 3</p>\n\n<p><strong>2.</strong></p>\n\n<p>Code 1: Line 2<br>\nCode 2: Line 3<br>\nCode 3: Line 4</p>\n\n<p><strong>3.</strong></p>\n\n<p>Code 1: Line 3<br>\nCode 2: Line 1<br>\nCode 3: Line 4</p>\n\n<p><strong>4.</strong></p>\n\n<p>Code 1: Line 1<br>\nCode 2: Line 4<br>\nCode 3: Line 2</p>","a":[{"id":1632557,"option":"1","correct":false},{"id":1632558,"option":"2","correct":false},{"id":1632559,"option":"3","correct":false},{"id":1632560,"option":"4","correct":true}]},{"q":"<p>Ben is working on updating States in ReactJS. He has implemented the following code without the update state function. Then which of the following code snippets should he replace at <em>OPTION</em><strong> </strong>on <em>line 11</em>.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>class UserC extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            name: 'Tara',\n            id: '2010'\n        }\n    }\n    render()\n        {\n            setTimeout(()=&gt;{ OPTION },1500)  //Line 11\n            return ( \n                     &lt;div&gt;\n                        &lt;h1&gt;Welcome {this.state.name}&lt;/h1&gt;\n                        &lt;h2&gt;Your are logged in with Id {this.state.id}&lt;/h2&gt;\n                     &lt;/div&gt; \n        );}\n}\nReactDOM.render( &lt;UserC/&gt;, document.getElementById('popup'));</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>this.updateState({name:'Mike', id:'1010'})</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>this.State.set({name:'Mike', id:'1010'})</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>this.State.update({name:'Mike', id:'1010'})</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>this.setState({name:'Mike', id:'1010'})</code></pre>\n\n<p> </p>","a":[{"id":1632545,"option":"1","correct":false},{"id":1632546,"option":"2","correct":false},{"id":1632547,"option":"3","correct":false},{"id":1632548,"option":"4","correct":true}]},{"q":"<p>John created a component to display scores but in ES5. Now, he wants to convert it into ES6 in ReactJS. Which of the following codes are equivalent in ES6 for the given code.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>var Score= React.createClass({\n    propTypes: { score: React.PropTypes.number},\n    render: function() {\n        return &lt;h3&gt;Your Score, {this.props.score}!&lt;/h3&gt;;\n    }\n});</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>class Score extends React.Component {\n    function render() {\n        return &lt;h3&gt;Your Score, {this.props.score}!&lt;/h3&gt;;\n    }\n}</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>class Score extends React.component {\n    render() function {\n        return &lt;h3&gt;Your Score, {props.score}!&lt;/h3&gt;;\n    }\n}</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>class Score extends React.Component {\n    render() {\n        return &lt;h3&gt;Your Score, {this.props.score}!&lt;/h3&gt;;\n    }\n}</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>class Score extends React.component {\n    render() {\n        return &lt;h3&gt;Your Score, {props.score}!&lt;/h3&gt;;\n    }\n}</code></pre>\n\n<p> </p>","a":[{"id":1632109,"option":"1","correct":false},{"id":1632110,"option":"2","correct":false},{"id":1632111,"option":"3","correct":true},{"id":1632112,"option":"4","correct":false}]},{"q":"<p>In ReactJS, if you want the following code to render a list of buttons, then which of the following will you replace the placeholder <em>OPTION</em> with?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>function App(){\n    const data = [\"Compile\", \"Run\", \"Stop\", \"Submit\"];\n\n    return (\n        &lt;div&gt;\n            OPTION\n        &lt;/div&gt;\n    )\n}\n\nReactDOM.render(&lt;App /&gt;, document.getElementById(\"root\"));\n</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>data.map((name)=&gt; (\n    &lt;button className=\"button\"&gt;{name}&lt;/button&gt;\n))};</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>\"data.map(name =&gt; (\n    &lt;button className=\"button\"&gt;${name}&lt;/button&gt;\n)}\";</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>data.map(name=&gt; (\n    &lt;button className=\"button\"&gt;${name}&lt;/button&gt;\n))};</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>\"data.map((name)=&gt; (\n    &lt;button className=\"button\"&gt;name&lt;/button&gt;\n))}\";</code></pre>\n\n<p> </p>","a":[{"id":1631488,"option":"1","correct":true},{"id":1631489,"option":"2","correct":false},{"id":1631490,"option":"3","correct":false},{"id":1631491,"option":"4","correct":false}]},{"q":"<p>Alice is working on converting all <em>ES5</em> components to<em> ES6</em> in <em>ReactJS</em>. Which of the following codes are equivalent in <em>ES6</em> for the given code.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>var hackerComponent = React.createClass({\n    render: function() {\n        return &lt;h3&gt;Hello Hacker!&lt;/h3&gt;;\n    }\n});</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>class hackerComponent extends React.component {\n    render() function{\n        return &lt;h3&gt;Hello Hacker!&lt;/h3&gt;;\n    }\n}</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>class HackerComponent extends React.component {\n    render() {\n        return &lt;h3&gt;Hello Hacker!&lt;/h3&gt;;\n    }\n}</code></pre>\n\n<p> </p>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>class hackerComponent extends React.Component {\n    render() {\n        return (&lt;h3&gt;Hello Hacker!&lt;/h3&gt;);\n    }\n}</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>class hackerComponent extends React.Component {\n    render() function{\n        return (&lt;h3&gt;Hello Hacker!&lt;/h3&gt;);\n    }\n}</code></pre>\n\n<p> </p>\n\n<p> </p>","a":[{"id":1631496,"option":"1","correct":false},{"id":1631497,"option":"2","correct":false},{"id":1631498,"option":"3","correct":true},{"id":1631499,"option":"4","correct":false}]},{"q":"<p>John is creating a user signup page for his online store. He is using <em>Refs</em><strong> </strong>to store the new names in‌ ‌<em>ReactJS</em>.‌ ‌Then which of the following codes should be replaced with <em>OPTION</em><strong> </strong>on line 8<strong>.</strong></p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>class displayRef extends React.Component{\n     show() {\n         const val = this.name.value;\n         document.getElementById('textMain').innerHTML = val;\n     }\n     render() {\n         return(        \n            &lt;div&gt;\n                Hacker: &lt;input type=\"text\" ref= OPTION /&gt;  //Line 9\n                &lt;button className=\"btn btn-blue\" name=\"final\" onClick={this.show}&gt; Submit&lt;/button&gt;            \n                &lt;h2&gt;Hey&lt;span id=\"textMain\"&gt;&lt;/span&gt; Hacker !!!&lt;/h2&gt;\n            &lt;/div&gt; );\n     }\n}</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>{name =&gt; this.name = name}</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>{function(name){\n this.name = name;\n}}</code></pre>\n\n<p> </p>","a":[{"id":1631492,"option":"1","correct":false},{"id":1631493,"option":"2 ","correct":false},{"id":1631494,"option":"All the above","correct":true},{"id":1631495,"option":"None of the mentioned","correct":false}]},{"q":"<p>You have finished with your coding part for the React App. Now, you want to implement 'getElementById()’ or ‘getElementByClass()’ method to modify the content of DOM (Document Object Model). Is the given code alongside the correct method to use getElementById() function?<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>document.getElementById('some-id').innerValue = 'updated value';</code></pre>\n\n<p> </p>","a":[{"id":1653213,"option":"No, the parameter should be a key rather than an id.","correct":false},{"id":1653214,"option":"No, instead of 'document' you should use 'render'.","correct":false},{"id":1653215,"option":"No, it has syntactic error.","correct":false},{"id":1653216,"option":"The code line is perfectly fine.","correct":true}]},{"q":"<p>You have made a React App. After making the App, you checked it in the browser in your localhost: 3000. Then, you went back to the React code in your Vscode and changed some code or may be added a new code. What will happen to the Virtual DOM after the changes? There are a few steps given alongside. Select the correct sequence of steps.</p>\n\n<p><strong>Steps</strong></p>\n\n<p>I.<br>\nThe difference between the previous DOM representation and the new one is calculated. </p>\n\n<p>II.<br>\nWhenever any underlying data changes, the entire UI is re-rendered in Virtual DOM representation. </p>\n\n<p>III.<br>\nOnce the calculations are done, the real DOM will be updated with only the things that have actually changed.</p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<p>I -&gt; II -&gt; III</p>\n\n<p><strong>2.</strong></p>\n\n<p>II -&gt; I -&gt; III</p>\n\n<p><strong>3.</strong></p>\n\n<p>II -&gt; III -&gt; I</p>\n\n<p><strong>4.</strong></p>\n\n<p>III -&gt; I -&gt; II</p>","a":[{"id":1653217,"option":"1","correct":false},{"id":1653218,"option":"2","correct":true},{"id":1653219,"option":"3","correct":false},{"id":1653220,"option":"4","correct":false}]},{"q":"<p>You have token authentication from a server. When your Redux App is loaded, you need to make a request to this server to check whether the user is authenticated or not. How can you dispatch an action before the app is rendered? What are the parameters that are missing in the last line of the code marked as A and B?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>class MyApp extends Component {\n componentDidMount() {\n this.props.fetchData()\n }\n\n render() {\n return this.props.isLoaded\n ? &lt;div&gt;{'Loaded'}&lt;/div&gt;\n : &lt;div&gt;{'Not Loaded'}&lt;/div&gt;\n }\n}\n\nconst mapStateToProps = (state) =&gt; ({\n isLoaded: state.isLoaded\n})\n\nconst mapDispatchToProps = { fetchData }\n\nexport default connect(A, B)(MyApp)</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>mapStateToProps, mapDispatchToProps</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>mapStateToProps, state</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>mapStateToProps, fetchData</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>fetchData, mapDispatchToProps</code></pre>\n\n<p> </p>","a":[{"id":1653225,"option":"1","correct":true},{"id":1653226,"option":"2","correct":false},{"id":1653227,"option":"3","correct":false},{"id":1653228,"option":"4","correct":false}]},{"q":"<p>You want to use react-redux functions which can compute the derived data, allowing Redux to store the minimal possible state, take Redux state as an argument and return some data to pass to the component. You want to get user details from the state. How will you use this function to get user details? What is the function known as?</p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>const getUserData = state =&gt; state.data\nThe function is known as selector.</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>const getUserData = state =&gt; state.user.data\nThe function is known as a connector.</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>Both A and B</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>const getUserData = state =&gt; state.user.data\nThe function is known as a selector.</code></pre>\n\n<p> </p>","a":[{"id":1653221,"option":"1","correct":false},{"id":1653222,"option":"2","correct":false},{"id":1653223,"option":"3","correct":false},{"id":1653224,"option":"4","correct":true}]},{"q":"<p>Suppose you are creating a React app. You want to compile it in the Babel. The code is given alongside the output code when compiled using Babel. What is this useful for? What is the output code's function here?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>Input code : let images = $(\"img\");\n\nfor (const img of images) {\n console.log(img);\n}\n\nconst copy = [...images]; Output code : import _maybeArrayLike from \"@babel/runtime/helpers/maybeArrayLike\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _createForOfIteratorHelper from \"@babel/runtime/helpers/createForOfIteratorHelper\";\nlet images = $(\"img\");\n\nvar _iterator = _createForOfIteratorHelper(images, true),\n _step;\n\ntry {\n for (_iterator.s(); !(_step = _iterator.n()).done;) {\n const img = _step.value;\n console.log(img);\n }\n} catch (err) {\n _iterator.e(err);\n} finally {\n _iterator.f();\n}\n\nconst copy = _maybeArrayLike(_toConsumableArray, images);</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<p>The output code is responsible for converting ECMAScript 2015+ code into a backward-compatible version of JavaScript in current and older browsers or environments. Here it is used to connect DOM collections in older browsers.</p>\n\n<p><strong>2.</strong></p>\n\n<p>The output code is responsible for converting ECMAScript 2015+ code into a backward-compatible version of JavaScript in current and newer browsers or environments. Here it is used to iterate DOM collections in newer browsers.</p>\n\n<p><strong>3.</strong></p>\n\n<p>The output code is responsible for converting ECMAScript 2015+ code into a backward-compatible version of Python in current and older browsers or environments. Here it is used to iterate DOM collections in older browsers.</p>\n\n<p><strong>4.</strong></p>\n\n<p>The output code is responsible for converting ECMAScript 2015+ code into a backward-compatible version of JavaScript in current and older browsers or environments. Here it is used to iterate DOM collections in older browsers.</p>","a":[{"id":1653209,"option":"1","correct":false},{"id":1653210,"option":"2","correct":false},{"id":1653211,"option":"3","correct":false},{"id":1653212,"option":"4","correct":true}]},{"q":"<p>You have written the following Babel code:</p>\n\n<pre class=\"prettyprint\"><code>// Babel Input: ES2015 arrow function\n[91, 27, 32].map(num =&gt; num + 1);</code></pre>\n\n<p>Convert it into an ES5 equivalent Babel output.</p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>// Babel Output: ES5 equivalent\n[91, 27, 32].map(function(num ) {\n return num + 1;\n});</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>// Babel Output: ES5 equivalent\n[91, 27, 32].map(function(num ) {\n return num ;\n});</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>// Babel Output: ES5 equivalent\n[91, 27, 32].map(function(num ) {\n return num + num ;\n});</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>// Babel Output: ES5 equivalent\n[91, 27, 32].response(function(num ) {\n return num + 1;\n});</code></pre>\n\n<p> </p>","a":[{"id":1653205,"option":"1","correct":true},{"id":1653206,"option":"2","correct":false},{"id":1653207,"option":"3","correct":false},{"id":1653208,"option":"4","correct":false}]},{"q":"<p>You are creating an app using React. You have written the code given alongside. You have designed a simple function. You have compiled the code using Babel. What is the output?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>function App() {\n  return &lt;div /&gt;;\n}</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>import { jsx as _jsx } from \"react/jsx-runtime\";\nfunction app() {\n  return _jsx(\"div\", ...);\n}</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>import { jsx as _jsx } from \"react/jsx-runtime\";\nfunction App() {\n  return _jsx(\"div\", ...);\n}</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>export { jsx as _jsx } from \"react/jsx-runtime\";\nfunction App() {\n  return _jsx(\"div\", ...);\n}</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>import { jsx as _jsx } from \"react/jsx-runtime\";\nfunction App()=&gt; {\n  return _jsx(\"div\", ...);\n}</code></pre>\n\n<p> </p>","a":[{"id":1653201,"option":"1","correct":false},{"id":1653202,"option":"2","correct":true},{"id":1653203,"option":"3","correct":false},{"id":1653204,"option":"4","correct":false}]},{"q":"<p>You have created a React App. Now, you want to loop inside your JSX elements. There are 3 code snippets given alongside for iterating through JSX. Choose the correct option regarding this problem.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>I.\n&lt;tbody&gt;\n {items.map(item =&gt; &lt;TableComponent key={item.id} name={item.name} /&gt;)}\n&lt;/tbody&gt;\n\nII. \n&lt;tbody&gt;\n for (let i = 0; i &lt; items.length; i++) {\n &lt;TableComponent key={items[i].id} name={items[i].name} /&gt;\n }\n&lt;/tbody&gt; \n\nIII. \n&lt;tbody&gt;\n while (i &lt; items.length) {\n &lt;TableComponent key={items[i].id} name={items[i].name} /&gt; i++;\n }\n&lt;/tbody&gt;</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>Only I</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>Only II</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>Both I and II</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>All I, II and III</code></pre>\n\n<p> </p>","a":[{"id":1653197,"option":"1","correct":true},{"id":1653198,"option":"2","correct":false},{"id":1653199,"option":"3","correct":false},{"id":1653200,"option":"4","correct":false}]},{"q":"<p>You have written the following code. On compiling the same, it gives an error. Pick out the correct code from the following options, that debugs the code given alongside.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>var Check=(props)=&gt;\n{\n return(\n &lt;div&gt;\n Check 1\n &lt;/div&gt;\n &lt;div&gt;\n Check 2\n &lt;/div&gt;\n );\n}\nReactDOM.render(&lt;Check /&gt;,mountNode</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>var Check =(props)=&gt;\n{\n return(\n &lt;div&gt;\n Check  1\n Check  2\n &lt;/div&gt;\n );\n}\nReactDOM.render(&lt;Check /&gt;,mountNode</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>var Check =(props)=&gt;\n{\n return(\n &lt;div&gt;\n&lt;p&gt; Check  1&lt;/p&gt;\n&lt;p&gt; Check  2&lt;/p&gt;\n &lt;/div&gt;\n );\n}\nReactDOM.render(&lt;Check /&gt;,mountNode)</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>var Helloword=(props)=&gt;\n{\n return(\n &lt;div&gt;\n hello world 1\n &lt;/div&gt;\n &lt;div&gt;\n Hello world 2\n &lt;/div&gt;\n );\n};\nReactDOM.render(&lt;Helloworld/&gt;,mountNode)</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>var Check =(props)=&gt;\n{\n return(\n &lt;div&gt;&lt;p&gt;\n Check  1\n Check  2\n &lt;/p&gt;&lt;/div&gt;\n );\n}\nReactDOM.render(&lt;Check /&gt;,mountNode)</code></pre>\n\n<p> </p>","a":[{"id":1653193,"option":"1","correct":false},{"id":1653194,"option":"2","correct":true},{"id":1653195,"option":"3","correct":false},{"id":1653196,"option":"4","correct":false}]},{"q":"<p>You have created a React App. Now, you want to ensure that there are no injection attacks (SQL injection).What will you do to ensure the same? How can you get rid of XSS (cross-site-scripting) attacks?</p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>var inp= response.maliciousInput;\nconst dis = &lt;h1&gt;{inp}&lt;/h1&gt;;</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>const inp = response.maliciousInput;\nconst dis = &lt;h1&gt;{inp}&lt;/h1&gt;;</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>const inp = connect.maliciousInput;\nconst dis = &lt;h1&gt;{inp}&lt;/h1&gt;;</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>const inp= render.maliciousInput;\nconst dis = &lt;h1&gt;{inp}&lt;/h1&gt;;</code></pre>\n\n<p> </p>","a":[{"id":1653189,"option":"1","correct":false},{"id":1653190,"option":"2","correct":true},{"id":1653191,"option":"3","correct":false},{"id":1653192,"option":"4","correct":false}]},{"q":"<p>You are working on a React app. The application you have developed contains three components: menu component, homepage component, and contact component. You want to enable navigation among view of the listed components. How will you enable navigation using React Router v4?</p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>import { withRouter } from 'react-router-dom' \n\nconst Button = withRouter(({ history }) =&gt; (\n &lt;button\n type='button'\n onClick={() =&gt; { history.push('/new-location') }}\n &gt;\n {'Start'}\n &lt;/button&gt;\n))</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>import { Route } from 'react-router-dom'\n\nconst Button = () =&gt; (\n &lt;Route render={({ history }) =&gt; (\n &lt;button\n type='button'\n onClick={() =&gt; { history.push('/new-location') }}\n &gt;\n {'Start'}\n &lt;/button&gt;\n )} /&gt;\n)</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>const Button = (props, context) =&gt; (\n &lt;button\n type='button'\n onClick={() =&gt; {\n context.history.push('/new-location')\n }}\n &gt;\n {'Start'}\n &lt;/button&gt;\n)\n\nButton.contextTypes = {\n history: React.PropTypes.shape({\n push: React.PropTypes.func.isRequired\n })\n}</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>All of the above can be used for navigation.</code></pre>\n\n<p> </p>","a":[{"id":1653185,"option":"1","correct":false},{"id":1653186,"option":"2","correct":false},{"id":1653187,"option":"3","correct":false},{"id":1653188,"option":"4","correct":true}]},{"q":"<p>You need to get history on React Router v4. For this, you created a module that exports a history object and imports this module across the project and names it history.js. You used the component instead of built-in routers and imported the above history.js inside index.js file. You also used push method of history object similar to built-in history object. The code snippet is given alongside. But, there is something missing from it. Choose from the options given and complete the code successfully.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>import { createBrowserHistory } from 'history'\n\nexport default createBrowserHistory({\n})\n//Code \nimport history from './history'\n\nhistory.push('/go-here')</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>import { Router } from 'react-router-dom'\nimport history from './history'\nimport Hacker from './Hacker '\n\nReactDOM.render((\n &lt;Router history={history}&gt;\n &lt;/Router&gt;\n), holder)</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>import history from './history'\nimport Hacker from './Hacker '\n\nReactDOM.render((\n &lt;Router history={history}&gt;\n &lt;Hacker /&gt;\n &lt;/Router&gt;\n), holder)</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>import { Router } from 'react-router-dom'\nimport history from './history'\nimport Hacker from './Hacker '\n\nReactDOM.render((\n &lt;Router history={history}&gt;\n &lt;Hacker /&gt;\n &lt;/Router&gt;\n), holder)</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>import { Router } from 'react-router-dom'\nimport history from './history'\nimport Hacker from './Hacker '\n\nReactDOM.connect((\n &lt;Router history={history}&gt;\n &lt;Hacker /&gt;\n &lt;/Router&gt;\n), holder)</code></pre>\n\n<p> </p>","a":[{"id":1653181,"option":"1","correct":false},{"id":1653182,"option":"2","correct":false},{"id":1653183,"option":"3","correct":true},{"id":1653184,"option":"4","correct":false}]},{"q":"<p>Consider the code snippet given alongside. When you run it, it will display \"Router may have only one child element\" warning. What should you do in order to run the code properly? What changes can be made?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>&lt;Router&gt;\n &lt;Route exact path=\"/\" component={Home} /&gt;\n &lt;Route path=\"/user\" component={User} /&gt; &lt;Route component={NotFound} /&gt; \n&lt;/Router&gt;</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>import { Switch, Router, Route } from 'react-router' &lt;Router&gt;\n &lt;Route&gt;\n &lt;Route {/* ... */} /&gt;\n &lt;Route {/* ... */} /&gt;\n &lt;/Route&gt;\n&lt;/Router&gt;</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>import { Switch, Router, Route } from 'react-router'\n&lt;Router&gt;\n &lt;Switch&gt;\n &lt;Route {/* ... */} /&gt;\n &lt;Route {/* ... */} /&gt;\n &lt;/Switch&gt;\n&lt;/Router&gt;</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>import { Switch, Router, Route } from 'react-router'\n&lt;Router&gt;\n &lt;Switch&gt;\n &lt;Route {/* ... */} /&gt;\n &lt;Route {/* ... */} /&gt;\n &lt;/Switch&gt;\n&lt;/Router&gt;</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>import {Router, Route} from 'react-router' &lt;Router&gt;\n &lt;Switch&gt;\n &lt;Route {/* ... */} /&gt;\n &lt;Route {/* ... */} /&gt;\n &lt;/Switch&gt;\n&lt;/Router&gt;</code></pre>\n\n<p> </p>","a":[{"id":1653177,"option":"1","correct":false},{"id":1653178,"option":"2","correct":false},{"id":1653179,"option":"3","correct":true},{"id":1653180,"option":"4","correct":false}]},{"q":"<p>You are creating a React App. After finishing the entire coding section you want to gain some insights about session duration, pages per session, bounce rate, etc. of individuals using the site, along with the information on the source of the traffic. You want to add Google Analytics for your React Router. Which of the following code sections will help you to add Google Analytics to your React Router?</p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>listen(function (location) {\n window.ga('set', 'page', location.pathname + location.search)\n window.ga('send', 'pageview', location.pathname + location.search)\n})</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>history.listen(function (location) {\n window.ga('set', 'page', location.pathname + location.search)\n window.ga('send', 'pageview', location.pathname + location.search)\n})</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>history.listen(function () {\n window.ga('set', 'page', location.pathname + location.search)\n window.ga('send', 'pageview', location.pathname + location.search)\n})</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>history.listen((location) {\n window.ga('set', 'page', location.pathname + location.search)\n window.ga('send', 'pageview', location.pathname + location.search)\n})</code></pre>\n\n<p> </p>","a":[{"id":1653173,"option":"1","correct":false},{"id":1653174,"option":"2","correct":true},{"id":1653175,"option":"3","correct":false},{"id":1653176,"option":"4","correct":false}]},{"q":"<p>With the help of useEffect and useState hooks in your react app, you have written the code given alongside. But, there is a small chunk of code that is missing. In the code, the useEffect fetches a list of React articles from the API. Select the correct option from the codes given to fill in the code snippet.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nfunction DataDisp() {\n const [data, setData] = useState({ hits: [] });\n setData(result.data);\n }, []);\n\n return (\n &lt;ul&gt;\n {data.hits.map(item =&gt; (\n &lt;li key={item.objectID}&gt;\n &lt;a href={item.url}&gt;{item.title}&lt;/a&gt;\n &lt;/li&gt;\n ))}\n &lt;/ul&gt;\n );\n}\n\nexport default DataDisp;</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>useEffect(async () =&gt; {\n const result = await axios(\n 'http://api.hackerearth.com/api/v1/search?query=react',\n );\n\n setData(result.data);\n }, []);</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>useEffect(await () =&gt; {\n const result = await axios(\n 'http://api.hackerearth.com/api/v1/search?query=react',\n );\n\n setData(result.data);\n }, []);</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>useEffect(async () =&gt; {\n const result = async axios(\n 'http://api.hackerearth.com/api/v1/search?query=react',\n );\n\n setData(result.data);\n }, []);</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>useState(async () =&gt; {\n const result = await axios(\n 'http://api.hackerearth.com/api/v1/search?query=react',\n );\n\n setData(result.data);\n }, []);</code></pre>\n\n<p> </p>","a":[{"id":1653169,"option":"1","correct":true},{"id":1653170,"option":"2","correct":false},{"id":1653171,"option":"3","correct":false},{"id":1653172,"option":"4","correct":false}]},{"q":"<p>You have written the code given alongside. What kind of approach have you used in the following code? What is the output of the code?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>import React, { useState } from 'react';\n\nfunction Counter() {\n const [count, setCount] = useState(0);\n\n return (\n &lt;div&gt;\n &lt;p&gt;Current count is: {count} &lt;/p&gt;\n &lt;button onClick={() =&gt; setCount(count + 1)}&gt;+&lt;/button&gt;\n &lt;/div&gt;\n );\n}</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<p>Here we have used useState hook, wherein we have created the setCount variable which will be incremented each time we click the '+' button.</p>\n\n<p><strong>2.</strong></p>\n\n<p>Here we have used useState hook, wherein we have created a new state variable-setCount which will be incremented every time we click the '+' button.</p>\n\n<p><strong>3.</strong></p>\n\n<p>Here we have used useState hook, wherein we have created a new state variable-count which will be incremented every time we click the '+' button.</p>\n\n<p><strong>4.</strong></p>\n\n<p>This code will result in an error.</p>","a":[{"id":1653165,"option":"1","correct":false},{"id":1653166,"option":"2","correct":false},{"id":1653167,"option":"3","correct":true},{"id":1653168,"option":"4","correct":false}]},{"q":"<p>You are creating a React app. You have written the code given alongside for the same. But, your colleague, on seeing the code, does not understand why the '0' have been passed to useState hook. Explain to your colleague the use of useState(0) hook by choosing from the options given.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>...\nconst [count, setCounter] = useState(0);\nconst [moreStuff, setMoreStuff] = useState(...);\n...\n\nconst setCount = () =&gt; {\n setCounter(count + 1);\n setMoreStuff(...);\n ...\n};</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<p>useState is one of build-in react hooks. useState(0) returns a 0 where the first parameter count is the current state of the counter and setCounter is the method that will allow us to update the counter's state.</p>\n\n<p><strong>2.</strong></p>\n\n<p>useState is one of build-in react functions. useState(0) returns a tuple where the first parameter count is the current state of the counter and setCounter is the method that will allow us to update the counter's state.</p>\n\n<p><strong>3.</strong></p>\n\n<p>useState is one of build-in react hooks. useState(0) returns a tuple where the first parameter count is the current state of the counter and setCounter is the method that will allow us to update the counter's state.</p>\n\n<p><strong>4.</strong></p>\n\n<p>useState is one of user-made react hooks. useState(0) returns a tuple where the first parameter count is the current state of the counter and setCounter is the method that will allow us to update the counter's state.</p>","a":[{"id":1653161,"option":"1","correct":false},{"id":1653162,"option":"2","correct":false},{"id":1653163,"option":"3","correct":true},{"id":1653164,"option":"4","correct":false}]},{"q":"<p>You have created a React App. The code written by you has been given alongside. Now, you find that the code has some errors. Choose the option which correctly points out the error in the code.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>import React from 'react';\nclass SearchComponent extends React.Component {\n constructor(props) {\n this.txt = null;\n this.state = { term: '' };\n this.setInputRef = e =&gt; {\n this.txt = e;\n }\n }\n onInputChange(event) {\n this.setState({ term: this.txt.value });\n }\n render() {\n return (\n &lt;input\n value={this.state.term}\n onChange={this.onInputChange.bind(this)}\n ref={this.setInputRef} /&gt;\n );\n }\n}</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>Add super(props); in the third line.</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>Add super(); in the third line.</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>Add super(props); in the onInputChange() function.</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>Add super(); in the onInputChange() function.</code></pre>\n\n<p> </p>","a":[{"id":1653157,"option":"1","correct":true},{"id":1653158,"option":"2","correct":false},{"id":1653159,"option":"3","correct":false},{"id":1653160,"option":"4","correct":false}]},{"q":"<p>You are creating a React App. You are using render method. You implement arrow functions in render method. The code snippet written by you is given alongside. In the next step, you check its working via browser. Can you use arrow functions with render methods? Choose from the given options.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>class Disp extends Component {\n handleClick() {\n console.log('You Clicked');\n }\n render() {\n return &lt;button onClick={() =&gt; this.handleClick()}&gt;Click this&lt;/button&gt;;\n }\n}</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<p>It will give an error</p>\n\n<p><strong>2.</strong></p>\n\n<p>Yes, we can use it, but it will not work</p>\n\n<p><strong>3.</strong></p>\n\n<p>Yes, we can totally use them</p>\n\n<p><strong>4.</strong></p>\n\n<p>No its is not recommended</p>","a":[{"id":1653153,"option":"1","correct":false},{"id":1653154,"option":"2","correct":false},{"id":1653155,"option":"3","correct":true},{"id":1653156,"option":"4","correct":false}]},{"q":"<p>You are creating a React App. You want to remove a mounted React component and clean up its event handlers and state. What kind of a function would you use for this? What will be the parameter of the function?</p>\n\n<pre class=\"prettyprint\"><code>Function(parameter)</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>componentWillUnmount (container)</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>unmountComponentAtNode(container)</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>unmountComponentAtNode(true)</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>unmountComponentAtNode(false)</code></pre>\n\n<p> </p>","a":[{"id":1653149,"option":"1","correct":false},{"id":1653150,"option":"2","correct":true},{"id":1653151,"option":"3","correct":false},{"id":1653152,"option":"4","correct":false}]},{"q":"<p>You have created a React App. Then, you see it in your browser to check if it is working properly. In this step, you find that a descendant component is throwing an error. Now, you have not written any code for catching the exception. You use the componentDidCatch() function to control the error. What would you write in the missing parameters of the following code in order to catch the exception?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>componentDidCatch(A, B)</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<p>error, render()</p>\n\n<p><strong>2.</strong></p>\n\n<p>error, info</p>\n\n<p><strong>3.</strong></p>\n\n<p>Both options A and B can be passed as parameters.</p>\n\n<p><strong>4.</strong></p>\n\n<p>error, define()</p>","a":[{"id":1653145,"option":"1","correct":false},{"id":1653146,"option":"2","correct":true},{"id":1653147,"option":"3","correct":false},{"id":1653148,"option":"4","correct":false}]},{"q":"<p>You have created a React App. The user logs in to it. Now you want the app to make sure that the user remains authenticated on page refresh while using Context API State management. How would you make sure to keep the user logged in after the page refresh? Select the option which elucidates the correct sequence of steps.</p>\n\n<p><strong>Steps</strong></p>\n\n<pre class=\"prettyprint\"><code>I. \nWhile using Context API, to access context in App.js, wrap the AuthState in index.js so that App.js can access the auth context. Now whenever the page reloads, no matter what route you are on, the user will be authenticated as loadUser action will be triggered on each re-render. index.js : \n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport MDiv from './MDiv';\nimport AuthState from './context/auth/AuthState'\n\nReactDOM.render(\n &lt;React.StrictMode&gt;\n &lt;AuthState&gt;\n &lt;MDiv /&gt;\n &lt;/AuthState&gt;\n &lt;/React.StrictMode&gt;,\n document.getElementById('root')\n);\n\nII. \nWhile using Redux, loadUser action can be easily accessed. MDiv.js :\n\nimport {loadUser} from '../actions/auth';\nstore.dispatch(loadUser());\n\nIII. \nNow update the MDiv.js again using :\n \n const authC = useContext(AuthContext);\n const { loadUser } = authC;\n useEffect(() =&gt; {\n loadUser();\n },[]) \n\nIV. \nloadUser action:\n const loadUser = async () =&gt; {\n const token = sessionStorage.getItem('token');\n if(!token){\n dispatch({\n type: ERROR\n })\n }\n setAuthToken(token);\n try {\n const res = await axios('/api/auth'); \n\n dispatch({\n type: USER_LOADED,\n payload: res.data.data\n }) \n } catch (err) {\n console.error(err); \n }\n }\n</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>I. II. III. IV.</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>II. I. IV. III.</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>II. I. III. IV.</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>II. III. I. IV.</code></pre>\n\n<p> </p>","a":[{"id":1653141,"option":"1","correct":false},{"id":1653142,"option":"2","correct":false},{"id":1653143,"option":"3","correct":true},{"id":1653144,"option":"4","correct":false}]},{"q":"<p>You are creating an app in React. The code that you write for this purpose is given alongside. When you go to the browser to check if there are any errors, you find that it throws two errors. Determine the two errors in the given code?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>class MyApp extends React.Component {\n constructor(props) { super(props);\n this.state () {\n clicks: 0\n };\n }\n componentDidMount() {\n this.refs.MyApp.addEventListener('click', this.clickHandler);\n }\n componentWillUnmount() {\n this.refs.MyApp.removeEventListener('click', this.clickHandler);\n }\n clickHandler() {\n this.setState({\n clicks: this.clicks + 1\n });\n }\n render() {\n let children = this.props.children;\n return (\n &lt;div className=\"my-app\" ref=\"MyAppDiv\"&gt;\n &lt;h2&gt;My App  ({this.state.clicks} clicks})&lt;/h2&gt;\n &lt;h3&gt;{this.props.headerText}&lt;/h3&gt;\n {children}\n &lt;/div&gt;\n );\n }\n}</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>Intstead of this.state () \nuse this.state \nIn the fourth line \nadd this.clickHandler = this.clickHandler.bind();</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>Intstead of this.state () \nuse this.state \nIn the fourth line \nadd clickHandler = this.clickHandler.bind(this);</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>Intstead of this.state () \nuse this.state \nIn the fourth line \nadd this.clickHandler = this.clickHandler.bind(this);</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>Intstead of this.state () \nuse this.state (params) \nIn the fourth line \nadd this.clickHandler = this.clickHandler.bind();</code></pre>\n\n<p> </p>","a":[{"id":1653137,"option":"1","correct":false},{"id":1653138,"option":"2","correct":false},{"id":1653139,"option":"3","correct":true},{"id":1653140,"option":"4","correct":false}]},{"q":"<p>You have created a React App for Facebook users which stores their posts and comments. Each time they post something new or receive a new comment on their post, you need to update it. You have taken posts and comments as state variables. Fill in the line marked as a comment in bold in the code snippet given alongside, where you have to update the code separately.</p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>Code 1 this.state({\n posts: response.posts \n\nCode 2\n this.state({\n comments: response.comments\n\n</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>Code 1\nsetState({\n posts: response.posts \n\nCode 2\nsetState({\n comments: response.comments\n\n\n\n</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>Code 1\n this.setState({\n posts: response.posts \n\nCode 2\n this.setState({\n comments: response.comments\n\n</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>Code 1\n this.setState({\n posts: click.posts\n \nCode 2 \nthis.setState({\n comments: click.comments\n\n\n</code></pre>\n\n<p> </p>","a":[{"id":1653133,"option":"1","correct":false},{"id":1653134,"option":"2","correct":false},{"id":1653135,"option":"3","correct":true},{"id":1653136,"option":"4","correct":false}]},{"q":"<p>You have created a user profile section in your React app. You want to prevent unnecessary \"address\" updates of the user. You used setState() function for that. Which of the following code snippets is correct in this scenario?</p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>getUser = user =&gt; {\n const newAddress = user.address;\n this.setState(state =&gt; {\n if (state.address === newAddress) {\n return null;\n } else {\n return { title: user.Address };\n }\n });\n};</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>getUser = user =&gt; {\n const newAddress = user.address;\n this.setState(state =&gt; {\n if (state.address === newAddress) {\n return null;\n } else {\n return { title: newAddress };\n }\n });\n};</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>getUser = user =&gt; {\n const newAddress = user.address;\n this.setState(state =&gt; {\n if (state.address == newAddress) {\n return null;\n } else {\n return { title: newAddress };\n }\n });\n};</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>getUser = user =&gt; {\n const newAddress = user.address;\n this.setState(state =&gt; {\n if (state.address === newAddress) {\n return null;\n } else {\n return 0;\n }\n });\n};</code></pre>\n\n<p> </p>","a":[{"id":1653129,"option":"1","correct":false},{"id":1653130,"option":"2","correct":true},{"id":1653131,"option":"3","correct":false},{"id":1653132,"option":"4","correct":false}]},{"q":"<p>You have created an array using React in your app. You see that an element is to be deleted/removed from the array. Which of the following approaches is recommended for the removal of the array element?</p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>removeItem(n) {\n this.setState({\n data: this.state.data.map((item) =&gt; i !== n)\n })\n}</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>removeItem(n) {\n this.setState({\n data: this.state.data.map((item, i) =&gt; i !== n)\n })\n}</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>removeItem(n) {\n this.setState({\n data: this.data.filter((item, i) =&gt; i !== n)\n })\n}</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>removeItem(n) {\n this.setState({\n data: this.state.data.filter((item, i) =&gt; i !== n)\n })\n}</code></pre>\n\n<p> </p>","a":[{"id":1653125,"option":"1","correct":false},{"id":1653126,"option":"2","correct":false},{"id":1653127,"option":"3","correct":false},{"id":1653128,"option":"4","correct":true}]},{"q":"<p>You are creating a React App. You want to add a prop that helps identify which items have changed, are added, or removed. You can use it in two ways, the first one being the ID usage from our data as key:</p>\n\n<pre class=\"prettyprint\"><code>const contactItems = contacts.map((contact) =&gt;{contact.email}</code></pre>\n\n<p>What is the other approach for writing key props?</p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<p>You can use index as a key when you don't have ID's for rendered items.</p>\n\n<p><strong>2.</strong></p>\n\n<p>You can use index as a key when you don't have stable ID's for rendered items.</p>\n\n<p><strong>3.</strong></p>\n\n<p>You can use key when you don't have ID's present.</p>\n\n<p><strong>4.</strong></p>\n\n<p>You can use key when you don't have stable ID's for rendered items.</p>","a":[{"id":1653121,"option":"1","correct":false},{"id":1653122,"option":"2","correct":true},{"id":1653123,"option":"3","correct":false},{"id":1653124,"option":"4","correct":false}]},{"q":"<p>Consider the code snippet given alongside. The third line will throw an error because of a missing argument. In regular stateful components you access the children using this.props.children. What should be used here? What should be used here? What should be changed/added in the above code to make it work?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>const DispComponent= ({link}) =&gt; (\n &lt;div&gt;\n &lt;a href={link}&gt;{children}&lt;/a&gt; \n &lt;/div&gt;\n);\n\n&lt;DispComponent url=\"http://www.hackerearth.com\"&gt;Hackerearth&lt;/PureComponent&gt;\n\n&lt;a href=\"http://www.hackerearth.com\"&gt;Hackerearth&lt;/a&gt;</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>const DispComponent = ({link, children}) =&gt; (...) \nwhere \"children\" should be added with link in the argument section.</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>{link}&gt;{link} should be added in the third line.</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>{props.children} should be added in the third line after {link}</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>{props.link} should be added in the third line.</code></pre>\n\n<p> </p>","a":[{"id":1653117,"option":"1","correct":true},{"id":1653118,"option":"2","correct":false},{"id":1653119,"option":"3","correct":false},{"id":1653120,"option":"4","correct":false}]},{"q":"<p>Consider the two code snippets given alongside. Both of them are giving errors due to one reason or the other. You have been appointed the task of finding out the kind of error in the two codes so that may be corrected afterward.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>I. \nrender() {\n const ComponentE = enhance(MyComponent);\n return &lt;ComponentE /&gt;;\n} \n\nII. \nComponentWrapped.staticMethod = function() {/*other code*/}\n\nconst ComponentE = enhance(ComponentWrapped);\n\ntypeof ComponentE.staticMethod === 'undefined' </code></pre>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>I. It is not recommended to apply a HOC to a component within the render method of a component.\n\nII. When you apply a HOC to a component the new component does not have any of the static methods of the original component.</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>I. This is because ref is not really a prop similar to key. In this case you need to use the React.forwardRef API.\n\nII. When you apply a HOC to a component the new component does not have any of the static methods of the original component .</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>I. It is not recommended to apply a HOC to a component within the render method of a component. \n\nII. This is because ref is not really a prop similar to key. In this case you need to use the React.forwardRef API.</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>I. This is because ref is not really a prop similar to key. In this case you need to use the React.forwardRef API. \n\nII. It is not recommended to apply a HOC to a component within the render method of a component.</code></pre>\n\n<p> </p>","a":[{"id":1653113,"option":"1","correct":true},{"id":1653114,"option":"2","correct":false},{"id":1653115,"option":"3","correct":false},{"id":1653116,"option":"4","correct":false}]},{"q":"<p>While creating your React App, you have written exactly the same code as given alongside. But, soon you realize that it gives an error. Identify the kind of error. Select the code in the options that would debug the error.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>render() {\n return &lt;button className=\"btn\" onClick={this.handleClick()}&gt;{'Submit Info'}&lt;/button&gt;\n}</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>render() {\n return &lt;button className=\"btn\" onClick={this.handleClick}&gt;${Submit Info}&lt;/button&gt;\n}</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>render() {\n return &lt;button className=\"btn\" onClick={handleClick()}&gt;{'Submit Info'}\n}</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>render() {\n return &lt;button className=\"btn\" onClick={this.handleClick}&gt;{'Submit Info'}&lt;/button&gt;\n}</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>render() {\n return className=\"btn\" onClick={this.handleClick}${'Submit Info'}\n}</code></pre>\n\n<p> </p>","a":[{"id":1653109,"option":"1","correct":false},{"id":1653110,"option":"2","correct":false},{"id":1653111,"option":"3","correct":true},{"id":1653112,"option":"4","correct":false}]},{"q":"<p>You need to add a web component to your React app. You use vaadin data picker web component. You have written the entire code. Now, you want to label it as \"When did you join?\". Select the appropriate code to insert in the comment.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>import React from 'react';\nimport './Style.css';\nimport '@vaadin/vaadin-date-picker';\nclass Joiner extends React.Component {\n render() {\n return (\n &lt;div className=\"Disp\"&gt;\n //code\n &lt;/div&gt;\n );\n }\n}\nexport default Joiner;</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>&lt;vaadin label=\"When did you join?\"&gt;&lt;/vaadin&gt;</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>&lt;vaadin-date-picker label=\"When did you join?\"&gt;&lt;/vaadin-date-picker&gt;</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>&lt;vaadin-date-picker name=\"When did you join?\"&gt;&lt;/vaadin-date-picker&gt;</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>&lt;vaadin-date-picker key=\"When did you join?\"&gt;&lt;/vaadin-date-picker&gt;</code></pre>\n\n<p> </p>","a":[{"id":1653105,"option":"1","correct":false},{"id":1653106,"option":"2","correct":true},{"id":1653107,"option":"3","correct":false},{"id":1653108,"option":"4","correct":false}]},{"q":"<p>Paul is working on displaying the receipts for his company. He is type-checking using the PropTypes in ReactJS. He has implemented the following code where he has to apply validation through defining the propTypes. Then which of these following lines of code must be used to replace the commented lines in the code.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass UserDetails extends React.Component {\n  static propTypes = {\n    name: //comment 1,\n    id: //comment 2,\n    isPaid: //comment 3,\n    amount: PropTypes.number.isRequired\n  }\n\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;h1&gt;{`Hello, ${this.props.name}`}&lt;/h1&gt;\n        &lt;h2&gt;{`Transaction ID, ${this.props.id}`}&lt;/h2&gt;\n        &lt;h3&gt;{`You Paid ${this.props.amount}`}&lt;/h3&gt;\n      &lt;div/&gt;\n    )\n  }\n}\n</code></pre>\n\n<p><strong>Code 1.</strong></p>\n\n<pre class=\"prettyprint\"><code>PropTypes.string.isRequired</code></pre>\n\n<p><strong>Code 2.</strong></p>\n\n<pre class=\"prettyprint\"><code>PropTypes.number.isRequired</code></pre>\n\n<p><strong>Code 3.</strong></p>\n\n<pre class=\"prettyprint\"><code>PropTypes.bool.isRequired</code></pre>\n\n<p><strong>Replacement patterns</strong></p>\n\n<p><strong>1. </strong></p>\n\n<p>Comment 1: Code 1</p>\n\n<p>Comment 2: Code 2</p>\n\n<p>Comment 3: Code 3</p>\n\n<p><strong>2.</strong></p>\n\n<p>Comment 1: Code 2</p>\n\n<p>Comment 2: Code 3</p>\n\n<p>Comment 3: Code 1</p>\n\n<p><strong>3.</strong></p>\n\n<p>Comment 1: Code 3</p>\n\n<p>Comment 2: Code 1</p>\n\n<p>Comment 3: Code 2</p>","a":[{"id":1633270,"option":"1","correct":true},{"id":1633271,"option":"2","correct":false},{"id":1633272,"option":"3","correct":false},{"id":1633273,"option":"None of the above","correct":false}]},{"q":"<p>In ReactJS, you are working on the components and props. If you have implemented the following code, then which of the following statements about this code are correct:</p>\n\n<pre class=\"prettyprint\"><code>function Welcome(props) {\n  return &lt;h1&gt;Hello, {props.name}&lt;/h1&gt;;\n}\n\nconst element = &lt;Welcome name=\"HackerEarth\" /&gt;;\nReactDOM.render(\n  element,\n  document.getElementById('root')\n);</code></pre>\n\n<ol>\n\t<li><code>The method ReactDOM.render()</code> is called with the <code>&lt;Welcome name=\"HackerEarth\" /&gt;</code> element.</li>\n\t<li>React calls the <code>Welcome</code> component with <code>{name: 'HackerEarth'}</code> as the stateless components.</li>\n\t<li><code>The Welcome</code> component returns a <code>&lt;h1&gt;Hello, HackerEarth&lt;/h1&gt;</code> element as the result.</li>\n</ol>","a":[{"id":388049,"option":"1 and 2","correct":false},{"id":388050,"option":"2 and 3","correct":false},{"id":388051,"option":"1 and 3","correct":true},{"id":396562,"option":"None of these","correct":false}]},{"q":"<p>What step will you take in the following scenario if the deriving state might lead to a verbose code?</p>\n\n<p><em>Scenario</em>:</p>\n\n<p>You have to implement a requirement by using the getDerivedStateFromProps() method where you have to reset a state when a prop changes.</p>","a":[{"id":738081,"option":"Make the component fully controlled or fully uncontrolled with a key","correct":true},{"id":738082,"option":"Use componentDidUpdate lifecycle","correct":false},{"id":738083,"option":"Use a memoization helper ","correct":false},{"id":738084,"option":"Make the child components to re-render","correct":false}]},{"q":"<p>Which of the following code must be included in the production configuration to make an efficient web pack production build?</p>","a":[{"id":738125,"option":"new webpack.DefinePlugin({\r\n  'process.env.NODE_ENV': JSON.stringify('production')\r\n}),\r\nnew webpack.optimize.EnvifyPlugin()","correct":false},{"id":738126,"option":"new webpack.DefinePlugin({\r\n  'process.env.NODE_ENV': JSON.stringify('production')\r\n}),\r\nnew webpack.optimize.UglifyJsPlugin()","correct":true},{"id":738127,"option":" module.exports = merge(common, {\r\n    mode: 'production',\r\n   devtool: 'source-map'\r\n  });\r\n\r\nnew webpack.DefinePlugin({\r\n  'process.env.NODE_ENV': JSON.stringify('production')\r\n}),\r\nnew webpack.optimize.EnvifyPlugin()","correct":false},{"id":738128,"option":" module.exports = merge(common, {\r\n    mode: 'production',\r\n   devtool: 'source-map'\r\n  });\r\n\r\n\r\nnew webpack.DefinePlugin({\r\n  'process.env.NODE_ENV': JSON.stringify('production')\r\n}),\r\nnew webpack.optimize.UglifyJsPlugin()","correct":false}]},{"q":"<p>Which of these is the correct order of the following to ensure the optimal performance of Browserify?</p>\n\n<p>A. Envify<br>\nB. Uglify-js<br>\nC. Uglifyify</p>\n\n<p> </p>","a":[{"id":738129,"option":"A->B->C","correct":false},{"id":738130,"option":"C->B->A","correct":false},{"id":738131,"option":"B->C->A","correct":false},{"id":738132,"option":"A->C->B","correct":true}]},{"q":"<p>Assume that you are introducing the code-splitting technique in your app by using the dynamic import() syntax.<br>\nWhat will you do to make it compatible with Babel in ReactJS?</p>","a":[{"id":738137,"option":"You must ensure that Babel can parse the dynamic import syntax but not transform it. To do this you will need  babel-plugin-syntax-dynamic-import.","correct":true},{"id":738138,"option":"You must ensure that Babel can parse the dynamic import syntax and transform it. To do this you will need  babel-plugin-syntax-dynamic-import.","correct":false},{"id":738139,"option":"You must ensure that Babel can parse the dynamic import syntax but not transform it. To do this you will need  babel-plugin-transform-code-split.","correct":false},{"id":738140,"option":"You must ensure that Babel can parse the dynamic import syntax and transform it. To do this you will need  babel-plugin-transform-code-split.","correct":false}]},{"q":"<p>You find that your architecture needs you to mutate a component's prototype inside a higher order component.<br>\nHowever, doing so results in a ' leaky abstraction'.<br>\nWhich of the following reasons could be a valid reason for this behaviour?<br>\n<br>\nA: The HOC will have to use composition<br>\nB:The consumer must know how the HOC is implemented<br>\n </p>","a":[{"id":738069,"option":"Only A","correct":false},{"id":738070,"option":"Only B","correct":true},{"id":738071,"option":"Both A and B","correct":false},{"id":738072,"option":"Neither A nor B","correct":false}]},{"q":"<p>If you replace the following code with a call to the React.cloneElement() method in your implementation, then which of these statements are valid:</p>\n\n<pre class=\"prettyprint\"><code>&lt;element.type {...element.props} {...props}&gt;{children}&lt;/element.type&gt;</code></pre>\n\n<p> </p>","a":[{"id":738037,"option":"You will now be able to preserve ref of the child element.","correct":true},{"id":738038,"option":"You will now be able to preserve key of the child element.","correct":false},{"id":738039,"option":"You will now be able to preserve the options field of the child element.","correct":false},{"id":738040,"option":"You will now be able to deal with DOM shadowing and lift the state of an element in the component configuratively.","correct":false}]},{"q":"<p>In ReactJS, if the value is not specified by the parent component, which of the following is used so that its child component's props has a value?</p>","a":[{"id":388558,"option":"initialProps","correct":false},{"id":388559,"option":"propTypes","correct":false},{"id":388560,"option":"setProps","correct":false},{"id":388561,"option":"defaultProps","correct":true}]},{"q":"<p>Which of the following types of arguments can be specified in the createElement() method while working in React without JSX:</p>\n\n<ol>\n\t<li>Tag named string</li>\n\t<li>React component class</li>\n\t<li>React fragment</li>\n</ol>\n\n<p> </p>","a":[{"id":738097,"option":"1 and 2","correct":false},{"id":738098,"option":"1 and 3","correct":false},{"id":738099,"option":"2 and 3","correct":false},{"id":738100,"option":"All of these","correct":true}]},{"q":"<p>In ReactJS, which of the following is an appropriate way to render an element named Test in the root DOM node?</p>","a":[{"id":738101,"option":"ReactDOM.render(Test, document.getElementById('root'));","correct":true},{"id":738102,"option":"ReactDOM.render(Test, 'root');","correct":false},{"id":738103,"option":"ReactDOM.render.ElementByID('root')=>Element(Test);","correct":false},{"id":738104,"option":"ReactDOM.renderElement(Test).To('root');","correct":false}]},{"q":"<p>Which of the following tasks will you perform by using the React context API: </p>\n\n<ol>\n\t<li>When you want to avoid passing some props through many levels</li>\n\t<li>When you want data to be accessible to many components at different levels of nesting</li>\n</ol>","a":[{"id":738113,"option":"Only 1","correct":false},{"id":738114,"option":"Only 2","correct":true},{"id":738115,"option":"Both of these","correct":false},{"id":738116,"option":"None of these","correct":false}]},{"q":"<p>The following ReactJS code is written using JSX. Which of these options is an equivalent working code for this code which does not contain a JSX tag: </p>\n\n<pre class=\"prettyprint\"><code>class MyClass extends React.Component {\n  render() {\n    return &lt;div&gt;Can you see {this.props.stuff}&lt;/div&gt;;\n  }\n}\n</code></pre>\n\n<p> </p>","a":[{"id":738117,"option":"class MyClass extends React.Component {\r\n  render() {\r\n    return React.createChild('div', 'Can you see {this.props.stuff}`);\r\n  }\r\n}","correct":false},{"id":738118,"option":"class MyClass extends React.Component {\r\n  render() {\r\n    return createElement('div', 1, `Can you see ${this.props.stuff}`);\r\n  }\r\n}","correct":false},{"id":738119,"option":"class MyClass extends React.Component {\r\n  render() {\r\n    return React.createElement('div', null, `Can you see ${this.props.stuff}`);\r\n  }\r\n}","correct":true},{"id":738120,"option":"React cannot be written without JSX","correct":false}]},{"q":"<p>In ReactJS, you are trying to record the performance of components using the Chrome Performance tab. Also, you will be using tools to check how components mount, update, and unmount. Which of the following will you do before recording the performance of components?<br>\n<br>\n </p>","a":[{"id":738121,"option":"React DevTools are enabled","correct":false},{"id":738122,"option":"Chrome extensions are disabled","correct":true},{"id":738123,"option":"Both of these","correct":false},{"id":738124,"option":"None of these","correct":false}]},{"q":"<p>Which of these is the most optimal way to render multiple elements from the render function of a react component in React 16 assuming that the elements that are referenced belong to its adjacent JSX element?<br>\n </p>","a":[{"id":738041,"option":"Wrap elements in a wrapper","correct":false},{"id":738042,"option":"Pass the elements in an array of elements to the render function","correct":false},{"id":738043,"option":"Use fragments","correct":true},{"id":738044,"option":"Use HoC","correct":false}]},{"q":"<p>If a component in ReactJS uses a state that has two snippets of code as follows, then which of these may cause issues in the architecture:</p>\n\n<pre class=\"prettyprint\"><code>A. &lt;h1&gt;It is {this.state.date.toLocaleTimeString()}.&lt;/h1&gt;\nB. &lt;MyStuff thing={this.state.thing} /&gt;</code></pre>\n\n<p> </p>","a":[{"id":738045,"option":"None of these will cause an issue.","correct":true},{"id":738046,"option":"B will cause an issue because user-defined components will have their own state.","correct":false},{"id":738047,"option":"A will cause an issue because the state can be modified in the child with unpredictable consequences.","correct":false},{"id":738048,"option":"Both of these can cause an issue because the state may be cascaded and will lead to unpredictable re-rendering.","correct":false}]},{"q":"<p>You are writing a custom-lint rules enforcer that enforces rules of hooks to avoid bugs.</p>\n\n<p>Your enforcer assumes that any function whose name starts with ”use” and an upper-case letter right after it is a hook.</p>\n\n<p>Which of the following rules must your enforcer enforce in ReactJS?<br>\n<br>\nA. Hooks can be inside the camelCase function or another hook.<br>\nB. The calling order of hooks must not change for each render.</p>","a":[{"id":738061,"option":"Only A","correct":false},{"id":738062,"option":"Only B","correct":true},{"id":738063,"option":"Both of these","correct":false},{"id":738064,"option":"None of these","correct":false}]},{"q":"<p>What is the best alternative for the following scenario:</p>\n\n<p>You are using useState in order to put all the state values into a single object. You find that automatic merging is not available, hence you have to update the state values by merging these fields into the previous state object manually.</p>","a":[{"id":738057,"option":"Use the useLegacyState hook that merges state updates of the object","correct":false},{"id":738058,"option":"Write a custom hook that merges state updates of the object","correct":false},{"id":738059,"option":"Split the state into multiple state variables","correct":true},{"id":738060,"option":"None of these","correct":false}]},{"q":"<p>In ReactJS, which of the following will set the <code>legs</code> property to the <code>windows.legs</code> value if present, else <code>0</code>?</p>","a":[{"id":434258,"option":"<Animal legs={window.legs ? windows.legs : 0}\r\n","correct":true},{"id":434259,"option":"<Animal legs=”window.legs ? windows.legs : 0”","correct":false},{"id":434260,"option":"<Animal legs={{window.legs ? windows.legs : 0}}\r\n","correct":false},{"id":434261,"option":"<Animal legs=window.legs ? windows.legs : 0","correct":false}]},{"q":"<p>The following ReactJS code contains an issue related to unintentional renders. Which of the following can be used to solve this issue: </p>\n\n<pre class=\"prettyprint\"><code>class App extends React.Component {\n  render() {\n    return (\n      &lt;Provider value={{mystuff: 'what'}}&gt;\n        &lt;Toolbar /&gt;\n      &lt;/Provider&gt;\n    );\n  }\n}\n</code></pre>\n\n<p> </p>","a":[{"id":738089,"option":"Making a separate node in the tree for each context consumer","correct":false},{"id":738090,"option":"Ensuring that the reference identity must be used to determine when to re-render","correct":false},{"id":738091,"option":"Raising the value into the parent’s state","correct":true},{"id":738092,"option":"None of these","correct":false}]},{"q":"<p>In ReactJS, Components that render differently are based on whether the client reads a state variable. If your application architecture allows you to render something different on the server and client, intentionally by using the two-pass rendering technique, then which of the following methods is used to set this variable in this scenario?</p>","a":[{"id":738077,"option":"componentWillMount()","correct":false},{"id":738078,"option":"componentDidMount()","correct":true},{"id":738079,"option":"componentWillReceiveProps()","correct":false},{"id":738080,"option":"shouldComponentUpdate()","correct":false}]},{"q":"<p>What will be the output of the following ReactJS code:</p>\n\n<pre class=\"prettyprint\"><code>function onClick(event) {\n  console.log(event.type); \n  const eventType = event.type; \n\n  setTimeout(function() {\n    console.log(event.type); \n    console.log(eventType); \n  }, 0);\n}\n\n</code></pre>","a":[{"id":434302,"option":"click\r\nnull\r\nclick\r\n","correct":true},{"id":434303,"option":"null\r\nnull\r\nnull\r\n","correct":false},{"id":434304,"option":"click\r\nclick\r\nclick\r\n","correct":false},{"id":434305,"option":"null\r\nclick\r\nnull\r\n","correct":false}]},{"q":"<p>In ReactJS, which of the following syntaxes in JSX are correct:</p>\n\n<pre class=\"prettyprint\"><code>1. &lt;span&gt; \n    &lt;div&gt; New &lt;/div&gt; \n   &lt;/span&gt; </code></pre>\n\n<pre class=\"prettyprint\"><code>2. &lt;MyComponent&gt; \n     &lt;div&gt; &lt;img/&gt; &lt;/div&gt; \n   &lt;/MyComponent&gt; </code></pre>\n\n<pre class=\"prettyprint\"><code>3. &lt;span OnClick = {UnselectedNumber.bind(i)} &lt;/span&gt; </code></pre>\n\n<pre class=\"prettyprint\"><code>4. &lt;div OnClick ={UnselectedNumber.bind(i)} &lt;/div&gt;</code></pre>","a":[{"id":439202,"option":"1, 2, and 3","correct":true},{"id":439203,"option":"2, 3, and 4","correct":false},{"id":439204,"option":"1, 2, and 4","correct":false},{"id":439205,"option":"1, 3, and 4\r\n","correct":false}]},{"q":"<p>There are several consumers who are descendants of the Context.Provider component and were allocated using the following code:</p>\n\n<pre class=\"prettyprint\"><code>&lt;MyContext.Provider value={ &lt;valid value&gt; }&gt;</code></pre>\n\n<p>Some of the consumers have ancestor components that were bailed out of updates using the <strong>shouldComponentUpdate</strong> method. What will happen when the value for the prop of the provider changes in this scenario?</p>\n\n<p> </p>","a":[{"id":738093,"option":"All consumers will re-render","correct":true},{"id":738094,"option":"Only those consumers who do not have such ancestors will re-render","correct":false},{"id":738095,"option":"None of the consumers will re-render","correct":false},{"id":738096,"option":"Such an architecture will lead to an error","correct":false}]},{"q":"<p>In ReactJS, what will happen after you have called the setState() method in the following scenario:</p>\n\n<p><em>Scenario</em>:</p>\n\n<p>A component is created and UNSAFE_componentWillMount() is invoked before mounting the component.<br>\nAssume that you have called the setState() method synchronously in it.<br>\n </p>","a":[{"id":738085,"option":"An extra rendering will be triggered.","correct":false},{"id":738086,"option":"An extra rendering not will be triggered.","correct":true},{"id":738087,"option":"UNSAFE_componentWillReceiveProps() will be invoked.","correct":false},{"id":738088,"option":"An update to the component will be triggered.","correct":false}]},{"q":"<p>In ReactJS, if your application architecture is as follows, how many additional rendering passes will you expect immediately after hydration is performed?<br>\n<br>\n<em>Architecture</em>:<br>\n<br>\nComponents that render differently are based on whether the client reads a state variable. Your application architecture allows you to render something different on the server and client, intentionally. You can do this through two-pass rendering.</p>","a":[{"id":738073,"option":"There will be no additional passes.","correct":false},{"id":738074,"option":"There will be one additional pass.","correct":true},{"id":738075,"option":"There will be two additional passes.","correct":false},{"id":738076,"option":"There will be one pass after hydration, but this will be the first pass.","correct":false}]},{"q":"<p>You have created the following context where defaultValue has a valid value:</p>\n\n<pre class=\"prettyprint\"><code>const NewContext = React.createContext(defaultValue);</code></pre>\n\n<p>Which of the following statements about the behavior of a component that subscribes to this context object is correct?</p>\n\n<p> </p>","a":[{"id":738109,"option":"The component will read the current context value from the closest matching provider in the tree above it.","correct":true},{"id":738110,"option":"The component will read the current context value from the first matching provider in the tree from the top.","correct":false},{"id":738111,"option":"The component will read the current context value from the closest matching provider in the tree below it.","correct":false},{"id":738112,"option":"The component uses defaultValue as the provider and reads the current context from it.","correct":false}]},{"q":"<p>In ReactJS, which of the following will you use to perform the code-splitting technique on a server-rendered app?</p>","a":[{"id":738133,"option":"React.lazy","correct":false},{"id":738134,"option":"Loadable components","correct":true},{"id":738135,"option":"Both of these","correct":false},{"id":738136,"option":"None of these","correct":false}]},{"q":"<p>You find that the following code in ReactJS fails to update the iterator sometimes:</p>\n\n<pre class=\"prettyprint\"><code>this.setState({\niterator: this.state.iterator + this.props.increasevalue,\n});</code></pre>\n\n<p>Which of the following two alternative pieces of code will work in this context:</p>\n\n<pre class=\"prettyprint\"><code>A:\n\nthis.setState((state, props) =&gt; ({\n iterator: this.state.iterator + this.props.increasevalue\n}));\n\n\n\nB:\n\nthis.setState(function(state, props) {\n  return {\n   iterator: this.state.iterator + this.props.increasevalue\n  };\n});</code></pre>\n\n<p> </p>","a":[{"id":738049,"option":"Only A","correct":false},{"id":738050,"option":"Only B","correct":false},{"id":738051,"option":"Both of these","correct":true},{"id":738052,"option":"None of these","correct":false}]},{"q":"<p>In ReactJS, analyze the following HOC code and determine the issue that might occur when it is implemented:</p>\n\n<pre class=\"prettyprint\"><code>render() {\n   const EnhancedComponent = enhance(MyComponent);\n    return &lt;EnhancedComponent /&gt;;\n}</code></pre>\n\n<p> </p>","a":[{"id":738065,"option":"Implementing the code causes the entire subtree to unmount/remount on each call","correct":true},{"id":738066,"option":"Implementing the code causes the component state to become immutable","correct":false},{"id":738067,"option":"Implementing the code might lead to DOM shadowing","correct":false},{"id":738068,"option":"Implementing the code causes event bubbling","correct":false}]},{"q":"<p>In ReactJS, if you want the following code to display a list of numbers, then which of these will you replace the placeholder X with?</p>\n\n<pre class=\"prettyprint\"><code>const numb = [1, 2, 3, 4, 5];\nconst display = X\n\n\nReactDOM.render(\n  &lt;ul&gt;{l}&lt;/ul&gt;,\n  document.getElementById('root')\n)display</code></pre>\n\n<p> </p>","a":[{"id":738149,"option":"numb.map((num) =>\r\n  <li>{num}</li>\r\n);","correct":true},{"id":738150,"option":"\"numb.map({num} =>\r\n  <li>num</li>\r\n);\r\n\"","correct":false},{"id":738151,"option":"numb.map((num) =>\r\n  <ul>{num}</ul>\r\n);","correct":false},{"id":738152,"option":"\"numb.map({num} =>\r\n  <ul>num</ul>\r\n);\r\n\"","correct":false}]},{"q":"<p>You want to introduce code splitting so that it helps you in managing your app. The following code is present in the app.js file. If the code is modified to use the dynamic import() syntax, then what is the result of the code in ReactJS:</p>\n\n<pre class=\"prettyprint\"><code>import { myfunction } from './mystuff';\n\nconsole.log(myfunction(99, 22));</code></pre>\n\n<p> </p>","a":[{"id":738141,"option":"import(\"./mystuff\").then(myfunction => {\r\n  console.log(mystuff.myfunction(99, 22));\r\n});","correct":false},{"id":738142,"option":"import(\"./mystuff\").then(mystuff => {\r\n  console.log(mystuff.myfunction(99, 22));\r\n});","correct":true},{"id":738143,"option":"import(\"./mystuff\").then({\r\n  console.log(mystuff.myfunction(99, 22));\r\n});","correct":false},{"id":738144,"option":"import(\"./mystuff\").then({\r\n  console.log(myfunction(99, 22));\r\n});","correct":false}]},{"q":"<p>You have written the following code to extract the previous props or state by using hooks without using a custom hook. Which of these codes will you replace the placeholder X with to perform this action:</p>\n\n<pre class=\"prettyprint\"><code>function Counter() {\n  const [count, setCount] = useState(1);\n\n X\n\n}</code></pre>\n\n<p> </p>","a":[{"id":738053,"option":" const prevCountRef = useRef();\r\n  useEffect(() => {\r\n    prevCountRef.current = count;\r\nconst prevCount = prevCountRef.current\r\n  });","correct":false},{"id":738054,"option":" const prevCountRef = useRef();\r\n  useEffect(() => {\r\n    prevCountRef.current = count;\r\n  });\r\n  const prevCount = prevCountRef.current;","correct":true},{"id":738055,"option":"function usePrevious(value) {\r\n  const ref = useRef();\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  });\r\n  return ref.current;\r\n}","correct":false},{"id":738056,"option":"function usePrevious(value) {\r\n  const ref = useRef();\r\n  useEffect(() => {\r\n    ref.current = count;\r\n  });\r\n  return ref.current;\r\n}","correct":false}]},{"q":"<p>In ReactJS, you have designed a component tree in the form of a waterfall prop. Every component in the tree owns a state. Which of the following components get affected by data derived in this architecture?</p>","a":[{"id":738105,"option":"Owner components","correct":false},{"id":738106,"option":"Owner components and the one below them in the tree","correct":true},{"id":738107,"option":"Owner components and the one above them in the tree ","correct":false},{"id":738108,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following ReactJS code:</p>\n\n<pre class=\"prettyprint\"><code>var Hello = React.createClass({\n    render: function() {\n        return &lt;div&gt;Hello {this.props.name}&lt;/div&gt;;\n    }\n});\n\nReact.render(\n  &lt;Hello name=\"World\" /&gt;,\n  document.body\n);\n\n</code></pre>\n\n<p><strong>Note</strong>: Assume that <code>https://fb.me/react-0.12.0.js</code> and <code>https://fb.me/JSXTransformer-0.12.0.js</code> are already included.</p>","a":[{"id":415997,"option":"Hello null","correct":false},{"id":415998,"option":"Hello World","correct":true},{"id":415999,"option":"Hello Hello","correct":false},{"id":416000,"option":"Does not provide an output","correct":false}]},{"q":"<p>What is the output of the following React code:</p>\n\n<pre class=\"prettyprint\"><code>function onClick(event) {\n  const eventType = event.type; \n\n  setTimeout(function() {\n    console.log(event.type); \n    console.log(eventType); \n  }, 0);\n}</code></pre>","a":[{"id":439198,"option":"null\r\nclick\r\n","correct":true},{"id":439199,"option":"null\r\nnull\r\n","correct":false},{"id":439200,"option":"click\r\nclick\r\n","correct":false},{"id":439201,"option":"click\r\nnull\r\n","correct":false}]},{"q":"<p>What is the error in the following ReactJS code:</p>\n\n<pre class=\"prettyprint\"><code>function MyFunctionalComponent() {\n  return &lt;input /&gt;;\n}\n\nclass Parent extends React.Component {\n  render() {\n    return (\n      &lt;MyFunctionalComponent\n        ref={(input) =&gt; { this.textInput = input; }} /&gt;\n    );\n  }\n}\n</code></pre>","a":[{"id":388522,"option":"The render() method does not work because the MyFunctionalComponent class is not bound to the Parent class.","correct":false},{"id":388523,"option":"The render() method does not work because ref should be a part of the functional component.","correct":false},{"id":388524,"option":"The render() method does not work because the MyFunctionalComponent class does not contain any instance.","correct":true},{"id":388525,"option":"No errors","correct":false}]},{"q":"<p>In ReactJS, you are using a class method as an event handler. When you use a JSX callback using this.functionname, you find that <em>this </em>is undefined. How will you solve this issue?</p>","a":[{"id":738153,"option":"Pass a prop that contains this","correct":false},{"id":738154,"option":"Use private class field syntax","correct":false},{"id":738155,"option":"Bind this.function name","correct":true},{"id":738156,"option":"You cannot use class methods as event handlers","correct":false}]},{"q":"<p>In React.js, you are working with the <strong>PropTypes</strong> property to run <strong>typechecking </strong>on the props for a component. If you have executed the following code, then which of the statements about the <strong>PropTypes.element</strong> validator is correct in this scenario?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>import PropTypes from 'prop-types';\n\nclass MyComponent extends React.Component {\n  render() {\n    const children = this.props.children;\n    return (\n      &lt;div&gt;\n        {children}\n      &lt;/div&gt;\n    );\n  }\n}\n\nMyComponent.propTypes = {\n  children: PropTypes.element.isRequired\n};</code></pre>","a":[{"id":433155,"option":"It can be specified that only a single child can be passed to a component as a prop element with reference to the PropTypes.element validator.\r\n","correct":false},{"id":433156,"option":"It can be specified that only two children can be passed to a component as children with reference to the PropTypes.element validator.\r\n","correct":false},{"id":433157,"option":"It can be specified that only a single child can be passed to a component as children with reference to the PropTypes.element validator.","correct":true},{"id":433158,"option":"None of these\r\n","correct":false}]},{"q":"<p>Analyze the following code and select the appropriate value of X to embed the result after calling the JavaScript function in the h1 element that is defined in the code:</p>\n\n<pre class=\"prettyprint\"><code>function userName(user) {\n  return user.firstName + ' ' + user.lastName;\n}\n\nconst user = {\n  firstName: 'Pablo',\n  lastName: 'Escobar'\n};\n\nconst element = (\n  &lt;h1&gt;\n    Hello,X\n  &lt;/h1&gt;\n);\n\nReactDOM.render(\n  element,\n  document.getElementById('root')\n);</code></pre>\n\n<p> </p>","a":[{"id":738033,"option":"<!userName(user)>","correct":false},{"id":738034,"option":"{userName(user)}!","correct":true},{"id":738035,"option":"{!userName.render(user)}","correct":false},{"id":738036,"option":"{!userName.show(user)}","correct":false}]}]
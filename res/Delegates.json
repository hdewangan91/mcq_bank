[{"q":"<p>Which of the following C# code snippets would successfully convert any expression into a delegate:</p>\n\n<p><strong>Code snippets</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>Expression&lt;Func&lt;int&gt;&gt; subtract = () =&gt; 4 -3;\nvar sub = subtract.Compile();\nvar result = sub(); \nConsole.WriteLine(result);</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>Expression&lt;Func&lt;int&gt; subtract ()&gt;  =&gt; 4 -3;\nvar sub = compile(subtract);\nvar result = sub(); \nConsole.WriteLine(result);</code></pre>","a":[{"id":1673059,"option":"1","correct":true},{"id":1673060,"option":"2","correct":false},{"id":1673061,"option":"Both 1 and 2","correct":false},{"id":1673062,"option":"None of these","correct":false}]},{"q":"<p>Which of the following options correctly denotes the output of the following code snippet?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>struct Toy {\n    var height:Int = 12\n}\nprotocol ToyShopDelegate {\n    func toyWasMade(_ toy: Toy)\n}\nclass ToyShop\n{\n    var delegate:ToyShopDelegate?\n\n    func makeToy()\n    {\n    let toy = Toy()\n    delegate?.toyWasMade(toy)\n    }\n}\nclass ToyManu: ToyShopDelegate\n{\n    func toyWasMade(_ toy: Toy)\n    {\n    print(toy.height)\n    }\n}\nlet shop = ToyManu()\nlet toyshop = ToyShop()\ntoyshop.delegate = shop\ntoyshop.makeToy()</code></pre>\n\n<p> </p>","a":[{"id":1656581,"option":"12","correct":true},{"id":1656582,"option":"10","correct":false},{"id":1656583,"option":"2","correct":false},{"id":1656584,"option":"1","correct":false}]},{"q":"<p>What will be the output of the following C# code?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\ndelegate void hack_del(string h);\nclass Hackerearth\n{\n    static void hack_method1(string h)\n    {\n        Console.WriteLine($\" Hackerearth, {h}!\");\n    }\n    \n    static void hack_method2(string h)\n    {\n        Console.WriteLine($\" Hack, {h}!\");\n    }\n    \n    static void Main()\n    {\n        hack_del h1, h2, h3, h4;\n        h1 = hack_method1;\n        h2 = hack_method2;\n        h3 = h1 + h2;\n        h4 = h3 - h1;\n        \n        h1(\"h1\");\n        h2(\"h2\");\n        h3(\"h3\");\n        h4(\"h4\");\n        \n    }\n}</code></pre>\n\n<p> </p>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hackerearth, h1!\n Hack, h2!\n Hackerearth, h3!\n Hack, h3!\n Hack, h4!</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hackerearth, h1!\n Hack, h2!\n Hack, h3!\n Hackerearth, h3!\n Hackerearth, h4!</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hackerearth, h1!\n Hack, h2!\n Hack, h3!\n Hackerearth, h3!\n Hack, h4!</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hackerearth, h1!\n Hack, h2!\n Hackerearth, h3!\n Hack, h3!\n Hackerearth, h4!</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>\n\n<p>      </p>","a":[{"id":1419017,"option":"3","correct":false},{"id":1419018,"option":"2","correct":false},{"id":1419019,"option":"1","correct":true},{"id":1419020,"option":"4","correct":false}]},{"q":"<p>In C# you are working on Events and Delegates, you have a code given below which defines an event <strong>hackProcessCompleted</strong>. Now, which of the following statements is correct about this code?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>public delegate void hack(); \n \npublic class hackProcess\n{\n    public event hackProcessCompleted; \n    public void hackStart()\n    {\n        Console.WriteLine(\"hacking initiated\");\n \n        OnhackCompleted();\n    }\n    protected virtual void OnhackCompleted() \n    { \n        hackProcessCompleted?.Invoke();  \n        \n    }\n}</code></pre>\n\n<p> </p>\n\n<p><strong>Statements</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>A derived class should always call the On(Name of the event) method of the base class to ensure that registered delegates receive the event.</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>On(name of the event)methods should be marked as Protected and Virtual.</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1418987,"option":"only 1","correct":false},{"id":1418988,"option":"only 2","correct":false},{"id":1418989,"option":"Both 1 and 2","correct":true},{"id":1418990,"option":"None of these","correct":false}]},{"q":"<p>Which of the following statements is correct if the following C# code is executed?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System; \nnamespace Delegates \n{ \n    class Hackerearth \n    { \n        delegate void hack_delegate(); \n        static void Main(string[] args) \n        {\n            hack_delegate h = delegate\n            { \n                Console.WriteLine(\"Hi Hackerearth\"); \n                \n            }; \n            h(); \n        } \n        \n    } \n}</code></pre>\n\n<p> </p>\n\n<ol>\n\t<li> The code prints - \n\t<pre class=\"prettyprint\"><code>Hi Hackerearth</code></pre>\n\t</li>\n\t<li> The code gives a runtime error<br>\n\t </li>\n\t<li> The code does not give a compilation error</li>\n</ol>","a":[{"id":1418937,"option":"only 2","correct":false},{"id":1418938,"option":"1 and 3","correct":true},{"id":1418939,"option":"1 and 2","correct":false},{"id":1418940,"option":"All of these","correct":false}]},{"q":"<p>What will be the output of the C# code given below?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nnamespace Delegates \n{ \n    public class hack\n    { \n        public static void hack1() \n        { \n            Console.WriteLine(\"Hi\"); \n            throw new Exception(\"Caught an error\"); \n        } \n        public static void hack2() \n        { \n            Console.WriteLine(\"Hello\"); \n        } \n        \n    } \n    class Hackerearth \n    { \n        delegate void hackOp(); \n        static void Main(string[] args) \n        {\n            hackOp h = hack.hack1; \n            h += hack.hack2; \n            Delegate[] hc = h.GetInvocationList(); \n            foreach (hackOp c in hc) \n            { \n                try \n                { \n                    c(); \n                    \n                } \n                catch (Exception) \n                { \n                    Console.WriteLine(\"Error\"); \n                    \n                } \n                \n            } \n        } \n        \n    } \n    \n}</code></pre>\n\n<p><br>\n<br>\n<strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Error\nHello\n</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hi\nError\nHello\n</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Error\nHi\n</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hi\nHello\nError\n</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1418927,"option":"1","correct":false},{"id":1418928,"option":"2","correct":true},{"id":1418929,"option":"3","correct":false},{"id":1418930,"option":"4","correct":false}]},{"q":"<p>In C#, you are working on Events and you are implementing Interface Events. In which of the following scenarios will the code snippet given below be beneficial?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>namespace WrapTwoInterfaceEvents\n{\n    using System;\n    public interface IDrawingObject\n    {\n        event EventHandler OnDraw;\n        \n    }\n    public class Shape : IDrawingObject, IShape\n    {\n        event EventHandler PreDrawEvent;\n        object objectLock = new Object();\n        \n        #region IDrawingObjectOnDraw\n        \n        event EventHandler IDrawingObject.OnDraw\n        {\n            add\n            {\n                lock (objectLock)\n                {\n                    PreDrawEvent += value;\n                    \n                }\n                \n            }\n            remove\n            {\n                lock (objectLock)\n                {\n                    PreDrawEvent -= value;\n                    \n                }\n                \n            }\n            \n        }\n        #endregion\n        \n        public void Draw()\n        {\n            PreDrawEvent?.Invoke(this, EventArgs.Empty);\n            Console.WriteLine(\"Drawing a shape.\");\n            \n        }\n}</code></pre>\n\n<p><br>\n<br>\n<br>\n </p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>This can be used in situations where a class inherits from two or more interfaces and each interface has an event with the same name.</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>This can be used in if the events should be raised at different times according to the interface specifications.</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1419042,"option":"1","correct":false},{"id":1419043,"option":"2","correct":false},{"id":1419044,"option":"Both 1 and 2","correct":true},{"id":1419045,"option":"None of these","correct":false}]},{"q":"<p>Alice is working on C# Events and she wants to raise base class events in derived classes. She has an abstract class Shape which contains methods to define dimensions and to calculate the area of a particular shape and also update the dimensions. Now she is facing an issue while defining a generic EventHandler to handle the ShapeChanged event. <br>\nConsider the code snippet given below as a subset of the entire Code. What of the following syntaxes can Alice use in place of XXX to create an event without the need to declare a separate delegate type?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>public class ShapeEventArgs : EventArgs\n{\n    public ShapeEventArgs(double a)\n    {\n        NewArea = a;\n        \n    }\n    public double NewArea \n    { \n        get; \n        \n    }\n    \n}\npublic abstract class Shape\n{\n    protected double _area;\n    public double Area\n    {\n        get =&gt; _a;\n        set =&gt; _a = value;\n        \n    }\n    XXX\n    public abstract void Draw();\n    protected virtual void OnShapeChanged(ShapeEventArgs e)\n    {\n        //Some code\n        }\n }</code></pre>\n\n<p><br>\n<br>\n<strong>Statement:</strong><br>\n </p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>public event EventHandler&lt;ShapeEventArgs&gt; ShapeChanged;</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>public event EventHandler&lt;EventArgs&gt; ShapeChanged;</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1419037,"option":"Only 1","correct":true},{"id":1419038,"option":"Only 2","correct":false},{"id":1419039,"option":"1 and 2","correct":false},{"id":1419040,"option":"None of these","correct":false}]},{"q":"<p>If you have executed the C# code given below, then which of the following statements is correct?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\nclass Hack\n{\n    delegate int del_function(int abc);\n    public int Function1(int abc)\n    {\n        Console.WriteLine(\"ABC:You are done!\");\n        return 0;\n        \n    }\n    public static void Main()\n    {\n        del_function obj;\n        Hack h = new Hack();\n        obj= new del_function(ref h.Function1);\n        obj(86);\n        \n    }\n}</code></pre>\n\n<p><br>\n<br>\n<strong>Statements:</strong></p>\n\n<ol>\n\t<li>The code gives the output-\n\t<pre class=\"prettyprint\"><code> ABC:You are done!</code></pre>\n\t</li>\n\t<li>The code gives a compile-time error<br>\n\t </li>\n\t<li> The code does not give a runtime error<br>\n\t </li>\n</ol>","a":[{"id":1418977,"option":"only 2","correct":false},{"id":1418978,"option":"only 3","correct":false},{"id":1418979,"option":"1 and 3","correct":true},{"id":1418980,"option":"None of these","correct":false}]},{"q":"<p>Which of the following syntaxes can be used in place of XXX to complete the C# code snippet given below?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nnamespace Delegates \n{ \n    public class Hack\n    { \n        public static void Multiply(int a, int b) \n        { \n            Console.WriteLine(\"Product={0}\",a * b); \n            \n        } \n        public static void Remainder(int a, int b) \n        { \n            Console.WriteLine(\"Mod={0}\", a % b); \n            \n        } \n        \n    } \n    class Program \n    { \n        delegate void DelOp(int x, int y); \n        static void Main(string[] args) \n        {\n            DelOp[] obj = \n            { \n                new DelOp(Hack.Multiply), \n                XXX \n                \n            }; \n            for (int i = 0; i &lt; obj.Length; i++) \n            { \n                obj[i](6, 11); \n                obj[i](10, 2); \n                obj[i](8, 4); \n                \n            } \n            \n        } \n        \n    } \n}</code></pre>\n\n<p> </p>\n\n<p><strong>Syntax:</strong><br>\n </p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>new DelOp(Mod.Remainder)</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>new DelOp(Program.Remainder)</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>new DelOp(Remainder)</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>new DelOp(Hack.Remainder)</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1418922,"option":"1","correct":false},{"id":1418923,"option":"2","correct":false},{"id":1418924,"option":"3","correct":false},{"id":1418925,"option":"4","correct":true}]},{"q":"<p>Which line in the C# code snippet given below will produce an error?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;  // line 1\nnamespace Delegates   // line 2\n{ \n    public delegate int operation(int x, int y);   // line 3\n    class Hack  // line 4\n    { \n        static int Subtraction(int a, int b)  // line 5\n        { \n            return a - b;   // line 6\n            \n        } \n        static void Main(string[] args)   // line 7\n        {\n            operation obj = new operation(Subtraction);   // line 8\n            Console.WriteLine(\"Subtraction is={0}\",obj(67,45));   // line 9\n            \n        } \n        \n    } \n }</code></pre>\n\n<p> </p>","a":[{"id":1418917,"option":"Line 3","correct":false},{"id":1418918,"option":"Line 5","correct":false},{"id":1418919,"option":"Line 8","correct":false},{"id":1418920,"option":"This code does not contain an error","correct":true}]},{"q":"<p>What will be the output of the following C# code?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System; \n \nclass Demo\n{ \n    public delegate void demo_delegate(int a, int b); \n    \n    public static void example(int a, int b) \n    { \n        Console.WriteLine(a - b); \n        \n    }\n    static public void Main() \n    { \n        demo_delegate obj = example; \n        obj(10, 20); \n        \n    }    \n}</code></pre>\n\n<p> </p>","a":[{"id":1418962,"option":"10","correct":false},{"id":1418963,"option":"20","correct":false},{"id":1418964,"option":"-10","correct":true},{"id":1418965,"option":"None of these","correct":false}]},{"q":"<p>Which of the following statements is correct about the C# code snippet given below?<br>\n<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>delegate void hack_DelA();\ndelegate void hack_DelB();\n\nstatic void hack_method(hack_DelA h1, hack_DelB h2, System.Delegate d)\n{\n    Console.WriteLine(h1 == h2);   // A\n    Console.WriteLine(h1 == d);    // B\n}</code></pre>\n\n<p><br>\n<br>\n<strong>Statements</strong><br>\n </p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>A results in a compile-time error.</code></pre>\n\t<br>\n\t </li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>B will return true at run-time.</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1419052,"option":"Only 1","correct":true},{"id":1419053,"option":"Only 2","correct":false},{"id":1419054,"option":"Both 1 and 2","correct":false},{"id":1419055,"option":"None of these","correct":false}]},{"q":"<p>In C# you are working on Events, which of the following lambda expressions given below can you use to specify an Event Handler while programmatically subscribing to Events?<br>\n </p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>public Form1() \n{ \n    InitializeComponent(); \n    this.Click += (s,e) =&gt;\n    {\n        MessageBox.Show(((MouseEventArgs)e).Location.ToString());\n        \n    };\n}</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>public Form1() \n{ \n    this.Click = (s,e) =&gt;\n    {\n        MessageBox.Show(((MouseEventArgs)e).Location.ToString());\n        \n    };\n    InitializeComponent();\n}</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>InitializeComponent(); \npublic Form1() \n{ \n    this.Click (s,e) =&gt;\n    {\n        MessageBox.Show(((MouseEventArgs)e).Location.ToString());\n        \n    };\n}</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1419032,"option":"1","correct":true},{"id":1419033,"option":"2","correct":false},{"id":1419034,"option":"3","correct":false},{"id":1419035,"option":"All of these","correct":false}]},{"q":"<p>In C#, if you are working on Events and you are using the code snippet given below to subscribe to events programmatically, then in which of the following scenarios will the given code snippet represent the method stub?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>void HandleCustomEvent(object sender, CustomEventArgs a) \n{ \n    // your code goes here \n}</code></pre>\n\n<p><br>\n </p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>If the event is based on the EventHandler delegate type</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>If the event is subscribed using an anonymous method</code></pre>\n\t</li>\n</ol>","a":[{"id":1419027,"option":"1","correct":true},{"id":1419028,"option":"2","correct":false},{"id":1419029,"option":"1 and 2","correct":false},{"id":1419030,"option":"None of these","correct":false}]},{"q":"<p>Which of the following syntaxes can be used in place of XXX to complete the C# code snippet given below?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\npublic class Hack\n{ \n    public static void hack_oprA(int a) \n    { \n        Console.WriteLine(a + 10); \n        \n    } \n    public static void hack_oprB(int a) \n    { \n        Console.WriteLine(a * a * a); \n        \n    } \n    \n} \nclass Program \n{ \n    delegate void hackerearth(int x); \n    static void Main(string[] args) \n    { \n        hackerearth obj = Hack.hack_oprA; \n        XXX\n        obj(10); \n        obj(5); \n    } \n }</code></pre>\n\n<p><br>\n </p>\n\n<p><strong>Syntax:</strong><br>\n </p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>demo obj = Program.hack_oprB;</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>obj += Program.hack_oprB;</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>obj += Hack.hack_oprB;</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>demo obj = Hack.hack_oprB;</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1418952,"option":"1","correct":false},{"id":1418953,"option":"2","correct":false},{"id":1418954,"option":"3","correct":true},{"id":1418955,"option":"4","correct":false}]},{"q":"<p>In C# you are working on Events and Delegates and you have a code given below which defines an event <strong>hc</strong> and a delegate <strong>EventHandler</strong>. Now, which of the following syntaxes can be used in place of YYY to complete the code snippet?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System; \nnamespace Delegates \n{ \n    public delegate void EventHandler(string h);\n    \n    class Hackerearth\n    { \n        public static void HackEvent(string hk) \n        { \n            Console.WriteLine(\"hi\"); \n            \n        } \n        static void Main(string[] args) \n        { \n            hack h1= new hack(); \n            h1.Action(\"bye\"); \n            YYY            \n        } \n        \n    }\n    \n    public class hack\n    { \n        public event EventHandler hc; \n        public void Action(string h) \n        { \n            if (hc!= null) \n            { \n                hc(h); \n                Console.WriteLine(h); \n                \n            } \n            else \n            { \n                Console.WriteLine(\"hello\"); \n                \n            } \n            \n        } \n        \n    } \n  \n}</code></pre>\n\n<p> </p>\n\n<p> </p>\n\n<p><strong>Syntaxes</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>h1.hc = new EventHandler(HackEvent);</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>new EventHandler(HackEvent);</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>h1.hc+= new EventHandler(HackEvent);</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>h1.hc = new CatchEvent;</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1418932,"option":"1","correct":false},{"id":1418933,"option":"2","correct":false},{"id":1418934,"option":"3","correct":true},{"id":1418935,"option":"4","correct":false}]},{"q":"<p>What is the output of the C# code snippet given below?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\npublic class DelegateEvent\n{\n    public delegate void HandlerEventDelegate();\n    public static double original_amount= 4533.47;\n    public static void AmountDeposit()\n    { \n        Console.WriteLine(\"Current Bank Balance: \"+original_amount); \n        \n    }\n    public static void RewardBonus()\n    {\n        if(original_amount&gt;= 12000)\n        {\n            double amountBonus = 1200;\n            Console.WriteLine(\"Bonus Applied and now the total Bank Balance: \"+(original_amount+amountBonus ));\n            \n        } \n        else\n        { \n            Console.WriteLine(\"Bonus Inapplicable\"); \n            \n        }\n        \n    }\n    public static event HandlerEventDelegate obj;\n    public static void Main(string[] args)\n    {\n        obj+= new HandlerEventDelegate (AmountDeposit);\n        obj+= new HandlerEventDelegate (RewardBonus);\n        obj.Invoke();\n        \n    }\n }</code></pre>\n\n<p><br>\n<br>\n<strong>Output:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Current Bank Balance: 4533.00\n\nBonus Applied and now the total Bank Balance: 12000\n\n</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Current Bank Balance: 4533.47\n\nBonus Applied and now the total Bank Balance: 12200</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Current Bank Balance: 4533\n\nBonus Applied and now the total Bank Balance: 12200</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Current Bank Balance: 4533.47\n\nBonus Inapplicable</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1419567,"option":"1","correct":false},{"id":1419568,"option":"2","correct":false},{"id":1419569,"option":"3","correct":false},{"id":1419570,"option":"4","correct":true}]},{"q":"<p>You are using the C# code snippet given below to display particular information only until <em>6:00</em> PM. If anyone tries to access the information after <em>6:00</em> PM, you want to display an \"Access denied\" error message.<br>\nWhich of the following code snippets can be used in place of XXX to perform the action?<br>\n </p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\ndelegate void InformDelegate();\nclass Hack\n{\n    static void Main(string[] args)\n    {\n        InformDelegate info = null;\n        Display disp =new Display();\n        //XXX \n        \n    }\n}\nclass Display\n{ \n    public void dawn()\n    { \n        Console.WriteLine(\"display\"); \n        \n    }\n    public void dusk()\n    { \n        Console.WriteLine(\"Access denied\"); \n        \n    }\n    \n}</code></pre>\n\n<p><br>\n<br>\n<strong>Code Snippet:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>if (DateTime.Now.Hour &lt; 18) \n{ \n    info = new InformDelegate(disp.dawn); \n    \n} \nelse \n{ \n    info = null; \n    \n}</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>if (DateTime.Now.Hour &lt; 8) \n{ \n    info = new InformDelegate(disp.dusk); \n    \n} \nelse \n{ \n    info = null; \n    \n}</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>if (DateTime.Now.Hour &lt; 8) \n{ \n    info = new InformDelegate(disp.dawn); \n    \n} \nelse \n{ \n    info = null; \n    \n}</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>if (Hour &lt; 18) \n{ \n    info = new InformDelegate(disp.dawn); \n    \n} \nelse \n{ \n    info = null; \n    \n}</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1418957,"option":"1","correct":true},{"id":1418958,"option":"2","correct":false},{"id":1418959,"option":"3","correct":false},{"id":1418960,"option":"4","correct":false}]},{"q":"<p>What will be the output of the following C#  code?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;         \n\ndelegate void hack_delegate();\n\nclass Hackerearth \n{    \n    public static void Main() \n    {    \n        hack_delegate h1 = new hack_delegate(Hack.hack_opr1);    \n        hack_delegate h2 = new hack_delegate(Hack.hack_opr2);    \n        hack_delegate h3 = h1 + h2;    \n        hack_delegate h4 = h2 + h1 - h3;    \n        \n        h3();    \n        h4();    \n        \n    }    \n}  \n\nclass Hack \n{    \n    static public void hack_opr1() \n    {    \n        Console.WriteLine(\"hi\");    \n    }    \n    static public void hack_opr2() \n    {    \n        Console.WriteLine(\"hello\");    \n    }    \n}    \n</code></pre>\n\n<p> </p>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hi\nhello\nhello\nhi</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hi\nhello\n</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hi\nhello\nhi\nhello\n</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hello\nhi</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1419067,"option":"1","correct":true},{"id":1419068,"option":"2","correct":false},{"id":1419069,"option":"3","correct":false},{"id":1419070,"option":"4","correct":false}]},{"q":"<p>What will be the output of the following C# code?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\ndelegate void function2(ref string obj);\nclass delegates_events\n{\n    public static void function_inner( ref string xyz)\n    {\n        xyz = xyz.Substring( 12, xyz.Length - 12);\n    }\n}\n\nclass Main_Demo\n{\n    static void Main(string[] args)\n    {\n        function2 obj2;\n        string obj = \"Welcome to the world of peace\";\n        obj2= delegates_events.function_inner;\n        obj2(ref obj);\n        Console.WriteLine(obj);\n    }\n}</code></pre>\n\n<p><strong>Output:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>the world of peace</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Welcome to</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Welcome to th</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>he world of peace</code></pre>\n\t</li>\n</ol>","a":[{"id":1418972,"option":"1","correct":false},{"id":1418973,"option":"2","correct":false},{"id":1418974,"option":"3","correct":false},{"id":1418975,"option":"4","correct":true}]},{"q":"<p>In C#, if you are required to implement the following code, then which of these statements about this code is correct?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>public class DelegateOperation\n{\n    public delegate void CompleteOperationCallback(bool answer);\n    public void OperationExecution(CompleteOperationCallback, methodToBeCalledOperationTerminated)\n    {\n        bool answer=false;\n        methodToBeCalledOperationTerminated.Invoke(answer); \n    } \n}\n\npublic class Program_Client\n{\n    DelegateOperation operationObject;\n    public Client()\n    {\n        operationObject=new DelegateOperation();\n        operationObject.OperationExecution(OperationTerminated);\n    }\n    public void OperationTerminated(bool ReceivedAnswer)\n    { // Log operation answer \n    \n    }\n}</code></pre>\n\n<p><strong>Statements:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>There is no tight coupling between the DelegateOperation class and the Program_Client class</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>There is a tight coupling between the DelegateOperation class and the Program_Client class</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>If any other class needs to use the DelegateOperation class functionality, there is no change in the DelegateOperation class, and we need not rebuild it.</code></pre>\n\t</li>\n</ol>","a":[{"id":1419012,"option":"Both 1 and 2","correct":false},{"id":1419013,"option":"Both 2 and 3","correct":false},{"id":1419014,"option":"Both 1 and 3","correct":true},{"id":1419015,"option":"None of these","correct":false}]}]
[{"q":"<p>You are using Partitioning in Redis&nbsp;for&nbsp;larger databases which allows using the sum of the memory of many computers to avoid the problem of less memory a single computer can support. Which among the following is not true for Redis&nbsp;Partitioning?</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>You can't perform the intersection between two sets if they are stored in keys that are mapped to different Redis instances</li>\n\t<li>Redis transactions involving multiple keys can not be used.</li>\n\t<li>Operations involving multiple keys are usually not supported.&nbsp;</li>\n\t<li>Redis Cluster supports mostly transparent rebalancing of data with the ability to add and remove nodes at runtime, but other systems like client-side partitioning and proxies support this feature.</li>\n</ol>","a":[{"id":1727150,"option":"1","correct":false},{"id":1727151,"option":"2","correct":false},{"id":1727152,"option":"3","correct":false},{"id":1727153,"option":"4","correct":true}]},{"q":"<p>Your organization is using&nbsp;Cassandra to handle big data workloads. CQL provides the facility of using Collection data types in Cassandra.&nbsp;Assume that you&nbsp;have created a table named <em>owners&nbsp;</em>(id (uuid), LastName&nbsp;(text), FirstName&nbsp;(text)).</p>\n\n<table border=\"1\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>id&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>\n\t\t\t<td>LastName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>\n\t\t\t<td>FirstName&nbsp;&nbsp;&nbsp;&nbsp;</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>sam</td>\n\t\t\t<td>Steven</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>Ergodium</td>\n\t\t\t<td>sushant</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>Orton</td>\n\t\t\t<td>Samuel</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>4</td>\n\t\t\t<td>Samuel</td>\n\t\t\t<td>Badree</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>5</td>\n\t\t\t<td>Smith</td>\n\t\t\t<td>Patel</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>What is the output of the following query:</p>\n\n<pre class=\"prettyprint\"><code>SELECT * FROM owners WHERE firstname LIKE 'S%'\nAND LastName LIKE 'S%'\nALLOW FILTERING;</code></pre>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<table border=\"1\" style=\"width: 300px;\">\n\t\t<tbody>\n\t\t\t<tr>\n\t\t\t\t<td>id</td>\n\t\t\t\t<td>LastName</td>\n\t\t\t\t<td>FirstName</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>1</td>\n\t\t\t\t<td>sam</td>\n\t\t\t\t<td>Steven</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>5</td>\n\t\t\t\t<td>Orton</td>\n\t\t\t\t<td>Samuel</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>6</td>\n\t\t\t\t<td>Smith</td>\n\t\t\t\t<td>Patel</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>7</td>\n\t\t\t\t<td>Samuel</td>\n\t\t\t\t<td>Badree</td>\n\t\t\t</tr>\n\t\t</tbody>\n\t</table>\n\t</li>\n\t<li>\n\t<table border=\"1\" style=\"width: 300px;\">\n\t\t<tbody>\n\t\t\t<tr>\n\t\t\t\t<td>id</td>\n\t\t\t\t<td>LastName</td>\n\t\t\t\t<td>FirstName</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>1</td>\n\t\t\t\t<td>sam</td>\n\t\t\t\t<td>Steven</td>\n\t\t\t</tr>\n\t\t</tbody>\n\t</table>\n\t</li>\n\t<li>\n\t<table border=\"1\" style=\"width: 300px;\">\n\t\t<tbody>\n\t\t\t<tr>\n\t\t\t\t<td>id</td>\n\t\t\t\t<td>LastName</td>\n\t\t\t\t<td>FirstName</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>5</td>\n\t\t\t\t<td>Orton</td>\n\t\t\t\t<td>Samuel</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>6</td>\n\t\t\t\t<td>Smith</td>\n\t\t\t\t<td>Patel</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>7</td>\n\t\t\t\t<td>Samuel</td>\n\t\t\t\t<td>Badree</td>\n\t\t\t</tr>\n\t\t</tbody>\n\t</table>\n\t</li>\n</ol>","a":[{"id":1722712,"option":"1","correct":false},{"id":1722713,"option":"2","correct":false},{"id":1722714,"option":"3","correct":false},{"id":1722715,"option":"None of these","correct":true}]},{"q":"<p>Your organization is using&nbsp;<em>Cassandra </em>to handle big data workloads.&nbsp;Cassandra provides a CQL shell for executing CQL commands&nbsp;interactively.&nbsp;CQL stores data in tables that&nbsp;are located in&nbsp;<em>keyspaces</em>. You have created one keyspace and a few column families. But unfortunately, you have forgotten to name the cluster. Now, you are&nbsp;worried about this problem and trying to find any query which can solve&nbsp;this&nbsp;problem by listing down the available keyspaces.&nbsp;</p>\n\n<p>Some of the queries to solve this problem&nbsp;are mentioned below. Choose the correct query which you can be used to implement the given scenario:</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>Describe keyspaces;</li>\n\t<li>Describe ketspace;</li>\n\t<li>SELECT * FROM system_schema.keyspaces;</li>\n\t<li>SELECT columnfamily_name FROM system.schema_columnfamilies WHERE keyspace_name ='keyspace name';</li>\n</ol>","a":[{"id":1723201,"option":"1 and 4","correct":false},{"id":1723202,"option":"1 and 3","correct":true},{"id":1723203,"option":"2 and 3","correct":false},{"id":1723204,"option":"2 and 4","correct":false}]},{"q":"<p>Your organization is using&nbsp;Cassandra to handle big data workloads. Cassandra provides CQL shell for executing CQL commands&nbsp;interactively.&nbsp;CQL stores data in tables which&nbsp;are located in&nbsp;<em>keyspaces</em>.&nbsp;Assume that you&nbsp;have created the following&nbsp;table named flag<strong>&nbsp;</strong>and a keyspace named region<strong>.</strong></p>\n\n<table border=\"1\" style=\"width: 350px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>Country</td>\n\t\t\t<td>name</td>\n\t\t\t<td>flag</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Belgium</td>\n\t\t\t<td>Ben</td>\n\t\t\t<td>1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Uruguay</td>\n\t\t\t<td>Alice</td>\n\t\t\t<td>3</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Spain</td>\n\t\t\t<td>Bob</td>\n\t\t\t<td>4</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Sri Lanka</td>\n\t\t\t<td>Anita</td>\n\t\t\t<td>2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Saudi Arabia</td>\n\t\t\t<td>John</td>\n\t\t\t<td>3</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>Predict the output of the following query:</p>\n\n<pre class=\"prettyprint\"><code>CREATE CUSTOM INDEX Â fn_prefix ON region (Country)\nUSING 'org.apache.cassandra.index.sasi.SASIIndex';\n\nSELECT count(name) FROM region.flag WHERE Country LIKE '%u%' ALLOW FILTERING;</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p>1.&nbsp;</p>\n\n<table border=\"1\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>system.count(name)</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>2.</p>\n\n<table border=\"1\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>system.count(name)</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>3.</p>\n\n<table border=\"1\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>region.count(name)</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>4.</p>\n\n<table border=\"1\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>region.count(name)</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t</tr>\n\t</tbody>\n</table>","a":[{"id":1723737,"option":"1","correct":true},{"id":1723738,"option":"2","correct":false},{"id":1723739,"option":"3","correct":false},{"id":1723740,"option":"4","correct":false}]},{"q":"<p>Your organization is using&nbsp;Cassandra to handle big data workloads. Cassandra provides CQL shell for executing CQL commands&nbsp;interactively.&nbsp;CQL stores data in tables which&nbsp;are located in&nbsp;<em>keyspaces</em>.&nbsp;Assume that you&nbsp;have created the following&nbsp;table named&nbsp;cyclist<strong>&nbsp;</strong>and a keyspace named cycling<strong>.</strong></p>\n\n<table border=\"1\" style=\"width: 500px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>id</td>\n\t\t\t<td>race_score</td>\n\t\t\t<td>firstname</td>\n\t\t\t<td>lastname</td>\n\t\t\t<td>rank</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>4</td>\n\t\t\t<td>26</td>\n\t\t\t<td>Alice</td>\n\t\t\t<td>Smith</td>\n\t\t\t<td>5</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>34</td>\n\t\t\t<td>Bob</td>\n\t\t\t<td>Jones</td>\n\t\t\t<td>3</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>7</td>\n\t\t\t<td>49</td>\n\t\t\t<td>Mike</td>\n\t\t\t<td>White</td>\n\t\t\t<td>1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>8</td>\n\t\t\t<td>47</td>\n\t\t\t<td>Lisa</td>\n\t\t\t<td>Davis</td>\n\t\t\t<td>2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>31</td>\n\t\t\t<td>Paul</td>\n\t\t\t<td>Miller</td>\n\t\t\t<td>4</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>Predict the output of the following query:</p>\n\n<pre class=\"prettyprint\"><code>SELECT sum(race_score) FROM cycling.cyclist;</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p>1.&nbsp;</p>\n\n<table border=\"1\" style=\"width: 100px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>race_score</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>187</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>2.</p>\n\n<table border=\"1\" style=\"width: 100px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>sum(race_score)</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>187</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>3.</p>\n\n<table border=\"1\" style=\"width: 100px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>system.sum(sum_score)</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>187</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>4.</p>\n\n<table border=\"1\" style=\"width: 100px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>cycling.sum(sum_score)</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>187</td>\n\t\t</tr>\n\t</tbody>\n</table>","a":[{"id":1723733,"option":"1","correct":false},{"id":1723734,"option":"2","correct":false},{"id":1723735,"option":"3","correct":true},{"id":1723736,"option":"4","correct":false}]},{"q":"<p>Your organization is using&nbsp;Cassandra to handle big data workloads. Cassandra provides a CQL shell for executing CQL commands&nbsp;interactively.&nbsp;CQL stores data in <em>tables</em> that&nbsp;are located in&nbsp;<em>keyspaces</em>.&nbsp;Assume that you&nbsp;have created the following&nbsp;table named <em>rank_by_year and&nbsp;</em>the keyspace named <em>cycling</em>.</p>\n\n<table border=\"1\" style=\"width: 500px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>race_year</td>\n\t\t\t<td>race_name</td>\n\t\t\t<td>rank</td>\n\t\t\t<td>cyclist_name</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2014</td>\n\t\t\t<td>DELHI RACE</td>\n\t\t\t<td>1</td>\n\t\t\t<td>Alice Smith</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2014</td>\n\t\t\t<td>DELHI RACE</td>\n\t\t\t<td>2</td>\n\t\t\t<td>Bob Jones</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2014</td>\n\t\t\t<td>DELHI RACE</td>\n\t\t\t<td>3</td>\n\t\t\t<td>Mike White</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2014</td>\n\t\t\t<td>MUMBAI RACE</td>\n\t\t\t<td>1</td>\n\t\t\t<td>Bob Jones</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2014</td>\n\t\t\t<td>MUMBAI RACE</td>\n\t\t\t<td>2</td>\n\t\t\t<td>Mike White</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2014</td>\n\t\t\t<td>MUMBAI RACE</td>\n\t\t\t<td>3</td>\n\t\t\t<td>Mary Brown</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2015</td>\n\t\t\t<td>CHENNAI RACE</td>\n\t\t\t<td>1</td>\n\t\t\t<td>Lisa Davis</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2015</td>\n\t\t\t<td>CHENNAI RACE</td>\n\t\t\t<td>2</td>\n\t\t\t<td>Paul Miller</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2015</td>\n\t\t\t<td>MUMBAI RACE</td>\n\t\t\t<td>1</td>\n\t\t\t<td>Mary Brown</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2015</td>\n\t\t\t<td>MUMBAI RACE</td>\n\t\t\t<td>2</td>\n\t\t\t<td>John Wilson</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2015</td>\n\t\t\t<td>MUMBAI RACE</td>\n\t\t\t<td>3</td>\n\t\t\t<td>Tara Green</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>Predict the output of the following query:</p>\n\n<pre class=\"prettyprint\"><code>SELECT *\nFROM cycling.rank_by_year\nPER PARTITION LIMIT 2;</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<table border=\"1\" style=\"width: 500px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>race_year</td>\n\t\t\t<td>race_name</td>\n\t\t\t<td>rank</td>\n\t\t\t<td>cyclist_name</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2014</td>\n\t\t\t<td>DELHI RACE</td>\n\t\t\t<td>1</td>\n\t\t\t<td>Alice Smith</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2014</td>\n\t\t\t<td>DELHI RACE</td>\n\t\t\t<td>2</td>\n\t\t\t<td>Bob Jones</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2015</td>\n\t\t\t<td>CHENNAI RACE</td>\n\t\t\t<td>1</td>\n\t\t\t<td>Lisa Davis</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2015</td>\n\t\t\t<td>CHENNAI RACE</td>\n\t\t\t<td>2</td>\n\t\t\t<td>Paul Miller</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2015</td>\n\t\t\t<td>MUMBAI RACE</td>\n\t\t\t<td>1</td>\n\t\t\t<td>Mary Brown</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2015</td>\n\t\t\t<td>MUMBAI RACE</td>\n\t\t\t<td>2</td>\n\t\t\t<td>John Wilson</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>2.</p>\n\n<table border=\"1\" style=\"width: 500px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>race_year</td>\n\t\t\t<td>race_name</td>\n\t\t\t<td>rank</td>\n\t\t\t<td>cyclist_name</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2014</td>\n\t\t\t<td>DELHI RACE</td>\n\t\t\t<td>1</td>\n\t\t\t<td>Alice Smith</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2014</td>\n\t\t\t<td>DELHI RACE</td>\n\t\t\t<td>3</td>\n\t\t\t<td>Mike White</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2015</td>\n\t\t\t<td>CHENNAI RACE</td>\n\t\t\t<td>1</td>\n\t\t\t<td>Lisa Davis</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2015</td>\n\t\t\t<td>CHENNAI RACE</td>\n\t\t\t<td>2</td>\n\t\t\t<td>Paul Miller</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2015</td>\n\t\t\t<td>MUMBAI RACE</td>\n\t\t\t<td>1</td>\n\t\t\t<td>Mary Brown</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2015</td>\n\t\t\t<td>MUMBAI RACE</td>\n\t\t\t<td>3</td>\n\t\t\t<td>Tara Green</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>3.</p>\n\n<table border=\"1\" style=\"width: 500px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>race_year</td>\n\t\t\t<td>race_name</td>\n\t\t\t<td>rank</td>\n\t\t\t<td>cyclist_name</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2014</td>\n\t\t\t<td>DELHI RACE</td>\n\t\t\t<td>1</td>\n\t\t\t<td>Alice Smith</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2014</td>\n\t\t\t<td>DELHI RACE</td>\n\t\t\t<td>3</td>\n\t\t\t<td>Mike White</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2015</td>\n\t\t\t<td>CHENNAI RACE</td>\n\t\t\t<td>1</td>\n\t\t\t<td>Lisa Davis</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2015</td>\n\t\t\t<td>CHENNAI RACE</td>\n\t\t\t<td>2</td>\n\t\t\t<td>Paul Miller</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2014</td>\n\t\t\t<td>MUMBAI RACE</td>\n\t\t\t<td>1</td>\n\t\t\t<td>Bob Jones</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2014</td>\n\t\t\t<td>MUMBAI RACE</td>\n\t\t\t<td>2</td>\n\t\t\t<td>Mike White</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>4.</p>\n\n<table border=\"1\" style=\"width: 500px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>race_year</td>\n\t\t\t<td>race_name</td>\n\t\t\t<td>rank</td>\n\t\t\t<td>cyclist_name</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2014</td>\n\t\t\t<td>DELHI RACE</td>\n\t\t\t<td>1</td>\n\t\t\t<td>Alice Smith</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2014</td>\n\t\t\t<td>DELHI RACE</td>\n\t\t\t<td>2</td>\n\t\t\t<td>Bob Jones</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2015</td>\n\t\t\t<td>CHENNAI RACE</td>\n\t\t\t<td>1</td>\n\t\t\t<td>Lisa Davis</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2015</td>\n\t\t\t<td>CHENNAI RACE</td>\n\t\t\t<td>2</td>\n\t\t\t<td>Paul Miller</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2014</td>\n\t\t\t<td>MUMBAI RACE</td>\n\t\t\t<td>1</td>\n\t\t\t<td>Bob Jones</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2014</td>\n\t\t\t<td>MUMBAI RACE</td>\n\t\t\t<td>2</td>\n\t\t\t<td>Mike White</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2015</td>\n\t\t\t<td>MUMBAI RACE</td>\n\t\t\t<td>1</td>\n\t\t\t<td>Mary Brown</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2015</td>\n\t\t\t<td>MUMBAI RACE</td>\n\t\t\t<td>2</td>\n\t\t\t<td>John Wilson</td>\n\t\t</tr>\n\t</tbody>\n</table>","a":[{"id":1733569,"option":"1","correct":true},{"id":1733570,"option":"2","correct":false},{"id":1733571,"option":"3","correct":false},{"id":1733572,"option":"4","correct":false}]},{"q":"<p>Your organization is using&nbsp;Cassandra to handle big data workloads.&nbsp;&nbsp;Cassandra provides a&nbsp;<em>CQL shell</em> for executing CQL commands&nbsp;interactively. Assume that you&nbsp;have created the following table named&nbsp;<em>emp</em></p>\n\n<table border=\"1\" style=\"width: 500px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>emp_id</td>\n\t\t\t<td>emp_ name</td>\n\t\t\t<td>emp_city</td>\n\t\t\t<td>emp_phone</td>\n\t\t\t<td>emp_sal</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>Alice</td>\n\t\t\t<td>Hyderabad</td>\n\t\t\t<td>1234567890</td>\n\t\t\t<td>50000</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>Ben</td>\n\t\t\t<td>Hyderabad</td>\n\t\t\t<td>2345671898</td>\n\t\t\t<td>40000</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>Tara</td>\n\t\t\t<td>Chennai</td>\n\t\t\t<td>5614183653</td>\n\t\t\t<td>45000</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>Predict the output of the following query:</p>\n\n<pre class=\"prettyprint\"><code>DELETE FROM emp WHERE emp_id=3;\nselect * from emp;</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<table border=\"1\" style=\"width: 500px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>emp_id</td>\n\t\t\t<td>emp_ name</td>\n\t\t\t<td>emp_city</td>\n\t\t\t<td>emp_phone</td>\n\t\t\t<td>emp_sal</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>Alice</td>\n\t\t\t<td>Hyderabad</td>\n\t\t\t<td>1234567890</td>\n\t\t\t<td>50000</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>Ben</td>\n\t\t\t<td>Hyderabad</td>\n\t\t\t<td>2345671898</td>\n\t\t\t<td>40000</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>Tara</td>\n\t\t\t<td>Chennai</td>\n\t\t\t<td>5614183653</td>\n\t\t\t<td>NULL</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>2.</p>\n\n<table border=\"1\" style=\"width: 500px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>emp_id</td>\n\t\t\t<td>emp_ name</td>\n\t\t\t<td>emp_city</td>\n\t\t\t<td>emp_phone</td>\n\t\t\t<td>emp_sal</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>Alice</td>\n\t\t\t<td>Hyderabad</td>\n\t\t\t<td>1234567890</td>\n\t\t\t<td>50000</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>Ben</td>\n\t\t\t<td>Hyderabad</td>\n\t\t\t<td>2345671898</td>\n\t\t\t<td>40000</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>3.</p>\n\n<table border=\"1\" style=\"width: 500px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>emp_id</td>\n\t\t\t<td>emp_ name</td>\n\t\t\t<td>emp_city</td>\n\t\t\t<td>emp_phone</td>\n\t\t\t<td>emp_sal</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>Alice</td>\n\t\t\t<td>Hyderabad</td>\n\t\t\t<td>1234567890</td>\n\t\t\t<td>50000</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>Ben</td>\n\t\t\t<td>Hyderabad</td>\n\t\t\t<td>2345671898</td>\n\t\t\t<td>40000</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>Tara</td>\n\t\t\t<td>Chennai</td>\n\t\t\t<td>5614183653</td>\n\t\t\t<td>45000</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>&nbsp;</p>","a":[{"id":1733377,"option":"1","correct":false},{"id":1733378,"option":"2","correct":true},{"id":1733379,"option":"3","correct":false},{"id":1733380,"option":"Table does not exist","correct":false}]},{"q":"<p>Your organization is using&nbsp;Cassandra to handle big data workloads.&nbsp;&nbsp;Cassandra provides <em>CQL shell </em>for executing CQL commands&nbsp;interactively. Assume that you&nbsp;have created the following table named&nbsp;<em>temperature_by_date</em><strong>:</strong></p>\n\n<table border=\"1\" style=\"width: 500px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>weathersation_id</td>\n\t\t\t<td>date</td>\n\t\t\t<td>event_time</td>\n\t\t\t<td>temperature</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1234WXYZ</td>\n\t\t\t<td>2016-04-03</td>\n\t\t\t<td>2016-04-03 07:01:00</td>\n\t\t\t<td>73</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1234WXYZ</td>\n\t\t\t<td>2016-04-03</td>\n\t\t\t<td>2016-04-03 07:02:00</td>\n\t\t\t<td>70</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1234WXYZ</td>\n\t\t\t<td>2016-04-04</td>\n\t\t\t<td>2016-04-04 07:01:00</td>\n\t\t\t<td>73</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1234WXYZ</td>\n\t\t\t<td>2016-04-04</td>\n\t\t\t<td>2016-04-03 07:02:00</td>\n\t\t\t<td>74</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>Predict the output of the following query:</p>\n\n<pre class=\"prettyprint\"><code>SELECT weatherstation_id, date, MAX(temperature)Â \nFROM temperature_by_dayÂ \nGROUP BY weatherstation_id, date, event_time;</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<table border=\"1\" style=\"width: 501px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td style=\"width: 149px;\">weathersation_id</td>\n\t\t\t<td style=\"width: 107px;\">date</td>\n\t\t\t<td style=\"width: 223px;\">system.max(temperature)</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"width: 149px;\">1234WXYZ</td>\n\t\t\t<td style=\"width: 107px;\">2016-04-03</td>\n\t\t\t<td style=\"width: 223px;\">73</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"width: 149px;\">1234WXYZ</td>\n\t\t\t<td style=\"width: 107px;\">2016-04-04</td>\n\t\t\t<td style=\"width: 223px;\">74</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>2.</p>\n\n<table border=\"1\" style=\"width: 500px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>weathersation_id</td>\n\t\t\t<td>date</td>\n\t\t\t<td>system.max(temperature)</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1234WXYZ</td>\n\t\t\t<td>2016-04-03</td>\n\t\t\t<td>73</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1234WXYZ</td>\n\t\t\t<td>2016-04-03</td>\n\t\t\t<td>70</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1234WXYZ</td>\n\t\t\t<td>2016-04-04</td>\n\t\t\t<td>74</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>3.</p>\n\n<table border=\"1\" style=\"width: 500px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>weathersation_id</td>\n\t\t\t<td>date</td>\n\t\t\t<td>system.max(temperature)</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1234WXYZ</td>\n\t\t\t<td>2016-04-03</td>\n\t\t\t<td>73</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1234WXYZ</td>\n\t\t\t<td>2016-04-04</td>\n\t\t\t<td>73</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1234WXYZ</td>\n\t\t\t<td>2016-04-04</td>\n\t\t\t<td>74</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>4.</p>\n\n<table border=\"1\" style=\"width: 500px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>weathersation_id</td>\n\t\t\t<td>date</td>\n\t\t\t<td>system.max(temperature)</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1234WXYZ</td>\n\t\t\t<td>2016-04-03</td>\n\t\t\t<td>73</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1234WXYZ</td>\n\t\t\t<td>2016-04-03</td>\n\t\t\t<td>70</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1234WXYZ</td>\n\t\t\t<td>2016-04-04</td>\n\t\t\t<td>73</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1234WXYZ</td>\n\t\t\t<td>2016-04-04</td>\n\t\t\t<td>74</td>\n\t\t</tr>\n\t</tbody>\n</table>","a":[{"id":1733369,"option":"1","correct":false},{"id":1733370,"option":"2","correct":false},{"id":1733371,"option":"3","correct":false},{"id":1733372,"option":"4","correct":true}]},{"q":"<p>Your organization is using Cassandra to handle big data workloads. Cassandra provides a CQL shell for executing CQL commands interactively. What is the scope of user-defined CQL type in Cassandra and how can you&nbsp;access a type&nbsp;outside its scope?</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>The scope of a user-defined type is the keyspace in which you define it and to access a type from a keyspace outside its scope: name of the type&nbsp;followed by a period followed the&nbsp;keyspace name</li>\n\t<li>The scope of a user-defined type is the global i.e. it can be accessed from any keyspace&nbsp;and to access a type from a keyspace outside its scope: type_name.keyspace_name&nbsp;</li>\n\t<li>The scope of a user-defined type is the global i.e. it can be accessed from any keyspace&nbsp;and to access a type from a keyspace outside its scope:&nbsp;keyspace_name.type_name&nbsp;</li>\n\t<li>The scope of a user-defined type is the keyspace in which you define it and to access a type from a keyspace outside its scope: keyspace name followed by a period followed the name of the type</li>\n</ol>","a":[{"id":1727663,"option":"1","correct":false},{"id":1727664,"option":"2","correct":false},{"id":1727665,"option":"3","correct":false},{"id":1727666,"option":"4","correct":true}]},{"q":"<p>Your organization is using Cassandra to handle big data workloads. Cassandra provides a CQL shell for executing CQL commands interactively. You want to perform the following commands on the&nbsp;table:</p>\n\n<ul>\n\t<li>Create a table collect_things with fields 'k' and 'v' as int type and tuple type with int, text, and float type respectively</li>\n\t<li>Insert values {0, (3, 'bar', 2.1)} into table collect_things&nbsp;</li>\n\t<li>Insert values {1, (4, 'candy', 6.0)} into table collect_things</li>\n\t<li>Insert values {2, (5, '\"chocolate', 4.6)} into table collect_things&nbsp;</li>\n\t<li>Filter a selection using tuple v where {3, 'bar', 2.1}</li>\n</ul>\n\n<p><em>//Note: Here k&nbsp;is the primary key</em></p>\n\n<p>Which of the following commands can be used to implement the given scenario?</p>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>&gt; CREATE TABLE collect_things (k int PRIMARY KEY, v tuple&lt;int, text, float&gt; );\n&gt; INSERT INTO collect_things (k, v) VALUES{0, &lt;3, 'bar', 2.1&gt;};\n&gt; INSERT INTO collect_things (k, v) VALUES{1, &lt;4, 'candy', 6.0&gt;};\n&gt; INSERT INTO collect_things (k, v) VALUES{2, &lt;5, '\"chocolate', 4.6&gt;};\n&gt; CREATE INDEX on collect_things (v) WHERE v = (3, 'bar', 2.1);</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>&gt; CREATE TABLE collect_things (k int PRIMARY KEY, v tuple(int, text, float) );\n&gt; INSERT INTO collect_things (k, v) VALUES{0, (3, 'bar', 2.1)};\n&gt; INSERT INTO collect_things (k, v) VALUES{1, (4, 'candy', 6.0)};\n&gt; INSERT INTO collect_things (k, v) VALUES{2, (5, '\"chocolate', 4.6)};\n&gt; CREATE INDEX on collect_things (v);\n&gt; SELECT * FROM collect_things WHERE v = (3, 'bar', 2.1);</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>&gt; CREATE TABLE collect_things (k int PRIMARY KEY, v tuple(int, text, float) );\n&gt; INSERT INTO collect_things (k, v) VALUES{0, (3, 'bar', 2.1)};\n&gt; INSERT INTO collect_things (k, v) VALUES{1, (4, 'candy', 6.0)};\n&gt; INSERT INTO collect_things (k, v) VALUES{2, (5, '\"chocolate', 4.6)};\n&gt; CREATE INDEX on collect_things (v) WHERE v = (3, 'bar', 2.1);</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>&gt; CREATE TABLE collect_things (k int PRIMARY KEY, v tuple&lt;int, text, float&gt; );\n&gt; INSERT INTO collect_things (k, v) VALUES(0, (3, 'bar', 2.1));\n&gt; INSERT INTO collect_things (k, v) VALUES(1, (4, 'candy', 6.0));\n&gt; INSERT INTO collect_things (k, v) VALUES(2, (5, '\"chocolate', 4.6));\n&gt; CREATE INDEX on collect_things (v);\n&gt; SELECT * FROM collect_things WHERE v = (3, 'bar', 2.1);</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1727659,"option":"1","correct":false},{"id":1727660,"option":"2","correct":false},{"id":1727661,"option":"3","correct":false},{"id":1727662,"option":"4","correct":true}]},{"q":"<p style=\"text-align: justify;\">Your organization is using Cassandra to handle big data workloads. Cassandra provides a CQL shell for executing CQL commands interactively. A blob type is suitable for storing a small image or short string. You want to perform the following on table bios:</p>\n\n<ul>\n\t<li style=\"text-align: justify;\">Create a table with username as varchar&nbsp;type and bio as blob type</li>\n\t<li style=\"text-align: justify;\">Insert values {'Ben', 3 } where 3 is added as bigintAsBlob</li>\n\t<li style=\"text-align: justify;\">Add a&nbsp;column \"id\" with bigint type</li>\n\t<li style=\"text-align: justify;\">Insert values {'Ben',0x0000000000000003} where '0x0000000000000003' is added as blobAsBigint&nbsp;into bios&nbsp;</li>\n\t<li style=\"text-align: justify;\">Display all the contents of the table bios</li>\n</ul>\n\n<p style=\"text-align: justify;\"><em>//Note: Here user_name is the primary key</em></p>\n\n<p style=\"text-align: justify;\">Which of the following commands can be used to implement the given scenario?</p>\n\n<p style=\"text-align: justify;\"><strong>Options</strong></p>\n\n<p style=\"text-align: justify;\">1.</p>\n\n<pre class=\"prettyprint\"><code>&gt; CREATE TABLE bios ( user_name varchar, bio blob);\n&gt; INSERT INTO bios (user_name, bigintAsBlob(bio)) VALUES ('Ben', 3);\n&gt; UPDATE TABLE bios ADD id bigint;\n&gt; INSERT INTO bios (user_name, blobAsBigint(id)) VALUES ('Ben', 0x0000000000000003);\n&gt; SELECT * FROM bios;</code></pre>\n\n<p style=\"text-align: justify;\">2.</p>\n\n<pre class=\"prettyprint\"><code>&gt; CREATE TABLE bios ( user_name varchar PRIMARY KEY, bio blob);\n&gt; INSERT INTO bios (user_name, bio) VALUES ('Ben', bigintAsBlob(3));\n&gt; UPDATE TABLE bios ADD id bigint;\n&gt; INSERT INTO bios (user_name, id) VALUES ('Ben', blobAsBigint(0x0000000000000003));\n&gt; SELECT * FROM bios;</code></pre>\n\n<p style=\"text-align: justify;\">3.</p>\n\n<pre class=\"prettyprint\"><code>&gt; CREATE TABLE bios ( user_name varchar PRIMARY KEY, bio blob);\n&gt; INSERT INTO bios (user_name, bio) VALUES ('Ben', bigintAsBlob(3));\n&gt; ALTER TABLE bios ADD id bigint;\n&gt; INSERT INTO bios (user_name, id) VALUES ('Ben', blobAsBigint(0x0000000000000003));\n&gt; SELECT * FROM bios;</code></pre>\n\n<p style=\"text-align: justify;\">4.</p>\n\n<pre class=\"prettyprint\"><code>&gt; CREATE TABLE bios ( user_name varchar, bio blob);\n&gt; INSERT INTO bios (user_name, bigintAsBlob(bio)) VALUES ('Ben', 3);\n&gt; ALTER TABLE bios ADD id bigint;\n&gt; INSERT INTO bios (user_name, blobAsBigint(id)) VALUES ('Ben', 0x0000000000000003);\n&gt; SELECT * FROM bios;</code></pre>","a":[{"id":1727651,"option":"1","correct":false},{"id":1727652,"option":"2","correct":false},{"id":1727653,"option":"3","correct":true},{"id":1727654,"option":"4","correct":false}]},{"q":"<p>Your organization is using&nbsp;Cassandra to handle big data workloads. Cassandra provides a CQL shell for executing CQL commands&nbsp;interactively.&nbsp;CQL stores data in <em>tables</em> that&nbsp;are located in&nbsp;<em>keyspaces</em>.&nbsp;Assume that you&nbsp;have created the following&nbsp;table named <em>playlists</em><strong>&nbsp;</strong>and the keyspace named <em>songs</em>.</p>\n\n<table border=\"1\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>id</td>\n\t\t\t<td>song_order</td>\n\t\t\t<td>album</td>\n\t\t\t<td>artist</td>\n\t\t\t<td>song_id</td>\n\t\t\t<td>title</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>62c3609271</td>\n\t\t\t<td>4</td>\n\t\t\t<td>No One Rides</td>\n\t\t\t<td>Fu Manchu</td>\n\t\t\t<td>7db1a49083</td>\n\t\t\t<td>Ojo Rojo</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>62c3609272</td>\n\t\t\t<td>3</td>\n\t\t\t<td>Roll Away</td>\n\t\t\t<td>Back Door Slam</td>\n\t\t\t<td>2b09185b84</td>\n\t\t\t<td>Outside Woman Blues</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>62c3609273</td>\n\t\t\t<td>2</td>\n\t\t\t<td>Shower</td>\n\t\t\t<td>Fu&nbsp;Manchu</td>\n\t\t\t<td>8a17261885</td>\n\t\t\t<td>Moving in Stereo</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>62c3609274</td>\n\t\t\t<td>1</td>\n\t\t\t<td>Beautiful</td>\n\t\t\t<td>Fu Manchu</td>\n\t\t\t<td>a3e6f8f886</td>\n\t\t\t<td>La Grange</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>First, you want to change the album name to \"Last Ride\" where song_id is \"8a17261885\" and \"a3e6f8f886\". Secondly, you want to add a column \"event\" of \"list\" collection type. Lastly insert a value into the events list as&nbsp;'Criterium du Dauphine','Tour de Suisse' where song_order is 4.</p>\n\n<p>Which of the following commands can be used to implement the given scenario?</p>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>&gt; UPDATE songs.playlists SET album = 'Last Ride' WHERE song_id IN (8a17261885, a3e6f8f886);\n&gt; ALTER TABLE songs.playlists ADD events list&lt;text&gt;;\n&gt; UPDATE songs.playlists SET events = {'Criterium du Dauphine','Tour de Suisse'} where song_order=4;</code></pre>\n\n<p>&nbsp;2.</p>\n\n<pre class=\"prettyprint\"><code>&gt; UPDATE playlists SET album = 'Last Ride' WHERE id IN {8a17261885, a3e6f8f886};\n&gt; ALTER TABLE playlists ADD events list&lt;text&gt;;\n&gt; UPDATE playlists SET events = ['Criterium du Dauphine','Tour de Suisse'] where song_order=4;</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>&gt; UPDATE songs.playlists SET album = 'Last Ride' WHERE id IN {8a17261885, a3e6f8f886};\n&gt; ALTER TABLE songs.playlists ADD events list;\n&gt; UPDATE playlists SET events = {'Criterium du Dauphine','Tour de Suisse'} where song_order=4;</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>&gt; UPDATE playlists SET album = 'Last Ride' WHERE song_id IN (8a17261885, a3e6f8f886);\n&gt; ALTER TABLE songs.playlists ADD events list&lt;text&gt;;\n&gt; UPDATE songs.playlists SET events = ['Criterium du Dauphine','Tour de Suisse'] where song_order=4;</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1727647,"option":"1","correct":false},{"id":1727648,"option":"2","correct":false},{"id":1727649,"option":"3","correct":false},{"id":1727650,"option":"4","correct":true}]},{"q":"<p>Your organization is using&nbsp;Cassandra to handle big data workloads. Cassandra provides a CQL shell for executing CQL commands&nbsp;interactively.&nbsp;CQL stores data in <em>tables</em> which&nbsp;are located in&nbsp;<em>keyspaces</em>.&nbsp;Assume that you&nbsp;have created the following&nbsp;table named <em>playlists</em>.</p>\n\n<table border=\"1\" style=\"width: 500px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>id</td>\n\t\t\t<td>song_order</td>\n\t\t\t<td>album</td>\n\t\t\t<td>artist</td>\n\t\t\t<td>song_id</td>\n\t\t\t<td>title</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>62c3609271</td>\n\t\t\t<td>4</td>\n\t\t\t<td>No One Rides</td>\n\t\t\t<td>Fu Manchu</td>\n\t\t\t<td>7db1a49083</td>\n\t\t\t<td>Ojo Rojo</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>62c3609272</td>\n\t\t\t<td>3</td>\n\t\t\t<td>Roll Away</td>\n\t\t\t<td>Back Door Slam</td>\n\t\t\t<td>2b09185b84</td>\n\t\t\t<td>Outside Woman Blues</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>62c3609273</td>\n\t\t\t<td>2</td>\n\t\t\t<td>Shower</td>\n\t\t\t<td>Fu&nbsp;Manchu</td>\n\t\t\t<td>8a17261885</td>\n\t\t\t<td>Moving in Stereo</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>62c3609274</td>\n\t\t\t<td>1</td>\n\t\t\t<td>Beautiful</td>\n\t\t\t<td>Fu Manchu</td>\n\t\t\t<td>a3e6f8f886</td>\n\t\t\t<td>La Grange</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>Now, you have created an index on playlist artist for fast accesing of the data inside the tables by writing the following command on Cassandra shell:&nbsp;</p>\n\n<pre class=\"prettyprint\"><code>CREATE INDEX ON playlists(artist);</code></pre>\n\n<p>Predict the output of the following query:</p>\n\n<pre class=\"prettyprint\"><code>SELECT album, titleÂ \nFROM playlistsÂ \nWHERE artist = 'Fu Manchu';</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<table border=\"1\" style=\"width: 250px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>album</td>\n\t\t\t<td>title</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Shower</td>\n\t\t\t<td>Moving in Stereo</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>No One Rides</td>\n\t\t\t<td>Ojo Rojo</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>2.</p>\n\n<table border=\"1\" style=\"width: 250px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>album</td>\n\t\t\t<td>title</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Shower</td>\n\t\t\t<td>Moving in Stereo</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Beautiful</td>\n\t\t\t<td>La Grange&nbsp;</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>3.</p>\n\n<table border=\"1\" style=\"width: 250px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>album</td>\n\t\t\t<td>title</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Roll Away</td>\n\t\t\t<td>Outside Woman Blues</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Beautiful</td>\n\t\t\t<td>La Grange</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>4.</p>\n\n<table border=\"1\" style=\"width: 250px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>album</td>\n\t\t\t<td>title</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Shower</td>\n\t\t\t<td>Moving in Stereo</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Roll Away</td>\n\t\t\t<td>Outside Woman Blues</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p><br>\n&nbsp;</p>","a":[{"id":1727142,"option":"1","correct":true},{"id":1727143,"option":"2","correct":false},{"id":1727144,"option":"3","correct":false},{"id":1727145,"option":"4","correct":false}]},{"q":"<p>Your organization is using Cassandra to handle big data workloads. Cassandra provides CQL shell for executing CQL commands interactively. If you have to create a map of key-value pairs both as string and named&nbsp;as <em>fav</em> in a table named as <em>users</em> with id as PRIMARY KEY.<br>\nWhich of the following commands can you use in order to implement the given scenario?</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>CREATE TABLE users(\nid text PRIMARY KEY,\nfavs ordered_map&lt;text,ascii&gt;\n);</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>CREATE TABLE users(\nid text PRIMARY KEY,\nfavs map&lt;text,text&gt;\n);</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>CREATE TABLE users(\nid text PRIMARY KEY,\nfavs ordered_map&lt;text,text&gt;\n);</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>CREATE TABLE users(\nid text PRIMARY KEY,\nfavs map&lt;text,ascii&gt;\n);</code></pre>\n\t</li>\n</ol>\n\n<p>&nbsp;</p>\n\n<p style=\"margin-left: 40px;\">&nbsp;</p>","a":[{"id":1724489,"option":"1","correct":false},{"id":1724490,"option":"2","correct":true},{"id":1724491,"option":"3","correct":false},{"id":1724492,"option":"4","correct":false}]},{"q":"<p>Your organization is using&nbsp;Cassandra to handle big data workloads. Cassandra provides a CQL shell for executing CQL commands&nbsp;interactively.&nbsp;CQL stores data in tables which&nbsp;are located in&nbsp;<em>keyspaces</em>.&nbsp;Assume that you&nbsp;have created the following&nbsp;table named <em>student</em><strong>&nbsp;</strong>and a keyspace named <em>university</em><strong>.</strong></p>\n\n<table border=\"1\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>id&nbsp;&nbsp;&nbsp;&nbsp;</td>\n\t\t\t<td>name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>\n\t\t\t<td>grade_point&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>Ben</td>\n\t\t\t<td>8.8</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>Alice</td>\n\t\t\t<td>6.7</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>Bob</td>\n\t\t\t<td>7.03</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>4</td>\n\t\t\t<td>Anita</td>\n\t\t\t<td>9.68</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>5</td>\n\t\t\t<td>John</td>\n\t\t\t<td>6.4</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>Predict the output of the following query:</p>\n\n<pre class=\"prettyprint\"><code>SELECT MAX(grade_point),name FROM university.student\n</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<table border=\"1\" style=\"width: 200px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>name</td>\n\t\t\t<td>system.max(grade_point)</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Ben</td>\n\t\t\t<td>8.8</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>2.</p>\n\n<table border=\"1\" style=\"width: 200px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>name</td>\n\t\t\t<td>max(grade_point)</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Anita</td>\n\t\t\t<td>9.68</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>3.</p>\n\n<table border=\"1\" style=\"width: 200px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>name</td>\n\t\t\t<td>system.max(grade_point)</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Anita</td>\n\t\t\t<td>9.68</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>4.</p>\n\n<table border=\"1\" style=\"width: 200px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>name</td>\n\t\t\t<td>max(grade_point)</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Ben</td>\n\t\t\t<td>8.8</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>&nbsp;</p>","a":[{"id":1725819,"option":"1","correct":false},{"id":1725820,"option":"2","correct":false},{"id":1725821,"option":"3","correct":true},{"id":1725822,"option":"4","correct":false}]},{"q":"<p>Your organization is using&nbsp;Cassandra to handle big data workloads. Cassandra provides a CQL shell for executing CQL commands&nbsp;interactively.&nbsp;CQL stores data in tables that&nbsp;are located in&nbsp;keyspaces.&nbsp;Assume that you&nbsp;have created the following&nbsp;table named <em>cycling&nbsp;</em>and a keyspace named <em>cyclist_name</em><strong>.</strong>&nbsp;You have inserted 150000 rows into the table cyclist_name</p>\n\n<pre class=\"prettyprint\"><code>CREATE TABLE cycling.cyclist_name(Â \nÂ  Â id UUID PRIMARY KEY,Â \nÂ  Â lastname text,\nÂ  Â firstname text\n);</code></pre>\n\n<p>Predict the output of the following query:</p>\n\n<pre class=\"prettyprint\"><code>SELECT lastnameÂ \nFROM cycling.cyclist_nameÂ \nLIMIT 50000;</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1727138,"option":"Cassandra will return 50000 rows in any order.","correct":false},{"id":1727139,"option":"Cassandra will only return the Â middle 50000 rows.","correct":false},{"id":1727140,"option":"Cassandra will only return the last 50000 rows.","correct":false},{"id":1727141,"option":"Cassandra will only returns the first 50000 rows.","correct":true}]},{"q":"<p>Your organization is using Cassandra to handle big data workloads. Cassandra provides a CQL shell for executing CQL commands interactively. In Cassandra, if you want to condense all the selected rows that share the same values for a set of columns into a single row then which command should you use?</p>","a":[{"id":1725823,"option":"GROUP BY","correct":true},{"id":1725824,"option":"ORDER BY","correct":false},{"id":1725825,"option":"LIMIT","correct":false},{"id":1725826,"option":"ALLOW FILTERING","correct":false}]},{"q":"<p>Your organization is using Cassandra to handle big data workloads. Cassandra provides a CQL shell for executing CQL commands interactively. If you have to create a set of unique values of a string and named them as tags in a table named as<strong> </strong><em>images</em> with name as PRIMARY KEY.<br>\nWhich of the following is the correct command for creating a table with information&nbsp;as mentioned in the given scenario?</p>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>CREATE TABLE users(\nname text PRIMARY KEY,\ntags set&lt;text&gt;\n);</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>CREATE TABLE users(\nname ascii PRIMARY KEY,\nfavs set&lt;text&gt;\n);</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>CREATE TABLE users(\nname text,Â \nfavs set&lt;varchar&gt;\n);</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>CREATE TABLE users(\nname text PRIMARY KEY,Â \nfavs set&lt;ascii&gt;\n);</code></pre>","a":[{"id":1724485,"option":"1","correct":true},{"id":1724486,"option":"2","correct":false},{"id":1724487,"option":"3","correct":false},{"id":1724488,"option":"4","correct":false}]},{"q":"<p style=\"text-align: justify;\">Your organization is using Cassandra to handle big data workloads. Cassandra provides a CQL shell for executing CQL commands interactively. You have to create a sorted collection of non-unique scores where each score are added&nbsp;there position in order in the list. Which of the following commands can you use in order to create a table with id (string) as the primary key.</p>\n\n<p style=\"text-align: justify;\"><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>CREATE TABLE users(\nname text PRIMARY KEY,\nscores set&lt;text&gt;\n);</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>CREATE TABLE users(\nname text PRIMARY KEY,\nscores list&lt;text&gt;\n);</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>CREATE TABLE users(\nname ascii PRIMARY KEY ,Â \nscores set&lt;varchar&gt;\n);</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>CREATE TABLE users(\nname varchar PRIMARY KEY,Â \nscores list&lt;ascii&gt;\n);</code></pre>\n\t</li>\n</ol>","a":[{"id":1724300,"option":"1","correct":false},{"id":1724301,"option":"2","correct":true},{"id":1724302,"option":"3","correct":false},{"id":1724303,"option":"4","correct":false}]},{"q":"<p>Your organization is using&nbsp;<em>Cassandra</em> to handle big data workloads.&nbsp;Cassandra provides a CQL shell for executing CQL commands&nbsp;interactively.&nbsp;CQL stores data in tables which&nbsp;are located in&nbsp;keyspaces. You want to alter keyspace named <em>mykey</em> such that the replication factor of data should be spread across the entire cluster.</p>\n\n<p>How can you implement the given scenario?</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>ALTER KEYSPACE mykey\nÂ  Â  WITH replication = {'class': 'NetworkTopologyStrategy', 'replication_factor' : 1};</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>ALTER TABLE mykey\nÂ  Â WITH replication = {'class': 'SimpleStrategy', 'replication_factor' : 1};</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>ALTER TABLE mykey\nÂ  Â WITH replication = {'class': 'NetworkTopologyStrategy', 'replication_factor' : 3};</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>âALTER KEYSPACE mykey\nÂ  Â  WITH replication = {'class': 'SimpleStrategy', 'replication_factor' : 3};â</code></pre>\n\n\t<p>&nbsp;</p>\n\t</li>\n</ol>","a":[{"id":1723157,"option":"1","correct":false},{"id":1723158,"option":"2","correct":false},{"id":1723159,"option":"3","correct":false},{"id":1723160,"option":"4","correct":true}]},{"q":"<p>Your organization is using&nbsp;Cassandra to handle big data workloads. Cassandra provides documented shell commands in addition to CQL commands. Suppose you have a table named <em>employee</em> with the following details:</p>\n\n<table border=\"1\" style=\"width: 500px;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>id</td>\n\t\t\t<td>Emp_name</td>\n\t\t\t<td>Emp_city</td>\n\t\t\t<td>Emp_contact</td>\n\t\t\t<td>Emp_sal</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>Alice</td>\n\t\t\t<td>Tokyo</td>\n\t\t\t<td>1234</td>\n\t\t\t<td>100000</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>Ben</td>\n\t\t\t<td>Moscow</td>\n\t\t\t<td>2345</td>\n\t\t\t<td>200000</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>Bob</td>\n\t\t\t<td>New York</td>\n\t\t\t<td>5678</td>\n\t\t\t<td>90000</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>4</td>\n\t\t\t<td>Tara</td>\n\t\t\t<td>Delhi</td>\n\t\t\t<td>8537</td>\n\t\t\t<td>100000</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>You want to store the results of the query applied on this table in a file named \"OutputFile\". Write the commands to display the full table and store its snapshot in a file called \"OutputFile\". Close the screenshot capturing after storing the result of the query.</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>CAPTURE on '/home/hadoop/CassandraProgs/Outputfile';\nselect Emp_name, Emp_city, Emp_contact, Emp_sal from employee;\ncapture off;</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>CAPTURE '\\home\\hadoop\\CassandraProgs\\Outputfile';\nselect * from employee;\ncapture;</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>CAPTURE '/home/hadoop/CassandraProgs/Outputfile';\nselect * from employee;\ncapture off;</code></pre>\n\t</li>\n</ol>","a":[{"id":1723145,"option":"1","correct":false},{"id":1723146,"option":"2","correct":false},{"id":1723147,"option":"3","correct":false},{"id":1723148,"option":"4","correct":true}]},{"q":"<p>Your organization is using&nbsp;Cassandra to handle big data workloads. CQL provides the facility of using Collection data types in Cassandra.&nbsp;You want to delete data from the table \"office\".&nbsp;Which of the following command should we use&nbsp;to perform the specified task?</p>","a":[{"id":1722708,"option":"TRUNCATE office","correct":true},{"id":1722709,"option":"DROP TABLE office","correct":false},{"id":1722710,"option":"DELETE office","correct":false},{"id":1722711,"option":"DROP office","correct":false}]},{"q":"<p>Your organization is using&nbsp;<em>Cassandra</em> to handle big data workloads.&nbsp;&nbsp;Cassandra provides a CQL shell for executing CQL commands&nbsp;interactively. In cassandra, what does the function <em>toDate</em> does?</p>","a":[{"id":1722365,"option":"Converts the timeuuid argument into a data type","correct":true},{"id":1722366,"option":"Converts the timestamp argument into a data type","correct":false},{"id":1722367,"option":"Converts the date argument into a bigInt raw value","correct":false},{"id":1722368,"option":"Convert the timeuuid argument into a bigInt raw value","correct":false}]},{"q":"<p>Your organization is using&nbsp;<em>Cassandra</em> to handle big data workloads.&nbsp;Cassandra provides CQL shell for executing CQL commands&nbsp;interactively.&nbsp;CQL stores data in tables which&nbsp;are located in<strong>&nbsp;</strong><em>keyspaces</em>. Which of the following statement regarding keyspaces&nbsp;are&nbsp;correct?</p>\n\n<p><strong>Statements</strong></p>\n\n<ol>\n\t<li>Each keyspace generally has many column families.</li>\n\t<li>A clusture often declares only one keyspace.</li>\n\t<li>Keyspace name should be comprised only of alphanumeric&nbsp;character</li>\n\t<li>Size of keyspace name should be greater that 48.</li>\n</ol>","a":[{"id":1721471,"option":"1,2 ,3","correct":true},{"id":1721472,"option":"2, 3, 4","correct":false},{"id":1721473,"option":"1, 3,  4","correct":false},{"id":1721474,"option":"1, 2, 3, 4","correct":false}]},{"q":"<p>Your organization is using&nbsp;<em>Cassandra</em> to handle big data workloads.&nbsp;Cassandra provides a CQL shell for executing CQL commands&nbsp;interactively. CQL stores data in tables that&nbsp;are located in&nbsp;<em>keyspaces</em>. What is the command to use a keyspace?</p>","a":[{"id":1721467,"option":"USE","correct":true},{"id":1721468,"option":"START KEYSPACE","correct":false},{"id":1721469,"option":"START","correct":false},{"id":1721470,"option":"USE KEYSPACE","correct":false}]},{"q":"<p>Your organization is using&nbsp;<em>Cassandra</em> to handle big data workloads.&nbsp;Cassandra provides a CQL shell for executing CQL commands&nbsp;interactively. CQL stores data in tables which&nbsp;are located in&nbsp;keyspaces. You want to use the replication strategy that sets the replication factor independently for each data-centers. Which of the following&nbsp;class value you should use for&nbsp;the mentioned scenario?</p>","a":[{"id":1721463,"option":"SimpleStrategy","correct":false},{"id":1721464,"option":"NetworkTopologyStrategy","correct":true},{"id":1721465,"option":"TopologyStrategy","correct":false},{"id":1721466,"option":"MeshStrategy","correct":false}]},{"q":"<p>Your organization is using&nbsp;<em>Cassandra</em> to handle big data workloads. Cassandra provides a CQL shell for executing CQL commands&nbsp;interactively. Which of the following CQL data type in Cassandra represent a constant hexadecimal number?</p>","a":[{"id":1720638,"option":"decimal","correct":false},{"id":1720639,"option":"inet","correct":false},{"id":1720640,"option":"double","correct":false},{"id":1720641,"option":"blob","correct":true}]},{"q":"<p>Your organization is using&nbsp;<em>Cassandra</em> to handle big data workloads. Cassandra provides a CQL shell for executing CQL commands&nbsp;interactively. Which of the following is not a <em>CQL Collection Datatype</em>?&nbsp;</p>","a":[{"id":1720634,"option":"Hash","correct":true},{"id":1720635,"option":"Set","correct":false},{"id":1720636,"option":"Map","correct":false},{"id":1720637,"option":"List","correct":false}]},{"q":"<p>Your organization is using&nbsp;<em>Cassandra</em> to handle big data workloads. Cassandra provides a CQL shell for executing CQL commands&nbsp;interactively. Which of the following is not a <em>CQL Datatype</em>?&nbsp;</p>","a":[{"id":1720630,"option":"ascii","correct":false},{"id":1720631,"option":"integer","correct":true},{"id":1720632,"option":"blob","correct":false},{"id":1720633,"option":"double","correct":false}]},{"q":"<p>Your organization is using&nbsp;<em>Cassandra</em> to handle big data workloads. Cassandra provides a CQL shell,&nbsp;which is a python-based command-line client for executing CQL commands&nbsp;interactively. You have logged in to your account in cqlsh and now you want to switch&nbsp;user accounts without ending the CQL shell session. How can you log in as a different user with that user's&nbsp;credentials?</p>","a":[{"id":1719909,"option":"login user_name [password]","correct":false},{"id":1719910,"option":"LOGIN user_name [password]","correct":true},{"id":1719911,"option":"login user_name password","correct":false},{"id":1719912,"option":"Both 1 or 2","correct":false}]},{"q":"<p>Your organization is using&nbsp;<em>Cassandra</em> to handle big data workloads. Cassandra provides a CQL shell,&nbsp;which is a python-based command-line client for executing CQL commands&nbsp;interactively. How can you connect to a remote node IP address which is 10.1.1.20 and use&nbsp;the default port: 9042? Write&nbsp;the cqlsh command to&nbsp;connect&nbsp;the CQL session to a specified Cassandra node on a Linux host with a colored output in the shell.</p>\n\n<p><strong>Commands:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>bin/cqlsh --C 10.1.1.20</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>bin/cqlsh --color --host 10.1.1.20 --port 9042</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>bin/cqlsh --C --host 10.1.1.20 --port 9042</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>bin/cqlsh --color 10.1.1.20:9042</code></pre>\n\t</li>\n</ol>","a":[{"id":1719905,"option":"Only 3","correct":false},{"id":1719906,"option":"Only 4","correct":false},{"id":1719907,"option":"Both 1 or 4","correct":true},{"id":1719908,"option":"Both 2 or 3","correct":false}]},{"q":"<p>Your organization is using&nbsp;<em>Cassandra</em> to handle big data workloads.&nbsp;The Cassandra read process ensures fast reads.&nbsp;The Cassandra read process is illustrated in the diagram&nbsp;below:</p>\n\n<p><img alt=\"\" height=\"300\" src=\"https://he-s3.s3.ap-southeast-1.amazonaws.com/media/uploads/a1383171-e599-4abc-81b7-ac4bf0bf53d6.png\" width=\"767\"></p>\n\n<p>The diagram&nbsp;explains the Cassandra read process in a cluster with two data centers, five racks, and <em>16</em>&nbsp;nodes. In the image,&nbsp;data row1 is placed in this cluster. Data row1 is a row of data with four replicas.</p>\n\n<ul>\n\t<li>The first copy is stored on node 7 of data center 1</li>\n\t<li>The second copy is stored on node 6 of data center 1</li>\n\t<li>The third copy is stored on node 4&nbsp;of data center 1</li>\n\t<li>The fourth copy is stored on node 13 of data center 2</li>\n</ul>\n\n<p>If a client process is running on data node <em>7</em> wants to access data <em>row1</em>, then what will be the order of read process preference of nodes in the above scenario?</p>\n\n<p><em>Note: The order must be in&nbsp;highest to lowest priority</em></p>","a":[{"id":1719901,"option":"Node 7, Node 5, Node 3, Node 13","correct":false},{"id":1719902,"option":"Node 7,  Node 6, Node 4, Node 16","correct":true},{"id":1719903,"option":"Node 16, Node 4, Node 6, Node 7","correct":false},{"id":1719904,"option":"Node 13, Node 3, Node 5, Node 7","correct":false}]},{"q":"<p>Cassandra is based on distributed system architecture. Any distributed system can strongly deliver any two out of the three properties:&nbsp;<em>Consistency,&nbsp;Availability and&nbsp;Partition-tolerance</em>. Cassandra provides flexibility for choosing between consistency and availability while querying data. Which of the following considerations related to data availability and consistency are correct?</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>The replication factor should ideally be an even&nbsp;number.</li>\n\t<li>The time required to get the acknowledgment from replicas is directly proportional to the number of replicas requests for acknowledgment.&nbsp;</li>\n\t<li>The number of racks in a data center should be a factor&nbsp;of the replication factor.</li>\n\t<li>The common replication factor used is three, which provides a balance between replication overhead, data distribution, and consistency for most workloads.&nbsp;</li>\n</ol>","a":[{"id":1719607,"option":"1 and 2","correct":false},{"id":1719608,"option":"2 and 4","correct":true},{"id":1719609,"option":"1, 2 and 3","correct":false},{"id":1719610,"option":"2 , 3 and 4","correct":false}]},{"q":"<p>Your organization is using&nbsp;Cassandra to handle big data workloads. Cassandra provides documented shell commands in addition to CQL commands. Given below is the format of <em>copy</em> shell command in Cassandra</p>\n\n<pre class=\"prettyprint\"><code>COPY table_name [( column_list )]\nFROM 'file_name'[, 'file2_name', ...] | STDIN\n[WITH option = 'value' [AND ...]]</code></pre>\n\n<p>Copy command has a list of \"copy options\" to be used with it. Which of the following copy option allows you to store all rows that are not imported in a file?</p>","a":[{"id":1718599,"option":"JSONFILE","correct":false},{"id":1718600,"option":"CONFIG_FILE","correct":false},{"id":1718601,"option":"LOGFILE","correct":false},{"id":1718602,"option":"ERRFILE","correct":true}]},{"q":"<p>Your organization is using&nbsp;Cassandra to handle big data workloads. Cassandra provides documented shell commands in addition to CQL commands. <em>Consistency</em> command shows the current consistency level, or sets a new consistency level. How can you set consistency level for&nbsp;Lightweight Transactions read requests?</p>","a":[{"id":1718555,"option":"CONSISTENCY","correct":false},{"id":1718556,"option":"CONSISTENCY QUORUM","correct":false},{"id":1718557,"option":"CONSISTENCY LWT","correct":false},{"id":1718558,"option":"CONSISTENCY SERIAL","correct":true}]},{"q":"<p>Your organization is using&nbsp;Cassandra to handle big data workloads.&nbsp;Cassandra supports a per-operation tradeoff between consistency and availability through&nbsp;<em>Consistency Levels</em>. If replication factor&nbsp;<code>RF = 3</code>,&nbsp; then from how many replicas&nbsp;a&nbsp;<code>QUORUM</code>&nbsp;request will require responses from?</p>","a":[{"id":1717985,"option":"atleast 5/3 replicas","correct":false},{"id":1717986,"option":"atleast 5/2 replicas","correct":false},{"id":1717987,"option":"atleast 3/2 replicas","correct":false},{"id":1717988,"option":"atleast 2/3 replicas","correct":true}]},{"q":"<p>Your organization is using&nbsp;Cassandra to handle big data workloads.&nbsp;Cassandra uses a Last-Write-Wins Element-Set conflict-free replicated data type for each CQL row to resolve conflicting mutations on replica sets. Which of the following data type will you use&nbsp;to resolve conflicting mutations on replica sets&nbsp;for each CQL row?</p>","a":[{"id":1717936,"option":"First-Write-Wins Element-Set conflict-free non-replicated data","correct":false},{"id":1717937,"option":"First-Write-Wins Element-Set conflict-free replicated data","correct":false},{"id":1717938,"option":"Last-Write-Wins Element-Set conflict-free non-replicated data","correct":false},{"id":1717939,"option":"Last-Write-Wins Element-Set conflict-free replicated data","correct":true}]},{"q":"<p>Your organization is using&nbsp;Cassandra to handle big data workloads. You have&nbsp;Docker Desktop for Windows software installed in your system. Which of the following&nbsp;commands can you use to start Cassandra using Docker?</p>\n\n<p><strong>Commands</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>docker run --name cassandra cassandra\n</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>docker run --name cassandra\n</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>docker pull cassandra:latest</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>docker push cassandra:latest</code></pre>\n\n<p>5.</p>\n\n<pre class=\"prettyprint\"><code>docker run --rm -d --name cassandra --hostname cassandra --network cassandra</code></pre>\n\n<p>6.</p>\n\n<pre class=\"prettyprint\"><code>docker run --rm -d --name cassandra --hostname cassandra --network cassandra cassandra</code></pre>","a":[{"id":1717932,"option":"1, 3, 5","correct":false},{"id":1717933,"option":"2, 4, 5","correct":false},{"id":1717934,"option":"3, 1, 6","correct":true},{"id":1717935,"option":"4, 2, 5","correct":false}]},{"q":"<p>Your organization is using&nbsp;Cassandra to handle big data workloads. CQL provides the facility of using Collection data types in Cassandra. Which of the following is the correct command&nbsp;to insert&nbsp;data into the elements in a list?</p>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>INSERT INTO data[name, email] VALUES ('ramu', {'abc@gmail.com','cba@yahoo.com'})</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>INSERT INTO data[name, email] VALUES ('ramu', {['abc@gmail.com','cba@yahoo.com']})</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>INSERT INTO data(name, email) VALUES ('ramu', {['abc@gmail.com','cba@yahoo.com']})</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>INSERT INTO data(name, email) VALUES ('ramu', ['abc@gmail.com','cba@yahoo.com'])</code></pre>","a":[{"id":1715323,"option":"1","correct":false},{"id":1715324,"option":"2","correct":false},{"id":1715325,"option":"3","correct":false},{"id":1715326,"option":"4","correct":true}]},{"q":"<p>Your organization is using&nbsp;Cassandra to handle big data workloads. CQL provides the facility of using Collection data types in Cassandra. Which of&nbsp; the following is the correct command&nbsp;to update the list data type in a table called <em>mytable</em>?</p>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>UPDATE mytable\nSET email : email like 'xyz@tutorialspoint.com'\nwhere name : 'ramu';</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>UPDATE mytable\nSET email = email like 'xyz@tutorialspoint.com'\nwhere name = 'ramu';</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>UPDATE mytable\nSET email : email +['xyz@tutorialspoint.com']\nwhere name : 'ramu';</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>UPDATE mytable\nSET email = email +['xyz@tutorialspoint.com']\nwhere name = 'ramu';</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1715239,"option":"1","correct":false},{"id":1715240,"option":"2","correct":false},{"id":1715241,"option":"3","correct":false},{"id":1715242,"option":"4","correct":true}]},{"q":"<p>Your organization is using&nbsp;Cassandra to handle big data workloads. Cassandra provides documented shell commands in addition to CQL commands. What will be the shell command&nbsp;to copy the table named&nbsp;<em>emp</em>&nbsp;to the file&nbsp;<em>myfile</em>?</p>\n\n<p><em>emp</em> table contains the following&nbsp;fields:</p>\n\n<pre>   emp_id int,\n   emp_city text,\n   emp_name text,\n   emp_phone varint,\n   emp_sal varint\n</pre>","a":[{"id":1713938,"option":"COPY emp to myFile;","correct":false},{"id":1713939,"option":"COPY emp (emp_id, emp_city, emp_name, emp_phone,emp_sal) TO myfile;","correct":false},{"id":1713940,"option":"COPY 'emp ' TO âmyfileâ;","correct":false},{"id":1713941,"option":"COPY emp (emp_id, emp_city, emp_name, emp_phone,emp_sal) TO âmyfileâ;","correct":true}]},{"q":"<p>Your organisation is using&nbsp;Cassandra to handle big data workloads. You are using&nbsp;Cassandra query language shell&nbsp;<em>(cqlsh)</em>&nbsp;that allows you to&nbsp;execute&nbsp;<em>Cassandra Query Language (CQL)</em><strong>&nbsp;</strong>commands. Which of the following is not a valid <em>time </em>type?</p>","a":[{"id":1711899,"option":"'08:12:54'","correct":false},{"id":1711900,"option":"'08:12:54.123456789'","correct":false},{"id":1711901,"option":"'08:12:54.1234567891'","correct":true},{"id":1711902,"option":"'08:12:54.123'","correct":false}]},{"q":"<p>Your organization is using&nbsp;Cassandra to handle big data workloads. You are using&nbsp;Cassandra query language shell&nbsp;<em>(cqlsh)</em>&nbsp;that allows you to&nbsp;execute&nbsp;<em>Cassandra Query Language (CQL)</em><strong>&nbsp;</strong>commands. Which of the following is not a valid <em>timestamp</em> value&nbsp;for Mar 2, 2011, at 04:05:00 AM, GMT?</p>","a":[{"id":1711815,"option":"1299038700000","correct":false},{"id":1711816,"option":"20110203040500","correct":true},{"id":1711817,"option":"'2011-02-03 04:05:00.000+0000'","correct":false},{"id":1711818,"option":"'2011-02-03T04:05:00.000+0000'","correct":false}]},{"q":"<p>Your organization is using&nbsp;Cassandra to handle big data workloads. You are using&nbsp;Cassandra query language shell&nbsp;<em>(cqlsh)&nbsp;</em>that allows you to&nbsp;execute&nbsp;<em>Cassandra Query Language (CQL)&nbsp;</em>commands. Which of the following are&nbsp;<em>constant </em>in CQL?</p>\n\n<p><strong>Options</strong><br>\n&nbsp; &nbsp; 1. double<br>\n&nbsp; &nbsp; 2. NaN<br>\n&nbsp; &nbsp; 3. bool<br>\n&nbsp; &nbsp; 4. Infinity</p>","a":[{"id":1711811,"option":"1 and 2","correct":false},{"id":1711812,"option":"2 and 3","correct":false},{"id":1711813,"option":"2 and 4","correct":true},{"id":1711814,"option":"1 and 4","correct":false}]},{"q":"<p>You are working in an organization and&nbsp;to meet emerging requirements for&nbsp;highly available storage systems, you started using&nbsp;<em>Apache&nbsp;Cassandra</em><strong>.&nbsp;</strong>In Cassandra,&nbsp;commitlog segments are limited by the&nbsp;<em><code>commitlog_segment_size_in_mb</code></em><strong><code>.</code></strong>&nbsp;Max mutation size is also configurable via<em>&nbsp;<code>max_mutation_size_in_kb</code></em>&nbsp;setting in&nbsp;<code>cassandra.yaml</code>.&nbsp;What is the default size of<em>&nbsp;<code>max_mutation_size_in_kb</code></em>?</p>","a":[{"id":1711125,"option":"commitlog_segment_size_in_mb * 1024","correct":false},{"id":1711126,"option":"1/2*commitlog_segment_size_in_mb * 1000","correct":false},{"id":1711127,"option":"2*commitlog_segment_size_in_mb * 1024","correct":false},{"id":1711128,"option":"1/2*commitlog_segment_size_in_mb * 1024","correct":true}]},{"q":"<p>You are working in an organization and&nbsp;to meet emerging requirements for&nbsp;highly available storage systems, you started using&nbsp;<em>Apache&nbsp;Cassandra</em><strong>.&nbsp;</strong>To provide durability in the case of an unexpected shutdown, any data written to Cassandra will first be written to a commit log.&nbsp;Commitlog Segments are limited by the&nbsp;<strong><code>c</code></strong><em><code>ommitlog_segment_size_in_m</code></em><strong><code>.</code></strong>&nbsp;What is the default size of&nbsp;<code>commitlog_segment_size_in_mb?</code></p>","a":[{"id":1711121,"option":"16","correct":false},{"id":1711122,"option":"32","correct":true},{"id":1711123,"option":"64","correct":false},{"id":1711124,"option":"128","correct":false}]},{"q":"<p>You are working in an organization and&nbsp;to meet emerging requirements for scalable, reliable, and highly available storage systems, you started using <em>Apache&nbsp;Cassandra</em><strong>.&nbsp;</strong></p>\n\n<p>Apache Cassandra configuration settings can be&nbsp;configured in which of the following files?</p>","a":[{"id":1710797,"option":"config.yaml.tf","correct":false},{"id":1710798,"option":"configuration.json","correct":false},{"id":1710799,"option":"cassandra.yaml","correct":true},{"id":1710800,"option":"config.tf","correct":false}]},{"q":"<p>Apache Cassandra was initially designed&nbsp;using a staged event-driven architecture (SEDA<u>)</u> to implement a combination of Amazonâs Dynamo&nbsp;distributed storage and replication techniques.&nbsp;</p>\n\n<p>Each node in the Dynamo system has which of the following&nbsp;components?</p>\n\n<ol>\n\t<li>Request coordination over a partitioned dataset component</li>\n\t<li>Foreign keys or referential integrity component</li>\n\t<li>Ring membership and failure detection component</li>\n\t<li>A local persistence (storage) engine component</li>\n</ol>","a":[{"id":1710793,"option":"1, 2, 3","correct":false},{"id":1710794,"option":"2, 3, 4","correct":false},{"id":1710795,"option":"1, 3, 4","correct":true},{"id":1710796,"option":"1, 2, 4 ","correct":false}]},{"q":"<p>You are working in an organization and&nbsp;to meet emerging requirements for scalable, reliable, and highly available storage systems, you started using <em>Apache&nbsp;Cassandra</em><strong>.</strong> Which of the following challenges and design objectives are handled by Cassandra systems?</p>\n\n<ol>\n\t<li>Partitioned key-oriented queries</li>\n\t<li>Distributed joins</li>\n\t<li>Flexible schema</li>\n\t<li>Cross partition transactions</li>\n\t<li>Full multi-master database replication</li>\n</ol>\n\n<p>&nbsp;</p>","a":[{"id":1710789,"option":"1, 2 and 4","correct":false},{"id":1710790,"option":"1, 3 and 5","correct":true},{"id":1710791,"option":"2, 3, 4 and 5","correct":false},{"id":1710792,"option":"All of these","correct":false}]}]
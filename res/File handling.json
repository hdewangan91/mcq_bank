[{"q":"<p>Alice has implemented the below Java code to perform various operations on her file named hackfile.txt. If she is required to implement various in-built functions of this <strong>File</strong> class, then which of the following statements about these in-built functions in file handling are correct:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>import java.io.File; \n\nFile myhackObj = new File(\"hackfile.txt\"); </code></pre>\n\n<p><strong>Statements</strong></p>\n\n<ol>\n\t<li>The method <strong>canRead()</strong> is used to test whether the file is readable or not.</li>\n\t<li>The method <strong>createFile()</strong> is used to create an empty file.</li>\n\t<li>The method <strong>getsName()</strong> is used to return the name of the file.</li>\n\t<li>The method <strong>list()</strong> is used to return an array of the files in the directory.</li>\n</ol>","a":[{"id":1580635,"option":"1, 3, and 4","correct":false},{"id":1580636,"option":"1 and 4","correct":true},{"id":1580637,"option":"2 and 4","correct":false},{"id":1580638,"option":"All of these","correct":false}]},{"q":"<p>In Java, you are working on file handling. You have an existing file named <em>hack_file. </em>Now, in order to get convert the path of the file to the \"real\" path of the <em>hack_file</em> you are using the <strong>toRealPath() </strong>method. But some error occurred and the method threw an exception. Which of the following statements can be the reason behind this error?<br>\n </p>\n\n<p><strong>Statements:</strong></p>\n\n<ol>\n\t<li>The file <em>hack_file </em>does not exist.<br>\n\t </li>\n\t<li>The file <em>hack_file </em>cannot be accessed.<br>\n\t </li>\n\t<li>The path to the file <em>hack_file </em>contains symbolic links.</li>\n</ol>","a":[{"id":1555887,"option":"1 and 3","correct":false},{"id":1555888,"option":"2 and 3","correct":false},{"id":1555889,"option":"1 and 2","correct":true},{"id":1555890,"option":"None of these","correct":false}]},{"q":"<p>In Java, you are working on file handling. You have a file named <em>hack_file, </em>the path to which is given below. If the path to the file <em>hack_file</em> contains some redundant elements then which of the following methods can you use to remove those redundant elements?<br>\n </p>\n\n<p>hack_file:</p>\n\n<pre class=\"prettyprint\"><code>/home/hack_user/../hack_dir/hack_file</code></pre>\n\n<p> </p>\n\n<p> </p>\n\n<p><strong>Methods:</strong><br>\n </p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>normalize()</code></pre>\n\t<br>\n\t </li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>remove()</code></pre>\n\t<br>\n\t </li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>clean()</code></pre>\n\t<br>\n\t </li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>remove_redundancy()</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1555147,"option":"1","correct":true},{"id":1555148,"option":"2","correct":false},{"id":1555149,"option":"3","correct":false},{"id":1555150,"option":"4","correct":false}]},{"q":"<p>In Java, you are working on file handling. You have a file named <em>hack_file. </em>The code given below performs some operations on the path to the file <em>hack_file.</em> Now, If you have executed the following code, then which of the following statements is correct?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>import java.nio.file.*;\n  \npublic class hackerearth \n{\n    public static void main(String[] args)\n    {\n        Path path = Paths.get(\"/hack_user/hack_dir/hack_file\");\n  \n        Path hackPath = path.toRealPath();\n \n    }\n}</code></pre>\n\n<p><br>\n </p>\n\n<p><strong>Statements:</strong></p>\n\n<ol>\n\t<li>If the path variable contains a relative path then the hackPath variable will have an absolute path.<br>\n\t </li>\n\t<li>If the path variable contains redundant elements then the hackPath variable will have a path with those elements removed.<br>\n\t </li>\n\t<li>The code will throw an exception if <em>hack_file </em>cannot be accessed.</li>\n</ol>","a":[{"id":1555911,"option":"1 and 2","correct":false},{"id":1555912,"option":"2 and 3","correct":false},{"id":1555913,"option":"1 and 3","correct":false},{"id":1555914,"option":"All of these","correct":true}]},{"q":"<p>In Java, you are working on file handling. You have a file named <em>hack_file. </em>The code given below performs some operations on the path to the file <em>hack_file.</em> Now, If you have executed the following code, then which of the following statements is correct?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>import java.nio.file.*;\n  \npublic class hackerearth \n{\n    public static void main(String[] args)\n    {\n        Path path = Paths.get(\"C:\\\\..\\\\.\\\\hack_users\\\\hack_user1\" + \"\\\\hack_dir\\\\hack_file\");\n  \n        Path hackPath = path.normalize();\n \n    }\n}</code></pre>\n\n<p><br>\n </p>\n\n<p><strong>Statements:</strong></p>\n\n<ol>\n\t<li>The given code removes any redundant elements in the path to the file <em>hack_file.</em><br>\n\t </li>\n\t<li>The given code performs a pure syntactic operation.<br>\n\t </li>\n\t<li>Path obtained through the code will always be valid.</li>\n</ol>","a":[{"id":1555907,"option":"1 and 2","correct":false},{"id":1555908,"option":"2 and 3","correct":false},{"id":1555909,"option":"1 and 3","correct":false},{"id":1555910,"option":"All of these","correct":true}]},{"q":"<p>Which of the following sequential files is used in COBOL mainframe environment?</p>","a":[{"id":403009,"option":"Text ","correct":false},{"id":403010,"option":"Data ","correct":false},{"id":403011,"option":"Index ","correct":false},{"id":403012,"option":"Entry sequential data set","correct":true}]},{"q":"<p>In Perl, which of the following commands is used to open the <strong>MAX</strong> file handle with existing <strong>MX</strong> file?</p>","a":[{"id":62100,"option":"open MAX \">MX\";","correct":false},{"id":62101,"option":"open MAX, \">MX\";","correct":true},{"id":62102,"option":"open \"MX\" MAX;","correct":false},{"id":62103,"option":"open \">MX\", MAX;\r\n","correct":false}]},{"q":"<p>Which of the following sequential files is used in mainframe environment in COBOL?</p>","a":[{"id":402997,"option":"Data ","correct":false},{"id":402998,"option":"Text ","correct":false},{"id":402999,"option":"Linked ","correct":false},{"id":403000,"option":"Flat","correct":true}]},{"q":"<p>Which of the following COBOL files uses the record key value to fetch the record?</p>","a":[{"id":402925,"option":"Index","correct":true},{"id":402926,"option":"Sequential ","correct":false},{"id":402927,"option":"Linked ","correct":false},{"id":402928,"option":"Text ","correct":false}]},{"q":"<p>Which of the following verbs is used in COBOL to update the file record?</p>","a":[{"id":402817,"option":"Update ","correct":false},{"id":402818,"option":"Rewrite ","correct":true},{"id":402819,"option":"Modify","correct":false},{"id":402820,"option":"Write ","correct":false}]},{"q":"<p>___________ supports both sequential and random access in COBOL.</p>","a":[{"id":402813,"option":"Relative Access","correct":false},{"id":402814,"option":"Dynamic Access","correct":true},{"id":402815,"option":"Indexed Sequential Access","correct":false},{"id":402816,"option":"None of these","correct":false}]},{"q":"<p>__________ is used in COBOL to comprise records in a sequential order.</p>","a":[{"id":402801,"option":"Data file","correct":true},{"id":402802,"option":"Index File","correct":false},{"id":402803,"option":"Sequential file","correct":false},{"id":402804,"option":"Text file","correct":false}]},{"q":"<p>In an operating system, which of the following <strong>file operations </strong>are valid:</p>\n\n<ol>\n\t<li>Merging files</li>\n\t<li>Sorting files</li>\n\t<li>Execute</li>\n\t<li>Appending</li>\n</ol>","a":[{"id":720163,"option":"1 and 2","correct":false},{"id":720164,"option":"3 and 4","correct":false},{"id":720165,"option":"1, 2, and 4","correct":false},{"id":720166,"option":"All of these","correct":true}]},{"q":"<p>In Perl, which of the following functions is used to close the directory handle <strong>DIRHANDLE</strong>?</p>","a":[{"id":62132,"option":"close DIRHANDLE","correct":false},{"id":62133,"option":"closedir DIRHANDLE","correct":true},{"id":62134,"option":"close_directory DIRHANDLE","correct":false},{"id":62135,"option":"None of these\r\n","correct":false}]},{"q":"<p>What does the following Perl code do:</p>\n<pre class=\"prettyprint\"><code>open (FH,\"xyz\");\n</code></pre>","a":[{"id":62036,"option":"Opens the file xyz for overwriting","correct":false},{"id":62037,"option":"Opens a document, namely xyz, for reading","correct":true},{"id":62038,"option":"Contains an error, so it won't compile","correct":false},{"id":62039,"option":"Opens the file xyz for appending","correct":false}]}]
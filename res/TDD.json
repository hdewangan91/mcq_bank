[{"q":"<p>In TDD, which of the following sequences of levels about the levels in the Test Maturity Model (TMM) are correct:</p>\n\n<ol>\n\t<li>Optimized</li>\n\t<li>Measurement and management</li>\n\t<li>Integrated</li>\n\t<li>Initial</li>\n\t<li>Defined</li>\n</ol>","a":[{"id":571323,"option":"1 -> 2 -> 3 -> 4 -> 5","correct":false},{"id":571324,"option":"5 -> 4 -> 3 -> 2 -> 1","correct":false},{"id":571325,"option":"4 -> 5 -> 3 -> 2 -> 1","correct":true},{"id":571326,"option":"5 -> 4 -> 2 -> 3 -> 1","correct":false}]},{"q":"<p>Which of the following statements about the difference between the <strong>Test-Driven Development (TDD)</strong> and <strong>Agile Model Driven Development (AMDD) </strong>are correct:</p>\n\n<ol>\n\t<li>TDD shortens the programming feedback loop whereas AMDD shortens the modeling feedback loop.</li>\n\t<li>TDD promotes high-quality communication with stakeholders and developers whereas AMDD promotes the development of high-quality code</li>\n\t<li>TDD has limited scope for software works whereas AMDD has a broad scope including stakeholders.</li>\n</ol>\n\n<p> </p>","a":[{"id":733318,"option":"1 and 2","correct":false},{"id":733319,"option":"2 and 3","correct":false},{"id":733320,"option":"1 and 3","correct":true},{"id":733321,"option":"All of these","correct":false}]},{"q":"<p>In TDD, which of the following steps should be undertaken as a part of <strong>iteration modeling</strong>:</p>\n\n<ol>\n\t<li>Use the agile process for each iteration and add a new work item with priority.</li>\n\t<li>Work items added may be reprioritized or removed from items stack any time.</li>\n\t<li>Have discussions on how to implement each requirement.</li>\n\t<li>Have a modeling session involving a team of 2 or 3 members to discuss issues on paper.</li>\n</ol>","a":[{"id":735480,"option":"1, 2, and 3","correct":true},{"id":735481,"option":"2, 3, and 4","correct":false},{"id":735482,"option":"1, 2, and 4","correct":false},{"id":735483,"option":"All of these","correct":false}]},{"q":"<p>In TDD, which of the following pair values used in all-pair testing is valid:</p>\n\n<ol>\n\t<li>Valid Int</li>\n\t<li>Invalid Int</li>\n\t<li>AlphaSpecialCharacter</li>\n\t<li>AlphaNumberCharacter</li>\n</ol>","a":[{"id":735472,"option":"1, 2, and 3","correct":true},{"id":735473,"option":"2, 3, and 4","correct":false},{"id":735474,"option":"2, 3, and 4","correct":false},{"id":735475,"option":"All of these","correct":false}]},{"q":"<p>Assume that you are using TDD while designing a C# application. Which of these statements is most likely to be the reason behind the test cases suffering from <strong>The Flickering Test</strong> anti-pattern?</p>","a":[{"id":735468,"option":"Race conditions","correct":true},{"id":735469,"option":"Buffer overflow","correct":false},{"id":735470,"option":"Scope expansion","correct":false},{"id":735471,"option":"Scope compression","correct":false}]},{"q":"<p>Assume that you are performing TDD on a SUT and the tests pass. However, you notice that the system under test is broken even though all the tests are passing. Which of these anti-patterns is accurately being described in this case?</p>","a":[{"id":735460,"option":"The Liar","correct":true},{"id":735461,"option":"The Free Ride","correct":false},{"id":735462,"option":"The Mother Hen","correct":false},{"id":735463,"option":"The Happy path","correct":false}]},{"q":"<p>Assume that you are performing TDD on a SUT and the system has an edge case that needs to be covered. However, due to time constraints, you decide to modify an existing test case with an assertion to check this edge case. Which of these anti-patterns is accurately being described in this case?</p>","a":[{"id":735456,"option":"The Liar","correct":false},{"id":735457,"option":"The Free Ride","correct":true},{"id":735458,"option":"Excessive Setup","correct":false},{"id":735459,"option":"Hidden Dependency","correct":false}]},{"q":"<p>Assume that you are writing tests for TDD in an n-tier application. Which of these design patterns to mediate between the domain and data mapping layers using a collection-like interface to access domain objects is appropriate?</p>","a":[{"id":735452,"option":"Mock pattern","correct":false},{"id":735453,"option":"Repository pattern","correct":true},{"id":735454,"option":"Chain Gang pattern","correct":false},{"id":735455,"option":"Gang of four pattern","correct":false}]},{"q":"<p>In TDD, assume that you are refactoring code in a test using pluggable selectors. Which of the following problems can arise out of overuse of pluggable selectors?</p>","a":[{"id":735448,"option":"It can result in memory leaks taking place.","correct":false},{"id":735449,"option":"It will lead to reduced performance as use of pluggable selectors is an expensive operation.","correct":false},{"id":735450,"option":"It is problematic to trace where the method is being invoked.","correct":true},{"id":735451,"option":"It may create hidden dependencies.","correct":false}]},{"q":"<p>Which of the following statements about the issues in conducting TDD is true:</p>\n\n<ol>\n\t<li>TDD only focuses on passing the test and not the correctness of it.</li>\n\t<li>TDD is time-consuming in the short term and costly in the long term.</li>\n\t<li>In TDD, writing tests before the code is counterintuitive.</li>\n\t<li>TDD cannot test everything.</li>\n</ol>","a":[{"id":735444,"option":"1, 2, and 3","correct":true},{"id":735445,"option":"2, 3, and 4","correct":false},{"id":735446,"option":"1, 2, and 4","correct":false},{"id":735447,"option":"All of these","correct":false}]},{"q":"<p>In TDD, which of the following cannot be suspected to be an anomaly while performing static testing:</p>\n\n<ol>\n\t<li>The program kills the data object and then uses it.</li>\n\t<li>The program uses the data object and redefines it.</li>\n\t<li>The program uses the data object and kills it.</li>\n\t<li>The program uses the data object and uses it again.</li>\n</ol>","a":[{"id":735440,"option":"1, 2, and 3","correct":false},{"id":735441,"option":"2, 3, and 4","correct":true},{"id":735442,"option":"1, 2, and 4","correct":false},{"id":735443,"option":"All of these","correct":false}]},{"q":"<p>Assume that due to a large amount of legacy code in your organization, the adoption of TDD is being hindered. Which of the following could be the most significant reason for this?</p>","a":[{"id":735432,"option":"The UX will be dated and complex.","correct":false},{"id":735433,"option":"There will be lack of documentation.","correct":false},{"id":735434,"option":"The codebase already exists.","correct":true},{"id":735435,"option":"There will be insufficient adherence to TDD protocol.","correct":false}]},{"q":"<p>If you are moving from a traditional testing cycle to a TDD cycle, then which of the following components or phases would be added in the new cycle?</p>\n\n<ol>\n\t<li>Writing code</li>\n\t<li>Fixing errors</li>\n\t<li>Writing complete automated tests</li>\n</ol>","a":[{"id":735428,"option":"1","correct":true},{"id":735429,"option":"1 and 2","correct":false},{"id":735430,"option":"2 and 3","correct":false},{"id":735431,"option":"All of these","correct":false}]},{"q":"<p>In TDD, which of these could be the possible cause behind tests being extremely fragile because of complicated and badly written unit tests?</p>","a":[{"id":735424,"option":"Each unit in the system is interconnected.","correct":false},{"id":735425,"option":"The units in the system are not well documented.","correct":false},{"id":735426,"option":"Scope is not well defined for each unit in the system.","correct":true},{"id":735427,"option":"All units in the system are not considered in TDD.","correct":false}]},{"q":"<p>In TDD, assume that you are using the Red/Green refactor cycle to keep track of the phases. In which of the following phases would you find it prudent to design how your code will be used by clients?</p>","a":[{"id":733410,"option":"Red","correct":true},{"id":733411,"option":"Refactor","correct":false},{"id":733412,"option":"Any of these","correct":false},{"id":733413,"option":"Green","correct":false}]},{"q":"<p>Assume that a team that is using an agile project methodology would be using TDD in their testing cycle. Once the internal release and change list have been obtained for the first time, which of the following processes need to be completed before acceptance TDD and developer TDD can be performed?</p>","a":[{"id":733402,"option":"Independent testing","correct":true},{"id":733403,"option":"Confirmatory testing","correct":false},{"id":733404,"option":"Developer unit testing","correct":false},{"id":733405,"option":"Defect removal","correct":false}]},{"q":"<p>Assume that you are having scalability issues with your TDD suite and it is taking a lot of time to run. Which of the following is the most appropriate way to split the suite into two components to solve this?</p>","a":[{"id":733394,"option":"One component contains only essential tests, the other component contains tests that are no longer needed. ","correct":false},{"id":733395,"option":"One component contains only tests that run fast, the other component contains tests that are slow/not optimized.","correct":false},{"id":733396,"option":"One component contains the tests for any new functionality that you are currently working on, the other component contains all tests. ","correct":true},{"id":733397,"option":"Splitting the suite is not advisable.","correct":false}]},{"q":"<p>In TDD, which of the following statements makes it infeasible to create a 100% regression test suite?</p>","a":[{"id":733382,"option":"The reusable components are used in the application that does not have a test suite.","correct":false},{"id":733383,"option":"The user interface is complicated and is hard to test.","correct":false},{"id":733384,"option":"Both of these","correct":true},{"id":733385,"option":"None of these","correct":false}]},{"q":"<p>Which of the following statements regarding best practices to be followed during TDD is valid?</p>","a":[{"id":733370,"option":"Ensure that common set-up and teardown logic are separated","correct":true},{"id":733371,"option":"Ensure that a test suit has at least one interdependent test that checks execution based on system state attained by previously executing tests.","correct":false},{"id":733372,"option":"Ensure that there are no time-related tests.","correct":false},{"id":733373,"option":"All of these","correct":false}]},{"q":"<p>In TDD, assume that you are designing support for the complete and effective testing of a complex system. Which of these inherent concerns in the architecture of such a system is unlikely to be supported by TDD:</p>\n\n<ol>\n\t<li>Security</li>\n\t<li>Scalability</li>\n\t<li>Availability</li>\n</ol>","a":[{"id":733366,"option":"1 and 2","correct":false},{"id":733367,"option":"2 and 3","correct":false},{"id":733368,"option":"1 and 3","correct":false},{"id":733369,"option":"All of these","correct":true}]},{"q":"<p>In TDD, assume that you are using both acceptance TDD and developer TDD. The workflow of both the TDDs would be connected. At what point in the flow should the acceptance TDD go through the developer TDD flow?</p>\n\n<p> </p>","a":[{"id":733362,"option":"After the acceptance test is added","correct":false},{"id":733363,"option":"Once the acceptance test passes","correct":false},{"id":733364,"option":"Once the acceptance test fails","correct":false},{"id":733365,"option":"When there are changes made to the acceptance test","correct":true}]},{"q":"<p>In TDD, assume that you have designed time-related tests to allow tolerance for execution in non-real time operating systems. Which of these ways to filter the false negatives in the execution of such tests is most appropriate?</p>","a":[{"id":733358,"option":"Set a margin for late execution ","correct":true},{"id":733359,"option":"Validate the execution at the time of teardown","correct":false},{"id":733360,"option":"Create a self shunt with a separate worker thread for monitoring execution","correct":false},{"id":733361,"option":"Create a Aggregator to collect failed test cases and validate these in a separate iteration before teardown","correct":false}]},{"q":"<p>Which of these statements about the following TDD code which is used to grab the <strong>Callback </strong>object using an<strong> ArgumentCaptor</strong> is correct:</p>\n\n<ol>\n\t<li>An <strong>ActionHandler</strong> is created before calling the <strong>doAction </strong>method of this handler.</li>\n\t<li>The callback is invoked in <strong>doAction </strong>method call.</li>\n</ol>\n\n<pre class=\"prettyprint\"><code>@Test\npublic void givenServiceWithValidResponse_whenCallbackReceived_thenProcessed() {\n    ActionHandler handler = new ActionHandler(service);\n    handler.doAction();\n \n    verify(service).doAction(anyString(), callbackCaptor.capture());\n \n    Callback&lt;Response&gt; callback = callbackCaptor.getValue();\n    Response response = new Response();\n    callback.reply(response);\n \n    String expectedMessage = \"\"Data Response Successful\"\";\n    Data data = response.getData();\n    assertEquals(\n      \"\"Should receive a successful message: \"\", \n      expectedMessage, data.getMessage());</code></pre>\n\n<p> </p>","a":[{"id":733350,"option":"Both of these are correct and statement 2 is the correct explanation of statement 1.","correct":false},{"id":733351,"option":"Both of these are correct and statement 2 is not the correct explanation of statement 1.","correct":true},{"id":733352,"option":"Only statement 1 is correct","correct":false},{"id":733353,"option":"Only statement 2 is correct","correct":false}]},{"q":"<p>Which of the following ways to get the count of all<strong> tr</strong> elements in the table defined on your page using Cucumber is correct?</p>","a":[{"id":733342,"option":"page.all(\"table tr\").count","correct":true},{"id":733343,"option":"page.all(\"table total – table td\").count","correct":false},{"id":733344,"option":"page.all(\"table td\").count","correct":false},{"id":733345,"option":"All of these","correct":false}]},{"q":"<p>In TDD, what is X, Y, and Z in the following Cucumber test script to test user login on a website:</p>\n\n<pre class=\"prettyprint\"><code>Feature: Login Action\n\nScenario: Successful Login with Valid Credentials\n        X User is on Homepage\n        When User Navigate to LogIn Page\n        Y User enters UserName and Password\n        Z Message displayed Login Successfully\n\nScenario: Successful LogOut\n        When User LogOut from the Application\n        Then Message displayed LogOut Successfully</code></pre>\n\n<p> </p>","a":[{"id":733334,"option":"When, And, Then","correct":true},{"id":733335,"option":"If, Then, And","correct":false},{"id":733336,"option":"And, Then, Then","correct":false},{"id":733337,"option":"When, If, Then","correct":false}]},{"q":"<p>In TDD, which of the following annotations would you execute after each test to clean up the test environment such as deleting temporary data, restoring defaults, and saving memory by cleaning up expensive memory structures while running a unit test integrated with JUnit?</p>","a":[{"id":733322,"option":"@After","correct":true},{"id":733323,"option":"@AfterClass","correct":false},{"id":733324,"option":"@Test","correct":false},{"id":733325,"option":"@AfterTest","correct":false}]},{"q":"<p>Assume that you are creating a developer TDD flow that works in conjunction with an acceptance TDD flow. Which of the following steps would come under the developer TDD flow in this case?</p>","a":[{"id":733306,"option":"Making changes to acceptance tests","correct":false},{"id":733307,"option":"Adding developer tests","correct":true},{"id":733308,"option":"Both of these","correct":false},{"id":733309,"option":"None of these","correct":false}]},{"q":"<p>In TDD, if you have created an acceptance test in the process of performing an acceptance TDD, then which of these should be the end goal of the ATDD?</p>","a":[{"id":733302,"option":"To specify comprehensive and executable requirements for your solution ","correct":true},{"id":733303,"option":"To specify comprehensive and executable design for your solution","correct":false},{"id":733304,"option":"To specify minimal and executable requirements for your solution ","correct":false},{"id":733305,"option":"To specify minimal and executable design for your solution","correct":false}]},{"q":"<p>In TDD, which of these practices during the green phase of the Red/Green refactor cycle is valid:</p>\n\n<ol>\n\t<li>You can violate best practices of code writing.</li>\n\t<li>You can duplicate code.</li>\n\t<li>You write all the possible algorithms required.</li>\n</ol>","a":[{"id":733414,"option":"Only 1","correct":false},{"id":733415,"option":"1 and 2","correct":true},{"id":733416,"option":"2 and 3","correct":false},{"id":733417,"option":"All of these","correct":false}]},{"q":"<p>Which of the following statements about TDD, ATDD, and BDD is correct?</p>\n\n<ol>\n\t<li>BDD is used to write a single acceptance test.\n\t<ul>\n\t\t<li>This test fulfills the requirements of the specification or satisfies the behavior of the system.</li>\n\t\t<li>The Developer TDD is used to write a single developer test i.e. a unit test and then the production code to fulfill that test.</li>\n\t</ul>\n\t</li>\n\t<li>TDD is used to write a single acceptance test.\n\t<ul>\n\t\t<li>This test fulfills the requirement of the specification or satisfies the behavior of the system.</li>\n\t\t<li>The Developer BDD is used to write a single developer test i.e. a unit test and then the production code to fulfill that test.</li>\n\t</ul>\n\t</li>\n\t<li>TDD is used to write a single acceptance test.\n\t<ul>\n\t\t<li>This test fulfills the requirement of the specification or satisfies the behavior of the system.</li>\n\t\t<li>The Developer ATDD is used to write a single developer test i.e. a unit test and then the production code to fulfill that test.</li>\n\t</ul>\n\t</li>\n</ol>","a":[{"id":570938,"option":"1","correct":true},{"id":570939,"option":"2","correct":false},{"id":570940,"option":"1 and 3","correct":false},{"id":570941,"option":"2 and 3","correct":false}]},{"q":"<p>Which of the following tools supports TDD?</p>","a":[{"id":570958,"option":"Doc Test","correct":false},{"id":570959,"option":"Ctest","correct":true},{"id":570960,"option":"Csunit","correct":false},{"id":570961,"option":"None of these","correct":false}]},{"q":"<p>Which of the following statements about the prime goal of programming practices with Test Driven Development (TDD) is correct:</p>\n\n<ol>\n\t<li>To help in developing code</li>\n\t<li>To make code clearer</li>\n\t<li>To make code simple and bug-free</li>\n</ol>","a":[{"id":560287,"option":"1 and 2","correct":false},{"id":560288,"option":"1 and 3","correct":false},{"id":560289,"option":"Only 2","correct":false},{"id":560290,"option":"1, 2, and 3","correct":true}]},{"q":"<p>Which of the following statements about the advantages of using white box testing is correct:</p>\n\n<p>1. Forces the test developer to reason carefully about implementation<br>\n2. Errors are revealed in 'hidden' code<br>\n3. No in-depth knowledge of programming languages is required</p>","a":[{"id":572929,"option":"1 and 3","correct":false},{"id":572930,"option":"1 and 2","correct":true},{"id":572931,"option":"All of these","correct":false},{"id":572932,"option":"None of these","correct":false}]},{"q":"<p>In TDD, what is the smallest unit of work that a system can execute?</p>","a":[{"id":572957,"option":"Performance testing","correct":false},{"id":572958,"option":"Work testing","correct":false},{"id":572959,"option":"Thread testing","correct":true},{"id":572960,"option":"None of these","correct":false}]},{"q":"<p>What is a test-management tool used for in TDD?</p>","a":[{"id":571851,"option":"Testware management","correct":false},{"id":571852,"option":"Result logging","correct":false},{"id":571853,"option":"Incident management ","correct":false},{"id":571854,"option":"All of these","correct":true}]},{"q":"<p>In TDD, which of the following is a form of ad-hoc testing?</p>","a":[{"id":572949,"option":"Buddy testing","correct":false},{"id":572950,"option":"Monkey testing","correct":false},{"id":572951,"option":"Pair testing ","correct":false},{"id":572952,"option":"All of these","correct":true}]},{"q":"<p>Which of the following statements regarding the significance of traceability within a requirement tool is correct:</p>\n\n<ol>\n\t<li>To Identify the apt version of test cases to be used</li>\n\t<li>To identify which test cases can be reused or need to be updated</li>\n\t<li>To identify the set tools to be used<br>\n\t </li>\n</ol>","a":[{"id":572973,"option":"1 and 3","correct":false},{"id":572974,"option":"1 and 2","correct":true},{"id":572975,"option":"All of these","correct":false},{"id":572976,"option":"None of these","correct":false}]},{"q":"<p>Which of the following .NET tools does BDD utilize as an extension of TDD?</p>","a":[{"id":572969,"option":"WatiR","correct":false},{"id":572970,"option":"Cucumber","correct":false},{"id":572971,"option":"Rspec","correct":false},{"id":572972,"option":"Mspec","correct":true}]},{"q":"<p>Which of the following Ruby tools does BDD utilize as an extension of TDD?</p>","a":[{"id":572977,"option":"SpecUnit","correct":false},{"id":572978,"option":"WatiR","correct":false},{"id":572979,"option":"SpecFlow","correct":false},{"id":572980,"option":"None of these","correct":true}]},{"q":"<p>In TDD, which of the following plain text languages is used by Cucumber to interpret and execute test scripts?</p>\n\n<p> </p>","a":[{"id":572981,"option":"Sativus","correct":false},{"id":572982,"option":"Anguria","correct":false},{"id":572983,"option":"Gherkin ","correct":true},{"id":572984,"option":"None of these","correct":false}]},{"q":"<p>Which of the following software platforms is Cucumber compatible with?</p>\n\n<p> </p>","a":[{"id":572985,"option":"WatiR","correct":false},{"id":572986,"option":"Selenium","correct":false},{"id":572987,"option":"PicoContainer","correct":false},{"id":572988,"option":"All of these","correct":true}]},{"q":"<p>Which of the following are open source GUI tools?</p>","a":[{"id":572965,"option":"Eggplant","correct":false},{"id":572966,"option":"iMacros","correct":false},{"id":572967,"option":"CodedUI","correct":false},{"id":572968,"option":"All of these","correct":true}]},{"q":"<p>Which of the following is a GUI capture/replay tool?</p>","a":[{"id":573013,"option":"SWTBot","correct":true},{"id":573014,"option":"SoapUI","correct":false},{"id":573015,"option":"Karate DSL","correct":false},{"id":573016,"option":"Hippie-Swagger","correct":false}]},{"q":"<p>In TDD, which of these steps in the following test runner class would enable Cucumber to check if every Step mentioned in the Feature File has its corresponding code written in Step Definition file?</p>\n\n<pre class=\"prettyprint\"><code>@CucumberOptions(\n                features = \"\"Feature\"\"\n                ,glue={\"\"stepDefinition\"\"}\n                ,dryRun = true\n                )</code></pre>\n\n<p> </p>","a":[{"id":733330,"option":"features = \"Feature\"","correct":false},{"id":733331,"option":"glue={\"stepDefinition\"}","correct":false},{"id":733332,"option":"dryRun = true","correct":true},{"id":733333,"option":"dryRun = true and features=\"Feature\"","correct":false}]},{"q":"<p>Which of the following is the most-commonly used automated tests: </p>\n\n<ol>\n\t<li>Unit test</li>\n\t<li>Functional test</li>\n\t<li>Acceptance test</li>\n</ol>","a":[{"id":572933,"option":"1 and 2","correct":false},{"id":572934,"option":"2 and 3","correct":false},{"id":572935,"option":"All of these","correct":true},{"id":572936,"option":"None of these","correct":false}]},{"q":"<p>Which of the following techniques is used in web application testing?</p>","a":[{"id":571897,"option":"Functionality testing","correct":false},{"id":571898,"option":"Interface testing","correct":false},{"id":571899,"option":"Performance testing ","correct":false},{"id":571900,"option":"All of these","correct":true}]},{"q":"<p>Which of the following Web Accessibility Initiatives will you use to assist with conformance evaluations?</p>","a":[{"id":572937,"option":"Bobby","correct":false},{"id":572938,"option":"WebXM","correct":false},{"id":572939,"option":"InFocus","correct":false},{"id":572940,"option":"All of these","correct":true}]},{"q":"<p>In TDD, which of these tests will execute and fail if they are part of the following test suite:</p>\n\n<pre class=\"prettyprint\"><code>class classname{\nABC classABC;\nprotected classname(ABC abc){\nthis.classABC = abc;\n}\n}</code></pre>\n\n<p> </p>","a":[{"id":733346,"option":"@Ignore\r\nvoid testfunc(){\r\nclassname.class.asSubclass(classname.class).getConstructor(),newInstance(Abcobject);\r\n}","correct":false},{"id":733347,"option":"@Test(expected=NoSuchMethodException.class)\r\nvoid testfunc(){\r\nclassname.class.asSubclass(classname.class).getConstructor(),newInstance(Abcobject);\r\n}","correct":false},{"id":733348,"option":"void testfunc(){\r\nclassname.class.asSubclass(classname.class).getConstructor(ABC.class).newInstance(Abcobject);\r\n}","correct":false},{"id":733349,"option":"@Test(expected=NoSuchMethodException.class)\r\nvoid testfunc(){ classname.class.asSubclass(classname.class).getConstructor(ABC.class).newInstance(Abcobject); \r\n}","correct":true}]},{"q":"<p>Which of the following statements about TDD is true?</p>","a":[{"id":733290,"option":"TDD promotes the development of high-quality code.","correct":false},{"id":733291,"option":"TDD is non-visually oriented.","correct":false},{"id":733292,"option":"Both of these","correct":true},{"id":733293,"option":"None of these","correct":false}]},{"q":"<p>Which statement about the benefits of <strong>Assertion testing</strong> is correct:</p>\n\n<ol>\n\t<li>Assertion testing is used to detect subtle errors that may go unnoticed.</li>\n\t<li>Assertion Testing cannot detect an error as they occur.</li>\n</ol>","a":[{"id":572989,"option":"1","correct":true},{"id":572990,"option":"2","correct":false},{"id":572991,"option":"Both of these","correct":false},{"id":572992,"option":"None of these","correct":false}]},{"q":"<p>In TDD, which of the following commercial fault-injection tools is used to insert a fault into the system?</p>","a":[{"id":573001,"option":"Exhaustif","correct":false},{"id":573002,"option":"Xception","correct":false},{"id":573003,"option":"Holodeck","correct":false},{"id":573004,"option":"All of these","correct":true}]},{"q":"<p>In TDD, which of the following would you use to carry out a behavior driven test to reach a solution on a just in time basis?</p>","a":[{"id":733030,"option":"Acceptance TDD","correct":true},{"id":733031,"option":"Developer TDD","correct":false},{"id":733032,"option":"Refactoring TDD","correct":false},{"id":733033,"option":"Pair TDD","correct":false}]},{"q":"<p>Which of the following statements about the Test Driven Development (TDD) test is correct:<br>\n<br>\n1. The knowledge of unit testing framework for the TDD approach.<br>\n2. The creation and maintenance of the tests become difficult because of the rapid changes in requirements.<br>\n3. The creation of tests with complex scenarios require greater time investment.<br>\n </p>","a":[{"id":570954,"option":"1 and 2","correct":false},{"id":570955,"option":"1 and 3","correct":false},{"id":570956,"option":"All of these","correct":true},{"id":570957,"option":"None of these","correct":false}]},{"q":"<p>Which of the following statements about Test Driven Development and Agile Model Driven Development is correct:<br>\n<br>\n1. Test Driven Development is not fit for the detailed specification and validation.<br>\n2. Agile Model Driven Development does not address scaling issues.<br>\n </p>","a":[{"id":570942,"option":"1","correct":false},{"id":570943,"option":"2","correct":false},{"id":570944,"option":"All of these","correct":false},{"id":570945,"option":"None of these","correct":true}]},{"q":"<p>What is the difference between a bug and a defect in a software application?</p>","a":[{"id":573009,"option":"Testing is the process of identifying defects","correct":false},{"id":573010,"option":"Errors found by the tester are called 'defects'","correct":false},{"id":573011,"option":"Defects accepted by the development team are called 'bugs'","correct":false},{"id":573012,"option":"All of these","correct":true}]},{"q":"<p>Which of the following statements about software complexity in a project where TDD is used as opposed to a project that does not use TDD is valid?</p>","a":[{"id":735436,"option":"The complexity of the project is increased.","correct":true},{"id":735437,"option":"The complexity of the project is increased.","correct":false},{"id":735438,"option":"The complexity remains approximately the same.","correct":false},{"id":735439,"option":"Cannot be determined.","correct":false}]},{"q":"<p>Which of the following statements about the implementation of TDD in terms of development time and maintenance cycles for the software is correct?</p>","a":[{"id":735420,"option":"Development time will grow but lesser time is required for maintenance.","correct":true},{"id":735421,"option":"Development time will reduce but more time is required for maintenance.","correct":false},{"id":735422,"option":"Both development time and maintenance time reduces.","correct":false},{"id":735423,"option":"Both development time and maintenance time increases.","correct":false}]},{"q":"<p>In TDD, which of these ways is used to implement a new feature in a test-first development if the existing design does not enable you to implement it?</p>","a":[{"id":733038,"option":"Agile testing","correct":false},{"id":733039,"option":"Refracting","correct":true},{"id":733040,"option":"Decoding","correct":false},{"id":733041,"option":"None of these","correct":false}]},{"q":"<p>Which of the following programming languages allows TDD to test the functionality of its codes?</p>\n\n<p> </p>","a":[{"id":570962,"option":"Python","correct":false},{"id":570963,"option":"Java","correct":false},{"id":570964,"option":"C#","correct":false},{"id":570965,"option":"All of these","correct":true}]},{"q":"<p>In Test Driven Development, which of the following activities are associated with each other?</p>","a":[{"id":570950,"option":"Testing, development, and deployment","correct":false},{"id":570951,"option":"Coding, designing, and development","correct":false},{"id":570952,"option":"Testing, designing, and development","correct":false},{"id":570953,"option":"Testing, coding, and designing","correct":true}]},{"q":"<p>In TDD, which of the following methods prevents programmers from introducing bugs during the <strong>Development </strong>phase?</p>","a":[{"id":572961,"option":"Code analysis","correct":true},{"id":572962,"option":"Cost analysis","correct":false},{"id":572963,"option":"Security and compliance","correct":false},{"id":572964,"option":"All of these","correct":false}]},{"q":"<p>In TDD, which of the following testing techniques is performed manually during the test lifecycle?</p>","a":[{"id":573005,"option":"Unit testing","correct":true},{"id":573006,"option":"Interface testing","correct":false},{"id":573007,"option":"Functionality testing","correct":false},{"id":573008,"option":"All of these","correct":false}]},{"q":"<p>In TDD, if you write specifications about UI interactions in the BDD style, which .NET tool will you use to script the framework?</p>","a":[{"id":572945,"option":"Swagger","correct":false},{"id":572946,"option":"RSpec","correct":false},{"id":572947,"option":"SpecFlow","correct":true},{"id":572948,"option":"All of these","correct":false}]},{"q":"<p>In TDD, assume that you are conducting a large integration test and you are writing your happy path test which requires a large setup. Which of these situations will occur if you do not want to duplicate setup code?</p>","a":[{"id":735476,"option":"The important edge cases can get missed.","correct":false},{"id":735477,"option":"An antipattern will arise.","correct":false},{"id":735478,"option":"Both of these","correct":true},{"id":735479,"option":"There will be an error in black box feature.","correct":false}]},{"q":"<p>In TDD, if the rule to write a unit test is 'You write a unit test that is just sufficient enough to fail.', then which of these rules is used to write the production code?</p>","a":[{"id":733406,"option":"Write enough production code such that this unit test will never fail.","correct":false},{"id":733407,"option":"Write enough production code such that any refactored version of the unit test will never fail.","correct":false},{"id":733408,"option":"Write just enough production code such that the unit test just passes.","correct":true},{"id":733409,"option":"No such rule can be inferred.","correct":false}]},{"q":"<p>Assume that you are having scalability issues with your TDD suite and it is taking a lot of time to run. You decide to solve this by splitting the suite into two components even if it is not advisable. Which of these statements about the frequency at which you would be using these two components is valid?</p>","a":[{"id":733398,"option":"One of the components would run regularly and the other would run in the background occasionally.","correct":true},{"id":733399,"option":"Both of these would run regularly.","correct":false},{"id":733400,"option":"Both of these would run in the background occasionally.","correct":false},{"id":733401,"option":"Both of these would run alternatively at regular intervals.","correct":false}]},{"q":"<p>In TDD, which of these is used to maintain a certain order of the operations being performed that needs to be verified in the tests while implementing an observer?</p>","a":[{"id":733386,"option":"Self shunt","correct":false},{"id":733387,"option":"Log strings","correct":true},{"id":733388,"option":"Rake","correct":false},{"id":733389,"option":"Composite chains","correct":false}]},{"q":"<p>Assume that you need to perform TDD on a complex system. Which of these traits in the components do you need to check to ensure effective modular design in all components?</p>\n\n<ol>\n\t<li>High cohesion</li>\n\t<li>Low coupling</li>\n\t<li>Published interfaces</li>\n</ol>","a":[{"id":733378,"option":"1 and 2","correct":false},{"id":733379,"option":"2 and 3","correct":false},{"id":733380,"option":"1 and 3","correct":false},{"id":733381,"option":"All of these","correct":true}]},{"q":"<p>Which of the following statements about TDD is true?</p>","a":[{"id":733181,"option":"TDD shortens the modeling feedback loop.","correct":true},{"id":733183,"option":"TDD supports evolutionary development.","correct":false},{"id":733184,"option":"Both of these","correct":false},{"id":733185,"option":"None of these","correct":false}]},{"q":"<p>Which of the following are the advantages of Test Driven Development:<br>\n1. Early bug documentation<br>\n2. Better designed, cleaned, and extensible code<br>\n3. Favorable for teamwork</p>","a":[{"id":570946,"option":"1 and 2","correct":false},{"id":570947,"option":"1 and 3","correct":false},{"id":570948,"option":"All of these","correct":true},{"id":570949,"option":"None of these","correct":false}]},{"q":"<p>Which of the following development cycles for a Test Driven Development test is correct?</p>","a":[{"id":570926,"option":"Write a test -> Run all tests -> Refractor -> Implement code -> Refractor ","correct":true},{"id":570927,"option":"Write a test -> Refractor -> Run all tests -> Implement code -> Run all tests","correct":false},{"id":570928,"option":"Write a test -> Refractor -> Implement code -> Run all tests -> Run all tests -> Refractor","correct":false},{"id":570929,"option":"Write a test -> Run all tests -> Implement code -> Run all tests -> Refractor","correct":false}]},{"q":"<p>Which of the following sequences of iteration steps about the Test Driven Development test is correct?</p>","a":[{"id":570930,"option":"Defining -> Designing -> Testing -> Maintenance -> Deployment","correct":false},{"id":570931,"option":"Analysis -> Designing -> Testing -> Implementing -> Deployment","correct":false},{"id":570932,"option":"Designing -> Testing -> Implementing -> Deployment","correct":false},{"id":570933,"option":"Designing -> Testing -> Implementing -> Testing","correct":true}]},{"q":"<p>Which of the following tools does Microsoft use for functional automation?</p>","a":[{"id":572993,"option":"Rational Robot","correct":false},{"id":572994,"option":"AutoIt","correct":false},{"id":572995,"option":"LoadRunner","correct":false},{"id":572996,"option":"None of these","correct":true}]},{"q":"<p>In TDD, which of the following can be done to avoid an issue where a test suffers from hidden dependency while performing TDD for a JavaScript application?</p>","a":[{"id":735464,"option":"Do not use external configuration.","correct":false},{"id":735465,"option":"Design unit tests that can run independent of order.","correct":false},{"id":735466,"option":"Both of these","correct":true},{"id":735467,"option":"Do not define global objects.","correct":false}]},{"q":"<p>In TDD, assume that you are in the process of developing an agile model-driven development (AMDD) lifecycle. Which of these ways to incorporate a TDD flow within the AMDD lifecycle is appropriate?</p>","a":[{"id":733374,"option":"TDD should be a part of the development iteration and should be performed before model storming.","correct":false},{"id":733375,"option":"TDD should be a part of the development iteration and should be performed after model storming.","correct":true},{"id":733376,"option":"TDD should be done after the development iteration and should be performed as the final step.","correct":false},{"id":733377,"option":"TDD should be done after the development iteration and should be performed after the last model storming phase.","correct":false}]},{"q":"<p>In TDD, if a test method has the following formal parameters, then which of these sequences of the declaration is correct:</p>\n\n<ol>\n\t<li>Two aggregators</li>\n\t<li>One argument supplied by a ParameterResolver</li>\n\t<li>One indexed argument</li>\n</ol>","a":[{"id":733354,"option":"3 -> 1 -> 2","correct":true},{"id":733355,"option":"1 -> 3 -> 2","correct":false},{"id":733356,"option":"2 -> 1 -> 3","correct":false},{"id":733357,"option":"2 -> 3 -> 1","correct":false}]},{"q":"<p>Which of the following tools is suitable to perform developer TDD in an agile development environment?</p>\n\n<ol>\n\t<li>RSpec</li>\n\t<li>JUnit</li>\n\t<li>VBUnit</li>\n</ol>","a":[{"id":733314,"option":"1","correct":false},{"id":733315,"option":"1 and 2","correct":false},{"id":733316,"option":"2 and 3","correct":true},{"id":733317,"option":"All of these","correct":false}]},{"q":"<p>In TDD, which of the following design patterns is most appropriate to get the results of an operation that is spread across several objects?</p>","a":[{"id":733298,"option":"Null object pattern","correct":false},{"id":733299,"option":"Collecting parameter object","correct":true},{"id":733300,"option":"Value object","correct":false},{"id":733301,"option":"Polling object","correct":false}]},{"q":"<p>Which of the following approaches is used for addressing issues in agile scaling that are not addressed by the TDD?</p>","a":[{"id":733042,"option":"Use dynamic code analysis","correct":false},{"id":733043,"option":"Use agile model-driven development","correct":true},{"id":733044,"option":"Use life cycle testing","correct":false},{"id":733045,"option":"Use static reviews","correct":false}]},{"q":"<p>In TDD, which of the following programming concepts is related to the test-first idea?</p>","a":[{"id":570922,"option":"Python","correct":false},{"id":570923,"option":"Cross","correct":false},{"id":570924,"option":"Extreme","correct":true},{"id":570925,"option":"None of these","correct":false}]},{"q":"<p>Which of the following statements about the drawbacks of TDD are correct:<br>\n<br>\n1. Difficult to apply to existing legacy code<br>\n2. Tests must be rewritten when the test requirements change<br>\n3. The whole system can quickly degrade if everyone in the team doesn't maintain their tests correctly</p>","a":[{"id":570970,"option":"2","correct":false},{"id":570971,"option":"1 and 2","correct":false},{"id":570972,"option":"1 and 3","correct":true},{"id":570973,"option":"None of these","correct":false}]},{"q":"<p>Which of the following statements about writing test cases in TDD are correct:<br>\n<br>\n1. Do not write test cases that depend upon the system state that is generated from the execution of the last test case<br>\n2. Testing the implementation details.<br>\n3. Writing test cases that run more slowly than the actual time of execution.<br>\n<br>\n<br>\n<br>\n<br>\n </p>","a":[{"id":570966,"option":"1 and 3","correct":false},{"id":570967,"option":"1 and 2","correct":false},{"id":570968,"option":"All of these","correct":true},{"id":570969,"option":"None of these","correct":false}]},{"q":"<p>Which of the following statements about Test Driven Development (TDD) are correct:<br>\n<br>\n1. TDD is neither about testing nor about design<br>\n2. TDD does not mean 'write some of the tests, then build a system that passes the tests'<br>\n3. TDD does not mean 'do lots of testing'<br>\n </p>","a":[{"id":570934,"option":"1 and 2","correct":false},{"id":570935,"option":"1 and 3","correct":false},{"id":570936,"option":"2 and 3","correct":false},{"id":570937,"option":"All of these","correct":true}]},{"q":"<p>In TDD, which of the following techniques is used to monitor and add known defects intentionally to an application?</p>","a":[{"id":572997,"option":"Defect seeding","correct":false},{"id":572998,"option":"Bebugging","correct":false},{"id":572999,"option":"Defect feeding","correct":false},{"id":573000,"option":"All of these","correct":true}]},{"q":"<p>With reference to software testing, what does the term 'anomaly' refer to?</p>","a":[{"id":572941,"option":"Result that differs from what is expected","correct":false},{"id":572942,"option":"Bug or defect","correct":false},{"id":572943,"option":"Usability problem as the testware may behave as per specifications but can still improve with respect to usability","correct":false},{"id":572944,"option":"All of these","correct":true}]},{"q":"<p>In TDD, if the element is (div#loading), then which of these implementations to wait for the loading bar to disappear is correct?</p>","a":[{"id":733338,"option":"wait_until { !page.evaluate_script(%{$('div#loading').is(':visible')}) } ","correct":false},{"id":733339,"option":"wait_until { !page.evaluate_script(%{$('#loading').is(':visible')}) } ","correct":true},{"id":733340,"option":"wait_until { !page.evaluate_script(%{$('#divloading').is(':visible')}) } ","correct":false},{"id":733341,"option":"wait_until { !page.evaluate_script(%{$('#loading').is(':invisible')}) } ","correct":false}]},{"q":"<p>In TDD, which of the following methods is mostly used by the agile teams to validate their own work?</p>","a":[{"id":733034,"option":"Acceptance TDD","correct":false},{"id":733035,"option":"Developer TDD","correct":false},{"id":733036,"option":"All-hands demos","correct":false},{"id":733037,"option":"Iteration demos","correct":true}]}]
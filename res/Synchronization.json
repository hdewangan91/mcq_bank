[{"q":"<p>In an operating system, which of the following problems is associated with <em>Synchronization</em>?</p>","a":[{"id":725034,"option":"The producer-consumer problem","correct":false},{"id":725035,"option":"Dining philosopher problem","correct":false},{"id":725036,"option":"Both of these","correct":true},{"id":725037,"option":"None of these","correct":false}]},{"q":"<p>In an operating system, which of the following statements about a <em><strong>Counting Semaphore </strong></em>are true:   </p>\n\n<ol>\n\t<li>It can take on integer values ranging from 1 to 10.</li>\n\t<li>Whenever the counting semaphore is greater than zero, then a process can enter a critical section and use the available resources.</li>\n\t<li>When the semaphore count becomes zero, it indicates that no more resources are present.</li>\n\t<li>Semaphores can be used asynchronously without acquiring a mutex lock.</li>\n</ol>","a":[{"id":722529,"option":"1, 2, and 4","correct":false},{"id":722530,"option":"2, 3, and 4","correct":true},{"id":722531,"option":"1, 3, and 4","correct":false},{"id":722532,"option":"All of these","correct":false}]},{"q":"<p>In an operating system, which of the following statements about the <em>Reader/Writer </em>lock are true:</p>\n\n<ol>\n\t<li>A reader/writer lock allows multiple threads to acquire read access to shared data simultaneously.</li>\n\t<li>A thread modifying the shared data can only proceed when no other thread is accessing the data.</li>\n\t<li>A reader/writer lock can be implemented on top of mutexes and conditional variables.</li>\n\t<li>The reader/writer lock has the type <em>rwlock_t.</em></li>\n</ol>","a":[{"id":723236,"option":"1, 2, and 3","correct":false},{"id":723237,"option":"1, 3, and 4","correct":false},{"id":723238,"option":"2, 3, and 4","correct":false},{"id":723239,"option":"All of these","correct":true}]},{"q":"<p>In Java, which of the following statements about the synchronized methods is correct?</p>\n\n<ol>\n\t<li>A synchronized method is used to lock an object for any shared resource.</li>\n\t<li>When a thread invokes a synchronized method, it automatically acquires the lock for all the objects and releases it when the thread completes its task.</li>\n</ol>","a":[{"id":613785,"option":"1","correct":false},{"id":613786,"option":"2","correct":false},{"id":613787,"option":"Both of these","correct":true},{"id":613788,"option":"None of these","correct":false}]}]
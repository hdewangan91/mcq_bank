[{"q":"<p>What is the output of the following code?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>struct Exam {\n    var subjects: Int = 5\n}\nvar e1 = Exam()\nvar e2 = e1\ne2.subjects = 6\nprint(e1.subjects)\nprint(e2.subjects)</code></pre>\n\n<p><strong>Options:</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>6\n6</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>5\n5</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>5\n6</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>6\n5</code></pre>\n\n<p> </p>","a":[{"id":1656529,"option":"1","correct":false},{"id":1656530,"option":"2","correct":false},{"id":1656531,"option":"3","correct":true},{"id":1656532,"option":"4","correct":false}]},{"q":"In Go, which of the following statements are necessary to define a structure?","a":[{"id":600078,"option":"goto and else","correct":false},{"id":600079,"option":"type and else","correct":false},{"id":600080,"option":"struct and goto","correct":false},{"id":600081,"option":"struct and type","correct":true}]},{"q":"<p>Which of the following statements about structures in the Go programming language is correct:</p>\n\n<ol>\n\t<li>It is a user-defined data type which allows you to combine data items of different types.</li>\n\t<li>It is used to represent a record.</li>\n\t<li>It cannot be used to track books in a library.</li>\n</ol>","a":[{"id":600074,"option":"Statements 1 and 2 are correct \r\nStatement 3 is incorrect","correct":true},{"id":600075,"option":"Statements 1 and 3 are correct \r\nStatement 2 is incorrect","correct":false},{"id":600076,"option":"All of these","correct":false},{"id":600077,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following C code:</p>\n\n<pre class=\"prettyprint\"><code>    #include &lt;stdio.h&gt;\n    struct student\n    {\n        char *c;\n        struct student point;\n    };\n    void main()\n    {\n        struct student s;\n        s.c = \"hack\";\n        printf(\"%s\", s.c);\n    }\n</code></pre>","a":[{"id":124356,"option":"Compilation failure","correct":true},{"id":124357,"option":"Run-time  error","correct":false},{"id":124358,"option":"hack","correct":false},{"id":124359,"option":"h","correct":false}]},{"q":"<p>What is the output of the following C code:</p>\n\n<pre class=\"prettyprint\"><code>     #include &lt;stdio.h&gt;\n        struct student\n        {\n            char *name;\n        };\n        void main()\n        {\n            struct student s[2], r[2];\n            s[1] = s[0] = \"Hacker\";\n            printf(\"%s\", s[0].name);\n        }\n</code></pre>","a":[{"id":124340,"option":"Hacker","correct":false},{"id":124341,"option":"Compilation failure","correct":true},{"id":124342,"option":"Run-time error","correct":false},{"id":124343,"option":"H","correct":false}]},{"q":"<p>What is the output of the following C code:</p>\n\n<pre class=\"prettyprint\"><code>    #include &lt;stdio.h&gt;\n    typedef struct student\n    {\n        char *a;\n    }stu;\n    int main()\n    {\n        struct student s;\n        s.a = \"hackerearth\";\n        printf(\"%s\", s.a);\n    }\n</code></pre>","a":[{"id":124444,"option":"Compilation error","correct":false},{"id":124445,"option":"Run-time error","correct":false},{"id":124446,"option":"hackerearth","correct":true},{"id":124447,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following C code:</p>\n<pre class=\"prettyprint\"><code>\n    #include &lt;stdio.h&gt;\n    struct student\n    {\n        char a[5];\n    };\n    int main()\n    {\n        struct student s[] = {\"hi\",\"hacker\"};\n        printf(\"%c\", s[1].a[3]);\n    }\n</code></pre>","a":[{"id":124392,"option":"k","correct":false},{"id":124393,"option":"Compilation failure","correct":true},{"id":124394,"option":"h","correct":false},{"id":124395,"option":"hacker","correct":false}]},{"q":"<p>In Networking, which of the following is the correct <strong>start frame delimiter</strong> in the <strong>Ethernet</strong> frame?</p>","a":[{"id":127504,"option":"11110000","correct":false},{"id":127505,"option":"10101011","correct":true},{"id":127506,"option":"00001111","correct":false},{"id":127507,"option":"11111111","correct":false}]},{"q":"<p>What will be the output of the following <strong>C#</strong> code?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\nclass Hackerearth\n{\n    static void Main()\n    {\n        unsafe\n        {\n            Hacker h1;\n            Hacker h2;\n                \n            Hacker* hr1 = &amp;h1;\n            Hacker* hr2 = &amp;h2;\n\n\t\t\t(*hr1).Hacks = 55;\n\t\t\t(*hr1).Hacker_name = \"Alice\";\n\t\t\t\n\t\t\t(*hr2).Hacks = (*hr1).Hacks;\n\t\t\t(*hr2).Hacker_name = \"alice\";\n\t\t\t\n\t\t\tConsole.WriteLine((*hr1).Hacks == (*hr2).Hacks);\n\t\t\tConsole.WriteLine((*hr1).Hacker_name == (*hr2).Hacker_name);  \n        }    \n    }    \n} \n    \n\nstruct Hacker\n{\n    public int Hacks\n    {\t\n        get;\n\t    set;\n\t}\n\tpublic string Hacker_name\n\t{\n\t    get;\n\t    set; \n\t}\n}; </code></pre>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>True\nFalse</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>True\nTrue</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>False\nFalse</code></pre>\n\t</li>\n</ol>","a":[{"id":1418982,"option":"1","correct":false},{"id":1418983,"option":"2","correct":false},{"id":1418984,"option":"3","correct":false},{"id":1418985,"option":"Compilation error","correct":true}]},{"q":"<p>What is the output of the following C code:</p>\n<pre class=\"prettyprint\"><code>#include &lt;stdio.h&gt;\n\nint main()\n{\n    enum { O = -1, M, B = 5, P};\n    printf(\"M = %d\\n\", M);\n}\n</code></pre>","a":[{"id":122416,"option":"M = 1","correct":false},{"id":122417,"option":"M = 0","correct":true},{"id":122418,"option":"M = 3","correct":false},{"id":122419,"option":"None of these","correct":false}]}]
[{"q":"<p>You have a set of numbers ranging from 1 to 10 in a MutableList. You need to traverse the list and follow certain conditions by creating a new list.<br>\n<strong>Rules</strong></p>\n\n<ol>\n\t<li>If the number is even, then add that element to the list.</li>\n\t<li>Else if the number is odd but has factors other than 1 and itself, then delete the last element of the list.</li>\n\t<li>If the number doesn't have factors, then add it into list. (Considering 1 does not have any factors.)</li>\n</ol>\n\n<pre class=\"prettyprint\"><code>fun main(args: Array&lt;String&gt;){  \n    var list1 = mutableListOf(1,2,3,4,5,6,7,8,9,10)  \n    for(ele in list1){  \n        if(ele%2==0){\n          list1.add(ele)\n        }\n        else{\n          var check=false\n          for(i in 2..ele-1){\n            if(ele%i==0){\n              check=true\n              break\n            }\n          }\n          if(check){\n            list1.removeAt(-1)\n          }\n          else{\n            list1.add(ele)\n          }\n        }\n    }  \n    for(index in 0..list1.size-1){  \n        println(list1[index])  \n    }  \n}  </code></pre>\n\n<p><br>\nAs the code is giving the wrong output, which of the following option is the correct code?</p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1</strong></p>\n\n<pre class=\"prettyprint\"><code>fun main(args: Array&lt;String&gt;){  \n    var list1 = mutableListOf(1,2,3,4,5,6,7,8,9,10)  \n    var list2 = mutableListOf&lt;Int&gt;()\n    for(ele in list1){  \n        if(ele%2==0){\n          list2.add(ele)\n        }\n        else{\n          var check=false\n          for(i in 2..ele-1){\n            if(ele%i==0){\n              check=true\n              break\n            }\n          }\n          if(check){\n            list2.remove(0)\n          }\n          else{\n            list2.add(ele)\n          }\n        }\n    }  \n    for(index in 0..list2.size-1){  \n        println(list2[index])  \n    }  \n}  </code></pre>\n\n<p><strong>2</strong></p>\n\n<pre class=\"prettyprint\"><code>fun main(args: Array&lt;String&gt;){  \n    var list1 = mutableListOf(1,2,3,4,5,6,7,8,9,10)  \n    var list2 = mutableListOf&lt;Int&gt;()\n    for(ele in list1){  \n        if(ele%2==0){\n          list2.add(ele)\n        }\n        else{\n          var check=false\n          for(i in 2..ele-1){\n            if(ele%i==0){\n              check=false\n              break\n            }\n          }\n          if(check){\n            list2.removeAt(-1)\n          }\n          else{\n            list2.add(ele)\n          }\n        }\n    }  \n    for(index in 0..list2.size-1){  \n        println(list2[index])  \n    }  \n}  </code></pre>\n\n<p><strong>3</strong></p>\n\n<pre class=\"prettyprint\"><code>fun main(args: Array&lt;String&gt;){  \n    var list1 = mutableListOf(1,2,3,4,5,6,7,8,9,10)  \n    var list2 = mutableListOf&lt;Int&gt;()\n    for(ele in list1){  \n        if(ele%2==0){\n          list2.add(ele)\n        }\n        else{\n          var check=false\n          for(i in 2..ele-1){\n            if(ele%i==0){\n              check=true\n              break\n            }\n          }\n          if(!check){\n            list2.removeAt(list2.size)\n          }\n          else{\n            list2.add(ele)\n          }\n        }\n    }  \n    for(index in 0..list2.size-1){  \n        println(list2[index])  \n    }  \n}  </code></pre>\n\n<p><strong>4</strong></p>\n\n<pre class=\"prettyprint\"><code>fun main(args: Array&lt;String&gt;){  \n    var list1 = mutableListOf(1,2,3,4,5,6,7,8,9,10)  \n    var list2 = mutableListOf&lt;Int&gt;()\n    for(ele in list1){  \n        if(ele%2==0){\n          list2.add(ele)\n        }\n        else{\n          var check=false\n          for(i in 2..ele-1){\n            if(ele%i==0){\n              check=true\n              break\n            }\n          }\n          if(check){\n            list2.removeAt(list2.size-1)\n          }\n          else{\n            list2.add(ele)\n          }\n        }\n    }  \n    for(index in 0..list2.size-1){  \n        println(list2[index])  \n    }  \n}  </code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1764925,"option":"1","correct":false},{"id":1764926,"option":"2","correct":false},{"id":1764927,"option":"3","correct":false},{"id":1764928,"option":"4","correct":true}]},{"q":"<p>What is the output of the given code snippet:</p>\n\n<p><strong>Code snippet</strong></p>\n\n<pre class=\"prettyprint\"><code>fun main(args: Array&lt;String&gt;) {\n    var list1 = mutableListOf(16,16,16)\n    var res=0\n    var n=list1.size\n    while(true){\n      var temp:Int=0\n      var i:Int=0\n      for(i in 0..n-1){\n        if(list1[i]%2==1){\n          break\n        }\n        else if(list1[i]==0){\n          temp++\n        }\n      }\n      if(temp==n){\n        print(res)\n        break\n      }\n      if(i==n){\n        for(j in 0..n-1){\n          list1[j]=list1[j]/2\n        }\n        res++\n      }\n      for(k in i..n-1){\n        if(list1[k]%2==1){\n          list1[k]--\n          res++\n        }\n      }\n    }\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1764929,"option":"7","correct":false},{"id":1764930,"option":"8","correct":false},{"id":1764931,"option":"16","correct":false},{"id":1764932,"option":"None of these","correct":true}]},{"q":"<p>What is the output of the given code snippet:</p>\n\n<p><strong>Code snippet</strong></p>\n\n<pre class=\"prettyprint\"><code>fun main(args: Array&lt;String&gt;){  \n    var list1 = mutableListOf(1,2,3,4,5,6,7,8,9,10)  \n    var list2 = mutableListOf&lt;Int&gt;()\n    for(ele in list1){  \n        if(ele%2==0){\n          list2.add(ele)\n        }\n        else{\n          var check=false\n          for(i in 2..ele-1){\n            if(ele%i==0){\n              check=true\n              break\n            }\n          }\n          if(check){\n            list2.add(ele)\n          }\n          else{\n            if(list2.size&gt;1){\n              list2.removeAt(0)\n            }\n          }\n        }\n    }  \n    for(index in 0..list2.size-1){  \n        println(list2[index])  \n    }  \n}  </code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1764933,"option":"Error","correct":false},{"id":1764934,"option":"Infinite loop","correct":false},{"id":1764935,"option":"6\r\n8\r\n9\r\n10","correct":true},{"id":1764936,"option":"6","correct":false}]},{"q":"<p>What is the output of the given code snippet:</p>\n\n<p><strong>Code snippet</strong></p>\n\n<pre class=\"prettyprint\"><code>fun main(args: Array&lt;String&gt;){  \n    var list1 = mutableListOf(10, 21, 22, 100, 101, 200, 300)  \n    var n=list1.size\n    var temp:Int=0\n    for(i in 0..n-1){\n      for(j in i+1..n-1){\n        for(k in j+1..n-1){\n          if(list1[i] + list1[j] &gt; list1[k]\n             &amp;&amp; list1[i] + list1[k] &gt; list1[j]\n             &amp;&amp; list1[k] + list1[j] &gt; list1[i]){\n                temp++\n          }\n        }\n      }\n    }\n    println(temp)\n}  </code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1764937,"option":"6","correct":true},{"id":1764938,"option":"4","correct":false},{"id":1764939,"option":"12","correct":false},{"id":1764940,"option":"Error","correct":false}]},{"q":"<p>What is the output of the given code snippet:</p>\n\n<p><strong>Code snippet</strong></p>\n\n<pre class=\"prettyprint\"><code>fun main(args: Array&lt;String&gt;){  \n    var list1 = mutableListOf(10, 21, 22, 100, 101, 200, 300)  \n    var n=list1.size\n    var temp:Int=0\n    for(i in 0..n-1){\n      temp+=list1[i]\n    }\n    println(temp)\n} </code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1764941,"option":"Error","correct":false},{"id":1764942,"option":"Infinite loop","correct":false},{"id":1764943,"option":"12","correct":false},{"id":1764944,"option":"754","correct":true}]},{"q":"<p>You are iterating over a collection when working with C# in .Net. Which of these is a valid syntax for the finally clause when there is no implicit conversion from the type of enumerator to IDisposable:</p>\n\n<p><strong>Syntaxes</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>finally\n{\n   (enumerator as IDisposable)?.Dispose();\n}</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>finally\n{\n}</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>finally\n{\n   ((IDisposable)enumerator).Dispose();\n}</code></pre>\n\n<p> </p>","a":[{"id":1673063,"option":"1","correct":false},{"id":1673064,"option":"2","correct":true},{"id":1673065,"option":"3","correct":false},{"id":1673066,"option":"None of these","correct":false}]},{"q":"<p>In C#, you are working on Object and Collection initializers. Now, you have implemented the following code with class Hack. If you are required to initialize an identity matrix by using this class, then which of the following syntaxes can be used to perform this action in this scenario?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>public class Hack\n{\n    private double[,] hack_m = new double[2,2];\n    public double this[int i, int j]\n    { \n        get \n        { \n            return hack_m[i,j]; \n            \n        }\n        set \n        { \n            hack_m[i,j] = value; \n            \n        }\n        \n    }\n}\n</code></pre>\n\n<p><br>\n </p>\n\n<p><strong>Syntax:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>var k = new Hack\n{\n[0, 0] = 1.0,\n[0, 1] = 0.0,\n\n[1, 0] = 0.0,\n[1, 1] = 1.0,\n\n};\n</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>var i = new M\n{\n[0, 0] = 1.0;\n[0, 1] = 0.0;\n\n[1, 0] = 0.0;\n[1, 1] = 1.0;\n};</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>var i = new M\n{\n([0, 0] = 1.0,\n[0, 1] = 0.0),\n\n([1, 0] = 0.0,\n[1, 1] = 1.0),\n\n};</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1419582,"option":"1","correct":true},{"id":1419583,"option":"2","correct":false},{"id":1419584,"option":"3","correct":false},{"id":1419585,"option":"None of these","correct":false}]},{"q":"<p>In C#, you want to define a collection initializer using object initializers to initialize objects of the class named 'Dog'. Which of the following code snippets can you use to perform this action?<br>\n<br>\n<strong>Code Snippets:</strong><br>\n </p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>List&lt;Dog&gt; dogs = new List&lt;Dog&gt;\n{\n    new Dog\n    { \n        Name = \"Bob\", \n        Age=8 \n        \n    },\n    new Dog\n    { \n        Name = \"Jake\", \n        Age=2 \n        \n    },\n    new Dog\n    { \n        Name = \"Zoey\", \n        Age=14 \n        \n    }\n};</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>List&lt;Dog&gt; dogs = new List&lt;Dog&gt;\n{\n    new Dog\n    { \n         Name = \"Bob\", \n         Age=8 \n        \n    },\n    new Dog\n    { \n        Name = \"Jake\", \n        Age=2 \n        \n    },\n    { \n        null \n        \n    }\n};</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>List&lt;Dog&gt; dogs = new List&lt;Dog&gt;\n{\n    new Dog\n    { \n        Name = \"Bob\", \n        Age=8 \n        \n    },\n    new Dog\n    { \n        Name = \"Jake\", \n        Age=2 \n        \n    },\n    new Dog \n    { \n        null \n        \n    }\n};</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1419577,"option":"1 and 3","correct":false},{"id":1419578,"option":"2 and 3","correct":false},{"id":1419579,"option":"1 and 2","correct":true},{"id":1419580,"option":"All of these","correct":false}]},{"q":"<p>What is the output of the following C# code?<br>\n<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System.Collections;\nusing System;\nclass ListProgram\n{\n    ArrayList arr= new ArrayList();\n    public object this[int pos]\n    {\n        get\n        { \n            if (pos&lt; 0 || pos &gt;= arr.Count)\n            { \n                return null; \n                \n            }\n            else\n            { \n                return (arr[pos ]); \n                \n            } \n            \n        }\n        set\n        { \n            arr[pos ] = pos; \n            \n        } \n        \n    } \n    public int Count \n    { \n        get;\n        set; \n        \n    } \n    \n}\nclass Program\n{\n    static void Main(string[] args)\n    {\n        ArrayList obj= new ArrayList();\n        obj[0] = \"1001\";\n        obj[1] = \" Anna\";\n        obj[2] = \"Female\";\n        for (int i = 0; i&lt;=obj.Count; i++)\n        Console.WriteLine(obj[i]);\n        \n    } \n    \n}</code></pre>\n\n<p><br>\n<br>\n<strong>Output:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>1001, Anna, Female</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>0</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1419177,"option":"1","correct":false},{"id":1419178,"option":"The code gives compile time error","correct":false},{"id":1419179,"option":"2","correct":false},{"id":1419180,"option":"The code gives Run-Time Error","correct":true}]},{"q":"<p>What is the output of the C# code snippet given below?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nusing System.Collections;\npublic class Collections_Example \n{\n    public static void Main() \n    {\n        BitArray bitArray1 = new BitArray(30);\n        BitArray bitArray2 = new BitArray(20);\n        bitArray2.Set(1, false);\n        bitArray2.Set(2, true);\n        bitArray2.Set(3, false);\n        bitArray2.Set(4, false);\n        bitArray2.Set(5, true);\n        \n        for (int i = 0; i &lt; bitArray2.Count/4; i++)\n        {\n            Console.Write(bitArray2[i]);\n            Console.Write(\" \");\n            \n        }\n        \n    } \n    \n}</code></pre>\n\n<p><br>\n<br>\n<strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>False False True False False </code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>False True False False False</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>False True False False True</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>False True False True True</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1419092,"option":"2","correct":false},{"id":1419093,"option":"3","correct":false},{"id":1419094,"option":"4","correct":false},{"id":1419095,"option":"1","correct":true}]},{"q":"<p>What will be the output of the C# code snippet given below?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Hack\n{\n    private static void ShowLINQ()\n    {\n        List&lt;Fruit&gt; fruits = BuildList();\n        var subset = from theFruit in fruits where theFruit.FruitID &lt; 6 orderby theFruit.Name select theFruit;\n        foreach (Fruit theFruit in subset)\n        { \n            Console.WriteLine(theFruit.Name + \" \" + theFruit .FruitID ); \n            \n        }\n        \n    }\n    \n    private static List&lt;Fruit &gt; BuildList()\n    {\n        return new List&lt;Fruit &gt;\n        {\n            { new Fruit() \n            { \n                Color=\"Red\", \n                Name=\"Apple\", \n                FruitID =5\n                \n            }\n                \n            },\n            { \n                new Fruit() \n                { \n                    Color=\"Green\", \n                    Name=\"Grape\", \n                    FruitID =7\n                    \n                }\n                \n            },\n            { \n                new Fruit() \n                { \n                    Color=\"Yellow\", \n                    Name=\"Banana\", \n                    FruitID =3\n                    \n                }\n                \n            },\n            { \n                new Fruit() \n                { \n                    Color=\"Saffron\", \n                    Name=\"Orange\", \n                    FruitID =2\n                    \n                }\n                \n            }\n            \n        };\n        \n    }\n    \n    public class Fruit\n    {\n        public string Color\n        { \n            get; \n            set; \n            \n        }\n        public string Name\n        { \n            get; \n            set; \n            \n        }\n        public int FruitID \n        { \n            get; \n            set; \n            \n        }\n        \n    }\n    public static void Main()\n    {\n        ShowLINQ();\n\t}\n    \n}\n</code></pre>\n\n<p><br>\n<br>\n<strong>Output:</strong><br>\n </p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Apple 5\nBanana 3\nOrange 2</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Apple 5\nGrape 7\nBanana 3\n</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Orange 2\nBanana 3\nApple 5</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Grape 7\nBanana 3\nOrange 2\n</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1419062,"option":"1","correct":true},{"id":1419063,"option":"2","correct":false},{"id":1419064,"option":"3","correct":false},{"id":1419065,"option":"4","correct":false}]},{"q":"<p>In the given C# code, which of the following can be used in place of XXX and YYY to produce the output as follows?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nusing System.Collections.Generic;\nclass Hackster\n{\n    public static void Main()\n    {\n        Stack&lt;string&gt; hack_animals = new Stack&lt;string&gt;();\n        hack_animals.Push(\"dog\");\n        hack_animals.Push(\"bat\");\n        hack_animals.Push(\"cow\");\n        hack_animals.Push(\"rat\");\n        hack_animals.Push(\"cat\");\n        foreach( string h in hack_animals )\n        { \n            Console.WriteLine(h); \n            \n        }\n        hack_animals.Pop();\n        hack_animals.Peek();\n        hack_animals.Pop();\n        Stack&lt;string&gt; hack = new Stack&lt;string&gt;(hack_animals.ToArray());\n        \n        XXX\n        hack_animals.CopyTo(hack_array, hack_animals.Count);\n        Stack&lt;string&gt; hack3 = new Stack&lt;string&gt;(hack_array);\n        \n        Console.WriteLine(YYY\n        hack.Clear();\n        Console.WriteLine(\"\\n\"+ hack.Count); \n        \n    } \n    \n}</code></pre>\n\n<p> </p>\n\n<p> </p>\n\n<p><strong>Output</strong></p>\n\n<pre class=\"prettyprint\"><code>cat\nrat\ncow\nbat\ndog\n\nFalse\n\n0\n</code></pre>\n\n<p> </p>\n\n<p> </p>\n\n<p> </p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>XXX: hack.Contains(\"rat\"));\n\nYYY: string[] hack_array = new string[hack_animals.Count * 2];</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>XXX: string[] hack_array = new string[hack_animals.Count * 2];\n\nYYY: hack.Contains(\"rat\"));</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>XXX: string[] hack_array = new string[hack_animals.Count * 4];\n\nYYY: hack.Contains(\"cat\"));</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>XXX: string[] hack_array = new string[hack_animals.Count / 2];\n\nYYY: hack.Contains(\"cow\"));</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1419457,"option":"1","correct":false},{"id":1419458,"option":"2","correct":true},{"id":1419459,"option":"3","correct":false},{"id":1419460,"option":"4","correct":false}]},{"q":"<p>What is the output of the following C# code?<br>\n<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nusing System.Collections.Generic;\nclass Hackster\n{\n    public static void Main()\n    {\n        Queue&lt;string&gt; hack_cars = new Queue&lt;string&gt;();\n        hack_cars.Enqueue(\"car\");\n        hack_cars.Enqueue(\"bus\");\n        hack_cars.Enqueue(\"taxi\");\n        hack_cars.Enqueue(\"tram\");\n        hack_cars.Enqueue(\"truck\");\n        foreach( string h in hack_cars )\n        { \n            Console.WriteLine(h); \n            \n        }\n        hack_cars.Dequeue();\n        hack_cars.Peek();\n        hack_cars.Dequeue();\n        Queue&lt;string&gt; hack = new Queue&lt;string&gt;(hack_cars.ToArray());\n        \n        string[] hack_array = new string[hack_cars.Count * 2];\n        hack_cars.CopyTo(hack_array, hack_cars.Count);\n        Queue&lt;string&gt; hack3 = new Queue&lt;string&gt;(hack_array);\n       \n        Console.WriteLine(\"\\n\"+hack.Contains(\"tram\"));\n        hack.Clear();\n        Console.WriteLine(\"\\n\"+hack.Count); \n        \n    } \n    \n}</code></pre>\n\n<p><br>\n<br>\n<strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>car\nbus\ntaxi\ntram\ntruck\n\nFalse\n\n0</code></pre>\n\t<br>\n\t </li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>car\nbus\ntaxi\ntram\ntruck\n\nTrue\n\n0\n</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>car\nbus\ntaxi\ntram\ntruck\n\nTrue\n\n5</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1419452,"option":"1","correct":false},{"id":1419453,"option":"2","correct":true},{"id":1419454,"option":"3","correct":false},{"id":1419455,"option":"Code gives a Compile-Time Error","correct":false}]},{"q":"<p>Which of the following statements is correct if the following C# code snippet is executed?<br>\n<br>\n<strong>Code:</strong> </p>\n\n<pre class=\"prettyprint\"><code>using System;\nusing System.Collections.Generic;\n\npublic class Hack\n{\n    private static void DictionaryIteration()\n    {\n        Dictionary&lt;string, Fruit&gt; fruits = BuildDictionary();\n        foreach (KeyValuePair&lt;string, Fruit&gt; kvp in fruits)\n        {\n            Fruit theFruit = kvp.Value;\n            Console.WriteLine(\"key: \" + kvp.Key);\n            Console.WriteLine(\"values: \" +\n            theFruit.Name + \" \" + theFruit.Price);\n            \n        }\n        \n    }\n    private static Dictionary&lt;string, Fruit&gt; BuildDictionary()\n    {\n        var fruits = new Dictionary&lt;string, Fruit&gt;();\n        AddToDictionary(fruits, \"Mango\", 120);\n        AddToDictionary(fruits, \"Apple\", 60);\n        AddToDictionary(fruits, \"Banana\", 40);\n        AddToDictionary(fruits, \"Pineapple\", 250);\n        return fruits;\n        \n    }\n    private static void AddToDictionary(Dictionary&lt;string, Fruit&gt; fruits, string name, int price)\n    {\n        Fruit theFruit = new Fruit();\n        theFruit.Name = name;\n        theFruit.Price = price;\n        fruits.Add(key: theFruit.Name, value: theFruit);\n        \n    }\n    public class Fruit\n    {\n        public string Name \n        { \n            get; \n            set; \n            \n        }\n        public int Price \n        { \n            get; \n            set; \n            \n        }\n        \n    }\n    public static void Main()\n    {\n        DictionaryIteration();\n\t}\n    \n}\n</code></pre>\n\n<p><br>\n </p>\n\n<p><strong>Statements:</strong><br>\n </p>\n\n<ol>\n\t<li>\n\t<p>The code gives the following output-</p>\n\n\t<pre class=\"prettyprint\"><code>key: Mango\nvalues: Mango 120\nkey: Apple\nvalues: Apple 60\nkey: Banana\nvalues: Banana 40\nkey: Pineapple\nvalues: Pineapple 250\n</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<p>The code gives the following output-</p>\n\n\t<pre class=\"prettyprint\"><code>key: Apple\nvalues: Apple 60\nkey: Banana\nvalues: Banana 40\nkey: Mango\nvalues: Mango 120\nkey: Pineapple\nvalues: Pineapple 250\n</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<p>​ The code gives a compile-time error ​<br>\n\t </p>\n\t</li>\n\t<li>\n\t<p>​ The code does not give a runtime error ​</p>\n\t</li>\n</ol>","a":[{"id":1419427,"option":"2 and 4","correct":false},{"id":1419428,"option":"1 and 4","correct":true},{"id":1419429,"option":"only 3","correct":false},{"id":1419430,"option":"only 4","correct":false}]},{"q":"<p>Which of the following C# code snippets can you use to add <strong>stud1</strong> to the ArrayList given below?<br>\n </p>\n\n<pre class=\"prettyprint\"><code>ArrayList students = new ArrayList(); \nStudent stud1 = new Student(\"A\"); \nStudent stud2 = new Student(\"B\"); \nStudent stud3 = new Student(\"C\");</code></pre>\n\n<p><br>\n<br>\n<strong>Code Snippets</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>students[0].Add(Student.stud1);</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>students[0].Add(stud1);</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>students.Add(Student.stud1);</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>students.Add(stud1);</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1419407,"option":"1","correct":false},{"id":1419408,"option":"2","correct":false},{"id":1419409,"option":"3","correct":false},{"id":1419410,"option":"4","correct":true}]},{"q":"<p>Which of the following statements must be correct in order to successfully compile the C# code given below?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>var thing = new IndexerDemo \n{\n    name = \"object none\",\n    ['C',4] = \"Middle Note\"\n}</code></pre>\n\n<p> </p>\n\n<p><strong>Statements</strong></p>\n\n<ol>\n\t<li>IndexerDemo must have the following member:\n\t<pre class=\"prettyprint\"><code>public string A;</code></pre>\n\t<br>\n\t </li>\n\t<li>IndexerDemo must have the following members:\n\t<pre class=\"prettyprint\"><code>public string name;\npublic string this[char c, int i] { set { ... }; }</code></pre>\n\t<br>\n\t </li>\n\t<li>IndexerDemo must have the following members:\n\t<pre class=\"prettyprint\"><code>public string name;\npublic double Size { set { ... }; }</code></pre>\n\t<br>\n\t </li>\n</ol>","a":[{"id":1419572,"option":"1","correct":false},{"id":1419573,"option":"2","correct":true},{"id":1419574,"option":"3","correct":false},{"id":1419575,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the C# code given below?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nusing System.Collections;\nclass Program\n{\n    static void Main(string[] args)\n    {\n        SortedList sortedList = new SortedList();\n        sortedList.Add(8, \"Eight Roses\");\n        sortedList.Add(7, \"Seven Lilies\");\n        sortedList.Add(4, \"Four Jasmines\");\n        sortedList.Add(9, \"Nine Marigolds\");\n        sortedList.Add(2, \"Two Mogras\");\n        bool key = sortedList.ContainsKey(9);\n        bool val = sortedList.ContainsValue(\"Two Mogras\");\n        bool unKey = sortedList.ContainsKey(10);\n        bool unVal = sortedList.ContainsValue(\"Any uncertain value\");\n        Console.WriteLine(\"The sorted list contains 9 key :\" + key);\n        Console.WriteLine(\"The sorted list contains Two Mogras value :\" + val);\n        Console.WriteLine(\"The sorted list contains 10 key :\" +unKey);\n        Console.WriteLine(\"The sorted list contains Any uncertain value:\" + unVal);  \n        \n    } \n    \n}</code></pre>\n\n<p> </p>\n\n<p><strong>Output:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>The sorted list contains 9 key :True\nThe sorted list contains Two Mogras value :True\nThe sorted list contains 10 key :True\nThe sorted list contains Any uncertain value:False</code></pre>\n\t<br>\n\t </li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>The sorted list contains 9 key :True\nThe sorted list contains Two Mogras value :False\nThe sorted list contains 10 key :False\nThe sorted list contains Any uncertain value:True</code></pre>\n\t<br>\n\t </li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>The sorted list contains 9 key :True\nThe sorted list contains Two Mogras value :True\nThe sorted list contains 10 key :False\nThe sorted list contains Any uncertain value:False\n</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>The sorted list contains 9 key :True\nThe sorted list contains Two Mogras value :False\nThe sorted list contains 10 key :False\nThe sorted list contains Any uncertain value:False</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1419087,"option":"1","correct":false},{"id":1419088,"option":"2","correct":false},{"id":1419089,"option":"3","correct":true},{"id":1419090,"option":"4","correct":false}]},{"q":"<p>What will be the output of the C# code given below?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nusing System.Collections;\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Hashtable hash_table = new Hashtable();\n        hash_table .Add(\"Number\",4);\n        hash_table .Add(\"Car\", \"Porsche\");\n        hash_table .Add(11, \"eleven\");\n        int value1 = (int)hash_table [\"Number\"];\n        String value2 = (string)hash_table [\"Car\"];\n        String value3 = (string)hash_table [11];\n        Console.WriteLine(value1);\n        Console.WriteLine(value2);\n        Console.WriteLine(value3);\n        hash_table .Remove(11);\n        String OmittedValue = (string)hash_table [11];\n        Console.WriteLine(\"The value of the given key is :\"+OmittedValue );\n        hash_table .Clear();\n        \n    } \n}</code></pre>\n\n<p> </p>\n\n<p><br>\n<strong>Output:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Number\nCar\n11\nThe value of the given key is :</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>11</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>4\nPorsche\neleven\nThe value of the given key is :</code></pre>\n\n\t<p><br>\n\t   </p>\n\t</li>\n</ol>","a":[{"id":1419082,"option":"1","correct":false},{"id":1419083,"option":"2","correct":false},{"id":1419084,"option":"3","correct":true},{"id":1419085,"option":"The given code snippet will render the hashtable empty by removing all the elements from it.","correct":false}]},{"q":"<p>Which of the following statements are valid inferences that can be made about the indexer, <strong>he[index] = expression</strong>, in the C# code snippet given below:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System.Collections.Generic;\nusing System;\n\nclass Hacksters\n{\n    \n public static void ReportList&lt;H&gt;(string hack_exp, IList&lt;H&gt; hack_list)\n {\n     Console.WriteLine(hack_exp);\n     foreach(H h in hack_list)\n     Console.Write(\"{0, 3}\", h );\n     Console.WriteLine(); \n     Console.WriteLine(); \n     \n } \n \n public static void Main()\n {\n     IList &lt;char&gt;he = new List&lt;char&gt;{'h', 'a', 'c'};\n     he.Add('k'); \n     he.Add('e'); \n     he[0] = 'r'; \n     he[1]++; \n     he.Insert(0,'t'); \n     he.Insert(he.Count,'h'); \n     he.RemoveAt(0); \n     he.Remove('r'); \n     he.Clear(); \n     \n }\n}</code></pre>\n\n<p><br>\n<strong>Statements:</strong></p>\n\n<ol>\n\t<li>The indexer does not mutate an existing element in the collection, which makes the length of the collection unchanged.<br>\n\t </li>\n\t<li>The indexer mutates an existing element in the collection, altering the length of the collection.<br>\n\t </li>\n\t<li>The indexer does not mutate an existing element in the collection, altering the length of the collection.<br>\n\t </li>\n\t<li>The indexer mutates an existing element in the collection, which makes the length of the collection unchanged.</li>\n</ol>","a":[{"id":1419077,"option":"1","correct":false},{"id":1419078,"option":"2","correct":false},{"id":1419079,"option":"3","correct":false},{"id":1419080,"option":"4","correct":true}]},{"q":"<p>What will be the output of the following C# code?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\npublic class Hack&lt;T&gt; \n{\n\t\n\tprivate T hack_data;\n\t\n\tpublic T hack_value\n\t{\n\t\t\n\t\tget\n\t\t{\n\t\t\treturn this.hack_data;\n\t\t}\n\t\tset\n\t\t{\n\t\t\tthis.hack_data = value;\n\t\t}\n\t}\n}\n\nclass hack \n{\n    static void hack_print(string str) \n\t{ \n\t    Console.WriteLine(str); \n\t    \n\t} \n    static void Main(string[] args)\n    {\n        Hack&lt;float&gt; y = new Hack&lt;float&gt;();\n\t\ty.hack_value = 8.0F;\n\t\t\n\t\tHack&lt;string&gt; x = new Hack&lt;string&gt;();\n\t\tx.hack_value = \"Hello Hackerearth\";\n\t\t\n\t\tConsole.WriteLine(y.hack_value);\n\t\thack_print(\"Hello World\");\n\t\tConsole.WriteLine(x.hack_value);\n\t}\n\t\n}\n</code></pre>\n\n<p> </p>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>8.0\nHello World\nHello Hackerearth</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>7.9\nHello Hackerearth\nHello World</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>8\nHello World\nHello Hackerearth</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hello World\n8.00\nHello Hackerearth</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1419007,"option":"1","correct":false},{"id":1419008,"option":"2","correct":false},{"id":1419009,"option":"3","correct":true},{"id":1419010,"option":"4","correct":false}]},{"q":"<p>What can be used in place of XXX to complete the C# code snippet given below?</p>\n\n<pre class=\"prettyprint\"><code>using System;\nusing System.Collections.Generic;\nclass Program\n{\n    private static void Main()\n    {\n        List&lt;double&gt; list = new List&lt;double&gt; { 1, 2, 3, 4, 5, 6};\n        double mean = 0;\n        double variance = 0;\n        double standard_deviation = 0;\n        double sum = 0;\n        double temp = 0;\n        int i= 0;\n        for (i = 0; i &lt; list.Count; i++)\n        { \n            sum += list[i]; \n            \n        }\n        mean = sum / (list.Count - 0);\n        for (i = 0; i &lt; list.Count; i++)\n        { \n            XXX \n            \n        }\n        variance=temp / (list.Count - 0);\n        standard_deviation = Math.Sqrt(variance);\n        Console.WriteLine(\"Mean: \" + mean );\n        Console.WriteLine(\"Variance : \" + variance );\n        Console.WriteLine(\"Standard deviation: \" + standard_deviation);\n        \n    }\n}</code></pre>\n\n<p> </p>","a":[{"id":1419272,"option":"temp += Math.Pow((list[i] + mean), 2);","correct":false},{"id":1419273,"option":"temp += Math.Pow((list[i] - mean), 2);","correct":true},{"id":1419274,"option":"sum += Math.Pow((list[i] - mean), 2);","correct":false},{"id":1419275,"option":"None of these","correct":false}]},{"q":"<p>What will be the output of the following C# code?</p>\n\n<p><br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nusing System.Collections;\nnamespace Hack_hashtable\n{\n    class Hackerearth\n    {\n        static void Main(string[] args)\n        {\n            Hashtable ht= new Hashtable();\n            ht.Add(\"5\",\"hi\");\n            ht.Add(\"6\",\"hello\");\n            ht.Add(\"7\",\"hackerearth\");\n            \n            ht[\"7\"]=\"hey\";\n            \n            ICollection keys = ht.Keys;\n            \n            foreach (String k in keys)\n            { \n                Console.WriteLine(ht[k]); \n                \n            }\n            Console.ReadKey(); \n            ht.Remove(\"7\");\n            Console.WriteLine(ht.ContainsKey(\"7\"));\n            ht.Clear();\n            Console.WriteLine(keys.Count);\n            \n        } \n        \n    } \n    \n}</code></pre>\n\n<p> </p>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hi\nhello\nhey\nFalse\n0</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>5\n6\n7\nFalse\n0</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hi\nhello\nhey\nFalse\n2</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>5\n6\n7\nFalse\n2</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1419072,"option":"3","correct":false},{"id":1419073,"option":"4","correct":false},{"id":1419074,"option":"1","correct":true},{"id":1419075,"option":"2","correct":false}]},{"q":"<p>What will be the output of the following C# code snippet?<br>\n<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nusing System.Collections.Generic;\n\nclass Hackerearth \n{\n    static public void Main()\n    {\n        SortedDictionary&lt;int, string&gt; hack_dict = new SortedDictionary&lt;int, string&gt;();\n\n        hack_dict.Add(102, \"Hey\");\n\t\thack_dict.Add(101, \"Hi\");\n\t\thack_dict.Add(103, \"Hello\");\n\t\thack_dict.Add(105, \"Hackerearth Dictionary\");\n\t\thack_dict.Add(104, \"Hackerearth\");\n\t\thack_dict.Add(106, \"Dictionary\");\n\t\thack_dict.Add(107, \"dictionary\");\n\t\t\n\t\thack_dict.Remove(107);\n\n\t\tif (hack_dict.ContainsKey(107) == true)\n\t\t{\n\t\t\tConsole.WriteLine(\"hello Hackerearth\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tConsole.WriteLine(\"no Hackerearth Dictionary Found\");\n\t\t}\n\n\t\tif (hack_dict.ContainsValue(\"dictionary\") == true)\n\t\t{\n\t\t\tConsole.WriteLine(\"hi Hackerearth\");\n\t\t}\n\n\t\telse\n\t\t{\n\t\t\tConsole.WriteLine(\"no Hackerearth Dictionary Found\");\n\t\t}\n\t}\n}\n\n</code></pre>\n\n<p><br>\n<br>\n<strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>no Hackerearth Dictionary Found\nhi Hackerearth\n</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hello Hackerearth\nhi Hackerearth\n</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hello Hackerearth\nno Hackerearth Dictionary Found</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>no Hackerearth Dictionary Found\nno Hackerearth Dictionary Found</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1418942,"option":"1","correct":false},{"id":1418943,"option":"2","correct":false},{"id":1418944,"option":"3","correct":false},{"id":1418945,"option":"4","correct":true}]},{"q":"<p>In C#, you are working on Dictionary. Which of the following statements is correct about the code snippet given below:<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System.Collections.Generic;\nusing System.Reflection;\nclass Demo_Class\n{\n    static Dictionary&lt;string, ConstructorInfo&gt; specialized;\n    public static HTMLElement CreateElement(string tag)\n    {\n        if (specialized == null)\n        {\n            var subtypes= Assembly.GetCallingAssembly().GetTypes();\n            foreach(var type in subtypes)\n            {\n                if (type.IsDerivedFrom(typeof(HTMLElement)))\n                { \n                    var cnr= type.GetConstructor(Type.Empty);\n                    if (cnr!= null)\n                    {\n                        var element = cnr.Invoke(null) as HTMLElement; \n                        if (element != null)\n                        specialized.Add(element.Tag, cnr); \n                        \n                    } \n                    \n                } \n                \n            } \n            \n        }\n        \n        if (specialized.ContainsKey(tag))\n        return specialized[tag].Invoke(null) as HTMLElement;\n        return new HTMLElement(tag); \n        \n    } \n    \n}</code></pre>\n\n<p> </p>\n\n<p><strong>Statements</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>A dictionary building with the addition of classes mapped to the constructor method.</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>A dictionary building mapped to the constructor method with the addition of classes without applying the factory method.</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>A dictionary building used to map some tags to a proper method in the form of the corresponding constructor after which is invoked only once</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>\n\n<p> </p>","a":[{"id":1419302,"option":"1","correct":false},{"id":1419303,"option":"2","correct":false},{"id":1419304,"option":"3","correct":true},{"id":1419305,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following C# code snippet?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nusing System.Collections.Generic;\npublic class Hackster\n{\n\tpublic static void Main()\n\t{\n\t    var numbers = new List&lt;int&gt; { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n\t    for (var index = numbers.Count - 1; index &gt;= 0; index--)\n\t    {\n\t        if (numbers[index] % 2 == 1)\n\t        {\n\t            numbers.RemoveAt(index);\n\t            \n\t        }\n\t        \n\t    }\n\t    numbers.ForEach(number =&gt; Console.Write(number + \" \"));\n\t    \n\t}\n}\n</code></pre>\n\n<p> </p>\n\n<p><strong>Output</strong>:</p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>2 4 6 8</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>0 2 4 6 8</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>1 2 3 4 5</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>1 3 5 7 9</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1419417,"option":"1","correct":false},{"id":1419418,"option":"2","correct":true},{"id":1419419,"option":"3","correct":false},{"id":1419420,"option":"4","correct":false}]},{"q":"<p>Which of the following collection class type implementation is being demonstrated in the <strong>C#</strong> code snippet below?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nusing System.Collections;\n\nclass Hack\n{\n    public static void Main()\n    { \n        Hashtable openWith = new Hashtable();\n        openWith.Add(\"txt\", \"notepad.exe\");\n        openWith.Add(\"bmp\", \"paint.exe\");\n        openWith.Add(\"dib\", \"paint.exe\");\n        openWith.Add(\"rtf\", \"wordpad.exe\");\n        try\n        { \n            openWith.Add(\"txt\", \"winword.exe\"); \n            \n        }\n        catch\n        { \n            Console.WriteLine(\"An element with Key = \\\"txt\\\" already exists.\"); \n            \n        }\n        Console.WriteLine(\"For key = \\\"rtf\\\", value = {0}.\", openWith[\"rtf\"]);\n        openWith[\"rtf\"] = \"winword.exe\";\n        Console.WriteLine(\"For key = \\\"rtf\\\", value = {0}.\", openWith[\"rtf\"]);\n        openWith[\"doc\"] = \"winword.exe\";\n        if (!openWith.ContainsKey(\"ht\"))\n        {\n            openWith.Add(\"ht\", \"hypertrm.exe\");\n            Console.WriteLine(\"Value added for key = \\\"ht\\\": {0}\", openWith[\"ht\"]);\n            \n        }\n        Console.WriteLine();\n        foreach( DictionaryEntry de in openWith )\n        { \n            Console.WriteLine(\"Key = {0}, Value = {1}\", de.Key, de.Value); \n            \n        }\n        ICollection valueColl = openWith.Values;\n        Console.WriteLine();\n        foreach( string s in valueColl )\n        { \n            Console.WriteLine(\"Value = {0}\", s); \n            \n        }\n        ICollection keyColl = openWith.Keys;\n        Console.WriteLine();\n        foreach( string s in keyColl )\n        { \n            Console.WriteLine(\"Key = {0}\", s); \n            \n        }\n        Console.WriteLine(\"\\nRemove(\\\"doc\\\")\");\n        openWith.Remove(\"doc\");\n        if (!openWith.ContainsKey(\"doc\"))\n        { \n            Console.WriteLine(\"Key \\\"doc\\\" is not found.\"); \n            \n        } \n        \n    } \n    \n}</code></pre>","a":[{"id":1419447,"option":"List Class","correct":false},{"id":1419448,"option":"Dictionary Class","correct":false},{"id":1419449,"option":"Hashtable Class","correct":true},{"id":1419450,"option":"SortedList Class","correct":false}]},{"q":"<p>In C#, you are working on Objects and Collections and the objects are implemented using the IEnumerable Interface. Now, which of the given syntaxes can be used in place of XXX in the C# code snippet given below to produce output as follows?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System.Collections.Generic;\nusing System;\npublic class Hack\n{\n    class hack1 : IEnumerable&lt;string&gt;\n    {\n        public static void Main()\n        {\n            hack1 h1 = new hack1()\n            {\n                {\n                    \"Alice\", \n                    \"Smith\", \n                    \"123 Street\", \n                    \"Menlo Park\", \n                    \"CA\", \n                    \"44002\" \n                    \n                },\n                {\n                    \"Tara\", \n                    \"Green\",\n                    \"456 Street\",\n                    \"Sunnyvale\",\n                    \"CA\", \"44003\" \n                    \n                }\n                \n            };\n            \n            Console.WriteLine(\"Details:\");\n            \n            foreach (string h in h1)\n            {\n                Console.WriteLine(\"\\r\\n\" + h);\n            }\n            \n        }\n        \n        private List&lt;string&gt; hackList = new List&lt;string&gt;();\n        public IEnumerator&lt;string&gt; GetEnumerator() =&gt; hackList.GetEnumerator();\n\n        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() =&gt; hackList.GetEnumerator();\n\n        public void Add(string fn, string ln, string st, string c, string s, string z) =&gt; hackList.Add(XXX);\n        \n    }\n    \n}</code></pre>\n\n<p> </p>\n\n<p> </p>\n\n<p><strong>Output</strong></p>\n\n<pre class=\"prettyprint\"><code>Details:\n\nAlice Smith\n123 Street\nMenlo Park, CA 44002\n\nTara Green\n456 Street\nSunnyvale, CA 44003</code></pre>\n\n<p> </p>\n\n<p><strong>Syntaxes:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>$@\"{fn} {ln}\n{st}\n{c}, {s} {z}\"\n        </code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>$\"{fn} {ln}\n{st}\n{c}, {s} {z}\"\n        </code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>@\"{fn} {ln}\n{st}\n{c}, {s} {z}\"\n        </code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>\"{fn} {ln}\n{st}\n{c}, {s} {z}\"\n        </code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>\n\n<p> </p>","a":[{"id":1419587,"option":"1","correct":true},{"id":1419588,"option":"2","correct":false},{"id":1419589,"option":"3","correct":false},{"id":1419590,"option":"4","correct":false}]},{"q":"<p>In the C# code snippet given below, which of the following syntaxes can be used in place of XXX to remove \"Zoey\" from the collection?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nusing System.Collections.ObjectModel;\npublic class Demo\n{\n    public static void Main()\n    {\n        Collection&lt;string&gt; dog = new Collection&lt;string&gt;();\n        dog.Add(\"Zoey\");\n        dog.Add(\"Jake\");\n        dog.Add(\"Maya\");\n        dog.Add(\"Tucker\");\n        XXX\n        Display(dog);\n        \n    }\n    private static void Display(Collection&lt;string&gt; cs)\n    {\n        Console.WriteLine();\n        foreach( string item in cs )\n        {\n            Console.WriteLine(item);\n            \n        }\n        \n    }\n}</code></pre>\n\n<p> </p>\n\n<p><strong>Syntaxes:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>dog.RemoveAt(0);</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>dog.ClearAt(0);</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>dog.Remove(\"Zoey\");</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1419592,"option":"1 and 2","correct":false},{"id":1419593,"option":"2 and 3","correct":false},{"id":1419594,"option":"1 and 3","correct":true},{"id":1419595,"option":"All of these","correct":false}]}]
[{"q":"<p>You are working on a NodeJS function shown as:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>[1, 2, 3].forEach(\n        function(item, index, array, done) {\n                    asyncFunction(item, function itemDone() {\n                                        done(); });\n        }, function allDone() {\n                                whenAllDone();});</code></pre>\n\n<p>You want to call <em>whenAllDone()</em> after the <em>forEach-loop</em> has gone through every element and done some asynchronous processing.<br>\nWhat is the best way to accomplish this such that the <em>whenAlldone()</em> is called after the loop has been completed?</p>\n\n<p><strong>Options&nbsp;</strong></p>\n\n<ol>\n\t<li>You can simply put your callback after your call to foreach:\n\t<pre class=\"prettyprint\"><code> posts.foreach(function(v, i) {\n    res.write(v + \". index \" + i);\n  });\n  res.end();</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>function callback () { console.log('all done'); }\nvar itemsProcessed = 0;\n[1, 2, 3].forEach(() =&gt; {\n      callback();\n  });\n});</code></pre>\n\t</li>\n\t<li>\n\t<p>You can use async iterators:</p>\n\n\t<pre class=\"prettyprint\"><code>const asyncFunction = a =&gt; fetch(a);\nconst itemDone = a =&gt; console.log(a);\nasync function example() {\n  const arrayOfFetchPromises = [1, 2, 3].map(asyncFunction); }</code></pre>\n\t</li>\n\t<li>\n\t<p>You can use iteration on foreach like this:</p>\n\n\t<pre class=\"prettyprint\"><code>var arr = ['a', 'b', 'c'];\narr.forEachDone(function(item){\n    console.log(item);\n}, function(){\n   console.log('done');\n});</code></pre>\n\t</li>\n</ol>","a":[{"id":1654205,"option":"1","correct":false},{"id":1654206,"option":"2","correct":true},{"id":1654207,"option":"3","correct":false},{"id":1654208,"option":"4","correct":false}]},{"q":"<p>You just started trying out node.js and realized that the Node is terminated whenever you have an unhandled exception in the program. This is different than the normal server container that you have been exposed to where, when an unhandled exception occurs, the container would still be able to receive the request. What is the effective way to catch an unhandled exception during the execution of asynchronous processes?</p>","a":[{"id":1654321,"option":"For asynchronous code, if an error happens, return the error.","correct":false},{"id":1654322,"option":"For asynchronous code, where the error is occurring, we can wrap that section in a node.js domain.","correct":true},{"id":1654323,"option":"For asynchronous code, where the error may happen anywhere, instead of throwing the error, fire the error event instead.","correct":false},{"id":1654324,"option":"For asynchronous, we can use the try-catch statement.","correct":false}]},{"q":"<p>You are working on the node.js domains to catch exceptions. While implementing this, there is one instance where you can not get domains to catch the exception. \"exception2\" in the callback is caught and handled in the domain.on('error') handler, but \"exception1\" is not caught. Also, when exception1 is thrown, it does not shut down the Node as expected. What is the best possible way to handle such exceptions with node js domains using express?</p>","a":[{"id":1654313,"option":"You should use \"Connect-domain\" that allows you to catch all errors for connecting modules.","correct":false},{"id":1654314,"option":"You need to use 'domain.active' to get the currently active domain and emit the error event on that.","correct":false},{"id":1654315,"option":"The exception may be handled inside of Express so that it never reaches your outer layer for the domains to handle.","correct":true},{"id":1654316,"option":"You should wrap your code into setImmediate block.","correct":false}]},{"q":"<p>While handling an HTTP request, an uncaught exception occurs, the server hangs forever and never fulfills the request as you have no opportunity to call the end() method on the http.ServerResponse object. What should you do in such a situation where the server hangs forever and never fulfills the request?</p>","a":[{"id":1654309,"option":"You can use the forever() function. It will restart your process as soon as it dies.","correct":true},{"id":1654310,"option":"If an error is thrown asynchronously, there is still a way to recover from it by calling next.","correct":false},{"id":1654311,"option":"You can use try/catch/finally.","correct":false},{"id":1654312,"option":"If an error is thrown synchronously, there is still a way to recover from it by calling next.","correct":false}]},{"q":"<p>You were using a previous version of Mongoose for node.js wherein, there was an option to use it without defining a schema, like this:<br>\nvar collection = mongoose.noSchema(db, \"User\");<br>\nBut in the current version, the \"noSchema\" function has been removed. How would you find a way to use schema-less models in Mongoose?</p>","a":[{"id":1654305,"option":"You can use Mongoose with the collections that have schema and the node driver or another mongo module for those schemaless ones.","correct":false},{"id":1654306,"option":"There is no way. You need to have a schema model in the current version.","correct":false},{"id":1654307,"option":"You can use \"Mixed\" as \"Schema.Types.Mixed\" mode to ensure that values added to your model instance do not get saved to the db.","correct":false},{"id":1654308,"option":"You can use \"option: strict\" in the current version which ensures that values added to your model instance do not get saved to the db.","correct":true}]},{"q":"<p>You have a nodeJS application having an array of _ids and want to get all docs accordingly. The code is given as:</p>\n\n<pre class=\"prettyprint\"><code>model.find({\n                '_id' : [\n                                '6ahvsjavd84520110000000c',\n                                '6ahvsjavd88710110000000d',\n                                '6ahvsjjh812301110000000e'\n                ]}, function(err, docs){\n                console.log(docs); });</code></pre>\n\n<p>The array might contain hundreds of _ids. What is the best way to get all documents according to the ids provided?</p>","a":[{"id":1654301,"option":"You can use the mongoDB find function.","correct":false},{"id":1654302,"option":"You can use the mongoDB \"$in\" clause.","correct":true},{"id":1654303,"option":"You can convert the IDs as objectIDs.","correct":false},{"id":1654304,"option":"You can use select() and pick only the required document.","correct":false}]},{"q":"<p>You are using Sequelize ORM on two modules namely, users and posts. You are asked a query that responds with a post with the info of the user that made it. But, it gives you a problem when you use it with join queries. How should you implement this in your code to have a functional ORM style?</p>","a":[{"id":1654285,"option":"You can set the required to true. It is the key to produce an outer join and then work accordingly.","correct":false},{"id":1654286,"option":"You can set the required to true. It is the key to produce an inner join and then work accordingly.","correct":false},{"id":1654287,"option":"You have to alias all columns of the user's table to make sure they are placed into the correct model when returned, and not mixed up with the posts model.","correct":true},{"id":1654288,"option":"You can use raw queries to get the desired results.","correct":false}]},{"q":"<p>You want to upload the files in the form of a stream, into Azure Storage by using the REST API. What could be the best possible way to use REST in such a scenario?</p>","a":[{"id":1654273,"option":"You could use Azure REST API for the Blob Operations.","correct":false},{"id":1654274,"option":"You will need to put some wrapper around the REST API Calls to achieve that.\r\n","correct":false},{"id":1654275,"option":"You could read the file as a stream, and set Content-Type as application/octet-stream.","correct":false},{"id":1654276,"option":"You could use Put Blob Rest API to upload a stream.","correct":true}]},{"q":"<p>You are trying to follow through on a URL that redirects you to another page using the nodejs request module like:</p>\n\n<pre class=\"prettyprint\"><code>request( options, function(error, response, body) {\n                console.log( response );\n});</code></pre>\n\n<p>You need to retrieve the URL after the redirect. What should you do in order to retrieve the URL?</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>var url = 'some_url';\nrequest({ url: url, followRedirect: false }, function (err, res, body) {\n  console.log(res.headers.location);\n});</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>var r = request(url, function (e, response) {\n  r.uri\n  response.uri\n})</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>var r = request(url, function (e, response) {\n  r.uri\n  response.request.uri\n})</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>var url = 'some_url';\nrequest({ url: url, followRedirect: true }, function (err, res, body) {\n  console.log(res.headers.location);\n});</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1654269,"option":"1","correct":false},{"id":1654270,"option":"2","correct":false},{"id":1654271,"option":"3","correct":true},{"id":1654272,"option":"4","correct":false}]},{"q":"<p>You are trying to create a nodeJS module that contains multiple functions in it. You try doing that by doing the following:<br>\nmodule.exports = function(firstParam) { console.log(\"Some_Text\"); },<br>\nmodule.exports = function(secondParam) { console.log(\"Some_Text\")},<br>\nAs the firstParam is an object type and the secondParam is a URL string, it always complains that the type is wrong.<br>\nWhat could be the best possible way to declare multiple module.exports in this scenario?</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>const foo = function(&lt;params&gt;) { ... }\nconst bar = function(&lt;params&gt;) { ... } \nmodule.exports = {\n    foo,\n    bar \n}\n</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>module.exports = {\n   function1,\n   function2,\n   function3\n}\n</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>You can do something like:\nmodule.exports = {\n    method: function() {},\n    otherMethod: function() {},\n};</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>module.exports = function ( firstArg, secondArg ) {\n    function firstFunction ( ) { ... }\n    function secondFunction ( ) { ... }\n    function thirdFunction ( ) { ... }\n}</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1654265,"option":"1","correct":false},{"id":1654266,"option":"2","correct":false},{"id":1654267,"option":"3","correct":true},{"id":1654268,"option":"4","correct":false}]},{"q":"<p>You are working on a nodeJS module such that:<br>\nvar b = require('./b.js');<br>\n--- do something with b ---<br>\nNow, you need to clean up the cache from module b. You need to do it in such a way that when you remove or update the module, you need not restart the node server. What could be the best possible way to dynamically remove or update the module without restarting the server?</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>You can use this to delete its entry in the cache: delete require.cache[require.resolve('./b.js')]</li>\n\t<li>You can use this to delete its entry in the cache: delete require.cache[require('./b.js')]</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>for (const path in require.cache) {\n if (path.endsWith('.js')) { \n    delete require.cache[path]\n    }\n}</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>You can loop for it like:\nfor (const path in require.cache) {\n if (path.endsWith('.js')) { \n    delete require.resolve.cache[path]\n    }\n}</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1654261,"option":"1","correct":true},{"id":1654262,"option":"2","correct":false},{"id":1654263,"option":"3","correct":false},{"id":1654264,"option":"4","correct":false}]},{"q":"<p>While exploring nodeJS, you came across the underscore library. But when you try to use a function from Underscore, it overwrites the _ object with the result of your function call. What could be the possible reason for this?<br>\n </p>","a":[{"id":1654257,"option":"You may have overridden Node's \"_\" value just for the immediately following operation.","correct":false},{"id":1654258,"option":"You need to use _.isArray([]) to make it work for the next line.","correct":false},{"id":1654259,"option":"The following \"_\" only works for the next line of code. You can not use it further.","correct":false},{"id":1654260,"option":"The name \"_\" is used by the node.js to hold the previous input.","correct":true}]},{"q":"<p>While installing an npm module, you are getting a particular kind of error. You double-checked the commands and since it starts with sudo (admin), so, you do have access, but the error is showing otherwise. You tried restarting your system, but nothing improved.<br>\nWhat could be the possible reason for throwing such an error?</p>","a":[{"id":1654253,"option":"You need to remove permission in the node_modules directory and reclaim the ownership.","correct":false},{"id":1654254,"option":"You need to reclaim ownership of the .npm directory.","correct":true},{"id":1654255,"option":"You need to change the ownership of the directory to the root.","correct":false},{"id":1654256,"option":"You need to give full permission to the node modules folder.","correct":false}]},{"q":"<p>You are trying to hack a nodeJS program that uses SMTP protocol to capture SMTP emails and act on the mail data. The library provides the mail data as a stream but you need to get that into a string.<br>\nHow can you collect all the data from the node.js stream into a string?</p>","a":[{"id":1654245,"option":"By using Buffers, Native Stream and Native Stream Transforms and support for Object Mode.","correct":false},{"id":1654246,"option":"By using the data and end events of a Readable Stream. ","correct":false},{"id":1654247,"option":"By converting the stream to a promise and using 'then' to assign the resolved value to a variable.","correct":true},{"id":1654248,"option":"By writing it to stdout with stream.pipe(process.stdout, { end: false }).","correct":false}]},{"q":"<p>You are working on an application in nodeJS that needs to run two commands in series, which will read data from the same stream. As after piping a stream into another, the buffer is emptied. Now, you can not read data from the stream again.<br>\nYou need to find a way to reuse a readable stream once it finishes piping. What could be the best way to accomplish this task?</p>","a":[{"id":1654241,"option":"You have to create a duplicate of the stream by piping it to two streams. ","correct":true},{"id":1654242,"option":"Changing the inputStream to fs.createWriteStream.","correct":false},{"id":1654243,"option":"You can use a library based on Stream2 streams, Streamz, and Promises to synchronize async streams through a callback.","correct":false},{"id":1654244,"option":"You can buffer the stream content and then creating streams from the buffered result.\r\n","correct":false}]},{"q":"<p>In your nodeJS project, you have a JSON object and you need to convert it into a Buffer.You want to convert the same buffer data into a valid JSON object. While implementing this, you are getting [object object] and when you convert back to JSON, you cannot open this object.</p>\n\n<pre class=\"prettyprint\"><code>var buf = new Buffer.from(obj.toString());\nvar temp = buf.toString();</code></pre>\n\n<p>What could be the best possible way to perform this conversion?</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>For converting json to buffer: var buf = new Buffer.from(obj.toString());<br>\n\tAnd for converting buffer to json obj: var temp = buf.toString();</li>\n\t<li>For converting json to buffer: var buf = Buffer.from({ key:'value', key:'value', key:'value'});<br>\n\tAnd for converting buffer to json obj: var temp = buf.toString();</li>\n\t<li>For converting json to string-buffer: var buf = Buffer.from(JSON.stringify(obj));<br>\n\tAnd for converting string to json obj: var temp = JSON.parse(buf.toString());</li>\n\t<li>For converting json to string-buffer: var buf = new Buffer.from(obj.toString());<br>\n\tAnd for converting string to json obj: var temp = JSON.parse(buf.toString());</li>\n</ol>","a":[{"id":1654237,"option":"1","correct":false},{"id":1654238,"option":"2","correct":false},{"id":1654239,"option":"3","correct":true},{"id":1654240,"option":"4","correct":false}]},{"q":"<p>You have a buffer with some binary data such that:<br>\nvar b = new Buffer ([0x00, 0x01, 0x02]);<br>\nYou are asked to append some data to the buffer set like 0x03. In doing so, a TypeError occurs.<br>\nHow should you append more binary data to the buffer set provided?</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>var b = new Buffer (4); \nnew Buffer ([0x00, 0x01, 0x02]).copy (b);\nconsole.log (b); \nnew Buffer ([0x03]).copy (b, 3);\nconsole.log (b); </code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Insert byte to specific place.\ninsertToArray(arr,index,item) {\n   return Buffer.concat([arr.slice(0,index),Buffer.from(item,\"utf-8\"),arr.slice(index)]);\n}</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<p>Buffers are always of fixed size, there is no built-in way to resize them dynamically</p>\n\t</li>\n\t<li>\n\t<p>var newBuffer = Buffer.concat([buffer1, buffer2]);</p>\n\t</li>\n</ol>","a":[{"id":1654233,"option":"1","correct":false},{"id":1654234,"option":"2","correct":false},{"id":1654235,"option":"3","correct":false},{"id":1654236,"option":"4","correct":true}]},{"q":"<p>You are trying to determine the content length of a buffer for a nodeJS project by doing this: Buffer.byteLength (self.data, 'utf8'), where \"self.data\" returns an array.<br>\nThe image you are loading is of more bytes as compared to what content length calculation is returning. How can you correctly calculate the content length for the above scenario?</p>","a":[{"id":1654225,"option":"You need to change \"Buffer.byteLength\" to \"buffer.toString().length\".","correct":false},{"id":1654226,"option":"You need to change \"self.data\" to \"self.data.byteLength\".","correct":true},{"id":1654227,"option":"You need to change \"self.data\" to \"self.data.length\".","correct":false},{"id":1654228,"option":"You need to change \"Buffer.byteLength\" to \"buffer.length\".","correct":false}]},{"q":"<p>You wrote a giant function with a lot of nested callbacks in your app. You have been asked to make it cleaner and crisp by using custom event listeners. He/She explained further that when a function is done in the callback, instead of putting a chunk of code, it just emits an event, and then the listener will run. The problem occurs in implementing custom event listeners. How should one accomplish this?</p>","a":[{"id":1654213,"option":"You can use app extend for EventEmitter in connect framework to implement custom events.","correct":false},{"id":1654214,"option":"You can create an EventEmitter object and call emit() on it.","correct":true},{"id":1654215,"option":"You can set events by using a callback to implement custom events.","correct":false},{"id":1654216,"option":"You can use function.emit() in your app to implement custom events.","correct":false}]},{"q":"<p>You are learning event handling in nodejs through playing around with listeners. You gave reference to the current emitter object to the other code and now it is all messed up.<br>\nTo make your project run smoothly, you need to get rid of the event listeners. How will you remove all the event listeners in your project?</p>","a":[{"id":1654209,"option":"You can do it using the public API like this:\r\nemitter.removeAllListeners(eventName);","correct":false},{"id":1654210,"option":"You can do it using the public API like this:\r\nevent.removeAllListeners();","correct":false},{"id":1654211,"option":"You can do it using the public API like this:\r\nemitter.removeAllListeners();","correct":true},{"id":1654212,"option":"Just replace the eventEmitter object with a new one that would have no listeners registered on it.","correct":false}]},{"q":"<p>You are working on a simplified function that looks like this:</p>\n\n<pre class=\"prettyprint\"><code>function(query) {\n    myApi.exec('SomeCommand', function(response) {\n    return response; });\n}</code></pre>\n\n<p>You want the function to wait until the callback gets called, and then, return the value that was passed to it. However, the above code does not work and simply returns immediately.<br>\nWhat could be an appropriate event-driven way of running this code as per the requirement?</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>function* (query) {\n  var response = yield wait.for( myApi.exec, 'SomeCommand');\n  return response;\n}</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>function(query) {\n  var r;\n  myApi.exec('SomeCommand', function(response) {\n    r = response;\n  });\n  while (!r) {}\n  return r;\n}</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>function(query, callback) {\n  myApi.exec('SomeCommand', function(response) {\n    callback(response); \n  });\n}</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>function* getResponse(query) {\n  const response = yield new Promise(resolve =&gt; myApi.exec('SomeCommand', resolve);\n  return response;\n}</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1654197,"option":"1","correct":false},{"id":1654198,"option":"2","correct":false},{"id":1654199,"option":"3","correct":true},{"id":1654200,"option":"4","correct":false}]},{"q":"<p>You have installed some project packages with npm install that looks into package.json for modules to be installed. There are some modules that you do not need. So, you remove their dependency from package.json. After working on the project for some more time, you removed a few other modules from package.json because they too were not needed anymore. You want to clean your node_modules folder such that only modules listed in package.json stay there and the rest are gone. What could be the best possible way to clean the node_modules folder?</p>","a":[{"id":1654193,"option":"You could remove your node_modules/ folder and then reinstall the dependencies from package.json. rm -rf node_modules/ npm install\r\n","correct":false},{"id":1654194,"option":"You could use clean-install to hard refresh all the packages.","correct":false},{"id":1654195,"option":"You could apply the following command through cmd in the desired folder: \"rimraf node_modules\".","correct":false},{"id":1654196,"option":"You could use \"npm prune [<name> [<name ...]]\" to remove extraneous packages.","correct":true}]},{"q":"<p>You were assigned a project. While searching for the same, you copied the package.json from that to your fresh new project. But, then you encountered a few issues. You need to adjust all the dependencies to their latest version. Which of the following options will lead you to the solution to this problem?</p>","a":[{"id":1654189,"option":"npm install {package-name}@* {save flags?}","correct":false},{"id":1654190,"option":"\"dependencies\": {\"foo\": \"latest\"}","correct":false},{"id":1654191,"option":"npm install -g npm-check-updates","correct":true},{"id":1654192,"option":"npm install express@* --save","correct":false}]},{"q":"<p>You have recently upgraded to the latest stable node and npm. Next, you tried \"npm install moment --save\". It did save the entry in the package.json but with the caret ^ prefix, earlier it was a tilde ~ prefix. What is the purpose of the caret ^ prefix used in the updated version?</p>","a":[{"id":1654185,"option":"^version signifies \"must match version exactly\".","correct":false},{"id":1654186,"option":"^version signifies \"matches any version\".","correct":false},{"id":1654187,"option":"^version signifies \"approximately equivalent to version\".","correct":false},{"id":1654188,"option":"^version signifies \"compatibility with the version\".","correct":true}]},{"q":"<p>While using nodeJS, you used the command \"npm install -P\". Which of the following options describes the most logically accurate role of -P?</p>","a":[{"id":1654181,"option":"To add dependencies and devDependencies to a package.json.","correct":false},{"id":1654182,"option":"The package will appear in your dependencies.","correct":true},{"id":1654183,"option":"The package will appear in your devDependencies.","correct":false},{"id":1654184,"option":"It suppresses the surrounding npm messages and leaves the composer error output intact.","correct":false}]},{"q":"<p>Your node server stops working when it is unable to parse JSON in the following line.<br>\nvar json = JSON.parse(message);<br>\nYou need to look for a proper way to wrap a try and catch block around this statement. How would you catch the exception and log an error to the console, and keep the server alive?</p>","a":[{"id":1654317,"option":"You can put JASON.parse under try/catch.","correct":false},{"id":1654318,"option":"JSON.parse runs asynchronous and does not know anything about an error parameter. You can catch the error using http.request.","correct":false},{"id":1654319,"option":"JSON.parse runs synchronous and does not know anything about an error parameter. You can catch the error using http.request.","correct":false},{"id":1654320,"option":"JSON.parse returns an object; that you can catch with try/catch.","correct":true}]},{"q":"<p>You are working with the node-MongoDB-native driver with MongoDB to write a website. You want to use one MongoDB connection for all the requests. After reading some documents, you are unsure about using a global connection pool. How can you set these connections to use a connection pool?</p>","a":[{"id":1654297,"option":"You should utilize a built-in in feature to share data between routes and modules within your app.","correct":false},{"id":1654298,"option":"You should create a connection as a service. Then, reuse it when needed.","correct":false},{"id":1654299,"option":"You need to establish mongo connection pools in a single self-contained module.","correct":false},{"id":1654300,"option":"You need to reuse the db object that results from MongoClient.connect().","correct":true}]},{"q":"<p>You have two different databases on the same machine for different functions, for example, the customer data in one database and statistical data in another. It seems insignificant to have to connect twice to use two databases. What is the proper way to achieve this if you want to use two different databases?</p>","a":[{"id":1654293,"option":"You need to create different instances of Sequelize for each database connection that you want to create.","correct":true},{"id":1654294,"option":"You can loop over your databases to create connections dynamically.","correct":false},{"id":1654295,"option":"You use a raw query that will connect to one database and query the other.","correct":false},{"id":1654296,"option":"You can use a schema that will prepend the database name to the table name.","correct":false}]},{"q":"<p>You were following a node-MySQL module that uses connection pooling by getConnection(). You set up a little module named mysql.JS. Now, whenever you want to query MySQL, you require this module and then query the database. What should be the good approach of using MySQL connection pooling in this case?</p>","a":[{"id":1654289,"option":"You can use pool.query() rather than getConnection().","correct":false},{"id":1654290,"option":"You need to end the connection when you are done using it.","correct":true},{"id":1654291,"option":"You can use await on every query in instances where you are running multiple queries.","correct":false},{"id":1654292,"option":"You can use the standard mysql.createPool() instead of connection pool.","correct":false}]},{"q":"<p>You are new to the node-MySQL module. Your program requires a bulk insertion. How should you do a bulk insertion into your MySQL project?</p>","a":[{"id":1654281,"option":"There is no 'bulk insert' in MySQL protocol.","correct":false},{"id":1654282,"option":"Bulk inserts are possible by using the VALUES keyword in your query.","correct":false},{"id":1654283,"option":"Bulk inserts are possible by using Callback in your query.","correct":false},{"id":1654284,"option":"Bulk inserts are possible by using a nested array in your query.","correct":true}]},{"q":"<p>You are learning how to use JWT Authentication in your Rest API. You have already made a token generator in the login function. You are having trouble verifying the token, as you try to verify the token by setting up some role like \"if (role ==2)\". What should be the best possible way to implement the verification for the token?</p>","a":[{"id":1654277,"option":"You need to change if(role == 2) to if(decoded.rows == 2).","correct":false},{"id":1654278,"option":"You need to change if(role == 2) to if(decoded.role == 2).","correct":false},{"id":1654279,"option":"You need to change if(role == 2) to if(decoded.rows.role == 2).","correct":true},{"id":1654280,"option":"You need to change if(role == 2) to if(decoded.roles != 2).","correct":false}]},{"q":"<p>You are working on an EventEmitter that emits an indeterminate number of streams like:</p>\n\n<pre class=\"prettyprint\"><code>eventEmitter.emit('stream', stream1)\neventEmitter.emit('stream', stream2)\n...\neventEmitter.emit('end')</code></pre>\n\n<p>While doing so, all the stream contents got jumbled together. What is the most concise way to get a stream with all streams concatenated together?</p>","a":[{"id":1654249,"option":"By using a simple reduce option on the streams. ","correct":false},{"id":1654250,"option":"By using the combined-stream package to concatenate streams.","correct":true},{"id":1654251,"option":"By using the PassThrough class in a trivial transform stream to concatenate streams.","correct":false},{"id":1654252,"option":"By using a queue of streams that push to the back and shift from the front.","correct":false}]},{"q":"<p>You are given a hex string \"01be638119704d4b9a\". You are asked to read the first three bytes \"01be63\" and read it as integer 114275. You used the readUInt32BE() function that works perfectly for 4-bytes data. But, it is showing a RangeError for the 3-bytes data.<br>\nHow can you read the first three bytes and then convert them into an integer?</p>","a":[{"id":1654229,"option":"You can use the readUIntBE() like this to get the desired result: var decimal = buffer.readUIntBE(0, 3);","correct":true},{"id":1654230,"option":"You can parse the buffer into Int: const integer = parseInt(buffer.toString(\"hex\"), 16)","correct":false},{"id":1654231,"option":"You can parse the buffer into Int: const integer = parseInt(buffer.toString(\"hex\"), 9)","correct":false},{"id":1654232,"option":"You can use the readUInt32BE() like this to get the desired result: Buffer.concat([buf, buffer.slice(0, 3)]).readUInt32BE();","correct":false}]},{"q":"<p>You are working on a nodeJS module that listens to data from a Bluetooth connection. The expected output would be a stream of data in Hexadecimal format printed in the console. But, the console just shows some random symbols. How can you decode the symbols and display the hexadecimal data in the console?</p>","a":[{"id":1654221,"option":"Buffer.from( buf.toHex(data));","correct":false},{"id":1654222,"option":"buff.toString('hex');","correct":true},{"id":1654223,"option":"Buffer.from( buf.toString('hex'),'hex');","correct":false},{"id":1654224,"option":"Buffer.from( buf.toString('hex'),'hex');","correct":false}]},{"q":"<p>You are new at javascript and its implications for programming. You created two modules \"person\" and \"group\", with \"group\" depending on \"person\" and have the main program main.js as a separate module. When you execute \"node ./main.js\", the message tells that the event is generated, but the event is not caught. How should you set up the modules so that they can generate events in one module and catch them in another?</p>","a":[{"id":1654217,"option":"You could set the listener in the group module and bound it to the \"personEvents\" variable created in the person module in the main.js.","correct":false},{"id":1654218,"option":"You could get around this by passing the Group object to Person when you create it in main.js.","correct":false},{"id":1654219,"option":"You could get around this by passing the Person object to Group when you create it in main.js.","correct":true},{"id":1654220,"option":"You could set the listener in the person module and bound it to the \"groupEvents\" variable created in the group module in the main.js.","correct":false}]},{"q":"<p>You are given a simplified function below:</p>\n\n<pre class=\"prettyprint\"><code>function(query) {\n        myApi.exec('SomeCommand', function(response) {\n                return response;\n        });\n}</code></pre>\n\n<p>You are asked to call myApi.exec and return the response that is given in the callback lambda. However, the above code simply returns immediately.<br>\nWhat could be the best approach to make a function wait until a callback has been called?</p>","a":[{"id":1654201,"option":"You can achieve this by wrapping the API call into a promise and then use await to wait for the result.\r\n","correct":false},{"id":1654202,"option":"You can use generators and promises to get this done. ","correct":false},{"id":1654203,"option":"You should make the function wait. Also, your function should accept a callback parameter.","correct":false},{"id":1654204,"option":"You should not make the function wait. Also, your function should accept a callback parameter.","correct":true}]},{"q":"<p> Assume that you have installed the Formidable module by using the following command. If you are required to upload a file to your computer, then which of the following statements about the following Node.js code are correct:</p>\n\n<p>Assume that you have executed this code by using the URL http://localhost:8080/</p>\n\n<p><strong>Command</strong></p>\n\n<pre class=\"prettyprint\"><code>npm install formidable</code></pre>\n\n<p><strong>Node.js code</strong> </p>\n\n<pre class=\"prettyprint\"><code>var hackvar1 = require('http');\nvar hackvar2 = require('formidable');\nhackvar1.createServer(function (req, res) {\n  if (req.url == '/fileupload') {\n    var hackvar3 = new hackvar2.IncomingForm();\n\thackvar3.parse(req, function (err, fields, files) {\n  \tres.write('File uploaded');\n  \tres.end();\n\t});\n  } else {\n    res.writeHead(200, {'Content-Type': 'text/html'});\n    res.write('&lt;form action=\"fileupload\" method=\"post\" enctype=\"multipart/form-data\"&gt;');\n    res.write('&lt;input type=\"file\" name=\"filetoupload\"&gt;&lt;br&gt;');\n    res.write('&lt;input type=\"submit\"&gt;');\n    res.write('&lt;/form&gt;');\n    return res.end();\n  }\n}).listen(8080);\n</code></pre>\n\n<p> </p>","a":[{"id":1302491,"option":"This code is used to create an upload form which is further used in parsing the uploadable file.","correct":true},{"id":1302492,"option":"This code is used to parse the uploadable file.","correct":false},{"id":1302493,"option":"Both of these","correct":false},{"id":1302494,"option":"None of these","correct":false}]},{"q":"<p>In Node.js, you are working on the Modules. You have created a module named<strong> myhackmodule.js </strong>and you have imported this module to your <strong>mynodeprogram.js file</strong>. If the output of this Node.js file should return the current date and time, then which of the following syntaxes should be included in your module file:</p>\n\n<p>Assume that you have executed this code by using the URL http://localhost:8080/</p>\n\n<p><strong>myhackmodule.js</strong></p>\n\n<pre class=\"prettyprint\"><code>exports.myfunc = function () {\n  //Enter your code here\n};\n</code></pre>\n\n<p><strong>mynodeprogram.js</strong></p>\n\n<pre class=\"prettyprint\"><code>var http = require('http');\nvar dt = require('./myhackmodule');\n\nhttp.createServer(function (req, res) {\n  res.writeHead(200, {'Content-Type': 'text/html'});\n  res.write(dt.myfunc());\n  res.end();\n}).listen(8080);\n</code></pre>\n\n<p> </p>","a":[{"id":1302487,"option":"return Date();","correct":true},{"id":1302488,"option":"return CDate();","correct":false},{"id":1302489,"option":"return GDate();","correct":false},{"id":1302490,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following Node.js code:</p>\n\n<p>Assume that this code is executed in your command prompt by using the <strong>node</strong> command</p>\n\n<pre class=\"prettyprint\"><code>var events = require('events');\nvar eventEmitter = new events.EventEmitter();\nvar myEventHandler = function () \n{\n  console.log('Hi, Node.js developers!');\n}\neventEmitter.on('Hi', myEventHandler);\neventEmitter.emit('Hello');\n</code></pre>\n\n<p> </p>","a":[{"id":1302483,"option":"Hi","correct":false},{"id":1302484,"option":"Hello","correct":false},{"id":1302485,"option":"Hi, Node.js developers!","correct":false},{"id":1302486,"option":"Nothing is displayed as the output","correct":true}]}]
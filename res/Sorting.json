[{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>def element(x): \n    return x[0] \ndef sort_list(t):  \n  return sorted(t, key = element)  \nprint(sort_list([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)]))  \n</code></pre>\n\n<p> </p>","a":[{"id":1121745,"option":"[(1, 2), (2, 1), (2, 3), (2, 5), (4, 4)] ","correct":false},{"id":1121746,"option":"[(1, 2), (2, 3), (2, 1), (2, 5), (4, 4)]","correct":false},{"id":1121747,"option":"[(1, 2), (2, 5), (2, 3), (2, 1), (4, 4)]","correct":true},{"id":1121748,"option":"[(1, 2), (2, 5), (2, 1), (2, 3), (4, 4)]","correct":false}]},{"q":"<p>In Perl, what will the @b array consist of?</p>\n\n<pre class=\"prettyprint\"><code>my @a = (10, 5, 1);\nmy @b = sort @a;</code></pre>\n\n<p> </p>","a":[{"id":9526,"option":"(1, 5, 10)\r\n ","correct":false},{"id":9527,"option":"(10, 5, 1)\r\n ","correct":false},{"id":9528,"option":"(1, 10, 5)\r\n ","correct":true},{"id":9529,"option":"(5, 10, 1)\r\n ","correct":false}]},{"q":"<p>In Data Structures, Determine the <strong>x</strong> in the following pseudo-code with the respect to the given input.</p>\n\n<pre class=\"prettyprint\"><code>input: array HackArr[] = {1,1,5,5,2,2,7}   \noutput: x\nN = length of HackArr\nfor i from 1 to N-1 do\n  j = i\n  while (j&gt;0) and (hackArr[j] &lt; HackArr[j-1]) do\n     k = HackArr(j)\n     HackArr(j) = HackArr(j-1)\n     HackArr(j-1) = k\n     j = j-1\n  end-do\nend-for\n</code></pre>\n\n<p>Assume that you are required to get the output where each element of this data-structure is space-separated.</p>\n\n<p>Assume that the included data-structure is a zero-based indexed array.</p>","a":[{"id":1346974,"option":"7 5 5 2 2 1 1","correct":false},{"id":1346975,"option":"1 2 5 7 1 2 5","correct":false},{"id":1346976,"option":"1 1 2 2 5 5 7","correct":true},{"id":1346977,"option":"None of these","correct":false}]},{"q":"<p>In data structures, what is the worst-case complexity of the following algorithm:</p>\n\n<pre class=\"prettyprint\"><code>SORT (A)\n{\n n ← length [A]\n  For i = 1 to n do\n Insert A[i] into list B[A[i]/b] ..(b&lt;- constant)\n  For i = 0 to n-1 do\n  Sort list B with Insertion sort\n \n Concatenate the lists B[0], B[1], . . B[n-1]..\n}</code></pre>\n\n<p> </p>","a":[{"id":708038,"option":"O(n+k)","correct":false},{"id":708039,"option":"O(nlogn)","correct":false},{"id":708040,"option":"O(n^2)","correct":true},{"id":708041,"option":"O(n^2logn)","correct":false}]},{"q":"<p>Which of the following sorting algorithms is implemented in the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>public void Sort(int[] num) \n\n{\nboolean flag;\ndo \n  {\n   flag = false;\n   for (int i = 0; i &lt; num.length - 1; i++)\n\n   {\n    if (num[i + 1] &lt; num[i]) {\n    int tmp = num[i + 1];\n    num[i + 1] = num[i];\n    num[i] = tmp;\n    flag = true;\n   }\n }\n}\n\nwhile (flag);\n\n}</code></pre>\n\n<p> </p>","a":[{"id":669777,"option":"Bubble sort","correct":true},{"id":669778,"option":"Selection sort","correct":false},{"id":669779,"option":"Quick sort","correct":false},{"id":669780,"option":"Insertion sort","correct":false}]},{"q":"<p>In Data Structures, you are working on the various sorting algorithms on Array data structure on <span class=\"mathjax-latex\">\\(n\\)</span> elements. Which of the following sorting algorithms have <span class=\"mathjax-latex\">\\(O\\bigl(n\\,\\times\\,log(n)\\bigr)\\)</span> as their worst-case time complexity:</p>\n\n<ol>\n\t<li>Quicksort</li>\n\t<li>Mergesort</li>\n\t<li>Timsort</li>\n\t<li>Cubesort</li>\n</ol>","a":[{"id":1347170,"option":"1, 2, and 3","correct":false},{"id":1347171,"option":"2, 3, and 4","correct":true},{"id":1347172,"option":"1, 2, and  4","correct":false},{"id":1347173,"option":"1, 3, and 4","correct":false}]}]
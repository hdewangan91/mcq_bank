[{"q":"<p>In RTL, which of these logical designs does the following ASMD chart represent:</p>\n\n<p><strong><img alt=\"\" height=\"766\" src=\"https://he-s3.s3.ap-southeast-1.amazonaws.com/media/uploads/8023f1b7-4a77-49d7-8f9a-3a60a63dd91f.png\" width=\"520\"></strong></p>","a":[{"id":1212925,"option":"Multiplexer","correct":false},{"id":1212926,"option":"Repetitive-subtraction divider","correct":false},{"id":1212927,"option":"Repetitive-addition multiplier","correct":true},{"id":1212928,"option":"Decoder","correct":false}]},{"q":"<p>In RTL, you are given the following conceptual data path diagram along with the timing parameters. If the state register and data register have similar timing characteristics, then the minimal clock period and the maximal clock rate are described in the provided expressions.</p>\n\n<p>Which of the following statements about the relationship between the data path and clock period are correct in this scenario?</p>\n\n<ol>\n</ol>\n\n<ol>\n</ol>\n\n<p><strong>Conceptual data path diagram</strong></p>\n\n<p><strong><img alt=\"\" height=\"423\" src=\"https://he-s3.s3.ap-southeast-1.amazonaws.com/media/uploads/2f81623b-9049-4f32-8c3b-4ee733d351fd.png\" width=\"937\"></strong></p>\n\n<p><strong>Timing parameters</strong></p>\n\n<ol>\n\t<li><span class=\"mathjax-latex\">\\(T_{dp}\\)</span> represents the maximal propagation delay of the combinational circuit of the data path.</li>\n\t<li><span class=\"mathjax-latex\">\\(T_{output}\\)</span> represents the maximal propagation delay of the output-state logic of the control path FSM. </li>\n\t<li><span class=\"mathjax-latex\">\\(T_{next}\\)</span> represents the maximal propagation delay of the next-state logic of the control path FSM.</li>\n\t<li><span class=\"mathjax-latex\">\\(T_{cq}\\)</span> represents the clock-to-q delay.</li>\n\t<li><span class=\"mathjax-latex\">\\(T_{setup}\\)</span> represents the setup time.</li>\n\t<li><span class=\"mathjax-latex\">\\(T_c\\)</span> represents the clock period.</li>\n</ol>\n\n<p><strong>Expressions</strong></p>\n\n<ul>\n\t<li>Minimal clock period bound: <span class=\"mathjax-latex\">\\(T_{cq} + T_{dp} + T_{setup} \\le T_c \\le T_{cq} + T_{output} + T_{dp} + T_{next} + T_{setup} \\)</span></li>\n\t<li>Maximal clock rate bound: <span class=\"mathjax-latex\">\\(\\frac{1}{T_{cp}+T_{output}+T_{dp}+T_{next}+T_{setup}}\\le f \\le \\frac{1}{T_{cp}+T_{dp}+T_{setup}}\\)</span></li>\n</ul>\n\n<ol>\n</ol>","a":[{"id":1213083,"option":"For a design with a wide and complex data path, Tnext is larger than Tdp and Toutput. Thus, the variation in the minimal clock period is relatively large.","correct":false},{"id":1213084,"option":"For a design with a wide and complex data path, Tdp is larger than Tnext and Toutput. Thus, the variation in the minimal clock period is relatively small. ","correct":true},{"id":1213085,"option":"For a design with a small data path, Tdp is larger than Tnext and Toutput. Thus, the variation in the minimal clock period is relatively large.","correct":false},{"id":1213086,"option":"For a design with a wide and complex data path, Tsetup is larger than Tdp and Toutput. Thus, the variation in the minimal clock period is relatively small.","correct":false}]},{"q":"<p>In RTL, you are given the following code that represents a decoder using the shift operator. This code compiles to 94 number of gates. You want a design that compiles to a lesser number of gates and produces faster computation. Thus, you write a new code that uses a balanced tree decoder. Determine X in the new code corresponding to the decoder that is provided in the diagram.</p>\n\n<p><strong>Decoder using the shift operator</strong></p>\n\n<pre class=\"prettyprint\"><code>module decoder_one(adr, decode);\ninput [4:0] adr;\noutput [31:0] decode;\nassign decode = ~(1’b1 &lt;&lt; adr);\nendmodule</code></pre>\n\n<p><strong>Balanced tree decoder</strong></p>\n\n<p><strong><img alt=\"\" height=\"351\" src=\"https://he-s3.s3.ap-southeast-1.amazonaws.com/media/uploads/ac453716-d7f7-481a-9eda-3a8dfb29fe76.png\" width=\"642\"></strong></p>\n\n<p><strong>New code</strong></p>\n\n<pre class=\"prettyprint\"><code>module decoder_new (adr, dec);\ninput [4:0] adr;\noutput [31:0] dec;\nX\ndecode_sec d32l2 (da, db, dec);\nendmodule</code></pre>\n\n<p><br>\n </p>","a":[{"id":1213079,"option":"wire [3:0] da = 1’b1 >> adr[4:2]; \r\nwire [7:0] db = 1’b1 << adr[1:0]; ","correct":false},{"id":1213080,"option":"wire [3:0] da = 1’b1 << adr[1:0]; \r\nwire [7:0] db = 1’b1 << adr[4:2]; ","correct":true},{"id":1213081,"option":"wire [7:0] da = 1’b1 << adr[1:0]; \r\nwire [3:0] db = 1’b1 << adr[4:2]; ","correct":false},{"id":1213082,"option":"wire [3:0] da = 1’b1 >> adr[1:0]; \r\nwire [7:0] db = 1’b1 >> adr[4:2]; ","correct":false}]},{"q":"<p>You have two cross-coupled multiplexers with an inverted select signal on one of the multiplexers. You need to design false path feedback as shown below. How would you code the following in Verilog?</p>\n\n<p><img alt=\"\" height=\"254\" src=\"https://he-s3.s3.ap-southeast-1.amazonaws.com/media/uploads/babd8000-6619-40fc-bee8-4cb911f6226a.png\" width=\"186\"></p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>module m (s, a, b, y, z);\n  input s;\n  input a, b;\n  output y, z;\n  wire s, a, b;\n  wire y, z;\n  assign y = s ? a : z;\n  assign z = y\nendmodule // m</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>module m (s, a, b, y, z);\n  input s;\n  output a, b;\n  input y, z;\n  wire s, a, b;\n  wire y, z;\n  assign y = s ? a : z;\n  assign z = s ? y : b;\nendmodule // m</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>module m (s, a, b, y, z);\n  input s;\n  output a, b;\n  input y, z;\n  wire s, a, b;\n  wire y, z;\n  assign y = s ? a : z;\n  assign z = s ? y : b;\nendmodule // m</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>module m (s, a, b, y, z);\n  input s;\n  input a, b;\n  output y, z;\n  wire s, a, b;\n  wire y, z;\n  assign y = s ? a : z;\n  assign z = s ? y : b;\nendmodule // m</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1572234,"option":"1","correct":false},{"id":1572235,"option":"2","correct":false},{"id":1572236,"option":"3","correct":false},{"id":1572237,"option":"4","correct":true}]},{"q":"<p>Which form of counter circuit can readily generate a series of equal space time pulses?</p>","a":[{"id":1572290,"option":"Clock Shift","correct":false},{"id":1572291,"option":"Johnson Counter","correct":false},{"id":1572292,"option":"Ring Counter","correct":true},{"id":1572293,"option":"Binary Shift","correct":false}]},{"q":"<p>If a boolean function is implemented using a ROM to solve the equations given below, determine the minimum size of ROM.</p>\n\n<p><em>F1(A,B,C,D)= A+B+C+D ; F2(A,B,C,D)=(ABCD)+(A+B+C)</em></p>","a":[{"id":1572282,"option":"16","correct":false},{"id":1572283,"option":"32","correct":true},{"id":1572284,"option":"256","correct":false},{"id":1572285,"option":"10","correct":false}]},{"q":"<p>What is the value of the binary subtraction of <em>111001 - 10101</em>?</p>","a":[{"id":1572278,"option":"14","correct":false},{"id":1572279,"option":"63","correct":false},{"id":1572280,"option":"15","correct":false},{"id":1572281,"option":"36","correct":true}]},{"q":"<p>Based on the information given, which of the following is correct about JK flipflop:</p>\n\n<p><strong>Information</strong></p>\n\n<ul>\n\t<li>Output = <em>1</em></li>\n\t<li><em>J</em> = <em>1</em></li>\n</ul>","a":[{"id":1572274,"option":"Output of a JK flip flop = 0","correct":false},{"id":1572275,"option":"Output of a JK flip flop = 1","correct":true},{"id":1572276,"option":"It goes into redundant state","correct":false},{"id":1572277,"option":"It does not get processed","correct":false}]},{"q":"<p>What is the hexadecimal number <em>(1C.23)16 </em>equivalent to?</p>","a":[{"id":1572270,"option":"(33.106)8","correct":false},{"id":1572271,"option":"(43.106)8","correct":false},{"id":1572272,"option":"(34.106)8","correct":true},{"id":1572273,"option":"(23.106)8","correct":false}]},{"q":"<p>Which of the following signifies the default representation of the logic level of ECL?</p>","a":[{"id":1572266,"option":"0'=-1.8V  ,   '1'=0.8V","correct":true},{"id":1572267,"option":"0'=1.8V  ,   '1'=0.8V","correct":false},{"id":1572268,"option":"0'=-1.8V  ,   '1'=-0.8V","correct":false},{"id":1572269,"option":"0'=-0.8V  ,   '1'=1.8V","correct":false}]},{"q":"<p>You need to create an assertion checker that does not have any complex sequential check with the exception of sampling at every positive edge of the clock. Which of the following modules gives the Verilog code for the aforementioned case?</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>module assert_always (ck, reset_n, test_expr);\n  input ck, reset_n, test_expr;\n  parameter severity_level = 0;\n  parameter msg=\"ASSERT ALWAYS VIOLATION\";\n‘ifdef ASSERT_ON\n  integer error_count;\n  initial error_count = 0;\n  always @(posedge ck) begin\n  ‘Ifdef ASSERT_GLOBAL_RESET\n    if (‘ASSERT_GLOBAL_RESET != 1’b0) begin\n  ‘else\n    if (reset_n != 1’b0) begin\n  ‘endif\n    if (test_expr != 1’b1) begin\n     error_count = error_count + 1;\n     ‘Ifdef ASSERT_MAX_REPORT_ERROR\n         if (error_count &lt;=\n                   ‘ASSERT_MAX_REPORT_ERROR)\n        ‘endif\n           $display(\"%s : severity %0d : time %0t: %m\",\n                          msg, severity_level, $time);\n        if(severity_level == 0) $finish;\n     end \n  end\nend // always\n‘endif\n endmodule // assert_always</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>module assert_always (ck, reset_n, test_expr);\n  input ck, reset_n, test_expr;\n  parameter severity_level = 0;\n  parameter msg=\"ASSERT ALWAYS VIOLATION\";\n‘ifdef ASSERT_ON\n  integer error_count;  \n  always @(posedge ck) begin\n  ‘Ifdef ASSERT_GLOBAL_RESET\n    if (‘ASSERT_GLOBAL_RESET != 1’b0) begin\n  ‘else\n    if (reset_n != 1’b0) begin\n  ‘endif\n   $display(\"%s : severity %0d : time %0t: %m\",\n                          msg, severity_level, $time);\n        if(severity_level == 0) $finish;\n     end \n  end\nend // always\n‘endif\n endmodule // assert_always</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>module assert_always (ck, reset_n, test_expr);\n  input ck, reset_n, test_expr;\n  parameter severity_level = 0;\n  parameter msg=\"ASSERT ALWAYS VIOLATION\";\n‘ifdef ASSERT_ON\n  integer error_count;\n  initial error_count = 0;\n  assert_always q_safe ( clk, reset_n,\n           (q_valid==1’b1) ? (q_underflow==1’b1): 1’b1);\n           $display(\"%s : severity %0d : time %0t: %m\",\n                          msg, severity_level, $time);\n        if(severity_level == 0) $finish;\n   ‘endif\n endmodule // assert_always</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>module assert_always (ck, reset_n, test_expr);\n  input ck, reset_n, test_expr;\n  parameter severity_level = 0;\n  parameter msg=\"ASSERT ALWAYS VIOLATION\";\n‘ifdef ASSERT_ON\n  integer error_count;\n  always @(posedge ck) begin\n  ‘Ifdef ASSERT_GLOBAL_RESET\n    if (‘ASSERT_GLOBAL_RESET != 1’b0) begin\n  ‘else\n    if (reset_n != 1’b0) begin\n  ‘endif\n    if (test_expr != 1’b1) begin\n     error_count = error_count + 1;\n     ‘Ifdef ASSERT_MAX_REPORT_ERROR\n         if (error_count &lt;=\n                   ‘ASSERT_MAX_REPORT_ERROR)\n        ‘endif\n           $display(\"%s : severity %0d : time %0t: %m\",\n                          msg, severity_level, $time);\n        if(severity_level == 0) $finish;\n     end \n  end\nend // always\n‘endif\n endmodule // assert_always</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1572262,"option":"1","correct":true},{"id":1572263,"option":"2","correct":false},{"id":1572264,"option":"3","correct":false},{"id":1572265,"option":"4","correct":false}]},{"q":"<p>You are given the following Verilog code:</p>\n\n<pre class=\"prettyprint\"><code>module m (a, d);\n  input a;\n  output d;\n  reg b, d;\n  wire c;\n  always @(a or c)\n   begin\n     b = a;\n     d = c;\n   end\n  assign c = b;\nendmodule // m</code></pre>\n\n<p>Convert the above code in lining assign to clear up the feedback.</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>module m (a, d);\n  input a;\n  output d;\n  reg b, c, d;\n  always @(a)\n  begin\n    b = a;\n    c = b;\n    d = c;\n  end\nendmodule // m</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>module m (a, d);\n  input a;\n  output d;\n  reg b, c, d;\n  always @(a)\n  begin\n  a=b=c\n  end\nendmodule // m</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>module m (a, d);\n  input a;\n  output d;\n  wire b, c, d;\n  assign b = a;\n  assign d = c;\n  assign c = b;\nendmodule // m</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>module m (a, d);\n   wire b, c, d;\n  assign b = a;\n  assign d = c;\n  assign c = b;\nendmodule // m</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1572258,"option":"1","correct":true},{"id":1572259,"option":"2","correct":false},{"id":1572260,"option":"3","correct":false},{"id":1572261,"option":"4","correct":false}]},{"q":"<p>In RTL designing, delay specification has limited uses. Why does synthesis discards all delay values in the RTL?</p>","a":[{"id":1572254,"option":"It introduces simulation difference.","correct":true},{"id":1572255,"option":"It results in incorrect order of procedural statements.","correct":false},{"id":1572256,"option":"It induces X state pessimism.","correct":false},{"id":1572257,"option":"It disrupts the connection of the ports.","correct":false}]},{"q":"<p>Consider the following verilog code used in RTL designing:</p>\n\n<pre class=\"prettyprint\"><code>input [15:0] a;\noutput [0:15] b;\ninteger i;\nreg[0:15]b;\nalways @ (a) begin\nfor (i=0; i&lt;=15;i=i+1)\n  b[15-i] = a[i];\nend</code></pre>\n\n<p>What will be the nature of the simulation speed for the above code?</p>","a":[{"id":1572250,"option":"It will be faster as compared to assigning the variable using assign statement.","correct":false},{"id":1572251,"option":"It will be slower than assigning the variable using assign statement.","correct":true},{"id":1572252,"option":"It will consume the same time as assigning the variable using assign statement.","correct":false},{"id":1572253,"option":"It will be faster if we isolate the assigning statements.","correct":false}]},{"q":"<p>Usually in Verilog, many users prefer to functionally specify case statements while designing RTL though it is recommended to fully specify them. What option does Verilog provide to those who are accustomed to functional specifications?</p>","a":[{"id":1572246,"option":"Automatic conversion of functionally specified case to fully specified state","correct":false},{"id":1572247,"option":"Option to issue a diagnostic message","correct":true},{"id":1572248,"option":"Suggesting changes that should be made","correct":false},{"id":1572249,"option":"No such feature is present","correct":false}]},{"q":"<p>An RTL code using flipflops is given below:</p>\n\n<pre class=\"prettyprint\"><code>always @(posedge ck250)\nbegin\n  r_rcs &lt;= rst_ ? c_rcs : 0;\n  r_del &lt;= c_del;\n  r_avail &lt;= c_avail;\n  r_n1 &lt;= rst_ ? c_n1 : 0;\n  r_n2 &lt;= rst_ ? c_n2 : 0;\n  r_n3 &lt;= rst_ ? c_n3 : 0;\n  r_n4 &lt;= rst_ ? c_n4 : 0;\n  r_n5 &lt;= rst_ ? c_n5 : 0;\n  r_n6 &lt;= rst_ ? c_n6 : 0;\nend</code></pre>\n\n<p>What is wrong with executing the above code?</p>","a":[{"id":1572242,"option":"r_ni conditional statements have incorrect logic (i=1,2,…5).","correct":false},{"id":1572243,"option":"There is no tool specific isolation.","correct":true},{"id":1572244,"option":"There is no boolean interpretation.","correct":false},{"id":1572245,"option":"There is no error in the code.","correct":false}]},{"q":"<p>Without using a microprocessor, how can a DMA transfer the data or files?</p>","a":[{"id":1572286,"option":"Direct transfer of data between memory and I/O devices","correct":true},{"id":1572287,"option":"Direct transfer of data between microprocessor and I/O devices","correct":false},{"id":1572288,"option":"Direct transfer of data between accumulator and register","correct":false},{"id":1572289,"option":"Transfer can depend on the function to be performed","correct":false}]},{"q":"<p>Consider the following verilog code used in RTL designing:</p>\n\n<pre class=\"prettyprint\"><code>reg [1:0] d,e;\n...\nbegin\n  d = 2’b0X;\n  case (d)\n    2’b00 : e = 2’b01;\n    2’b01 : e = 2’b11;\n    2’b10: e = 2’b10;\n    2’b11: e = 2’b00;\n    default : e = 2’bXX;\n  endcase\n  $display(\" e = %b\",e);\nend</code></pre>\n\n<p>Which of the following options indicates the issue with the aforementioned code?</p>","a":[{"id":1572238,"option":"This code causes simulation differences.","correct":false},{"id":1572239,"option":"This code has logic timing problem.","correct":false},{"id":1572240,"option":"This is a case of X- state pessimism","correct":true},{"id":1572241,"option":"This is a case of X- state optimism.","correct":false}]},{"q":"<p>In RTL synthesis, You are given the following values. You are using linear extrapolation. Determine the area overhead caused because of the interconnect in this scenario if the desired fanout value is 8:  </p>\n\n<ol>\n\t<li>Length of the last fanout number = 5.6</li>\n\t<li>Last fanout value in wire load model (WLM) = 7</li>\n\t<li>Slope = 0.5</li>\n\t<li>Area coefficient = 0.07</li>\n</ol>\n\n<p> </p>","a":[{"id":1239573,"option":"0.194 unit","correct":false},{"id":1239574,"option":"0.327 unit","correct":false},{"id":1239575,"option":"0.427 unit","correct":true},{"id":1239576,"option":"0.832 unit","correct":false}]},{"q":"<p>In RTL, you are given two ASICs in which one has a setup violation and the other has the hold violation. You want to ensure that they work together. Which of the following methods will allow you to remove the hold violation without modifying the design:</p>\n\n<ol>\n\t<li>To remove the hold violation, add a combinational logic in the path where there are setup violations. This will slow down the data path and the data will not change in the hold window.</li>\n\t<li>To remove the hold violation, add a redundant logic in the path where there are hold violations. This will slow down the data path and the data will not change in the hold window. </li>\n\t<li>To remove the hold violation, add a redundant logic in the path where there are setup violations. This will increase the speed of the data path and the data will not change in the hold window. </li>\n\t<li>To remove the hold violation, add a register in the path where there are hold violations. This will increase the speed of the data path and the data will not change in the hold window. </li>\n</ol>","a":[{"id":1238298,"option":"1","correct":false},{"id":1238299,"option":"2","correct":true},{"id":1238300,"option":"3","correct":false}]},{"q":"<p>In RTL synthesis, you are given the following code. Which of these statements about the provided code is correct:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>always @ (posedge clk) \nbegin\n     a &lt;= x^y;\n     a &lt;= x &amp; y;                                        \n     a &lt;= x|y;\nend</code></pre>\n\n<p><strong>Statements</strong></p>\n\n<ol>\n\t<li>There are multiple non-blocking assignments made to the same reg variable <strong>a</strong> in the sequential <strong>always</strong> block. Thus, only the first assignment is selected for synthesis.</li>\n\t<li>There are multiple blocking assignments made to the same reg variable <strong>a</strong> in the sequential <strong>always</strong> block. Thus, only the last assignment is selected for synthesis.</li>\n\t<li>There are multiple blocking assignments made to the same reg variable <strong>a</strong> in the sequential <strong>always</strong> block. Thus, only the first assignment is selected for synthesis.</li>\n\t<li>There are multiple non-blocking assignments made to the same reg variable <strong>a</strong> in the sequential <strong>always</strong> block. Thus, only the last assignment is selected for synthesis.</li>\n</ol>","a":[{"id":1238294,"option":"1","correct":false},{"id":1238295,"option":"2","correct":false},{"id":1238296,"option":"3","correct":false},{"id":1238297,"option":"4","correct":true}]},{"q":"<p>In RTL synthesis, you are given the following <strong>Code 1</strong> and <strong>Code 2</strong>. Which of these statements about this code is correct:</p>\n\n<p><strong>Code 1</strong></p>\n\n<pre class=\"prettyprint\"><code>always @ (posedge clock1 or negedge clock2)\nbegin\nif (!clock2 &amp;&amp; b)\ndout &lt;= 1;\nelse\ndout&lt;= din;\nend</code></pre>\n\n<p><strong>Code 2</strong></p>\n\n<pre class=\"prettyprint\"><code>always @ (posedge clock1 or negedge reset)\nbegin\nif (!clock1 &amp;&amp; reset)\ndout &lt;= 0;\nelse\ndout&lt;= din;\nend</code></pre>\n\n<p> </p>\n\n<p><strong>Statements</strong></p>\n\n<ol>\n\t<li>Code 1 is synthesizable because it mixes only the asynchronous elements in the if condition. Whereas, Code 2 is not synthesizable because it mixes asynchronous and synchronous elements in the if condition. </li>\n\t<li>Code 2 is synthesizable because it mixes only the asynchronous elements in the if condition. Whereas, Code 1 is not synthesizable because it mixes asynchronous and synchronous elements in the if condition. </li>\n\t<li>Code 1 is not synthesizable because it mixes both the asynchronous and synchronous elements in the if condition. Whereas, Code 2 is synthesizable because it mixes only the synchronous elements in the if condition. </li>\n\t<li>Both Code 1 and Code 2 are not synthesizable.</li>\n</ol>\n\n<p> </p>","a":[{"id":1238290,"option":"1","correct":false},{"id":1238291,"option":"2","correct":false},{"id":1238292,"option":"3","correct":true},{"id":1238293,"option":"4","correct":false}]},{"q":"<p>In RTL synthesis, multiple <strong>if</strong> statements are used for an entire functionality. There are no <strong>else</strong> statements in the functionality. Which of these statements about this scenario is correct:</p>\n\n<ol>\n\t<li>No latch must be inferred but sometimes, a synthesis tool is not intelligent enough and it can infer this as a latch. </li>\n\t<li>No latch is inferred as there are no '<strong>else/default</strong>' statements used in '<strong>if/case</strong>' statements, respectively, </li>\n</ol>","a":[{"id":1238277,"option":"1","correct":true},{"id":1238278,"option":"2","correct":false},{"id":1238279,"option":"Both of these","correct":false},{"id":1238280,"option":"None of these","correct":false}]},{"q":"<p>In RTL synthesis, you are given the following code. Which of these statements about the provided code is correct:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>always @ (en)\nbegin\ndout = 0\ncase(X)\n0: dout = in ;\nend</code></pre>\n\n<p><strong>Statements</strong></p>\n\n<ol>\n\t<li>A latch is formed. This is because dout is already initialized to 0 and executed before the case statement. </li>\n\t<li>No latch can be formed. This is because dout is already initialized to 0 and executed before the case statement.  </li>\n\t<li>No latch can be formed. This is because dout is initialized to X and executed before the case statement.</li>\n\t<li>A latch is formed. This is because dout is initialized to X and executed before the case statement.  </li>\n</ol>","a":[{"id":1238286,"option":"1","correct":false},{"id":1238287,"option":"2","correct":true},{"id":1238288,"option":"3","correct":false},{"id":1238289,"option":"4","correct":false}]},{"q":"<p>You are given an oscillatory circuit. During the RTL synthesis, the synthesis tool displays a warning about the combinatorial feedback loop. Which of the following messages will be displayed during the simulation in this scenario:</p>\n\n<ol>\n\t<li>The simulation stops. It displays—Memory limit reached.</li>\n\t<li>The simulation stops. It displays—Complier limit reached. </li>\n\t<li>The simulation stops. It displays—Design error.</li>\n\t<li>The simulation stops. It displays—Iteration limit reached.</li>\n</ol>","a":[{"id":1238282,"option":"1","correct":true},{"id":1238283,"option":"2","correct":false},{"id":1238284,"option":"3","correct":false},{"id":1238285,"option":"4","correct":false}]},{"q":"<p> In RTL, you are facing a <strong>timing violation </strong>issue. Which of the following methods can be used to overcome this issue:</p>\n\n<ol>\n\t<li>Buffering</li>\n\t<li>Pin swapping</li>\n\t<li>Slack</li>\n\t<li>Floorplanning</li>\n</ol>","a":[{"id":1238273,"option":"1 and 2","correct":true},{"id":1238274,"option":"2 and 3","correct":false},{"id":1238275,"option":"3 and 4","correct":false},{"id":1238276,"option":"1 and 4","correct":false}]},{"q":"<p>In RLT, which of these design stages cannot be used for parallel computing:</p>\n\n<ol>\n\t<li>Functional verification</li>\n\t<li>Global Routing</li>\n\t<li>DRC</li>\n\t<li>Placement (hierarchical design)</li>\n</ol>","a":[{"id":1238269,"option":"1","correct":false},{"id":1238270,"option":"2","correct":true},{"id":1238271,"option":"3","correct":false},{"id":1238272,"option":"4","correct":false}]},{"q":"<p>RTL is based on synchronous logic. It contains the following three important components. If you want to control the change in the state, then which of these components must be used: </p>\n\n<ol>\n\t<li>Register</li>\n\t<li>Combinational logic</li>\n\t<li>Clock</li>\n</ol>\n\n<p> </p>","a":[{"id":1238265,"option":"1","correct":false},{"id":1238266,"option":"2","correct":false},{"id":1238267,"option":"3","correct":true},{"id":1238268,"option":"None of these","correct":false}]},{"q":"<p>In RTL, which of these statements represent the error (if any) in the following code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>always @(posedge clk) begin\n  if(reset)\n    f &lt;= 1'b0;\nend\nalways @(posedge clk) begin\n  if(count)\n    f &lt;= a;\nend</code></pre>\n\n<p><strong>Statements</strong></p>\n\n<ol>\n\t<li>The code is incorrect because signal f is driven from the same <strong>always</strong> block. The signal must be driven from a different <strong>always</strong> block.</li>\n\t<li>The code is incorrect because the signal f is driven from two different <strong>always</strong> blocks. The signal must be driven from one <strong>always</strong> block only.</li>\n\t<li>The code is incorrect because reset cannot be used in an <strong>always</strong> block.</li>\n\t<li>The code is correct.</li>\n</ol>","a":[{"id":1213403,"option":"1","correct":false},{"id":1213404,"option":"2","correct":true},{"id":1213405,"option":"3","correct":false},{"id":1213406,"option":"4","correct":false}]},{"q":"<p>In RTL, you require a mechanism to specify when and which RT operations must be performed on an algorithm. Which of these methods will you use to enforce the following:</p>\n\n<ol>\n\t<li>Order of RT operations</li>\n\t<li>Selectively perform certain RT operations based on external commands or internal status</li>\n</ol>\n\n<p><strong>Methods</strong></p>\n\n<ol>\n\t<li>Control path</li>\n\t<li>Register</li>\n\t<li>Timing diagram</li>\n\t<li>Clock</li>\n</ol>","a":[{"id":1212761,"option":"1","correct":true},{"id":1212762,"option":"2","correct":false},{"id":1212763,"option":"3","correct":false},{"id":1212764,"option":"4","correct":false}]},{"q":"<p>In RTL coding, which of the following statements about the <strong>always </strong>block is correct:</p>\n\n<ol>\n\t<li>Any statement inside this block is executed until the line that contains the <strong>begin</strong> keyword.</li>\n\t<li>Any statement inside this block is executed until the <strong>end</strong> keyword.</li>\n\t<li>Any statement inside this block is terminated until the line that contains the <strong>begin</strong> keyword.</li>\n\t<li>No statement inside this block is executed.</li>\n</ol>","a":[{"id":1213107,"option":"1","correct":false},{"id":1213108,"option":"2","correct":true},{"id":1213109,"option":"3","correct":false},{"id":1213110,"option":"4","correct":false}]},{"q":"<p>In RTL, which of these options is the equivalent of the following Verilog code:</p>\n\n<pre class=\"prettyprint\"><code>if (s == 1)\n  f = x;\nelse\n  f = y;</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1</strong></p>\n\n<pre class=\"prettyprint\"><code>if s is logic 1\n  f gets y\notherwise\n  f gets x</code></pre>\n\n<p><strong>2</strong></p>\n\n<pre class=\"prettyprint\"><code>if s is logic 1\n  f gets x\notherwise\n  f gets y</code></pre>\n\n<p><strong>3</strong></p>\n\n<pre class=\"prettyprint\"><code>if s is logic 0\n  f gets x\notherwise\n  f gets y</code></pre>\n\n<p><strong>4</strong></p>\n\n<pre class=\"prettyprint\"><code>if s is logic 1\n  f gets x</code></pre>\n\n<p><strong> </strong></p>","a":[{"id":1213111,"option":"1","correct":false},{"id":1213112,"option":"2","correct":true},{"id":1213113,"option":"3","correct":false},{"id":1213114,"option":"4","correct":false}]},{"q":"<p>In RTL, a basic action in RT methodology is the <strong>register transfer</strong> operation, which is represented by the following notation. Which of these statements about this scenario are correct:</p>\n\n<p><strong>Notation</strong><br>\n<span class=\"mathjax-latex\">\\(r_{dest}\\ &lt;-- \\ f(r_{src1}, r_{src2}, \\dots, r_{srcn})\\)</span></p>\n\n<p><strong>Statements</strong></p>\n\n<ol>\n\t<li><span class=\"mathjax-latex\">\\(r_{dest}\\)</span> represents the destination register.</li>\n\t<li><span class=\"mathjax-latex\">\\(r_{src1}, r_{src2}, \\dots, r_{srcn}\\)</span> are the source registers and they represent the outputs of the registers.</li>\n\t<li>The new value of <span class=\"mathjax-latex\">\\(r_{dest}\\)</span> is calculated based on <span class=\"mathjax-latex\">\\(f(r_{src1}, r_{src2}, \\dots, r_{srcn})\\)</span> and the result is stored in <span class=\"mathjax-latex\">\\(r_{dest}\\)</span> during the next rising edge of the clock.</li>\n</ol>","a":[{"id":1212753,"option":"1 and 2","correct":false},{"id":1212754,"option":"2 and 3","correct":false},{"id":1212755,"option":"1 and 3","correct":false},{"id":1212756,"option":"All of these","correct":true}]},{"q":"<p>Which of the following are important RTL-coding guidelines:</p>\n\n<ol>\n\t<li>Isolating necessary asynchronous logic into separate blocks</li>\n\t<li>Describing circuits with respect to their logic gates and the wire connections between them</li>\n\t<li>Removing redundant conditions</li>\n\t<li>Using parenthesis to guide synthesis</li>\n</ol>","a":[{"id":1213055,"option":"1, 2, and 3","correct":false},{"id":1213056,"option":"2, 3, and 4","correct":false},{"id":1213057,"option":"1, 3, and 4","correct":true},{"id":1213058,"option":"All of these","correct":false}]},{"q":"<p>In RTL coding, which of these statements represents the difference between Code 1 and Code 2?</p>\n\n<p><strong>Code 1</strong></p>\n\n<pre class=\"prettyprint\"><code>wire X_in, Y_in, Z_in;\nreg X_out, Y_out, Z_out;\nalways @( posedge clk )\nbegin\n X_out &lt;= X_in;\n Y_out &lt;= Y_out + 1;\n Z_out &lt;= Z_out + 1;\nend </code></pre>\n\n<p><strong>Code 2</strong></p>\n\n<pre class=\"prettyprint\"><code>wire X_in, Y_in, Z_in;\nreg X_out, Y_out, Z_out;\nalways @( posedge clk )\nbegin\n X_out &lt;= X_in;\n Y_out &lt;= Y_in;\n Z_out &lt;= Z_in;\nend\nassign Y_in = X_out + 1;\nassign Z_in = Y_out + 1;</code></pre>\n\n<p><strong>Statements</strong></p>\n\n<ol>\n\t<li>Code 1 and Code 2 have different behaviors—Code 1 generates the combinational logic separately.</li>\n\t<li>Code 1 and Code 2 have the same behavior but Code 2 generates the combinational logic separately.</li>\n\t<li>Code 1 and Code 2 have the same behavior but Code 1 generates the combinational logic separately.</li>\n\t<li>Code 1 and Code 2 have different behaviors—Code 2 generates the combinational logic separately.</li>\n</ol>","a":[{"id":1213115,"option":"1","correct":false},{"id":1213116,"option":"2","correct":true},{"id":1213117,"option":"3","correct":false},{"id":1213118,"option":"4","correct":false}]},{"q":"<p>In digital design, which of the following statements about the <strong>Schottky</strong> transistor is correct:</p>\n\n<ol>\n\t<li>The use of the Schottky transistor in a TTL increases propagation delay without power dissipation loss.</li>\n\t<li>The use of the Schottky transistor in a TTL decreases propagation delay without power dissipation loss.</li>\n\t<li>The use of the Schottky transistor in a TTL decreases propagation delay with significant power dissipation loss.</li>\n\t<li>The use of the Schottky transistor in a TTL increases propagation delay with significant power dissipation loss.</li>\n</ol>\n\n<p> </p>","a":[{"id":1208802,"option":"1","correct":false},{"id":1208803,"option":"2","correct":true},{"id":1208804,"option":"3","correct":false},{"id":1208805,"option":"4","correct":false}]},{"q":"<p>In digital design, you are given a <strong>TTL open-collector</strong> gate with the following specifications. If you replace the passive pull-up resistor <span class=\"mathjax-latex\">\\(R_L\\)</span> with an active pull-up circuit, then which of the following statements about this scenario is correct?</p>\n\n<p><strong>Specifications</strong></p>\n\n<ol>\n\t<li>Total load capacitance <span class=\"mathjax-latex\">\\(C\\)</span> = <span class=\"mathjax-latex\">\\(15\\ pF\\)</span></li>\n\t<li>External resistor with <span class=\"mathjax-latex\">\\(R_L\\)</span> = <span class=\"mathjax-latex\">\\(4\\ k \\Omega\\)</span></li>\n\t<li>Propagation delay during turnoff time = <span class=\"mathjax-latex\">\\(35\\ ns\\)</span></li>\n</ol>\n\n<p><strong>Statements</strong></p>\n\n<ol>\n\t<li>The propagation delay increases by <span class=\"mathjax-latex\">\\(10\\ ns\\)</span>, and therefore, the total propagation delay is <span class=\"mathjax-latex\">\\(45\\ ns\\)</span>.</li>\n\t<li>The propagation delay reduces to <span class=\"mathjax-latex\">\\(10\\ ns\\)</span>.</li>\n\t<li>The propagation delay reduces by <span class=\"mathjax-latex\">\\(10\\ ns\\)</span>, and therefore, the total propagation delay is <span class=\"mathjax-latex\">\\(25\\ ns\\)</span>.</li>\n</ol>","a":[{"id":1210397,"option":"1","correct":false},{"id":1210398,"option":"2","correct":true},{"id":1210399,"option":"3","correct":false},{"id":1210400,"option":"None of these","correct":false}]},{"q":"<p>In digital design, you are given the following circuit diagram. Which of the following statements about this diagram are correct?</p>\n\n<p><strong>Circuit diagram</strong></p>\n\n<p><strong><img alt=\"\" height=\"418\" src=\"https://he-s3.s3.ap-southeast-1.amazonaws.com/media/uploads/897732a1-32c6-4cfe-a452-53d6a5e72e9a.png\" width=\"494\"></strong></p>\n\n<p><strong>Statements</strong></p>\n\n<ol>\n\t<li>The circuit represents a TTL with a totem-pole output.</li>\n\t<li>The circuit represents a Schottky TTL gate with a totem-pole output.</li>\n\t<li>The circuit configuration is called a totem-pole output because transistor Q4 is placed above Q3.</li>\n\t<li>This configuration reduces both the load capacity and switching speed.</li>\n</ol>","a":[{"id":1210450,"option":"1 and 2","correct":false},{"id":1210451,"option":"2 and 3","correct":false},{"id":1210452,"option":"2 and 4","correct":false},{"id":1210453,"option":"1 and 3","correct":true}]}]
[{"q":"<p>In Object-Oriented Programming, determine the output of the following pseudocode:</p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>Public Class Main:\n    Public Function Main:\n        Invoke Obj.Method1(0) // Object for Class Q\n    END\n    \nClass P:\n    PRIVATE INTEGER FUNCTION Method1(INTEGER Var):\n        RETURN POST_INCR(Var)\n    END\n    PUBLIC INTEGER FUNCTION Method2(INTEGER Var):\n        Print(Var)\n        RETURN POST_INCR(Var)\n    END\n    \nClass Q Inherits Class P and defines:\n    INTEGER FUNCTION Method1(INTEGER Var):\n        RETURN FUNCTION Method2(PRE_INCR(Var))\n    END</code></pre>\n\n<p><em>Notes</em></p>\n\n<ol>\n\t<li>The method POST_INCR(VARIABLE x) computes the post-increment value of the variable x.</li>\n\t<li>The method PRE_INCR(VARIABLE x) computes the pre-increment value of the variable x.</li>\n</ol>\n\n<p><strong>Output</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>0\n0</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>1\n1</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>-1\n-1</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>1\n-1</code></pre>","a":[{"id":1627170,"option":"1","correct":false},{"id":1627171,"option":"2","correct":true},{"id":1627172,"option":"3","correct":false},{"id":1627173,"option":"4","correct":false}]},{"q":"<p>What is&nbsp;the output of the following C# code?</p>\n\n<p><strong>Code&nbsp;</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\nclass hack1 \n{\n\tpublic virtual void hack_method()\n\t{\n\t\tConsole.WriteLine(\"hackerearth\");\n\t}\n}\n\n\nclass hack2 : hack1\n{\n\tpublic new void hack_method()\n\t{\n\t\tConsole.WriteLine(\"hello world\");\n\t}\n}\n\nclass Hackerearth \n{\n\tpublic static void Main(string [] args)\n\t{\n\t\thack1 h=new hack1();\n\t\th.hack_method();\n\t\th = new hack2();\n\t\th.hack_method();\n\t}\n}\n</code></pre>\n\n<p>&nbsp;</p>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hackerearth\nhackerearth</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hackerearth\nhello world</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hello world\nhello world</code></pre>\n\t</li>\n</ol>","a":[{"id":1419512,"option":"1","correct":true},{"id":1419513,"option":"2","correct":false},{"id":1419514,"option":"3","correct":false},{"id":1419515,"option":"Compilation Error","correct":false}]},{"q":"<p>What is the output of the following C++ Code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\n\nclass HackClass1 \n{\n  public:\n    void hackfunc() \n    {\n      cout &lt;&lt; \"I love C++\" ;\n    }\n};\n\n\nclass HackClass2 : public HackClass1 \n{\n  public:\n    void hackfunc() \n    {\n      cout &lt;&lt; \"Hello World!\" ;\n    }\n};\n\nclass HackClass3 : public HackClass1 \n{\n  public:\n    void hackfunc() \n    {\n      cout &lt;&lt; \"Hi HackerEarth!\" ;\n    }\n};\n\nint main() \n{\n  HackClass3 myHackObj;\n  myHackObj.hackfunc();\n  return 0;\n}</code></pre>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>I love C++</code></pre>\n\n\t<p>&nbsp;</p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hello World!</code></pre>\n\n\t<p>&nbsp;</p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hi HackerEarth!</code></pre>\n\n\t<p>&nbsp;</p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>I love C++\nHello World!\nHi HackerEarth!</code></pre>\n\t</li>\n</ol>","a":[{"id":1758561,"option":"1","correct":false},{"id":1758562,"option":"2","correct":false},{"id":1758563,"option":"3","correct":true},{"id":1758564,"option":"4","correct":false}]},{"q":"<p>Consider the code snippet given alongside where two classes \"D1\" and \"D2\" are derived from a common class \"Base.\" Which of these options representing the association that is achieved through this design is true?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>class Base{\n}\nclass D1 extends Base{\n}\nclass D2 extends Base{\n}</code></pre>\n\n<p> </p>","a":[{"id":1656005,"option":"Generalization","correct":false},{"id":1656006,"option":"Aggregation","correct":false},{"id":1656007,"option":"Specialization","correct":false},{"id":1656008,"option":"Both 1 and 3","correct":true}]},{"q":"<p>Consider you are working on <strong>Swift</strong> and implemented the following code.</p>\n\n<p> </p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>class Vehicle {\n    var Speed = 0.0\n    var details: String {\n        return \"traveling at \\(Speed) miles per hour\"\n    }\n}\n\n\nclass Car: Vehicle {\n    var gear = 1\n    override var details: String {\n        return super.details + \" in gear \\(gear)\"\n    }\n}\n\n\nlet car = Car()\ncar.Speed = 25.0\ncar.gear = 3\nprint(\"Car: \\(car.details)\")\n</code></pre>\n\n<p> </p>\n\n<p>What is the output of the above code?</p>","a":[{"id":1565109,"option":"travelling at 25.0 miles per hour in gear 3","correct":false},{"id":1565110,"option":"travelling at 25 miles per hour in gear 3","correct":false},{"id":1565111,"option":"Car: travelling at 25 miles per hour in gear 3","correct":false},{"id":1565112,"option":"Car: travelling at 25.0 miles per hour in gear 3","correct":true}]},{"q":"<p>What will be the output of the following C# code?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nclass Hackerearth \n{\n\tpublic static void Main(string[] args)\n\t{\n\n\t\thack1 h1 = new hack2();\n\t\t\n\t\thack2 h2=(hack2)h1;\n\n\t\th2.hack_method();\n\t}\n}\n\npublic class hack1 \n{\n\tpublic void hack_method()\n\t{\n\t\tConsole.WriteLine(\"hello\");\n\t}\n}\n\npublic class hack2 : hack1 \n{\n\tpublic new void hack_method()\n\t{\n\t\t\n\t\tbase.hack_method();\n\t\tConsole.WriteLine(\"Hackerearth\");\n\t}\n}\n</code></pre>\n\n<p><br>\n<strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hello\nHackerearth</code></pre>\n\t<br>\n\t </li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hackerearth\nhello</code></pre>\n\t<br>\n\t </li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hello</code></pre>\n\t<br>\n\t </li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hello\nhello\nHackerearth</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1419142,"option":"3","correct":false},{"id":1419143,"option":"4","correct":false},{"id":1419144,"option":"1","correct":true},{"id":1419145,"option":"2","correct":false}]},{"q":"<p>If you have executed the C# code given below, then which of the following statements is correct?</p>\n\n<p><br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nclass Oven \n{ \n    public void DescribeOven() \n    { \n        Console.WriteLine(\"Used to bake cake and confectioneries\"); \n        ShowDetails(); \n    } \n    \n    public virtual void ShowDetails() \n    { \n        Console.WriteLine(\"Standard settings and temperature\"); \n        \n    } \n} \n \nclass MicrowaveOven : Oven \n{ \n    public new void ShowDetails() \n    { \n        Console.WriteLine(\"Used to reheat food\"); \n    } \n} \n \nclass OtgOven : Oven \n{ \n    public override void ShowDetails() \n    { \n        Console.WriteLine(\"Used to bake, toast and grill food\"); \n    } \n}\nclass Hack\n{\n    public static void Main()\n    {\n        OtgOven h=new OtgOven();\n        h.ShowDetails();\n    }\n}</code></pre>\n\n<p><br>\n<br>\n<strong>Statements:</strong></p>\n\n<ol>\n\t<li>The code prints the following-\n\t<pre class=\"prettyprint\"><code>Used to bake, toast and grill food</code></pre>\n\t</li>\n\t<li>The code gives a Compilation error<br>\n\t </li>\n\t<li>The code gives Runtime error</li>\n</ol>","a":[{"id":1419557,"option":"1","correct":true},{"id":1419558,"option":"2","correct":false},{"id":1419559,"option":"3","correct":false},{"id":1419560,"option":"None of these","correct":false}]},{"q":"<p>Which of the options is correct with respect to the following statements about the C# code snippet given below?<br>\n<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>class Oven \n{ \n    public void DescribeOven() \n    { \n        System.Console.WriteLine(\"Used to bake cake and confectionerys\"); \n        ShowDetails(); \n    } \n    \n    public virtual void ShowDetails() \n    { \n        System.Console.WriteLine(\"Standard settings and temperature\"); \n        \n    } \n} \nclass MicrowaveOven : Oven \n{ \n    public new void ShowDetails() \n    { \n        System.Console.WriteLine(\"Used to reheat food\"); \n    } \n} \n \nclass OtgOven : Oven \n{ \n    public override void ShowDetails() \n    { \n        System.Console.WriteLine(\"Used to bake, toast and grill food\"); \n    } \n}\n</code></pre>\n\n<p><br>\n<strong>Statements</strong></p>\n\n<ol>\n\t<li>\n\t<p>​ DescribeOven does not access the version of ShowDetails that is defined in the MicrowaveOven class. ​<br>\n\t </p>\n\t</li>\n\t<li>\n\t<p>​ A MicrowaveOven object displays the same description as a Oven object. ​</p>\n\t</li>\n</ol>","a":[{"id":1419527,"option":"S1 and S2 are true. S2 is a consequence of S1.","correct":false},{"id":1419528,"option":"S1 and S2 are true. S1 is a consequence of S2.","correct":true},{"id":1419529,"option":"S1 is true and S2 is false. S1 and S2 are not related.","correct":false},{"id":1419530,"option":"S1 is false and S2 is true. S1 and S2 are not related.","correct":false}]},{"q":"<p>Which lines in the C# code snippet given below produces an error?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>public abstract class Parent   // line 1\n\n{ \n    public abstract void A();   // line 2\n    public void D()    //line 3\n    { \n        \n    }\n    protected void E()   // line 4\n    { \n        \n    }\n    private void F()   // line 5\n    { \n        \n    }\n    \n}\npublic class Child : Parent   // line 6\n \n { \n     public override void A()   // line 7\n     { \n         \n     }\n     public void B()   // line 8\n     {\n         D();   // line 9\n         E();   // line 10\n         F();   // line 11\n         \n     } \n     \n }\n \npublic class SubChild  // line 12\n {\n     public static void C()   // line 13\n     {\n         Parent obj = new Parent ();   // line 14\n         Child obj1= new Child ();   // line 15\n         obj1.A();   // line 16\n         obj1.B();   // line 17\n         obj1.D();   // line 18\n         \n     } \n     \n }</code></pre>\n\n<p> </p>","a":[{"id":1419127,"option":"Line 14, Line 9","correct":false},{"id":1419128,"option":"Line 11, Line 15","correct":false},{"id":1419129,"option":"Line 11, Line 14","correct":true},{"id":1419130,"option":"Line 15, Line 10","correct":false}]},{"q":"<p>Which of the C# concepts is being implemented in the code snippet given below?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nnamespace Project\n{\n    public class ParentClass\n    { \n        public virtual void GetFunc()\n        {\n            Console.WriteLine(\"Hello World\"); \n            \n        } \n        \n    }\n    public class ChildClass: ParentClass\n    { \n        public override void GetFunc()\n        { \n            Console.WriteLine(\"Welcome to India\"); \n            \n        } \n        \n    }\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            ChildClass child = new ChildClass();\n            child.GetFunc();\n            ParentClass parent = new ParentClass();\n            parent.GetFunc();\n            \n        } \n        \n    } \n    \n}</code></pre>\n\n<p> </p>","a":[{"id":1419222,"option":"Run-Time Polymorphism","correct":true},{"id":1419223,"option":"Data Binding","correct":false},{"id":1419224,"option":"Compile-Time Polymorphism","correct":false},{"id":1419225,"option":"Abstraction","correct":false}]},{"q":"<p>What is the output of the following C# code snippet?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\nclass Hackster\n{ \n    \n}\nclass hack1 : Hackster\n{ \n    \n}\nclass hack2\n{\n    public void hack_print(hack1 h1)\n    {\n        Console.WriteLine(\"Hi from Hackerearth\");\n        \n    }\n    \n}\nclass hack3 : hack2\n{\n    public void hack_print(Hackster h2)\n    {\n        Console.WriteLine(\"Hello from Hackerearth\");\n        \n    }\n    static void Main(string[] args)\n    {\n        hack3 h_obj = new hack3();\n        h_obj.hack_print(new hack1());\n            \n        hack2 hack_obj = new hack3();\n        hack_obj.hack_print(new hack1());\n    } \n    \n}</code></pre>\n\n<p> </p>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hello from Hackerearth\nHello from Hackerearth</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hi from Hackerearth\nHello from Hackerearth</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hello from Hackerearth\nHi from Hackerearth</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hi from Hackerearth\nHi from Hackerearth</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1419212,"option":"1","correct":false},{"id":1419213,"option":"2","correct":false},{"id":1419214,"option":"3","correct":true},{"id":1419215,"option":"4","correct":false}]},{"q":"<p>What will be the output of the following Java code?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>package Hackerearth;\n \npublic class hackerearth\n{\n    public static void main(String[] args)\n    {\n        hack2 h = new hack2();\n        System.out.println(h.hack_method1(0));\n    }\n}\npublic class hack1\n{\n    private int hack_method1(int hack)\n    {\n        return hack++;\n    }\n     \n    public int hack_method2(int hack)\n    {\n      \n        System.out.println(hack);\n        return hack_method1(hack++);\n    }\n}\n \n\nclass hack2 extends hack1\n{\n    int hack_method1(int hack)\n    {\n        return hack_method2(++hack);\n    }\n}</code></pre>\n\n<p> </p>\n\n<p><strong>Output:</strong></p>\n\n<ol>\n\t<li> \n\t<pre class=\"prettyprint\"><code>0\n1</code></pre>\n\t<br>\n\t </li>\n\t<li> \n\t<pre class=\"prettyprint\"><code>1\n1</code></pre>\n\t<br>\n\t </li>\n\t<li> \n\t<pre class=\"prettyprint\"><code>1\n2</code></pre>\n\t<br>\n\t </li>\n\t<li> \n\t<pre class=\"prettyprint\"><code>2\n3</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1555119,"option":"1","correct":false},{"id":1555120,"option":"2","correct":true},{"id":1555121,"option":"3","correct":false},{"id":1555122,"option":"4","correct":false}]},{"q":"<p>What will be the output of the following Java code?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>package hackerearth;\n \npublic class hack1\n{\n    public static void main(String[] args)\n    {\n        hack4 h = new hack4();\n        h.hack_method();\n    }\n}\nclass hack2\n{\n    protected static String hack = \"hello hackerearth\";\n}\n \nclass hack3 extends hack2\n{\n     \n}\n \nclass hack4 extends hack3\n{   \n    static void hack_method()\n    {    \n        hack2.hack = \"hello\";\n        System.out.println(hack);\n    }\n}</code></pre>\n\n<p> </p>\n\n<p><strong>Output:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hello hackerearth\n</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hello</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>null\n</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1555115,"option":"1","correct":false},{"id":1555116,"option":"2","correct":true},{"id":1555117,"option":"3","correct":false},{"id":1555118,"option":"The code gives a compilation error","correct":false}]},{"q":"<p>In C++, which of the following statements defines an <strong>orthogonal base class</strong>?</p>","a":[{"id":133158,"option":"If two base classes have no overlapping methods or data, then they are said to be independent of or orthogonal to each other.","correct":true},{"id":133159,"option":"If two base classes have one or more overlapping methods or data, then they are said to be dependent on each other.","correct":false},{"id":133160,"option":"If two classes operate in the same dimension, then they are said to be orthogonal to each other. ","correct":false},{"id":133161,"option":"None of these","correct":false}]},{"q":"<p>In C++, which of the following types of inheritances is used to create a <strong>derived</strong> class inheriting properties from more than one <strong>base</strong> class?</p>","a":[{"id":157460,"option":"Multilevel","correct":false},{"id":157461,"option":"Multiple","correct":true},{"id":157462,"option":"Hybrid","correct":false},{"id":157463,"option":"Hierarchical","correct":false}]},{"q":"<p>In C++, which of the following is the process by which objects of a class acquire the attributes of another class?</p>","a":[{"id":157695,"option":"Inheritance","correct":true},{"id":157696,"option":"Type casting","correct":false},{"id":157697,"option":"Data connectivity","correct":false},{"id":157698,"option":"Binding","correct":false}]},{"q":"<p>Consider the C# code snippet given below. Which of the following methods produces the output as follows?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>class Oven \n{ \n    public void DescribeOven() \n    { \n        System.Console.WriteLine(\"Used to bake cake and confectioneries\"); \n        ShowDetails(); \n        \n    } \n    public virtual void ShowDetails() \n    { \n        System.Console.WriteLine(\"Standard settings and temperature\"); \n        \n    }\n    \n} \n \nclass MicrowaveOven : Oven \n{ \n    public new void ShowDetails() \n    { \n        System.Console.WriteLine(\"Used to reheat food\"); \n        \n    } \n} \n \nclass OtgOven : Oven \n{ \n    public override void ShowDetails() \n    { \n        System.Console.WriteLine(\"Used to bake, toast and grill food\"); \n        \n    } \n}</code></pre>\n\n<p> </p>\n\n<p><strong>Output- </strong></p>\n\n<pre class=\"prettyprint\"><code>Used to bake cake and confectioneries\nStandard settings and temperature\n----------\nUsed to bake cake and confectioneries\nStandard settings and temperature\n----------\nUsed to bake cake and confectioneries\nUsed to bake, toast and grill food\n----------\n</code></pre>\n\n<p><br>\n </p>\n\n<p><strong>Methods:</strong></p>\n\n<p>1. </p>\n\n<pre class=\"prettyprint\"><code>public static void TestOvens() \n{ \nOven oven1 = new Oven(); \noven1.DescribeOven(); \nSystem.Console.WriteLine(\"----------\"); \n\nMicrowaveOven oven2 = new MicrowaveOven(); \noven2.DescribeOven(); \nSystem.Console.WriteLine(\"----------\"); \n\nOtgOven otg3 = new OtgOven(); \notg3.DescribeOven(); \nSystem.Console.WriteLine(\"----------\"); \n}</code></pre>\n\n<p> </p>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>public static void TestOvens() \n{ \n\nvar ovens = new List&lt;Oven&gt; \n{ \n    new Oven(), \n    new MicrowaveOven(), \n    new OtgOven() \n    \n}; \n\nforeach(var oven in ovens) \n{ \n    oven.DescribeOven(); \n    System.Console.WriteLine(\"----------\"); \n\n} \n}</code></pre>\n\n<p> </p>","a":[{"id":1419537,"option":"1","correct":false},{"id":1419538,"option":"2","correct":false},{"id":1419539,"option":" 1 and 2","correct":true},{"id":1419540,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following C# code?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\nclass hack1\n\n{\n\tvirtual public void h()\n\t{\n\t\tConsole.WriteLine(\"hi\");\n\t}\n}\n\nclass hack2 : hack1\n{\n\t\n\t new public void h()\n\t{\n\t\tConsole.WriteLine(\"hello\");\n\t}\n}\n\nclass Hack {\n\t\n\tpublic static void Main()\n\t{\n\t\ttry\n\t\t{\n\t\t    hack2 h1 = new hack2();\n\t\t    \n\t\t    hack1 h4=h1;\n\t\t    \n\t\t    hack2 h3=(hack2)h4;\n\t\t    \n\t\t    h3.h();\n\t\t    \n\t\t}\n\t\tcatch(Exception e)\n\t\t{\n\t\t    Console.WriteLine(\"happy hacking\");\n\t\t}\n\t\t\n\t\tfinally \n\t\t{\n\t\t    hack1 h2 = new hack2();\n\t\t    h2.h();\n\t\t    \n\t\t}\n\t\t\n\t}\n}</code></pre>\n\n<p><br>\n </p>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hello\nhi\n</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>happy hacking\nhi\n</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hello\nhappy hacking\nhi\n</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hello\nhappy hacking\n</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1419437,"option":"2","correct":false},{"id":1419438,"option":"4","correct":false},{"id":1419439,"option":"3","correct":false},{"id":1419440,"option":"1","correct":true}]},{"q":"<p>Which of the following C# code snippets can you use to invoke a default implementation with respect to the C# code given below?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>public interface HackI\n{\n    void hack1() =&gt; Console.WriteLine(\"Default Paint method\");\n}\npublic class Hack : HackI\n{\n    // hack1() is inherited from HackI.\n}</code></pre>\n\n<p><br>\n<br>\n<br>\n<strong>Code Snippets:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>var h = new Hack();\nh.hack1();</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>var h = new Hack();\nvar h2 = h as HackI;\nh2.hack1();</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1419622,"option":"1","correct":false},{"id":1419623,"option":"2","correct":true},{"id":1419624,"option":"1 and 2","correct":false},{"id":1419625,"option":"None of these","correct":false}]},{"q":"<p>In C++, which of the following statements about the <strong>hybrid inheritance </strong>is true?</p>","a":[{"id":157723,"option":"It is multiple inheritance.","correct":false},{"id":157724,"option":"It is multilevel inheritance.","correct":false},{"id":157725,"option":"It is multipath inheritance.","correct":false},{"id":157726,"option":"It is a combination of one or more inheritances within a single program.","correct":true}]},{"q":"<p>In C++, which of the following is a valid type of <strong>inheritance</strong>?</p>","a":[{"id":132549,"option":"Single ","correct":false},{"id":132550,"option":"Multiple ","correct":false},{"id":132551,"option":"Multilevel ","correct":false},{"id":132552,"option":"All of these","correct":true}]},{"q":"<p>What is the output of the following C# code?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\nclass hack1\n\n{\n\tvirtual public void h()\n\t{\n\t\tConsole.WriteLine(\"hi\");\n\t}\n}\n\nclass hack2 : hack1\n{\n\t\n\t new public void h()\n\t{\n\t\tConsole.WriteLine(\"hello\");\n\t}\n}\n\nclass Hack {\n\t\n\tpublic static void Main()\n\t{\n\t\t\n\t\thack2 h1 = new hack2();\n\t\t\n\t\th1.h();\n\t\t\n\t\thack1 h2 = new hack2();\n\t\t\n\t\th2.h();\n\t\t\n\t}\n}</code></pre>\n\n<p><br>\n<br>\n<strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hello\nhi\n</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hello\nhello\n</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hi\nhi</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1419347,"option":"2","correct":false},{"id":1419348,"option":"3","correct":false},{"id":1419349,"option":"1","correct":true},{"id":1419350,"option":"The code does not produce any output","correct":false}]},{"q":"<p>What is the output of the following C# code snippet?<br>\n<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\nclass hack1\n{\n    public hack1()\n    {\n        Console.WriteLine(\"Hi from Hackerearth\");\n        \n    }\n    public void hack_print()\n    {\n        Console.WriteLine(\"Hi\");\n        \n    }\n    \n}\nclass hack2 : hack1\n{\n    public hack2()\n    {\n        Console.WriteLine(\"Hello from Hackerearth\");\n        \n    }\n    public new void hack_print()\n    {\n        Console.WriteLine(\"Hello\");\n        \n    }\n    \n}\nclass Hackster\n{\n    public static void Main(string[] args)\n    {\n        hack2 h2 = new hack2();\n        hack1 h1 = h2;\n        h1.hack_print();\n    }\n    \n}\n</code></pre>\n\n<p><br>\n<strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hi from Hackerearth\nHi\nHello from Hackerearth\n</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hello from Hackerearth\nHi from Hackerearth\nHi</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hi from Hackerearth\nHello from Hackerearth\nHi</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hello from Hackerearth\nHello\nHi from Hackerearth</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1419332,"option":"1","correct":false},{"id":1419333,"option":"2","correct":false},{"id":1419334,"option":"3","correct":true},{"id":1419335,"option":"4","correct":false}]},{"q":"<p>What will be the output of the C# code snippet given below.</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\npublic class TopClass \n{ \n    public TopClass() \n    { \n        Console.WriteLine(\"First Constructor.\"); \n        \n    } \n    public void print() \n    { \n        Console.WriteLine(\"Top Class.\"); \n        \n    } \n} \npublic class DownClass: TopClass \n{ \n    public DownClass() \n    { \n        Console.WriteLine(\"Second Constructor.\"); \n        \n    } \n    public static void Main() \n    { \n        DownClass obj= new DownClass(); \n        obj.print(); \n        \n    } \n}</code></pre>\n\n<p>&nbsp;</p>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>First Constructor.\nTop Class.\nSecond Constructor.</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Top Class.\nFirst Constructor.\nSecond Constructor.</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>First Constructor.\nSecond Constructor.\nTop Class.</code></pre>\n\t</li>\n</ol>","a":[{"id":1419287,"option":"1","correct":false},{"id":1419288,"option":"2","correct":false},{"id":1419289,"option":"3","correct":true},{"id":1419290,"option":"The code gives Compile-Time Error","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass myhackclass1 {\npublic:\n\tvoid myhackfunc1() \n\t{ \n\t    cout &lt;&lt; \"Hi HackerEarth\\n\"; \n\t    \n\t}\n\tvirtual void myhackfunc2() \n\t{ \n\t    cout &lt;&lt; \"Hello World\\n\"; \n\t    \n\t}\n};\n\nclass myhackclass2 : public myhackclass1 {\npublic:\n\tvoid myhackfunc1() \n\t{ \n\t    cout &lt;&lt; \"Welcome to HackerEarth\\n\"; \n\t    \n\t}\n\tvoid myhackfunc2() \n\t{ \n\t    cout &lt;&lt; \"Welcome to World\\n\"; \n\t}\n};\n\nint main()\n{\n\tmyhackclass1* p;\n\tmyhackclass2 obj1;\n\tp = &amp;obj1;\n\tp-&gt;myhackfunc1();\n\tp-&gt;myhackfunc2();\n}\n</code></pre>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>Hi HackerEarth\nHello World</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>Welcome to HackerEarth\nWelcome to World</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>Hi HackerEarth\nWelcome to World</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>Hello World\nWelcome to HackerEarth</code></pre>\n\n<p> </p>","a":[{"id":131965,"option":"1","correct":false},{"id":131966,"option":"2","correct":false},{"id":131967,"option":"3","correct":true},{"id":131968,"option":"4","correct":false}]},{"q":"<p>Bob wants to use inheritance in Ruby on Rails to increase the reusability of his code. Which of the following types of inheritances can he use?</p>","a":[{"id":85309,"option":"Single Inheritance","correct":true},{"id":85310,"option":"Multiple Inheritance","correct":false},{"id":85311,"option":"Multi-Level Inheritance","correct":false},{"id":85312,"option":"Only 1 and 3","correct":false}]},{"q":"<p>Which of the following keywords is used to inherit one interface from another interface in Java?</p>","a":[{"id":675882,"option":"extends","correct":true},{"id":675883,"option":"implements","correct":false},{"id":675884,"option":"extend","correct":false},{"id":675885,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth\n{    \n    public void m1(double num)\n    {    \n        System.out.println(\"Inside HackerEarth Class \" + num);    \n    }\n}\n\nclass Hacker extends HackerEarth\n{\n    public void m1(int num)\n    {    \n        System.out.println(\"Inside Hacker Class \" + num);\n    }\n}\n\npublic class HackerEarthMain\n{\n    public static void main(String[] args)\n    {\n        HackerEarth obj = new Hacker();\n        obj.m1(10);    \n    }\n\n}</code></pre>\n\n<p> </p>","a":[{"id":673343,"option":"Inside HackerEarth Class 10.0","correct":true},{"id":673344,"option":"Inside Hacker Class 10","correct":false},{"id":673345,"option":"Compile-time Error","correct":false},{"id":673346,"option":"Run-time Error","correct":false}]},{"q":"<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>\n\nclass HackerEarth\n\n{\n        public void print()\n\n        {\n            System.out.println(\"Inside HackerEarth\");\n        }\n\n}\n\nclass Hacker extends HackerEarth\n\n{\n\n    public void print()\n\n    {\n        System.out.println(\"Inside Hacker\");\n    }\n\n}\n\npublic class HackerEarthMain\n\n{\n\n    public static void main(String[] args)\n\n    {\n\n        HackerEarth obj1 = new HackerEarth();\n        Hacker obj2 = new Hacker();\n    \n        ((HackerEarth)obj2).print();\n        \n        obj1 = obj2;\n\n        obj1.print();\n    \n    }\n\n}\n\n</code></pre>\n\n<p> </p>","a":[{"id":671822,"option":"Inside HackerEarth\r\nInside Hacker","correct":false},{"id":671823,"option":"Inside Hacker\r\nInside HackerEarth","correct":false},{"id":671824,"option":"Inside HackerEarth\r\nInside HackerEarth","correct":false},{"id":671825,"option":"Inside Hacker\r\nInside Hacker","correct":true}]},{"q":"<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth\n\n{\n\n       protected int var1 = 200;\n       private String var2 = \"Scala\";   \n\n}\n\nclass Hacker extends HackerEarth\n\n{\n\n    public int var1 = 500;\n    public String var2 = \"Python\";\n\n    public void display()\n\n    {\n\n        System.out.println(\"\"+var1);\n        System.out.println(\"\"+super.var2);\n\n    }\n\n}\n\npublic class HackerEarthMain\n\n{\n\n    public static void main(String[] args)\n\n    {\n\n       Hacker obj = new Hacker();\n    \n       obj.display();\n    \n    }\n\n}</code></pre>\n\n<p> </p>","a":[{"id":671858,"option":"500\r\nPython","correct":false},{"id":671859,"option":"200\r\nScala","correct":false},{"id":671860,"option":"500\r\nScala","correct":false},{"id":671861,"option":"Compilation error","correct":true}]},{"q":"<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth\n\n{\n        public String str = \"Java\";\n        public static void print()\n        {\n            System.out.println(\"Inside HackerEarth\");\n        }\n\n}\n\nclass Hacker extends HackerEarth\n\n{\n    public String str = \"Scala\";\n    public static void print()\n    {\n        System.out.println(\"Inside Hacker\");\n    }\n}\n\npublic class HackerEarthMain\n\n{\n    public static void main(String[] args)\n\n    {\n        HackerEarth obj1 = new HackerEarth();\n        Hacker obj2 = new Hacker();\n    \n        System.out.println(((HackerEarth)obj2).str);\n        ((HackerEarth)obj2).print();    \n    }\n\n}\n\n</code></pre>\n\n<p> </p>","a":[{"id":671818,"option":"Java\r\nInside Hacker","correct":false},{"id":671819,"option":"Scala\r\nInside HackerEarth","correct":false},{"id":671820,"option":"Java\r\nInside HackerEarth","correct":true},{"id":671821,"option":"Scala\r\nInside Hacker","correct":false}]},{"q":"<p>You are given the following Python code that has the <strong>Calculator</strong> class and <strong>Talker</strong> class. Each of these classes has a method called <strong>talk</strong>. You create another <strong>TalkingCalculator</strong> class. You want to inherit the mentioned classes in the new class. Which of these statements about this scenario is correct if you inherit the classes in the new class in the following ways:</p>\n\n<ol>\n</ol>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>class Calculator:\n    def talk(self, expression):\n        self.value = eval(expression)\nclass Talker:\n    def talk(self):\n        print 'Hi, my value is', self.value</code></pre>\n\n<p><strong>Ways to inherit</strong></p>\n\n<p>1. class TalkingCalculator(Talker, Calculator):<br>\n2. class TalkingCalculator(Calculator, Talker):</p>\n\n<p> </p>","a":[{"id":730488,"option":"1. It will override the talk method of the Talker.\r\n2. It will override the talk method of the Calculator.","correct":true},{"id":730489,"option":"1. It will override the talk method of the Calculator.\r\n2. It will override the talk method of the Talker.","correct":false},{"id":730490,"option":"1. It will override the talk method of the Talker.\r\n2. It will override the talk method of the Talker.","correct":false},{"id":730491,"option":"1. It will override the talk method of the Calculator.\r\n2. It will override the talk method of the Calculator.","correct":false}]},{"q":"<p>In C++, which of the following statements is true when a base class pointer points to a derived class object?</p>","a":[{"id":154172,"option":"It can access only the base class members.","correct":true},{"id":154173,"option":"It can access only the derived virtual class members.","correct":false},{"id":154174,"option":"Both of these","correct":false},{"id":154175,"option":"None of these","correct":false}]},{"q":"<p>What will be the output of the following Java code?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>class Hackerearth\n{  \n    public static void main(String []args)\n    {  \n        hack2 h= new hack2();  \n        h.hack_method();  \n        h.hack_method2();  \n        \n    }  \n}  \nabstract class hack1\n{  \n    hack1()\n    {\n        System.out.println(\"hello\");\n        \n    }  \n   abstract void hack_method();  \n   \n   void hack_method2()\n   {\n       System.out.println(\"hi\");\n       \n   }  \n}   \nclass hack2 extends hack1\n{  \n    void hack_method()\n    {\n        System.out.println(\"hackerearth\");\n        \n    }  \n}  </code></pre>\n\n<p><br>\n<br>\n<strong>Output:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hello\nhackerearth\nhi\n</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hello\nhi\nhackerearth\n</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hackerearth\nhello\nhi\n</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":663036,"option":"3","correct":false},{"id":663037,"option":"1","correct":true},{"id":663038,"option":"2","correct":false},{"id":663039,"option":"The code gives a runtime error","correct":false}]},{"q":"<p>In C++, which of the following is called <strong>multiple inheritance</strong>?</p>","a":[{"id":154176,"option":"Deriving a class from a base class which derives from another class","correct":false},{"id":154177,"option":"Deriving a class from a base class","correct":false},{"id":154178,"option":"Deriving a class from more than one base classes","correct":true},{"id":154179,"option":"None of these","correct":false}]},{"q":"<p>What will be the output of the following Java code?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>class hackerearth\n{\n    public static void main(String[] args)\n    {\n        hack1 h1 =  new hack2();\n        hack2 h2 =  new hack2();\n        hack1 h;\n        h = h1;\n        h.hack_method();\n        \n    }\n\n}\n\nclass hack1\n{\n    hack1() \n    {\n        System.out.println(\"hello\");\n    \n    }\n    void hack_method()\n    {\n        System.out.println(\"hackerearth\");\n\n    }\n\n} \n\nclass hack2 extends hack1\n{ \n    hack2()\n    {\n        System.out.println(\"hi\");\n    }\n\n    void hack_method()\n    {\n        System.out.println(\"hello world\");\n\n    }\n} </code></pre>\n\n<p><br>\n<br>\n<strong>Output:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hello\nhi\nhello\nhi\nhackerearth</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hello\nhi\nhello world</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hello\nhi\nhello\nhi\nhello world</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hello\nhi\nhackerearth</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":669729,"option":"4","correct":false},{"id":669730,"option":"3","correct":true},{"id":669731,"option":"1","correct":false},{"id":669732,"option":"2","correct":false}]},{"q":"<p>You are given the following Python 3 code. Which of these statements about this code is correct:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>class Base():\n        a=1\nclass Der(Base):\n        pass\nclass Dert(Der):\n        pass\nprint(Base.a,Der.a,Dert.a)</code></pre>\n\n<p><strong>Statements</strong></p>\n\n<ol>\n\t<li>The output of the code is 1 1 1.</li>\n\t<li>Both the Der and Dert classes have inherited the properties of the Base class.</li>\n</ol>","a":[{"id":730528,"option":"1","correct":false},{"id":730529,"option":"2","correct":false},{"id":730530,"option":"Both of these","correct":true},{"id":730531,"option":"None of these","correct":false}]},{"q":"<p>How many methods does the<strong> HackerCoder </strong>interface have in the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>public interface Hacker\n{\n    void NotCoding();\n    void setRate(double rate);\n    double getRate();\n}\n\npublic interface Coder \n{\n    void Coding();\n    void setRate(double rate);\n    double getRate();\n}\n\npublic interface HackerCoder extends Hacker, Coder \n{\n    ......\n    ......\n}\n</code></pre>\n\n<p> </p>","a":[{"id":676578,"option":"3","correct":false},{"id":676579,"option":"4","correct":false},{"id":676580,"option":"5","correct":false},{"id":676581,"option":"6","correct":true}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include&lt;iostream&gt;\nusing namespace std;\n\n\nclass Base {\n    public:\n    Base(){\n        cout &lt;&lt; \"Base called \"&lt;&lt; endl;\n    }\n};\n\nclass Base1{\n    public:\n    Base1(){\n        cout &lt;&lt; \"Base1 called\"&lt;&lt; endl;\n    }\n};\n\nclass Derived: public Base, public Base1{\n    public:\n    Derived(){\n        cout &lt;&lt; \"Derived called\" &lt;&lt; endl; \n    }\n};\n\nint main(){\n    Derived d ;\n    return 0;\n}\n</code></pre>\n\n<p><strong>Output </strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Base called\nBase1 called</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Derived called\nBase1 called \nBase called</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Base called\nBase1 called\nDerived called</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Base called\nDerived Called</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":132149,"option":"1","correct":false},{"id":132150,"option":"2","correct":false},{"id":132151,"option":"3","correct":true},{"id":132152,"option":"4","correct":false}]},{"q":"<p>Which of the following statements must be valid for <strong>method overriding </strong>in Java:</p>\n\n<p>1. The method can be either a static method or an instance method.</p>\n\n<p>2. The overriding method must have the same name as the overridden method.</p>\n\n<p>3. The order of the parameters in the overriding method and the overridden method can be different.</p>\n\n<p>4. If the overridden method has package-level access, the overriding method may have public, protected, or package-level<br>\naccess</p>","a":[{"id":671826,"option":"1, 2, and 3","correct":false},{"id":671827,"option":"1, 3, and 4","correct":false},{"id":671828,"option":"2, and 4","correct":true},{"id":671829,"option":"2, 3, and 4","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include&lt;iostream&gt; \nusing namespace std; \n\nclass Base \n{ \n    int x; \n    public: \n        virtual void fun() = 0; \n        int getX() \n        { \n            return x; \n        } \n}; \n\nclass Derived: public Base \n{ \n\tint y; \n    public: \n\tvoid fun() \n    { \n        cout &lt;&lt; \"Hello HackerEarth!\"; \n    } \n}; \nint main(void) \n{ \n\tDerived d; \n\td.fun(); \n\treturn 0; \n} \n</code></pre>\n\n<p> </p>","a":[{"id":133314,"option":"Hello HackerEarth!","correct":true},{"id":133315,"option":"Prints nothing as an output","correct":false},{"id":133316,"option":"Compilation error","correct":false},{"id":133317,"option":"Runtime error","correct":false}]},{"q":"<p>In C++, if class <strong>C</strong> is derived from class <strong>B </strong>that is derived from class <strong>A </strong>through public inheritance, then which of the following data can be accessed by class <strong>C</strong>?</p>","a":[{"id":134119,"option":"Protected and Private data of B","correct":false},{"id":134120,"option":"Protected and Public data of A","correct":false},{"id":134121,"option":"Protected and Private data of A and B","correct":false},{"id":134122,"option":"Protected data of A and B","correct":true}]},{"q":"<p>In Java, which of the following is inherited by a subinterface from its superinterface?</p>\n\n<ol>\n\t<li>Abstract methods</li>\n\t<li>Default methods</li>\n\t<li>Constant fields</li>\n\t<li>Static methods</li>\n</ol>","a":[{"id":676574,"option":"1, 2, and 3","correct":true},{"id":676575,"option":"1, 2, and 4","correct":false},{"id":676576,"option":"1, 3, and 4","correct":false},{"id":676577,"option":"All of these","correct":false}]}]
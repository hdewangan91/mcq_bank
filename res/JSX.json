[{"q":"<p>John wants to render the following code of VueJS using JSX. But he has found that JSX is not meant to be interpreted directly and needs to be first converted into standard Javascript. If John has to install a plugin, then which code is correct for the given scenario?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>import HackerComponent from './HackerComponent.vue'\n\nconst h = this.$createElement\n\nnew Vue({\n  el: '#hackerid',\n  render: function (h) {\n    return (\n      &lt;HackerComponent level={1}&gt;\n        &lt;span&gt;Hello&lt;/span&gt; Hacker!\n      &lt;/HackerComponent&gt;\n    )\n  }\n})</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>yarn add @babel/plugin-transform-vue-jsx --dev</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>yarn add @babel/plugin-syntax-jsx --dev\n</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>npm install babel-plugin-syntax-jsx babel-plugin-transform-vue-jsx --save-dev</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>npm install @vue/babel-plugin-jsx -D</code></pre>\n\n<p> </p>","a":[{"id":1657394,"option":"1","correct":false},{"id":1657395,"option":"2","correct":false},{"id":1657396,"option":"3","correct":true},{"id":1657397,"option":"4","correct":false}]},{"q":"<p>You have created a React App. Now, you want to loop inside your JSX elements. There are 3 code snippets given alongside for iterating through JSX. Choose the correct option regarding this problem.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>I.\n&lt;tbody&gt;\n {items.map(item =&gt; &lt;TableComponent key={item.id} name={item.name} /&gt;)}\n&lt;/tbody&gt;\n\nII. \n&lt;tbody&gt;\n for (let i = 0; i &lt; items.length; i++) {\n &lt;TableComponent key={items[i].id} name={items[i].name} /&gt;\n }\n&lt;/tbody&gt; \n\nIII. \n&lt;tbody&gt;\n while (i &lt; items.length) {\n &lt;TableComponent key={items[i].id} name={items[i].name} /&gt; i++;\n }\n&lt;/tbody&gt;</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>Only I</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>Only II</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>Both I and II</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>All I, II and III</code></pre>\n\n<p> </p>","a":[{"id":1653197,"option":"1","correct":true},{"id":1653198,"option":"2","correct":false},{"id":1653199,"option":"3","correct":false},{"id":1653200,"option":"4","correct":false}]},{"q":"<p>You have written the following code. On compiling the same, it gives an error. Pick out the correct code from the following options, that debugs the code given alongside.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>var Check=(props)=&gt;\n{\n return(\n &lt;div&gt;\n Check 1\n &lt;/div&gt;\n &lt;div&gt;\n Check 2\n &lt;/div&gt;\n );\n}\nReactDOM.render(&lt;Check /&gt;,mountNode</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>var Check =(props)=&gt;\n{\n return(\n &lt;div&gt;\n Check  1\n Check  2\n &lt;/div&gt;\n );\n}\nReactDOM.render(&lt;Check /&gt;,mountNode</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>var Check =(props)=&gt;\n{\n return(\n &lt;div&gt;\n&lt;p&gt; Check  1&lt;/p&gt;\n&lt;p&gt; Check  2&lt;/p&gt;\n &lt;/div&gt;\n );\n}\nReactDOM.render(&lt;Check /&gt;,mountNode)</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>var Helloword=(props)=&gt;\n{\n return(\n &lt;div&gt;\n hello world 1\n &lt;/div&gt;\n &lt;div&gt;\n Hello world 2\n &lt;/div&gt;\n );\n};\nReactDOM.render(&lt;Helloworld/&gt;,mountNode)</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>var Check =(props)=&gt;\n{\n return(\n &lt;div&gt;&lt;p&gt;\n Check  1\n Check  2\n &lt;/p&gt;&lt;/div&gt;\n );\n}\nReactDOM.render(&lt;Check /&gt;,mountNode)</code></pre>\n\n<p> </p>","a":[{"id":1653193,"option":"1","correct":false},{"id":1653194,"option":"2","correct":true},{"id":1653195,"option":"3","correct":false},{"id":1653196,"option":"4","correct":false}]},{"q":"<p>You have created a React App. Now, you want to ensure that there are no injection attacks (SQL injection).What will you do to ensure the same? How can you get rid of XSS (cross-site-scripting) attacks?</p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>var inp= response.maliciousInput;\nconst dis = &lt;h1&gt;{inp}&lt;/h1&gt;;</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>const inp = response.maliciousInput;\nconst dis = &lt;h1&gt;{inp}&lt;/h1&gt;;</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>const inp = connect.maliciousInput;\nconst dis = &lt;h1&gt;{inp}&lt;/h1&gt;;</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>const inp= render.maliciousInput;\nconst dis = &lt;h1&gt;{inp}&lt;/h1&gt;;</code></pre>\n\n<p> </p>","a":[{"id":1653189,"option":"1","correct":false},{"id":1653190,"option":"2","correct":true},{"id":1653191,"option":"3","correct":false},{"id":1653192,"option":"4","correct":false}]},{"q":"<p>Ben has written the following markup for his template in VueJS. He wants the compiled down or explicit render function for the given markup. Then which code is correct for the given scenario?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>&lt;template&gt;\n  &lt;div :class=\"{'is-loggedin': isLoggedIn}\"&gt;\n    &lt;p&gt;Welcome to Hackerearth !!&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/template&gt;</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>render: function (createElement) {\n  return createElement('div', {\n    className: {\n      'is-loggedin': this.isLoggedIn\n     }\n  }, [\n    createElement('p', 'Welcome to Hackerearth !!', null)\n  ]);\n}</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>render: function (createElement) {\n  return createElement('div', {\n    class: this.isLoggedIn\n  }, [\n    createElement('div', 'Welcome to Hackerearth !!')\n  ]);\n}</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>render: function (createElement) {\n  return createElement('div', {\n    className: this.isLoggedIn\n  }, [\n    createElement('div', 'Welcome to Hackerearth !!')\n  ]);\n}</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>render: function (createElement) {\n  return createElement('div', {\n    class: {\n      'is-loggedin': this.isLoggedIn\n     }\n  }, [\n    createElement('p', 'Welcome to Hackerearth !!')\n  ]);\n}</code></pre>\n\n<p> </p>","a":[{"id":1657942,"option":"1","correct":false},{"id":1657943,"option":"2","correct":false},{"id":1657944,"option":"3","correct":false},{"id":1657945,"option":"4","correct":true}]}]
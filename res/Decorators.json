[{"q":"<p>In Python 3, which of the following statements about the <strong>@property</strong> decorator are correct:</p>\n\n<ol>\n\t<li>It includes the setter and getter method to access the encapsulated data. Also, it returns the objects of the property class.</li>\n\t<li>It provides an interface to the instance attributes and returns the property of the main class.</li>\n\t<li>It only takes the get and set methods as arguments and returns the object of the main class.</li>\n\t<li>It takes the get, set, and delete arguments and returns the object of the property class.</li>\n</ol>","a":[{"id":1121989,"option":"1 and 2","correct":false},{"id":1121990,"option":"2 and 3","correct":false},{"id":1121991,"option":"3 and 4","correct":false},{"id":1121992,"option":"1 and 4","correct":true}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>import functools\n@functools.lru_cache()\ndef fibonacci(n):\n    if n &lt; 4:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\nres = fibonacci(10)\nprint(res)\n</code></pre>\n\n<p> </p>","a":[{"id":1122009,"option":"55","correct":false},{"id":1122010,"option":"89","correct":true},{"id":1122011,"option":"-55","correct":false},{"id":1122012,"option":"17","correct":false}]},{"q":"<p>Consider the following Python 3 code. Determine the value of <strong>wrapper_count.num_calls</strong> after the code is run?</p>\n\n<pre class=\"prettyprint\"><code>import functools\ndef count(f):\n    @functools.wraps(f)\n    def wrapper_count(*args, **kwargs):\n        wrapper_count.num_calls -= 1\n        return f(*args, **kwargs)\n    wrapper_count.num_calls = 0\n    return wrapper_count\n@count\ndef PythonProg():\n    print(\"Python\")\nPythonProg()\nPythonProg()\t# End of execution\n</code></pre>\n\n<p> </p>","a":[{"id":1122001,"option":"2","correct":false},{"id":1122002,"option":"-2","correct":true},{"id":1122003,"option":"1","correct":false},{"id":1122004,"option":"-1","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>def Compute(prog):\n    def ComputeInside(*args, **kwargs):\n        return prog(*args, **kwargs) + 1\n    return ComputeInside\n@Compute\ndef result(n):\n    return n - 4\nprint(result(5))\n</code></pre>\n\n<p> </p>","a":[{"id":1121985,"option":"3","correct":false},{"id":1121986,"option":"2","correct":true},{"id":1121987,"option":"1","correct":false},{"id":1121988,"option":"RuntimeError","correct":false}]},{"q":"<p>Which of the following is another way of representing the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>@my_decorator\ndef program():\n    print(\"HackerEarth\")\n</code></pre>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>my_decorator = program(HackerEarth)</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>program = my_decorator(HackerEarth)</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>def my_decorator(program):\n     print(“HackerEarth”)</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1121957,"option":"1","correct":false},{"id":1121958,"option":"2","correct":true},{"id":1121959,"option":"3","correct":false},{"id":1121960,"option":"None of these","correct":false}]},{"q":"<p>In Python 3, which of the following statements about <strong>decorators</strong> are correct:</p>\n\n<ol>\n\t<li>They allow you to modify the behavior of functions or classes.</li>\n\t<li>They allow you to wrap another function to extend the behavior of the wrapped function with permanent modification.</li>\n\t<li>They allow you to wrap another function to extend the behavior of the wrapped function without permanently modifying it.</li>\n</ol>","a":[{"id":1121953,"option":"1 and 2","correct":false},{"id":1121954,"option":"2 and 3","correct":false},{"id":1121955,"option":"1 and 3","correct":true},{"id":1121956,"option":"All of these","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>class Deco:\n    def __init__(self):\n        self.n ='Python Testing'\n    @property\n    def prog(self):\n        return self.n\n    @prog.setter\n    def prog(self, value):\n        self.n = value\ndata = Deco()\ndata.prog = 'HackerEarth'\nprint(data.prog)</code></pre>\n\n<p> </p>","a":[{"id":1122005,"option":"Python Testing","correct":false},{"id":1122006,"option":"HackerEarth","correct":true},{"id":1122007,"option":"Python Testing HackerEarth","correct":false},{"id":1122008,"option":"Runtime error","correct":false}]},{"q":"<p>In Python 3, which of the following statements about the property method and class method decorator are correct:</p>\n\n<ol>\n\t<li>The property method allows you to define the attribute of an object, whereas the class method can be applied to any method of a class.</li>\n\t<li>The property method works on instances whereas the class method operates on the class independent of any instance.</li>\n\t<li>The class method decorator allows you to call a method using the class name instead of the object.</li>\n\t<li>The property method works independently of any instance whereas the class method operates on instances.</li>\n</ol>","a":[{"id":1121993,"option":"1 and 2","correct":false},{"id":1121994,"option":"1, 2, and 3","correct":true},{"id":1121995,"option":"2, 3, and 4","correct":false},{"id":1121996,"option":"All of these ","correct":false}]},{"q":"<p>In Python 3, consider the following progMain decorator. Which of these statements about this code is correct:</p>\n\n<p><strong>Decorator</strong></p>\n\n<pre class=\"prettyprint\"><code>def progMain(f):\n    def prog(*args, **kwargs):\n        return f(*args, **kwargs)\n    return prog\n</code></pre>\n\n<p><strong>Statements</strong><br>\n1. The * and ** operators are used in prog closure definition to collect all positional and keyword arguments and store them in variables.<br>\n2. The prog closure forwards the collected arguments to the original input function.<br>\n3. The collected arguments are forwarded using the argument unpacking operators.</p>","a":[{"id":1122013,"option":"1 and 2","correct":false},{"id":1122014,"option":"2 and 3","correct":false},{"id":1122015,"option":"1 and 3","correct":false},{"id":1122016,"option":"All of these","correct":true}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>def main_list(sample_list):\n    def Compute():\n        return sum([i for i in sample_list if isinstance(i, float)])\n    result = Compute()\n    final_list.append(result)\n    return final_list\nsample_list = [1000, 1010.90, 3450, 7809.23]\nfinal_list=[]\nprint(main_list(final_list))\n</code></pre>\n\n<p> </p>","a":[{"id":1122049,"option":"[4456]","correct":false},{"id":1122050,"option":"[13270.13]","correct":false},{"id":1122051,"option":"[ ]","correct":false},{"id":1122052,"option":"[0]","correct":true}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>class StudentData:\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score\n    @property\n    def getScore(self):\n        return self.name + self.score \n    @getScore.setter\n    def getScore(self, n):\n        name, rand, marks = n.split(' ')\n        self.name = name\n        self.score = score\nst = StudentData(\"Bob\", \"20\")\nprint(st.getScore, sep=',')\n</code></pre>\n\n<p> </p>","a":[{"id":1122053,"option":"Bob, 20","correct":false},{"id":1122054,"option":",Bob20","correct":false},{"id":1122055,"option":"Bob20","correct":true},{"id":1122056,"option":"AttributeError","correct":false}]},{"q":"<p>In Python 3, which of the following statements about <strong>metaprogramming</strong> are correct:</p>\n\n<ol>\n\t<li>It is defined as the ability of a program to manipulate itself.</li>\n\t<li>Metaprogramming is used in decorators thus allowing you to change the behavior of a function or a class.</li>\n</ol>","a":[{"id":1121973,"option":"1","correct":false},{"id":1121974,"option":"2","correct":false},{"id":1121975,"option":"Both of these","correct":true},{"id":1121976,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>def Program(func): \n    def test(*args, **kwargs): \n        value = func(*args, **kwargs) \n        return value         \n    return test \n@Program\ndef Cal(x, y): \n    return x + y \nx, y = 2, 3\nprint(x, y)  \n</code></pre>\n\n<p> </p>","a":[{"id":1121965,"option":"1 2","correct":false},{"id":1121966,"option":"2 3","correct":true},{"id":1121967,"option":"5","correct":false},{"id":1121968,"option":"SyntaxError","correct":false}]},{"q":"<p>In Python 3, which of the following options represent the concept of <strong>metaprogramming</strong>?</p>","a":[{"id":1121961,"option":"Iterators","correct":false},{"id":1121962,"option":"Decorators","correct":true},{"id":1121963,"option":"Generators","correct":false},{"id":1121964,"option":"None of these","correct":false}]},{"q":"<p>In Python 3, which of the following statements about <strong>decorators</strong> is correct:</p>\n\n<ol>\n\t<li>It is a design pattern that allows you to add new functionality to an existing object without modifying its structure.</li>\n\t<li>It is a design pattern that allows you to remove new functionality to an existing object by modifying its structure.</li>\n\t<li>It is a design pattern that allows you to add and remove new functionality to an existing object by modifying its structure.</li>\n</ol>","a":[{"id":1121941,"option":"1","correct":true},{"id":1121942,"option":"2","correct":false},{"id":1121943,"option":"3","correct":false},{"id":1121944,"option":"None of these","correct":false}]},{"q":"<p>In Python 3, which of the following symbols is used before a function to represent a decorator?</p>","a":[{"id":1121949,"option":"&","correct":false},{"id":1121950,"option":"*","correct":false},{"id":1121951,"option":"@","correct":true},{"id":1121952,"option":"$","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>def decorator(func): \n    def program1(*args, **kwargs): \n        value = func(*args, **kwargs) \n        return value \n    return program1 \n@decorator\ndef numbers(x, y): \n    return x + y  \nx, y = 5, 2\nprint(numbers(x, y))\n</code></pre>\n\n<p> </p>","a":[{"id":1121977,"option":"10","correct":false},{"id":1121978,"option":"7","correct":true},{"id":1121979,"option":"8","correct":false},{"id":1121980,"option":"RuntimeError","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>class Student(object):\n    @staticmethod\n    def program(name):\n        n = name.split(' ')\n        return len(n) &lt; 1\nres = Student.program('Bob Alice')  \nprint(res)</code></pre>\n\n<p> </p>","a":[{"id":1121997,"option":"'Bob Alice'","correct":false},{"id":1121998,"option":"0","correct":false},{"id":1121999,"option":"False ","correct":true},{"id":1122000,"option":"True ","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>def decorator(prog):\n    def func(x):\n        result = prog(x)\n        print(result)\n    return func\n@decorator\ndef program_result(i):\n    return i + 1\nprogram_result(10)\n</code></pre>\n\n<p> </p>","a":[{"id":1122017,"option":"10","correct":false},{"id":1122018,"option":"9","correct":false},{"id":1122019,"option":"11","correct":true},{"id":1122020,"option":"12","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>from math import sin, cos, pi\ndef decorProg(f):\n    def function(x):\n        res = int(f(x))\n        print(res)\n    return function\nsin = decorProg(cos)\nfor f in [sin, cos]:\n    f(pi)\n</code></pre>\n\n<p> </p>","a":[{"id":1122021,"option":"1","correct":false},{"id":1122022,"option":"0","correct":false},{"id":1122023,"option":"-1","correct":true},{"id":1122024,"option":"2","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>def MainProg(x, y, z): \n    def ProgF(f): \n        def ProgS(*args, **kwargs):  \n            x + y \n            return z*(x+y)\n            f(*args, **kwargs)\n        return ProgS \n    return ProgF \ndef output(*args): \n    for n in args: \n        i = n+1\n        j = i+1\n        print(i+n+j)\nprint(MainProg(12, 15, 10)(output)() )</code></pre>\n\n<p> </p>","a":[{"id":1122045,"option":"27","correct":false},{"id":1122046,"option":"270","correct":true},{"id":1122047,"option":"37","correct":false},{"id":1122048,"option":"TypeError","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>def MainProgram(f):\n  def program_1():\n    print(\"1\", end=' ')\n    f()\n    print(\"2\")\n  return program_1\ndef program_2():\n    print(\"Python\", end= ' ')\nnewf = MainProgram(program_2)\nnewf()\n</code></pre>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>1\nPython\n2</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>1 Python 2</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>1\nPython 2</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>1 Python \n2</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1121969,"option":"1","correct":false},{"id":1121970,"option":"2","correct":true},{"id":1121971,"option":"3","correct":false},{"id":1121972,"option":"4","correct":false}]},{"q":"<p>The following Python 3 code throws an exception error. Which of the following lines of code will you change to obtain the output provided here?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>def test_number(f):\n    def prog(i):\n        if type(i) == int and i &gt;= 0:\n            return f(i)\n        else:\n            raise Exception\n    return prog\n@test_number\ndef s(n):\n    if n == 1:\n        return 1\n    else:\n        return n*s(n-2)\nfor num in range(2, 10, 2):\n\tprint(s(num), end= ' ')\nprint(s(5))\n</code></pre>\n\n<p><strong>Output</strong></p>\n\n<pre class=\"prettyprint\"><code>2 24 720 40320 120</code></pre>\n\n<p> </p>","a":[{"id":1122029,"option":"i >= 0 --> i <= 0","correct":false},{"id":1122030,"option":"return n*s(n-2) --> return n*s(n) ","correct":false},{"id":1122031,"option":"return n*s(n-2) --> return n*s(n-1)","correct":true},{"id":1122032,"option":"None of these","correct":false}]},{"q":"<p>Consider the following Python 3 code. What will you replace the missing expressions X, Y, and Z with to obtain the provided result:<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>def MainProgram(f):\n    def Create(old_value):\n        def new_value(*args, **kwds):\n            X \n        Y  \n    Z\n        \n@MainProgram(5) \ndef return_value(n):\n    return n\nres = return_value(5) \nprint(res)\n</code></pre>\n\n<p><strong>Result</strong></p>\n\n<pre class=\"prettyprint\"><code>25</code></pre>\n\n<p><strong>Missing expressions</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>        return f * old_value(*args, **kwds) \n    return new_value \nreturn Create</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>return f * old_value(*args, **kwds) \n    return new_value \nreturn Create</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>        return new_value\n    return f * old_value(*args, **kwds) \nreturn Create</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>return Create(*args, **kwds) \n        return f * new_value \n    return old_value </code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1122037,"option":"1","correct":true},{"id":1122038,"option":"2","correct":false},{"id":1122039,"option":"3","correct":false},{"id":1122040,"option":"4","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>def MainProg(f): \n    m = {} \n    def InnerProg(num): \n        if num not in m:          \n            m[num] = f(num) \n        return m[num]  \n    return InnerProg     \n@MainProg\ndef Cal(num): \n    if num == 0: \n        return 1\n    else: \n        return num**2*Cal(num-1) \nprint(Cal(3))\n</code></pre>\n\n<p> </p>","a":[{"id":1122033,"option":"172","correct":false},{"id":1122034,"option":"81","correct":false},{"id":1122035,"option":"36","correct":true},{"id":1122036,"option":"RecursionError","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>class Calculate(object):\n    def __init__(self, var1):\n        self.var1 = var1\n    def Calget(self):\n        return self.var1 ** 2\n    def Calset(self, var2):\n        return self.var2 ** self.var1\n    def Caldel(self):\n        return 0\n    area = property(Calget, Calset, Caldel)\na = Calculate(10)\nprint(a.Calget(), end='')\nprint(a.Caldel())\n</code></pre>\n\n<p> </p>","a":[{"id":1122041,"option":"0 100","correct":false},{"id":1122042,"option":"1000","correct":true},{"id":1122043,"option":"100 0","correct":false},{"id":1122044,"option":"RuntimeError ","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>class MainProgram: \n    def __init__(self, val): \n        self.val = val \n        self.var = [ ] \n    def __call__(self, *args, **kwargs): \n        try: \n            result = self.val(*args, **kwargs) \n        except Exception as e: \n            self.var.append((args, kwargs, e)) \n            raise e \n        else: \n            self.var.append((args, kwargs, result)) \n            return result \n    @classmethod\n    def SubProgram(cls, f): \n        return cls(f) \n@MainProgram.SubProgram \ndef func(x, y): \n    return x / y \nprint(func(y = 6, x = 0))\n</code></pre>\n\n<p> </p>","a":[{"id":1122057,"option":"0","correct":false},{"id":1122058,"option":"1.5","correct":false},{"id":1122059,"option":"0.0","correct":true},{"id":1122060,"option":"ZeroDivisionError","correct":false}]},{"q":"<p>In Python 3, which of the following statements about the terms decorator and decorator pattern are correct:</p>\n\n<ol>\n\t<li>Decorator pattern allows behavior to be added to an existing object dynamically whereas the term decorator defines an object with which you can extend its functionality.</li>\n\t<li>A decorator allows you to place an object inside special wrapper objects dynamically whereas decorator pattern is independent of other instances of the same class.</li>\n\t<li>Python decorators are an implementation of the decorator pattern.</li>\n</ol>","a":[{"id":1121981,"option":"1 and 2","correct":true},{"id":1121982,"option":"2 and 3","correct":false},{"id":1121983,"option":"1 and 3","correct":false},{"id":1121984,"option":"All of these","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>def MainCount(f):\n    def progFirst(*args, **kwargs):\n        progFirst.calls += 1\n        return f(*args, **kwargs)\n    progFirst.calls = 0\n    return progFirst\n@MainCount\ndef progSecond(i):\n    return i + 1\n@MainCount\ndef Count(i= 0, j = 1):\n    return i*j + 1\nprint(progSecond.calls)\nfor n in range(5):\n    progSecond(n)\nCount(j = 0, i = 1)\nprint(Count.calls)\n</code></pre>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>1\n0</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>0\n1</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>1\n1</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>0\n0</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1122025,"option":"1","correct":false},{"id":1122026,"option":"2","correct":true},{"id":1122027,"option":"3","correct":false},{"id":1122028,"option":"4","correct":false}]}]
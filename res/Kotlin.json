[{"q":"<p>What is the output of the given code snippet:</p>\n\n<p><strong>Code snippet</strong></p>\n\n<pre class=\"prettyprint\"><code>fun main(){\n  try{\n    val arr=IntArray(5)\n    arr[5]=20/0\n  }\n  catch(e:Exception){\n    println(\"Block1\")\n  }\n  catch(e:ArithmeticException){\n    println(\"Block2\")\n  }\n  catch(e:ArrayIndexOutOfBoundsException){\n    println(\"Block3\")\n  }\n  println(\"Remaining code\")\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1764917,"option":"Block2\r\nRemaining code","correct":false},{"id":1764918,"option":"Block1\r\nRemaining code","correct":true},{"id":1764919,"option":"Block1\r\nBlock2\r\nBlock3\r\nRemaining code","correct":false},{"id":1764920,"option":"Block3\r\nRemaning code","correct":false}]},{"q":"<p>What is the output of the given code snippet:</p>\n\n<p><strong>Code snippet</strong></p>\n\n<pre class=\"prettyprint\"><code>fun main(){\n  val str1=func(\"10\")\n  val str2=func(\"10.5\")\n  println(str1)\n  println(str2)\n}\nfun func(temp:String): Int{\n  return try{\n      Integer.parseInt(temp)\n  }  catch(e: NumberFormatException){\n         0\n  }\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1764913,"option":"Error","correct":false},{"id":1764914,"option":"10\r\n10.5","correct":false},{"id":1764915,"option":"0\r\n0","correct":false},{"id":1764916,"option":"10\r\n0","correct":true}]},{"q":"<p>You have written a code for creating two classes Class1 and Class2. Class2 is child of/derived from Class1. There is a variable \"x\" in Class1 which should only be accessible in that class and another variable \"y\" in Class2 should be accessible anywhere inside the module. But, in the given code, x and y are accessible in the wrong way.</p>\n\n<pre class=\"prettyprint\"><code>open class Class1{\n   var x = 10\n}\nclass Class2{\n   private var y = 20\n}\nfun main(){\n   val class1=Class1()\n   val class2=Class2()\n}</code></pre>\n\n<p><br>\nAs the code is giving the wrong output, which of the following option is the correct code?</p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1</strong></p>\n\n<pre class=\"prettyprint\"><code>open class Class1{\n   public var x = 10\n}\nclass Class2{\n   internal var y = 20\n}\nfun main(){\n   val class1=Class1()\n   val class2=Class2()\n}</code></pre>\n\n<p><strong>2</strong></p>\n\n<pre class=\"prettyprint\"><code>open class Class1{\n   internal var x = 10\n}\nclass Class2{\n   private var y = 20\n}\nfun main(){\n   val class1=Class1()\n   val class2=Class2()\n}</code></pre>\n\n<p><strong>3</strong></p>\n\n<pre class=\"prettyprint\"><code>open class Class1{\n   private var x = 10\n}\nclass Class2{\n   internal var y = 20\n}\nfun main(){\n   val class1=Class1()\n   val class2=Class2()\n}</code></pre>\n\n<p><strong>4</strong></p>\n\n<pre class=\"prettyprint\"><code>open class Class1{\n   protected var x = 10\n}\nclass Class2{\n   private var y = 20\n}\nfun main(){\n   val class1=Class1()\n   val class2=Class2()\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1764921,"option":"1","correct":false},{"id":1764922,"option":"2","correct":false},{"id":1764923,"option":"3","correct":true},{"id":1764924,"option":"4","correct":false}]},{"q":"<p>What is the output of the given code snippet:</p>\n\n<p><strong>Code snippet</strong></p>\n\n<pre class=\"prettyprint\"><code>fun main(){\n   try{\n     val res=10/0\n   }\n   catch(e: NumberFormatException){\n     println(\"Error Message\")\n   }\n   println(\"Remaining code\")\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1764909,"option":"Exception will be thrown","correct":true},{"id":1764910,"option":"Error Message","correct":false},{"id":1764911,"option":"Error Message\r\nRemaining code","correct":false},{"id":1764912,"option":"Remaining code","correct":false}]},{"q":"<p>You have a set of numbers ranging from 1 to 10 in a MutableList. You need to traverse the list and follow certain conditions by creating a new list.<br>\n<strong>Rules</strong></p>\n\n<ol>\n\t<li>If the number is even, then add that element to the list.</li>\n\t<li>Else if the number is odd but has factors other than 1 and itself, then delete the last element of the list.</li>\n\t<li>If the number doesn't have factors, then add it into list. (Considering 1 does not have any factors.)</li>\n</ol>\n\n<pre class=\"prettyprint\"><code>fun main(args: Array&lt;String&gt;){  \n    var list1 = mutableListOf(1,2,3,4,5,6,7,8,9,10)  \n    for(ele in list1){  \n        if(ele%2==0){\n          list1.add(ele)\n        }\n        else{\n          var check=false\n          for(i in 2..ele-1){\n            if(ele%i==0){\n              check=true\n              break\n            }\n          }\n          if(check){\n            list1.removeAt(-1)\n          }\n          else{\n            list1.add(ele)\n          }\n        }\n    }  \n    for(index in 0..list1.size-1){  \n        println(list1[index])  \n    }  \n}  </code></pre>\n\n<p><br>\nAs the code is giving the wrong output, which of the following option is the correct code?</p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1</strong></p>\n\n<pre class=\"prettyprint\"><code>fun main(args: Array&lt;String&gt;){  \n    var list1 = mutableListOf(1,2,3,4,5,6,7,8,9,10)  \n    var list2 = mutableListOf&lt;Int&gt;()\n    for(ele in list1){  \n        if(ele%2==0){\n          list2.add(ele)\n        }\n        else{\n          var check=false\n          for(i in 2..ele-1){\n            if(ele%i==0){\n              check=true\n              break\n            }\n          }\n          if(check){\n            list2.remove(0)\n          }\n          else{\n            list2.add(ele)\n          }\n        }\n    }  \n    for(index in 0..list2.size-1){  \n        println(list2[index])  \n    }  \n}  </code></pre>\n\n<p><strong>2</strong></p>\n\n<pre class=\"prettyprint\"><code>fun main(args: Array&lt;String&gt;){  \n    var list1 = mutableListOf(1,2,3,4,5,6,7,8,9,10)  \n    var list2 = mutableListOf&lt;Int&gt;()\n    for(ele in list1){  \n        if(ele%2==0){\n          list2.add(ele)\n        }\n        else{\n          var check=false\n          for(i in 2..ele-1){\n            if(ele%i==0){\n              check=false\n              break\n            }\n          }\n          if(check){\n            list2.removeAt(-1)\n          }\n          else{\n            list2.add(ele)\n          }\n        }\n    }  \n    for(index in 0..list2.size-1){  \n        println(list2[index])  \n    }  \n}  </code></pre>\n\n<p><strong>3</strong></p>\n\n<pre class=\"prettyprint\"><code>fun main(args: Array&lt;String&gt;){  \n    var list1 = mutableListOf(1,2,3,4,5,6,7,8,9,10)  \n    var list2 = mutableListOf&lt;Int&gt;()\n    for(ele in list1){  \n        if(ele%2==0){\n          list2.add(ele)\n        }\n        else{\n          var check=false\n          for(i in 2..ele-1){\n            if(ele%i==0){\n              check=true\n              break\n            }\n          }\n          if(!check){\n            list2.removeAt(list2.size)\n          }\n          else{\n            list2.add(ele)\n          }\n        }\n    }  \n    for(index in 0..list2.size-1){  \n        println(list2[index])  \n    }  \n}  </code></pre>\n\n<p><strong>4</strong></p>\n\n<pre class=\"prettyprint\"><code>fun main(args: Array&lt;String&gt;){  \n    var list1 = mutableListOf(1,2,3,4,5,6,7,8,9,10)  \n    var list2 = mutableListOf&lt;Int&gt;()\n    for(ele in list1){  \n        if(ele%2==0){\n          list2.add(ele)\n        }\n        else{\n          var check=false\n          for(i in 2..ele-1){\n            if(ele%i==0){\n              check=true\n              break\n            }\n          }\n          if(check){\n            list2.removeAt(list2.size-1)\n          }\n          else{\n            list2.add(ele)\n          }\n        }\n    }  \n    for(index in 0..list2.size-1){  \n        println(list2[index])  \n    }  \n}  </code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1764925,"option":"1","correct":false},{"id":1764926,"option":"2","correct":false},{"id":1764927,"option":"3","correct":false},{"id":1764928,"option":"4","correct":true}]},{"q":"<p>What is the output of the given code snippet:</p>\n\n<p><strong>Code snippet</strong></p>\n\n<pre class=\"prettyprint\"><code>fun main(args: Array&lt;String&gt;) {\n    var list1 = mutableListOf(16,16,16)\n    var res=0\n    var n=list1.size\n    while(true){\n      var temp:Int=0\n      var i:Int=0\n      for(i in 0..n-1){\n        if(list1[i]%2==1){\n          break\n        }\n        else if(list1[i]==0){\n          temp++\n        }\n      }\n      if(temp==n){\n        print(res)\n        break\n      }\n      if(i==n){\n        for(j in 0..n-1){\n          list1[j]=list1[j]/2\n        }\n        res++\n      }\n      for(k in i..n-1){\n        if(list1[k]%2==1){\n          list1[k]--\n          res++\n        }\n      }\n    }\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1764929,"option":"7","correct":false},{"id":1764930,"option":"8","correct":false},{"id":1764931,"option":"16","correct":false},{"id":1764932,"option":"None of these","correct":true}]},{"q":"<p>What is the output of the given code snippet:</p>\n\n<p><strong>Code snippet</strong></p>\n\n<pre class=\"prettyprint\"><code>fun main(args: Array&lt;String&gt;){  \n    var list1 = mutableListOf(1,2,3,4,5,6,7,8,9,10)  \n    var list2 = mutableListOf&lt;Int&gt;()\n    for(ele in list1){  \n        if(ele%2==0){\n          list2.add(ele)\n        }\n        else{\n          var check=false\n          for(i in 2..ele-1){\n            if(ele%i==0){\n              check=true\n              break\n            }\n          }\n          if(check){\n            list2.add(ele)\n          }\n          else{\n            if(list2.size&gt;1){\n              list2.removeAt(0)\n            }\n          }\n        }\n    }  \n    for(index in 0..list2.size-1){  \n        println(list2[index])  \n    }  \n}  </code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1764933,"option":"Error","correct":false},{"id":1764934,"option":"Infinite loop","correct":false},{"id":1764935,"option":"6\r\n8\r\n9\r\n10","correct":true},{"id":1764936,"option":"6","correct":false}]},{"q":"<p>What is the output of the given code snippet:</p>\n\n<p><strong>Code snippet</strong></p>\n\n<pre class=\"prettyprint\"><code>fun main(args: Array&lt;String&gt;){  \n    var list1 = mutableListOf(10, 21, 22, 100, 101, 200, 300)  \n    var n=list1.size\n    var temp:Int=0\n    for(i in 0..n-1){\n      for(j in i+1..n-1){\n        for(k in j+1..n-1){\n          if(list1[i] + list1[j] &gt; list1[k]\n             &amp;&amp; list1[i] + list1[k] &gt; list1[j]\n             &amp;&amp; list1[k] + list1[j] &gt; list1[i]){\n                temp++\n          }\n        }\n      }\n    }\n    println(temp)\n}  </code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1764937,"option":"6","correct":true},{"id":1764938,"option":"4","correct":false},{"id":1764939,"option":"12","correct":false},{"id":1764940,"option":"Error","correct":false}]},{"q":"<p>What is the output of the given code snippet:</p>\n\n<p><strong>Code snippet</strong></p>\n\n<pre class=\"prettyprint\"><code>fun main(args: Array&lt;String&gt;){  \n    var list1 = mutableListOf(10, 21, 22, 100, 101, 200, 300)  \n    var n=list1.size\n    var temp:Int=0\n    for(i in 0..n-1){\n      temp+=list1[i]\n    }\n    println(temp)\n} </code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1764941,"option":"Error","correct":false},{"id":1764942,"option":"Infinite loop","correct":false},{"id":1764943,"option":"12","correct":false},{"id":1764944,"option":"754","correct":true}]},{"q":"<p>What is the output of the given code snippet:</p>\n\n<p><strong>Code snippet</strong></p>\n\n<pre class=\"prettyprint\"><code>import kotlin.properties.Delegates\nclass Class1{\n    var name: String by Delegates.observable(\"Hello\"){\n       prop, temp1, temp2 -&gt; println(\"$temp1 $temp2\")\n    }\n    val temp: String by lazy{\n       \"Hello\"\n    }\n}\nfun main(args: Array&lt;String&gt;){\n    val class1=Class1()\n    class1.name=\"Alice\"\n    class1.name=\"Smith\"\n    println(class1.temp)\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1764945,"option":"Error","correct":false},{"id":1764946,"option":"Hello -> Alice Smith\r\nHello","correct":false},{"id":1764947,"option":"Hello -> Alice\r\nAlice -> Smith\r\nHello","correct":true},{"id":1764948,"option":"Hello -> Alice\r\nHello -> Smith\r\nHello","correct":false}]},{"q":"<p>What is the output of the given code snippet:</p>\n\n<p><strong>Code snippet</strong></p>\n\n<pre class=\"prettyprint\"><code>fun main(){\n  val string=\"I was in a room with a box in hand. The box is in red color\"\n  val temp1=\"box\".toRegex()\n  val temp2=temp1.find(string)\n  val m=temp2?.value\n  val n=temp2?.range\n  println(\"$m $n\")\n  \n  val temp3=temp1.find(string,11)\n  val m2=temp3?.value\n  val n2=temp3?.range\n  println(\"$m2 $n2\")\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1764949,"option":"box 23..25\r\nbox 40..42","correct":false},{"id":1764950,"option":"box 23..25\r\nbox 23..25","correct":true},{"id":1764951,"option":"box 40..42\r\nbox 40..42","correct":false},{"id":1764952,"option":"box 40..42\r\nbox 23..25","correct":false}]},{"q":"<p>What is the output of the given code snippet:</p>\n\n<p><strong>Code snippet</strong></p>\n\n<pre class=\"prettyprint\"><code>fun main(){\n  val temp1=Regex(\"\"\"\\d+\"\"\").findAll(\"ab12cd34ef 56gh7 8i)\n  val temp2=StringBuilder()\n  for(i in temp1){\n     temp2.append(i.value+\" \")\n  }\n  println(temp2)\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1764953,"option":"1 2 3 4 5 6 7 8","correct":false},{"id":1764954,"option":"12345678","correct":false},{"id":1764955,"option":"12 34 56 7 8","correct":true},{"id":1764956,"option":"Error","correct":false}]},{"q":"<p>Alice has written a code for checking a string is equal to the string that is reverse of the own string. The initial program is returning an error. Correct the given code to get suitable output.</p>\n\n<pre class=\"prettyprint\"><code>fun main(){\n  var x=100\n  var y=x.and(17)\n  var z=x.ushr(6)\n  println(z.inv())\n  println(z.and(y))\n}</code></pre>\n\n<p>As the code is giving the wrong output, which of the following options is the correct code?</p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1</strong></p>\n\n<pre class=\"prettyprint\"><code>fun main(){\n   val str1=\"noon\"\n   val str2=\"\"\n   var temp:Int=str1.length-1\n   while(temp!=-1){\n     str2+=str1[temp--]\n   }\n   if(str1!=str2){\n     print(\"No\")\n   }\n   else{\n     print(\"Yes\")\n   }\n}</code></pre>\n\n<p><strong>2</strong></p>\n\n<pre class=\"prettyprint\"><code>fun main(){\n   val str1=\"noon\"\n   var str2=\"\"\n   var temp:Int=0\n   while(temp!=1){\n     str2+=str1[temp--]\n   }\n   if(str1!=str2){\n     print(\"Yes\")\n   }\n   else{\n     print(\"No\")\n   }\n}</code></pre>\n\n<p><strong>3</strong></p>\n\n<pre class=\"prettyprint\"><code>fun main(){\n   val str1=\"noon\"\n   var str2=\"\"\n   var temp:Int=str1.length-1\n   while(temp!=-1){\n     str2+=str1[temp--]\n   }\n   if(str1==str2){\n     print(\"Yes\")\n   }\n   else{\n     print(\"No\")\n   }\n}</code></pre>\n\n<p><strong>4</strong></p>\n\n<pre class=\"prettyprint\"><code>fun main(){\n   val str1=\"noon\"\n   var str2=\"\"\n   var temp:Int=0\n   while(temp!=1){\n     str2+=str1[temp++]\n   }\n   if(str1==str2){\n     print(\"Yes\")\n   }\n   else{\n     print(\"No\")\n   }\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1764905,"option":"1","correct":false},{"id":1764906,"option":"2","correct":false},{"id":1764907,"option":"3","correct":true},{"id":1764908,"option":"4","correct":false}]},{"q":"<p>What is the output of the given code snippet:</p>\n\n<p><strong>Code snippet</strong></p>\n\n<pre class=\"prettyprint\"><code>fun main(){\n  var x=100\n  var y=x.and(17)\n  var z=x.ushr(6)\n  println(z.inv())\n  println(z.and(y))\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1764901,"option":"-1\r\n0","correct":false},{"id":1764902,"option":"-2\r\n0","correct":true},{"id":1764903,"option":"-3\r\n10","correct":false},{"id":1764904,"option":"-2\r\n10","correct":false}]},{"q":"<p>What is the output of the given code snippet:</p>\n\n<p><strong>Code snippet</strong></p>\n\n<pre class=\"prettyprint\"><code>fun main(){\n   val x:Int=10\n   val y:Int=25\n   val str1: String=\"sthaghar\"\n   val str2: String=\"strhshus\"\n   var res=0\n   if(str1&gt;=str2){\n     if(x&gt;y){\n       res=x\n     }\n     else{\n       res=y\n     }\n   }\n   else if(str1&lt;str2){\n     if(x&lt;y){\n       res=x\n     }\n     else{\n       res=y\n     }\n   }\n   print(res)\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1764897,"option":"Error","correct":false},{"id":1764898,"option":"25","correct":false},{"id":1764899,"option":"0","correct":false},{"id":1764900,"option":"10","correct":true}]},{"q":"<p>Alice has written a code for adding two numbers. One has string datatype and the other has int datatype. It should give the output as 30 but instead got concatenation \"1020\" as output.</p>\n\n<pre class=\"prettyprint\"><code>fun main(){\n   val x:String=\"10\"\n   val y:Int = 20\n   val z=x+y\n   print(z)\n}</code></pre>\n\n<p>As the code is giving the wrong output, which of the following option is the correct code?</p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1</strong></p>\n\n<pre class=\"prettyprint\"><code>fun main(){\n   val x:String=\"10\"\n   val y:Int = 20\n   val z=x.toInt()+y\n   print(z)\n}</code></pre>\n\n<p><strong>2</strong></p>\n\n<pre class=\"prettyprint\"><code>fun main(){\n   val x:String=\"10\"\n   val y:Int = 20\n   val z=x+y.toString()\n   print(z)\n}</code></pre>\n\n<p><strong>3</strong></p>\n\n<pre class=\"prettyprint\"><code>fun main(){\n   val x:String=\"10\"\n   val y:Int = 20\n   val z=toInt(x)+y\n   print(z)\n}</code></pre>\n\n<p><strong>4</strong></p>\n\n<pre class=\"prettyprint\"><code>fun main(){\n   val x:String=\"10\"\n   val y:Int = 20\n   val z=x+toString(y)\n   print(z)\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1764893,"option":"1","correct":true},{"id":1764894,"option":"2","correct":false},{"id":1764895,"option":"3","correct":false},{"id":1764896,"option":"4","correct":false}]},{"q":"<p>You want to use regular expressions in a Kotlin program where you have to check the email validation.<br>\n<br>\n<strong>Rules</strong></p>\n\n<ol>\n\t<li>The valid email should have the @ and . in the mail address which allows only 2 to 6 characters after \".\"</li>\n\t<li>Capital letters can be allowed but special characters are not allowed after \".\" and @.</li>\n\t<li>Before @ there can be any alphanumeric characters involved.</li>\n</ol>\n\n<pre class=\"prettyprint\"><code>\"\"\"[a-z]+@[a-zA-Z_%$#]+?\\.[a-z123.*A-Z]{2,6}\"\"\" </code></pre>\n\n<p>The above expression is showing invalid for valid emails too.<br>\nWhich of the following regular expressions is correct based on the above conditions?</p>","a":[{"id":1764889,"option":"\"\"\"\\w+@[0-9]+?\\.[a-zA-Z0-9$%^]{2,6}\"\"\"","correct":false},{"id":1764890,"option":"\"\"\"\\w+@[+a-zA-Z]+?\\.[a-zA-Z]{1,7}\"\"\"","correct":false},{"id":1764891,"option":"\"\"\"\\w+@[a-zA-Z]+?\\.[a-zA-Z]{2,6}\"\"\"","correct":true},{"id":1764892,"option":"\"\"\"\\w$%^@+@[a-zA-Z]+?\\.[a-zA-Z]{1,7}\"\"\"","correct":false}]},{"q":"<p>You are using regular expressions in Kotlin to build an application. You have used a companion object function that will return a regular expression that matches specified string literal and none of the characters in that string will have special meaning while searching for the occurrence of regex. The function given is returning pattern strings.</p>\n\n<pre class=\"prettyprint\"><code>fun escape(literal: String):String</code></pre>\n\n<p>Which of the following function should the given function be replaced with?</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>fun toString(literal: String):String</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>fun fromLiteral(literal: String): Regex</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>fun escapeReplacement(literal: String): String</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>fun toLiteral(literal: String): Regex</code></pre>\n\t</li>\n</ol>\n\n<p>&nbsp;</p>","a":[{"id":1747286,"option":"1","correct":false},{"id":1747287,"option":"2","correct":true},{"id":1747288,"option":"3","correct":false},{"id":1747289,"option":"4","correct":false}]},{"q":"<p>What is the output of the given code snippet:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>fun main() {\n    val class1 = class1(5.0)\n    class1.shapeName(\"class1\")\n    val class2 = class2(2.0,3.0,4.0)\n    class2.shapeName(\"class2\")\n}\nabstract class Master{\n    abstract fun area() : Double\n    abstract fun perimeter() : Double\n    fun shapeName(name:String){\n        println(\"The name of Master is $name\")  }\n}\nclass class1 (var radius : Double): Master(){\n    private val pi = 3.14\n    init {\n        println(\"The area of class1 is ${area()}\")\n        println(\"The perimeter of class1 is ${perimeter()}\") }\n    override fun area() = radius * radius * pi\n    override fun perimeter() = 2 * radius * pi\n}\nclass class2 (var a : Double, var b : Double,var c : Double): Master (){\n    init {\n        println(\"The area of class2 is ${area()}\")\n        println(\"The perimeter of perimeter is ${perimeter()}\") }\n    override fun area(): Double = Math.sqrt((perimeter() / 2) * (perimeter() / 2 - a) * (perimeter() / 2 - b) * (perimeter() / 2 - c))\n    override fun perimeter() = a + b + c\n}</code></pre>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>The area of class1 is 78.5\nThe perimeter of class1 is 31.400000000000002\nThe name of Master is class1\nThe area of class2 is 2.9047375096555625\nThe perimeter of perimeter is 9.0\nThe name of Master is class2</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>The area of class1 is 9.0\nThe perimeter of class1 is 2.9047375096555625\nThe name of Master is class2\nThe area of class2 is 31.400000000000002\nThe perimeter of perimeter is 78.5\nThe name of Master is class1</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>The area of class1 is 23.5\nThe perimeter of class1 is 55.400000000000002\nThe name of Master is class1\nThe area of class2 is 6.9047375096555625\nThe perimeter of perimeter is 6.0\nThe name of Master is class2</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>The area of class1 is 23.5\nThe perimeter of class1 is 31.400000000000002\nThe name of Master is class1\nThe area of class2 is 6.9047375096555625\nThe perimeter of perimeter is 9.0\nThe name of Master is class2</code></pre>\n\t</li>\n</ol>","a":[{"id":1747282,"option":"1","correct":true},{"id":1747283,"option":"2","correct":false},{"id":1747284,"option":"3","correct":false},{"id":1747285,"option":"4","correct":false}]},{"q":"<p>You were asked to create a class with the name \"Student\" in Kotlin. In that class, you need to declare one primary constructor and one secondary constructor.<br>\nWhich of the following statement is true about the primary constructor?</p>\n\n<ol>\n\t<li>It should not contain any code.<br>\n\tclass ClassName constructor{}</li>\n\t<li>If it doesn't have any annotations, the constructor keyword can be omitted.<br>\n\tclass ClassName(variable: String){}</li>\n</ol>","a":[{"id":1747278,"option":"Only 1","correct":false},{"id":1747279,"option":"Only 2","correct":false},{"id":1747280,"option":"Both 1 and 2","correct":true},{"id":1747281,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the given code snippet:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>fun main(args: Array&lt;String&gt;) {\n    val x: Int = 578\n    val res=func(x)\n    print(res)\n}\nfun func(x:Int):Int{\n    if(x&lt;3){\n      return x\n    }\n    if(x&gt;=3 &amp;&amp; x&lt;10){\n      return x-1\n    }\n    var temp=1\n    while(x/temp&gt;9){\n      temp=temp*10\n    }\n    var temp1:Int=x/temp\n    if(temp1!=3){\n      return func(temp1)*func(temp-1)+func(temp1)+func(x%temp)\n    }\n    else{\n      return func(temp1*temp-1)\n    }\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1747274,"option":"394","correct":false},{"id":1747275,"option":"385","correct":true},{"id":1747276,"option":"7","correct":false},{"id":1747277,"option":"Error","correct":false}]},{"q":"<p>You were asked to write a Kotlin program to find all the combinations of numbers say 1, 2, 3 to sum up and get given sum. The given sum is 5 then the combinations are:<br>\n<em>{ [ 1, 1, 1, 1, 1 ], [ 1, 1, 1, 2 ], [ 1, 1, 2, 1 ], [ 1, 1, 3 ], [1, 2, 1, 1], [1, 2, 2], [1, 3, 1], [2, 1, 1, 1],&nbsp;[2, 1, 2], [2, 2, 1], [2, 3], [3, 1, 1], [3, 2] }</em></p>\n\n<p>You have written the following code but the function \"combinations\" is incomplete so the code doesn't produce the desired output</p>\n\n<pre class=\"prettyprint\"><code>import java.util.Arrays\nfun main(){\n   val arr=Array&lt;Int&gt;(100, { i -&gt; 0 })\n   for(i in 0..99){\n     arr[i]=0\n   }\n   val n=5\n   combinations(arr,n,0)\n}\nfun combinations(arr:Array&lt;Int&gt;,k:Int,i:Int){\n   //code\n}</code></pre>\n\n<p>Identify the correct code snippet for function \"combinations\" to get the desired output by resolving errors in the given code.</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>fun combinations(arr:Array&lt;Int&gt;,k:Int,i:Int){\n   var max:Int=4\n   if(k==0){\n     for(j in 0..i-1){\n       print(arr[i])\n       print(\" \") }\n     println() }\n   else if(k&gt;0){\n     for(j in 1..max){\n       arr[i]=j\n       combinations(arr,n-j,max+1) }\n   }\n}</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>fun combinations(arr:Array&lt;Int&gt;,k:Int,i:Int){\n   var max:Int=3\n   if(k==0){\n     for(j in 0..i-1){\n       print(arr[j])\n       print(\" \")  }\n     println() }\n   else if(k&gt;0){\n     for(j in 1..max){\n       arr[i]=j\n       combinations(arr,k-i,j+1) }\n   }\n}</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>fun combinations(arr:Array&lt;Int&gt;,k:Int,i:Int){\n   var max:Int=4\n   if(k==0){\n     for(j in 0..i-1){\n       print(arr[j])\n       print(\" \")\n     }\n     println()\n   }\n   else if(k&gt;0){\n     for(j in 1..max){\n       arr[i]=k\n       combinations(arr,max-j,i+1)\n     }\n   }\n}</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>fun combinations(arr:Array&lt;Int&gt;,k:Int,i:Int){\n   var max:Int=3\n   if(k==0){\n     for(j in 0..i-1){\n       print(arr[j])\n       print(\" \") }\n     println() }\n   else if(k&gt;0){\n     for(j in 1..max){\n       arr[i]=j\n       combinations(arr,k-j,i+1) }\n   }\n}</code></pre>\n\t</li>\n</ol>","a":[{"id":1747270,"option":"1","correct":false},{"id":1747271,"option":"2","correct":false},{"id":1747272,"option":"3","correct":false},{"id":1747273,"option":"4","correct":true}]},{"q":"<p>You are given the following function in Kotlin:</p>\n\n<pre class=\"prettyprint\"><code>var total = 0\narr.reduced { it &gt; 0 }.forEach {\n    total += it }\nprint(total)</code></pre>\n\n<p>The function is to find the sum of all elements that are greater than 0 in an array \"arr\". But, the code is giving an error. Identify the correct code for the above mentioned task.</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>var total = 0\narr.filter { it &gt; 0 }.forEach {\n    total += it  }\nprint(total)  </code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>var total = 0\narr.sum { it &gt; 0 }.forEach {\n    total += it }\nprint(total)  </code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>var total = 0\narr.total { it &gt; 0 }.forEach {\n    total += it  }\nprint(total)  </code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>var total = 0\narr.closure { it &gt; 0 }.forEach {\n    total += it  }\nprint(total)  </code></pre>\n\t</li>\n</ol>","a":[{"id":1747266,"option":"1","correct":true},{"id":1747267,"option":"2","correct":false},{"id":1747268,"option":"3","correct":false},{"id":1747269,"option":"4","correct":false}]},{"q":"<p>What is the output of the given code snippet:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>fun main(){\n    val stringPlus: (String, String) -&gt; String = String::plus\n    val intPlus: Int.(Int) -&gt; Int = Int::plus\n    \n    println(stringPlus.invoke(\"Alice\", \"Smith\"))\n    println(stringPlus(\"Alice, \", \"Smith\"))\n    \n    println(intPlus.invoke(3, 14))\n    println(intPlus(4, 12))\n    println(12.intPlus(5))\n    println(1.plus(2))]\n}</code></pre>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Alice Smith\nAlice, Smith\n314\n16\n17\n12</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>AliceSmith\nAlice, Smith\n17\n16\n17\n12</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>AliceSmith\nAlice, Smith\n17\n16\n17\n3</code></pre>\n\t</li>\n</ol>","a":[{"id":1747262,"option":"1","correct":false},{"id":1747263,"option":"2","correct":false},{"id":1747264,"option":"3","correct":true},{"id":1747265,"option":"Error","correct":false}]},{"q":"<p>What is the output of the given code snippet:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>import java.util.Arrays\nfun main(){\n   val arr=arrayOf&lt;Int&gt;(5, 3, 6, 2, 4, -1, 0, -7)\n   val k=2\n   func(arr,k)\n}\nfun func(arr:Array&lt;Int&gt;,k:Int){\n   val n=arr.size\n   var t:Int\n   for(i in 0..k-1){\n     t=arr[0]\n     for(j in 0..n-2)\n        arr[j]=arr[j+1]\n     arr[n-1]=t\n   }\n   for(i in 0..n-1){\n     print(arr[i])\n     print(\" \")\n   }\n}</code></pre>","a":[{"id":1747258,"option":"2 4 -1 0 -7 5 3 6","correct":false},{"id":1747259,"option":"6 2 4 -1 0 -7 5 3 ","correct":true},{"id":1747260,"option":"-7 0 5 3 6 2 4 -1","correct":false},{"id":1747261,"option":"-1 -7 0 5 3 6 2 4 ","correct":false}]},{"q":"<p>What is the output of the given code snippet:</p>\n\n<pre class=\"prettyprint\"><code>import java.util.Arrays\nfun main(){\n   val arr=intArrayOf(5, 3, 6, 2, 4, -1, 0, -7)\n   arr.filter{i-&gt;i&gt;0}.forEach{e-&gt;print(\"$e \")}\n   println()\n   println(arr.find{it%2==0})\n   val temp=arr.reduce{value, next -&gt; value*next+next}\n   println(temp)\n   println(arr.any{it%2&gt;=1})\n   println(Arrays.toString(arr.sortedArray()))\n}\n</code></pre>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>5 3 6 2 4 0\n2\n0\nfalse\n[6, 5, 4, 3, 2, 0, -1, -7]</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>5 3 6 2 4 0\n2\n0\ntrue\n[6, 5, 4, 3, 2, 0, -1, -7]</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>5 3 6 2 4 \n6\n-7\nfalse\n[-7, -1, 0, 2, 3, 4, 5, 6]</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>5 3 6 2 4 \n6\n-7\ntrue\n[-7, -1, 0, 2, 3, 4, 5, 6]</code></pre>\n\t</li>\n</ol>","a":[{"id":1747254,"option":"1","correct":false},{"id":1747255,"option":"2","correct":false},{"id":1747256,"option":"3","correct":false},{"id":1747257,"option":"4","correct":true}]},{"q":"<p>What is the output of the following code:</p>\n\n<pre class=\"prettyprint\"><code>import java.util.Arrays\nfun main(){\n   val arr=arrayOf(3, 6, 2, 7, 4)\n   val temp=arr.get(4)\n   arr.set(4, 5)\n   var count=0\n   if(temp&gt;arr.get(4)){\n      count++\n   }\n   else{\n      count=0\n   }\n   \n   val arr1=arr.plus(count)\n   print(Arrays.toString(arr1))\n}</code></pre>","a":[{"id":1747250,"option":"[1, 3, 6, 2, 7, 5]","correct":false},{"id":1747251,"option":"[3, 6, 2, 7, 5, 1]","correct":false},{"id":1747252,"option":"[3, 6, 2, 7, 5, 0]","correct":true},{"id":1747253,"option":"[0, 3, 6, 2, 7, 4]","correct":false}]},{"q":"<p>There is an extension function for an array in Kotlin which will return boolean value i.e., true when the array at least has one element in it or when the element matches the predicate. But, the given code is not used for this functionality.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>fun &lt;A&gt; Array&lt;out A&gt;.all():Boolean</code></pre>\n\n<p>Pick the correct function that is used to achieve the above functionality.</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>fun &lt;A&gt; Array&lt;out A&gt;.asIterable():Boolean</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>fun &lt;A&gt; Array&lt;out A&gt;.any():Boolean</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>fun &lt;A&gt; Array&lt;out A&gt;.asSequence():Boolean</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>fun &lt;A&gt; Array&lt;out A&gt;.associate():Boolean</code></pre>\n\t</li>\n</ol>\n\n<p>&nbsp;</p>","a":[{"id":1747246,"option":"1","correct":false},{"id":1747247,"option":"2","correct":true},{"id":1747248,"option":"3","correct":false},{"id":1747249,"option":"4","correct":false}]},{"q":"<p>There is an array with a list of names of students in a class. You were asked to write a program for traversing the array and printing all the names of the array in Kotlin. But, the following code snippet is giving an error:</p>\n\n<pre class=\"prettyprint\"><code>for(name='';name&lt;size(students);name++){\n    println(name)\n}</code></pre>\n\n<p>Which of the following option is correct to get the desired output?</p>\n\n<p><em>Note: Name of the array is \"students\"</em></p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>for(name in students){\n   println(name) }</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>for(name in students){\n   println(students) }</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>for(name in 0..len(students)){\n   println(students[name]) }</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>for(name in 0..len(students)){\n   println(name) }</code></pre>\n\t</li>\n</ol>","a":[{"id":1747242,"option":"1","correct":true},{"id":1747243,"option":"2","correct":false},{"id":1747244,"option":"3","correct":false},{"id":1747245,"option":"4","correct":false}]},{"q":"<p>You are given the folllowing code to get occurences of character 'e' from the given text which is a string.</p>\n\n<pre class=\"prettyprint\"><code>fun main() {\n    val s = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\"\n//Block//\n    var counter=-1\n    for(i=0;i&lt;size(s);i++){\n       if(ch){\n          counter++\n       }\n    }\n//End of Block//\n    println(counter)\n}</code></pre>\n\n<p>But, the code is producing errors and giving incorrect output. Find the correct code snippet that can be replaced with the code in the block to get the desired output.</p>\n\n<p><strong>Code Snippet</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>var counter = 0\nvar ch='e'\nfor (c in len(s)){\n   if (c in ch) {\n      counter++ }\n}\n</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>var counter = 0\nvar ch='e'\nfor (c in len(s)){\n   if (c == ch) {\n      counter++ }\n}\n</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>var counter = 0\nvar ch='e'\nfor (c in s){\n   if (c == ch) {\n      counter++ }\n}\n</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>var counter = 0\nvar ch='e'\nfor (c in s){\n   if (c in ch) {\n      counter++ }\n}\n</code></pre>\n\t</li>\n</ol>\n\n<p>&nbsp;</p>","a":[{"id":1747238,"option":"1","correct":false},{"id":1747239,"option":"2","correct":false},{"id":1747240,"option":"3","correct":true},{"id":1747241,"option":"4","correct":false}]},{"q":"<p>You are given a pattern to be coded in Kotlin. The pattern is kind of pyramid as shown below.<br>\n<br>\n* * * * * * * * *<br>\n&nbsp; * * * * * * *<br>\n&nbsp; &nbsp; * * * * *<br>\n&nbsp; &nbsp; &nbsp; * * *<br>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;*<br>\nYou have written the following code in Kotlin:</p>\n\n<pre class=\"prettyprint\"><code>fun main(args: Array&lt;String&gt;) {\n    val x=5\n//BLOCK//\n    for(i in x downTo 1){\n      print(\"*\",\" *\")\n    }\n//END OF BLOCK//\n}</code></pre>\n\n<p>But the code mentioned above doesn't generate the pattern required. The //BLOCK// part in the code contains an error. Which of the following&nbsp;code snippet should be replaced with the //BLOCK// to get the desired output?</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>for(j in 1..x-i){\n    print(\" \")  }\nfor(k in i..2*i-1){\n    print(\"  * \") }\nfor(j in 0..i-1-1){\n     print(\"*\")   }\nprint()</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>for(j in 1..x-i){\n    print(\"  \") }\nfor(k in i..2*i-1){\n    print(\"* \")   }\nfor(j in 0..i-1-1){\n     print(\"* \")  }\nprintln()</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>for(j in 1..x){\n    print(\"  \")}\nfor(k in i..2*i){\n    print(\"*\")  }\nfor(j in 0..i-1-1){\n     print(\"*\")   }\nprint()</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>for(j in 1..x){\n    print(\"  \")}\nfor(k in i..2*i){\n    print(\"* \") }\nfor(j in 0..i-1-1){\n     print(\"* \")  }\nprintln()</code></pre>\n\t</li>\n</ol>\n\n<p>&nbsp;</p>","a":[{"id":1747234,"option":"1","correct":false},{"id":1747235,"option":"2","correct":true},{"id":1747236,"option":"3","correct":false},{"id":1747237,"option":"4","correct":false}]},{"q":"<p>What is the output of the given code snippet:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>fun main(args: Array&lt;String&gt;){\n     var x:Double=40.0\n     var q:Double\n     var s:Double=0.0\n     var a:Int=5\n     q=x\n     x=x*(3.1415/180)\n     var i=1\n     var j=1\n     while(i&lt;=a){\n       if(i%2!=0){\n         var f=1;\n      for(k in 1..j)\n      f=f*i;\n         s=s+Math.pow(x,j.toDouble())/f\n       }\n       else{\n         var f=1;\n      for(k in 1..j)\n      f=f*i;\n         s=s-Math.pow(x,j.toDouble())/f\n       }\n       i++\n       j=j+2\n      }\n      print(String.format(\"%.3f\", s))\n}\n</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1747230,"option":"0.342","correct":false},{"id":1747231,"option":"1","correct":false},{"id":1747232,"option":"0.87","correct":false},{"id":1747233,"option":"0.656","correct":true}]},{"q":"<p>What is the output of the given Kotlin code snippet:</p>\n\n<pre class=\"prettyprint\"><code>fun main(args: Array&lt;String&gt;){\n     val x=5\n     var p=0\n     var temp=0\n     var temp1=0\n     for(a in 1..x){\n        for(b in 1..x-a){\n           print(\"  \")\n           ++temp }\n        while(p!=2*a-1){\n           if(temp&lt;=x-1){\n              print((a+p).toString()+\" \")\n              ++temp  }\n           else{\n              ++temp1\n              print((a+p-2*temp1).toString() + \" \")  }\n           ++p  }\n        p=0\n        temp=p\n        temp1=temp\n        println() }\n}\n</code></pre>\n\n<p><strong>Output:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>        1 \n      2 3 2 \n    3 4 5 4 3 \n  4 5 6 7 6 5 4 \n5 6 7 8 9 8 7 6 5 </code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>        1 \n      1 3 1 \n    1 4 5 4 1 \n  1 5 6 7 6 5 1 \n1 6 7 8 9 8 7 6 1 </code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>        1 \n      2 3 2 \n    3 4 5 4 3 \n  4 5 6 8 6 5 4 \n5 6 7 8 8 8 7 6 5 </code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>        1 \n      1 3 1 \n    1 4 5 4 1 \n  1 5 6 8 6 5 1 \n1 6 7 8 8 8 7 6 1 </code></pre>\n\t</li>\n</ol>","a":[{"id":1747226,"option":"1","correct":true},{"id":1747227,"option":"2","correct":false},{"id":1747228,"option":"3","correct":false},{"id":1747229,"option":"4","correct":false}]},{"q":"<p>What is the output of the given Kotlin code snippet:</p>\n\n<pre class=\"prettyprint\"><code>fun main(args: Array&lt;String&gt;) {\n    var num=367\n    var n=num%10\n    var res:Double = 0.0\n    if(n&gt;5){\n       res=n/3.5\n    }\n    else{\n       res=n + 3.5\n    }\n    println(res)\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1747222,"option":"Error","correct":false},{"id":1747223,"option":"6.5","correct":false},{"id":1747224,"option":"2.0","correct":true},{"id":1747225,"option":"10.02","correct":false}]},{"q":"<p>What is the output of the given Kotlin code snippet:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>fun main(args: Array&lt;String&gt;) {\n    var z:Double = 120.0\n    var y =53\n    var x:Double = 12.0\n    if(y&gt;40){\n       z=x*50\n       z+=1.5*x*(y-40)\n       if(z&lt;=800){\n           z=800-z\n       }\n    }\n    else{\n       z=x*y\n    }\n    println(z)\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1747218,"option":"-34","correct":false},{"id":1747219,"option":"834","correct":true},{"id":1747220,"option":"120","correct":false},{"id":1747221,"option":"Syntax error","correct":false}]},{"q":"<p>Consider a situation where you were asked to write a program for calculating electricity bills based on the number of units consumed. If the number of units is divisible by 7, then there is a special offer saying \"no need to pay 12% of the resultant bill\". For calculation of bill, follow these conditions:</p>\n\n<ul>\n\t<li>For the first 50 units, there will be no charge</li>\n\t<li>For the next 100 units, charge 5 dollars per unit</li>\n\t<li>For remaining units, charge 15 dollars per unit</li>\n</ul>\n\n<p>Determine the correct Kotlin code-snippet from the following options in order to perform the given task:</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>fun main(args: Array&lt;String&gt;) {\n    var units=350\n    var bill:Double = 0.0\n    if(units&gt;=0 &amp;&amp; units&lt;=50){\n       bill=0.0 }\n    else if(units&lt;=100 &amp;&amp; units&gt;50){\n       bill=5.0*(units-50) }\n    else if(units&gt;100){\n       bill=500+15.0*(units-100) }\n    else{\n       bill=0.0 }\n    if(units%7==0){\n       bill=bill + 0.12*bill }\n    println(bill)\n}</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>fun main(args: Array&lt;String&gt;) {\n    var units=350\n    var bill:Double = 0.0\n    if(units&gt;=0 &amp;&amp; units&lt;=50){\n       bill=0.0 }\n    else if(units&lt;=100 &amp;&amp; units&gt;50){\n       bill=5.0*(units-50) }\n    else if(units&gt;100){\n       bill=250+15.0*(units-100) }\n    else{\n       bill=0.0 }\n    if(units%7==0){\n       bill=bill - 0.12*bill }\n    println(bill)\n}</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>fun main(args: Array&lt;String&gt;) {\n    var units=350\n    var bill:Double = 0.0\n    if(units&gt;=0 &amp;&amp; units&lt;=50){\n       bill=0.0 }\n    else if(units&lt;=150 &amp;&amp; units&gt;50){\n       bill=5.0*(units-50) }\n    else if(units&gt;150){\n       bill=250+15.0*(units-150) }\n    else{\n       bill=0.0 }\n    if(units%7==0){\n       bill=bill + 0.12*bill }\n    println(bill)\n}</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>fun main(args: Array&lt;String&gt;) {\n    var units=350\n    var bill:Double = 0.0\n    if(units&gt;=0 &amp;&amp; units&lt;=50){\n       bill=0.0 }\n    else if(units&lt;=150 &amp;&amp; units&gt;50){\n       bill=5.0*(units-50) }\n    else if(units&gt;150){\n       bill=500+15.0*(units-150) }\n    else{\n       bill=0.0 }\n    if(units%7==0){\n       bill=bill - 0.12*bill }\n    println(bill)\n}</code></pre>\n\t</li>\n</ol>","a":[{"id":1747214,"option":"1","correct":false},{"id":1747215,"option":"2","correct":false},{"id":1747216,"option":"3","correct":false},{"id":1747217,"option":"4","correct":true}]},{"q":"<p>Suppose there is an organization consisting of 100 workers. The management will pay each worker based on the number of hours they worked. If the number of hours is more than the daily limit work hours, then they pay for extra hours will be 2.5 times of usual pay. Consider daily limit is 8 hours and pay per hour is 150 dollars. The following code is written to perform the given task in Kotlin:</p>\n\n<pre class=\"prettyprint\"><code>fun main(args: Array&lt;String&gt;) {\n    var rate:Double = 150.0\n    var hours =13\n    var pay:Double = 0.0\n    pay=rate*hours\n    println(pay)\n}</code></pre>\n\n<p>But the given code produced a wrong result. Which of the following is the correct code snippet&nbsp;that is used to calculate the daily pay of workers based on hours and rate by rectifying errors in the given code?</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>var rate:Double = 150.0\nvar hours =13\nvar pay:Double = 0.0\nif(hours&gt;8){\n   pay=rate*8\n   pay+=2.5*rate*(hours-8) }\nelse{\n   pay=rate*hours }</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>var rate:Double = 150.0\nvar hours =13\nvar pay:Double = 0.0\nif(hours&lt;8){\n   pay=rate*8\n   pay+=2.5*rate*(8-hours) }\nelse{\n   pay=rate*hours }\n</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>var rate:Double = 150.0\nvar hours =13\nvar pay:Double = 0.0\nif(hours&gt;8){\n   pay=rate*8\n   pay+=rate*(hours-8)+2.5 }\nelse{\n   pay=rate*8 }\n</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>var rate:Double = 150.0    \nvar hours =13 \nvar pay:Double = 0.0    \nif(hours&gt;8){       '\n   pay=rate*8       \n   pay+=2.5*rate*(8-hours) }\nelse{\n   pay=rate*8 }</code></pre>\n\t</li>\n</ol>\n\n<p>&nbsp;</p>","a":[{"id":1747210,"option":"1","correct":true},{"id":1747211,"option":"2","correct":false},{"id":1747212,"option":"3","correct":false},{"id":1747213,"option":"4","correct":false}]},{"q":"<p>What is the output of the following Kotlin code snippet:</p>\n\n<pre class=\"prettyprint\"><code>fun main(args: Array&lt;String&gt;){\n     val x: Int = 20\n     val y: Int = 15\n     var z=x.and(y)\n     z=z.shr(2)\n     println(z)\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1747206,"option":"Error: z value cannot be reassigned","correct":false},{"id":1747207,"option":"4","correct":false},{"id":1747208,"option":"1","correct":true},{"id":1747209,"option":"16","correct":false}]},{"q":"<p>You were given a code snippet in Kotlin. In that, the variable 'a' is assigned a value, and the addition arithmetic operator is used to change the 'a' value. You have written the following code:</p>\n\n<pre class=\"prettyprint\"><code>fun main(){\n  var a=5\n  a == 10\n  println(a)\n}</code></pre>\n\n<p>The above code is giving an error. which of the following options is the correct code?</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>fun main(){\n  var a=5\n  a == 10\n  println(a)\n}</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>fun main(){\n  var a=5\n  a += 10\n  println(a)\n}</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>fun main(){\n  var a=5\n  a ++ 10\n  println(a)\n}</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>fun main(){\n  var a=5\n  a =++ 10\n  println(a)\n}</code></pre>\n\t</li>\n</ol>\n\n<p>&nbsp;</p>","a":[{"id":1747202,"option":"1","correct":false},{"id":1747203,"option":"2","correct":true},{"id":1747204,"option":"3","correct":false},{"id":1747205,"option":"4","correct":false}]}]
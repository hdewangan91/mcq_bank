[{"q":"<p>In Verilog, you are given the following code statement. Which of the following can be used in place of X in the code to represent the provided logic design correctly:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>'timescale 1ns/100ps\n'default_nettype none\nmodule circuit(A, B, C, D, E);\n       output D, E;\n       input A, B, C;\n       wire d1;\n       X\nendmodule</code></pre>\n\n<p><strong>Logic design</strong></p>\n\n<p><strong><img alt=\"\" height=\"271\" src=\"https://he-s3.s3.ap-southeast-1.amazonaws.com/media/uploads/e9b37085-9ad8-4386-b69e-c4ec110a2b32.png\" width=\"809\"></strong></p>\n\n<p> </p>","a":[{"id":1210898,"option":"and #(50) G1 (d1, A, B);\r\nnot #(20) G2 (E, B);\r\nor #(30) G3 (D, d1, E);","correct":false},{"id":1210899,"option":"and #(50) G1 (d1, A, B);\r\nnot #(20) G2 (d1, C);\r\nor #(30) G3 (D, d1, E);","correct":false},{"id":1210900,"option":"and #(50) G1 (d1, A, B);\r\nnot #(20) G2 (E, C);\r\nor #(30) G3 (D, d1, E);","correct":true},{"id":1210901,"option":"or #(50) G1 (d1, A, B);\r\nnot #(20) G3 (E, C);\r\nand #(30) G2 (D, d1, E);","correct":false}]},{"q":"<p>In VHDL, you are given the following buffer model with a single input A and a single output B. The waveform corresponding to the buffer is given in the following diagram.</p>\n\n<p>From the waveform, the buffer predicts a new event of 0 value on B at <span class=\"mathjax-latex\">\\(40\\ ns\\)</span>. Also, the event scheduled on B at <span class=\"mathjax-latex\">\\(30\\ ns\\)</span> has still not occurred. This causes a clash and the simulator preempts the event to <span class=\"mathjax-latex\">\\(30\\ ns\\)</span>. Which of these describe the reason for this preemption?</p>\n\n<p><strong>Buffer model</strong></p>\n\n<p><strong><img alt=\"\" height=\"164\" src=\"https://he-s3.s3.ap-southeast-1.amazonaws.com/media/uploads/d241cfba-da9c-4afa-ade1-538a7a108a17.png\" width=\"388\"></strong></p>\n\n<p><strong>Waveform</strong></p>\n\n<p><strong><img alt=\"\" height=\"280\" src=\"https://he-s3.s3.ap-southeast-1.amazonaws.com/media/uploads/b5819061-59f6-49fd-ab72-813f2a33b8c7.png\" width=\"580\"></strong></p>\n\n<p><strong>Reasons</strong></p>\n\n<ol>\n\t<li>The effect of the preemption causes the pulse to be raised to value 1 because, according to the inertial delay model, the first event at <span class=\"mathjax-latex\">\\(40\\ ns\\)</span> exceeded its time limit to match the time of the output signal. </li>\n\t<li>The effect of the preemption causes the pulse to be swallowed because, according to the inertial delay model, the first event at <span class=\"mathjax-latex\">\\(30\\ ns\\)</span> did not have enough time to overcome the inertia of the output signal. </li>\n\t<li>The effect of the preemption causes the pulse to become flat with value x because, according to the inertial delay model, the first event at <span class=\"mathjax-latex\">\\(30\\ ns\\)</span> did not have enough time to overcome the inertia of the input signal.</li>\n\t<li>The effect of the preemption causes the pulse to be swallowed because, according to the inertial delay model, the first event at <span class=\"mathjax-latex\">\\(40\\ ns\\)</span> did not have enough time to overcome the inertia of the input signal. </li>\n</ol>","a":[{"id":1212585,"option":"1","correct":false},{"id":1212586,"option":"2","correct":true},{"id":1212587,"option":"3","correct":false},{"id":1212588,"option":"4","correct":false}]},{"q":"<p>In Verilog, which of these diagrams are represented in the following code:</p>\n\n<pre class=\"prettyprint\"><code>module design(out, a, b);\noutput out;\ninput a,b;\nwire c;\nsupply1 pwr;\nsupply0 gnd;\npmos(c, pwr, b);\npmos(out, c, a);\nnmos (out, gnd, a);\nnmos(out, gnd, b);\nendmodule\n</code></pre>\n\n<p><strong>Diagrams</strong></p>\n\n<ol>\n\t<li><strong><img alt=\"\" height=\"585\" src=\"https://he-s3.s3.ap-southeast-1.amazonaws.com/media/uploads/a95f82c8-17ab-4007-8f86-b04e2618ec76.png\" width=\"557\"></strong></li>\n\t<li><strong><img alt=\"\" height=\"585\" src=\"https://he-s3.s3.ap-southeast-1.amazonaws.com/media/uploads/3942ba3b-ba40-4f8c-9958-32fe1fd516f3.png\" width=\"573\"></strong></li>\n\t<li><strong><img alt=\"\" height=\"593\" src=\"https://he-s3.s3.ap-southeast-1.amazonaws.com/media/uploads/9fbf46c0-84bc-40e7-be9d-2036f96f8335.png\" width=\"541\"></strong></li>\n</ol>","a":[{"id":1212701,"option":"1","correct":true},{"id":1212702,"option":"2","correct":false},{"id":1212703,"option":"3","correct":false},{"id":1212704,"option":"None of these","correct":false}]},{"q":"<p>Which of the following are key properties of a Hardware Descriptive Language (HDL):</p>\n\n<ol>\n\t<li>It encapsulates the concepts of connectivity, concurrency, entity, and timing.</li>\n\t<li>It consists of constructs for structural implementations, behavioral descriptions, and hierarchical design processes.</li>\n\t<li>It contains the description of the operations and structures only in the gate level.</li>\n</ol>\n\n<p> </p>","a":[{"id":1210882,"option":"1 and 2","correct":true},{"id":1210883,"option":"2 and 3","correct":false},{"id":1210884,"option":"1 and 3","correct":false},{"id":1210885,"option":"All of these","correct":false}]},{"q":"<p>In HDL, which of the following statements about <strong>Verilog</strong> are correct:</p>\n\n<ol>\n\t<li>It uses a four-value logic—0, 1, True, x. Here, x represents the output that is computed but cannot be displayed because of its large value.</li>\n\t<li>It uses a four-value logic—0, 1, z, None. Here, z represents a high-impedance value.</li>\n\t<li>It uses a four-value logic—0, 1, x, y. Here, x represents the output that Verilog is unable to compute and z represents a high-impedance value. </li>\n\t<li>x AND 1=x but x AND 0=0</li>\n</ol>","a":[{"id":1210894,"option":"1 and 2","correct":false},{"id":1210895,"option":"2 and 3","correct":false},{"id":1210896,"option":"3 and 4","correct":true},{"id":1210897,"option":"1 and 4","correct":false}]},{"q":"<p>The following syntax represents the <strong>wait</strong> statement in VHDL. Which of these statements about this scenario are correct?</p>\n\n<p><strong>Syntax</strong></p>\n\n<pre class=\"prettyprint\"><code>process\n     wait until expression;\n     .\n     .\n     .\nend process;</code></pre>\n\n<p><strong>Statements</strong></p>\n\n<ol>\n\t<li>No process sensitivity list is required or allowed when it is used in a concurrent process.</li>\n\t<li>No process sensitivity list is required or allowed when it is used in a sequential process.</li>\n\t<li>It can be used only in synthesizable designs.</li>\n\t<li>It must be located at the beginning or the end of a process.</li>\n\t<li>It starts the evaluation of an event and then evaluates that event to False.</li>\n</ol>","a":[{"id":1212473,"option":"1 and 4","correct":false},{"id":1212474,"option":"2 and 4","correct":true},{"id":1212475,"option":"3 and 4","correct":false},{"id":1212476,"option":"3 and 5","correct":false}]},{"q":"<p> In VHDL, you want to represent a rise and fall delay using the pre-defined type <strong>time</strong> and give this delay a default value of <span class=\"mathjax-latex\">\\(5\\ ns\\)</span> in the following code snippet. Which of these statements must be used in place of X in this scenario:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>library my_lib;\nuse my_lib.example_arithmetic.all;\n\nentity ent is\n     X\n     port (a0,a1,b0,b1 : in small_int; c0,c1 : out small_int);\nend ent;</code></pre>\n\n<p> </p>\n\n<p> </p>","a":[{"id":1210902,"option":"port (t_rise, time:= 5 ns: t_fall);","correct":false},{"id":1210903,"option":"generic (t_rise, t_fall: time:= 5 ns);","correct":true},{"id":1210904,"option":"my_prog (t_fall, t_rise: time:= 5 ns);","correct":false},{"id":1210905,"option":"generic (time:= 5 ns);","correct":false}]},{"q":"<p>In VHDL, which of the following concurrent assignments is represented in Code 1 and Code 2?</p>\n\n<p><strong>Code 1</strong></p>\n\n<pre class=\"prettyprint\"><code>entity control_st is \n     port (a, b, c: in Boolean; m: out Boolean);\nend control_st;\n\narchitecture example of control_st is\nbegin\n    m &lt;= b when a else c;\nend example;</code></pre>\n\n<p><strong>Code 2</strong></p>\n\n<pre class=\"prettyprint\"><code>entity control_st is \n    port (sel: bit_vector (0 to 1); a,b,c,d: bit;\n    m: out bit);\nend control_st;\n\narchitecture example of control_st is\nbegin\n    with sel select\n        m &lt;= c when b\"00\",\n        m &lt;= d when b\"01\",\n        m &lt;= a when b\"10\",\n        m &lt;= b when others;\nend example;</code></pre>\n\n<p> </p>","a":[{"id":1210906,"option":"Code 1: Conditional signal \r\nCode 2: Selected signal","correct":true},{"id":1210907,"option":"Code 1: Selected signal\r\nCode 2: Conditional signal ","correct":false},{"id":1210908,"option":"Code 1: Nested conditional signal \r\nCode 2: Nested selected signal","correct":false},{"id":1210909,"option":"None of these","correct":false}]},{"q":"<p>In HDL, you are given code that represents the structural form of a network logic. Which of the following network logic is computed in this code?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>or or1(z, x1, x2, x3, x4);\nand and1(x1,a,b);\nand and2(x2,a,c);\nnot not1(na,a);\nnot not2(ne,e);\nand and3(x3,na,d);\nand and4(x4,ne,d);</code></pre>\n\n<p> </p>","a":[{"id":1210886,"option":"z = a.b +a.c+ad+ed","correct":false},{"id":1210887,"option":"z = a.b' +a'.c+ad+ed","correct":false},{"id":1210888,"option":"z = a.b +a.c+a'd+e'd","correct":true},{"id":1210889,"option":"z = a.b +a.c'+a'd+ed'","correct":false}]},{"q":"<p>What do the following numbers represent in Verilog:</p>\n\n<ol>\n\t<li>'h08FF </li>\n\t<li>3'b10x </li>\n\t<li>-4'b11 </li>\n</ol>","a":[{"id":1210890,"option":"1. 8-bit hexadecimal number\r\n2. 3-bit decimal number \r\n3. 4-bit two's complement negation of binary number 14 (1110)","correct":false},{"id":1210891,"option":"1. 16-bit hexadecimal number\r\n2. 3-bit binary number with least significant bit unknown or don't care\r\n3. 4-bit two's complement negation of binary number 11 (1101)","correct":true},{"id":1210892,"option":"1. 8-bit hexadecimal number\r\n2. 3-bit binary number with least significant bit unknown or don't care\r\n3. 8-bit two's complement negation of binary number 11 (1101)","correct":false},{"id":1210893,"option":"1. 16-bit hexadecimal number\r\n2. 3-bit binary number with least significant bit unknown or don't care\r\n3. 4-bit two's complement negation of binary number 12 (1100)","correct":false}]}]
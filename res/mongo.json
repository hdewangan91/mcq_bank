[{"q":"<p>In a company's database called 'compDB' there is a collection named 'employees' with the information of employee name, age, department, and salary as shown below.</p>\n\n<pre class=\"prettyprint\"><code>{ \"_id\" : 1, \"name\" : { \"first\" : \"Alice\", \"last\" : \"Smith\" }, \"gender\" : \"F\", \"dept\" : \"A\", \"age\" : 20, \"salary\" : 100000 }\n{ \"_id\" : 2, \"name\" : { \"first\" : \"Bob\", \"last\" : \"Jones\" }, \"gender\" : \"M\", \"dept\" : \"A\", \"age\" : 23, \"salary\" : 200000 }\n{ \"_id\" : 3, \"name\" : { \"first\" : \"Ben\", \"last\" : \"Johnson\" }, \"gender\" : \"M\", \"dept\" : \"B\", \"age\" : 19, \"salary\" : 250000 }\n{ \"_id\" : 4, \"name\" : { \"first\" : \"Mike\", \"last\" : \"White\" }, \"gender\" : \"M\", \"dept\" : \"C\", \"age\" : 18, \"salary\" : 150000 }\n{ \"_id\" : 5, \"name\" : { \"first\" : \"Tara\", \"last\" : \"Green\" }, \"gender\" : \"F\", \"dept\" : \"B\", \"age\" : 22, \"salary\" : 90000 }\n{ \"_id\" : 6, \"name\" : { \"first\" : \"Anita\", \"last\" : \"Williams\" }, \"gender\" : \"F\", \"dept\" : \"D\", \"age\" : 24, \"salary\" : 85000 }\n{ \"_id\" : 7, \"name\" : { \"first\" : \"Lisa\", \"last\" : \"Davis\" }, \"gender\" : \"F\", \"dept\" : \"E\", \"age\" : 23, \"salary\" : 300000 }</code></pre>\n\n<p>You want to create a new collection named 'empSalary' in the 'empData' database from the data currently in the 'employees' collection in 'compDB'. In order to do that you have to write a query to get the following output:</p>\n\n<p><strong>Collection:</strong> empSalary (database: empData)</p>\n\n<p>{ \"_id\" : { \"dept\" : \"C\" }, \"salaries\" : 150000 }<br>\n{ \"_id\" : { \"dept\" : \"B\" }, \"salaries\" : 340000 }<br>\n{ \"_id\" : { \"dept\" : \"D\" }, \"salaries\" : 85000 }<br>\n{ \"_id\" : { \"dept\" : \"A\" }, \"salaries\" : 300000 }<br>\n{ \"_id\" : { \"dept\" : \"E\" }, \"salaries\" : 300000 }</p>\n\n<p>Which of the following query can be performed in the above scenario?</p>\n\n<p><strong>Query</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>db.employees.aggregate( [\n   {group: { _id: { first: \"$first\", last: \"$last\", dept: \"$dept\" }, salaries: { sum: \"$salary\" } }},\n   {join : { into: { db: \"empData\", coll: \"empSalary\" }}} ] )</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>db.employees.aggregate( [\n   {$group: { _id: { first: \"$first\", last: \"$last\", dept: \"$dept\" }, salaries: { $sum: \"$salary\" } }},\n   {$merge : { into: { db: \"empData\", coll: \"empSalary\" }, on: \"_id\",  whenMatched: \"replace\", whenNotMatched: \"insert\" }} ] )</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>db.employees.join( [\n   {group: { _id: { first: \"first\", last: \"last\", dept: \"dept\" }, salaries: { sum: \"salary\" } }},\n   {merge : { into: { db: \"empData\", coll: \"empSalary\" }, on: \"_id\", whenMatched: \"replace\", whenNotMatched: \"insert\" }} ] )</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>db.employees.join( [\n   {$group: { _id: { first: \"$first\", last: \"$last\", dept: \"$dept\" }, salaries: { sum: \"$salary\" } }},\n   {$merge : { into: { db: \"empData\", coll: \"empSalary\" }}} ] )</code></pre>\n\n<p> </p>","a":[{"id":1650504,"option":"1","correct":false},{"id":1650506,"option":"2","correct":true},{"id":1650508,"option":"3","correct":false},{"id":1650509,"option":"4","correct":false}]},{"q":"<p>Alice went to a book shop to buy some novels. The book shop has a collection of classic novels and the information of these novels is stored in a collection called 'novels' in a database 'library' as shown below.</p>\n\n<pre class=\"prettyprint\"><code>{ \"_id\" : ObjectId(\"611cb43926fad8b0c2d596d1\"), \"book_name\" : \"Catcher in the Rye\", \"author\" : \"J.D. Salinger\", \"score\" : 95, \"views\" : 500 }\n{ \"_id\" : ObjectId(\"611cb43926fad8b0c2d596d2\"), \"book_name\" : \"The Great Gatsby\", \"author\" : \"F. Scott Fitzgerald\", \"score\" : 85, \"views\" : 302 }\n{ \"_id\" : ObjectId(\"611cb43926fad8b0c2d596d3\"), \"book_name\" : \"War and Peace\", \"author\" : \"Leo Tolstoy\", \"score\" : 80, \"views\" : 250 }\n{ \"_id\" : ObjectId(\"611cb43926fad8b0c2d596d4\"), \"book_name\" : \"Hamlet\", \"author\" : \"William Shakespeare\", \"score\" : 92, \"views\" : 460 }\n{ \"_id\" : ObjectId(\"611cb43926fad8b0c2d596d5\"), \"book_name\" : \"The Odyssey\", \"author\" : \"Homer\", \"score\" : 70, \"views\" : 200 }\n{ \"_id\" : ObjectId(\"611cb43926fad8b0c2d596d6\"), \"book_name\" : \"Wuthering Heights\", \"author\" : \"Emily Brontë\", \"score\" : 88, \"views\" : 360 }\n{ \"_id\" : ObjectId(\"611cb43926fad8b0c2d596d7\"), \"book_name\" : \"Pride and Prejudice\", \"author\" : \"Jane Austen\", \"score\" : 99, \"views\" : 700 }</code></pre>\n\n<p>She wants to count the number of books whose score is either greater than or equal to 80 and less than 90, or the number of views on books is greater than or equal to 250. Which of the following queries can be performed in the above scenario?</p>\n\n<p><strong>Query</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>db.novels.aggregate( [\n  { $find: { { score: { $gte: 80, $lt: 90 } } $or  { views: { $gt: 250 } } } },\n  { $group: { count: { $sum: 1 } } }\n] );</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>db.novels.aggregate( [\n  { $match: {  { score: { $gte: 80, $lt: 90 } } $or { views: { $gte: 250 } }  } },\n  { $group: { count: { $sum: 1 } } }\n] );</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>db.novels.aggregate( [\n  { $match: { $or: [ { score: { $gte: 80, $lt: 90 } }, { views: { $gte: 250 } } ] } },\n  { $group: { _id: null, count: { $sum: 1 } } }\n] );</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>db.novels.aggregate( [\n  { $find: { $or: [{ score: { $gte: 80, $lt: 90 } } ,  { views: { $gte: 250 } }] } },\n  { $group: { count: { $sum: 1 } } }\n] );</code></pre>\n\n<p> </p>","a":[{"id":1650231,"option":"1","correct":false},{"id":1650232,"option":"2","correct":false},{"id":1650233,"option":"3","correct":true},{"id":1650234,"option":"4","correct":false}]},{"q":"<p>You have a collection named 'courses' in a database called 'learning'. The collection has numerous documents containing information on different courses archived in it. The snapshot for a few documents from this collection is given below.</p>\n\n<pre class=\"prettyprint\"><code>{ \"_id\" : ObjectId(\"611bb7e10f5dd08eda4b59e7\"), \"name\" : \"MongoDB\", \"course_duration\" : \"20hr\" }\n{ \"_id\" : ObjectId(\"611bb7e10f5dd08eda4b59e8\"), \"name\" : \"SQL\", \"course_duration\" : \"25hr\" }</code></pre>\n\n<p>A user wants to retrieve some information using a database query. He had to scan every document in a collection, to select those documents that match the query statement. How can he perform the efficient execution of queries in the above scenario? </p>\n\n<p> </p>","a":[{"id":1649857,"option":"db.courses.find().sort( { name: -1 } )","correct":false},{"id":1649858,"option":"db.courses.newIndex( { name: -1 } )","correct":false},{"id":1649859,"option":"db.courses.createIndex( { name: -1 } )","correct":true},{"id":1649860,"option":"db.courses.find( { $orderby: { name : -1 } } )","correct":false}]},{"q":"<p>Bob has a collection named 'shoes' in a database 'shopDB'. He wants to perform a transaction to insert the below document in a collection.</p>\n\n<p>{ \"type\" : \"Sneakers\", \"qty\" : 15, \"color\" : [ \"black\", \"white\" ], \"size\" : { \"UK\" : 7, \"US\" : 8, \"EURO\" : 41, \"footlength\" : 27.3 } }</p>\n\n<p>He wants to start a transaction for the session that uses read concern \"snapshot\" and write concern \"majority\". How can Bob perform the transaction to insert the above document in a collection 'shoes'? Which of the following queries can be performed in the above scenario and successfully commit the transaction?</p>\n\n<p><strong>Queries</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>session = db.mongo().startSession( { readPreference: { mode: \"primary\" }, writeConcern: { w: \"majority\" } } );\n\nmyShoesCollection = session.getDB(\"shopDB\").shoes;\n\nsession.startTransaction( { readConcern: { level: \"snapshot\" }, writeConcern: { w: \"majority\" } } );\n\n myShoesCollection.insert( {\n \"type\" : \"Sneakers\",\n \"qty\" : 15,\n \"color\" : [ \"black\", \"white\" ],\n \"size\" : { \"UK\" : 7, \"US\" : 8, \"EURO\" : 41, \"footlength\" : 27.3 }\n} );\n\nsession.commit();\n\nsession.endSession();</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>session = db.mongo().startSession( { readPreference: { mode: \"primary\" }, writeConcern: { w: \"majority\" } } );\n\nmyShoesCollection = session.database(\"shopDB\").shoes;\n\nsession.startTransaction( { readConcern: {  \"snapshot\" }, writeConcern: { \"majority\" } } );\n\n myShoesCollection.insert( {\n \"type\" : \"Sneakers\",\n \"qty\" : 15,\n \"color\" : [ \"black\", \"white\" ],\n \"size\" : { \"UK\" : 7, \"US\" : 8, \"EURO\" : 41, \"footlength\" : 27.3 }\n} );\n\nsession.commitTransaction();\n\nsession.endSession();</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>session = db.getMongo().startSession( { readPreference: { mode: \"primary\" }, writeConcern: { w: \"majority\" } } );\n\nmyShoesCollection = session.getDatabase(\"shopDB\").shoes;\n\nsession.startTransaction( { readConcern: { level: \"snapshot\" }, writeConcern: { w: \"majority\" } } );\n\n myShoesCollection.insert( {\n \"type\" : \"Sneakers\",\n \"qty\" : 15,\n \"color\" : [ \"black\", \"white\" ],\n \"size\" : { \"UK\" : 7, \"US\" : 8, \"EURO\" : 41, \"footlength\" : 27.3 }\n} );\n\nsession.commitTransaction();\n\nsession.endSession();</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>session = db.getMongo().beginSession( { readPreference: { mode: \"primary\" }, writeConcern: { w: \"majority\" } } );\n\nmyShoesCollection = session.getDatabase(\"shopDB\").shoes;\n\nsession.startTransaction( { readConcern: { level: \"snapshot\" }, writeConcern: { w: \"majority\" } } );\n\n myShoesCollection.insert( [\n \"type\" : \"Sneakers\",\n \"qty\" : 15,\n \"color\" : [ \"black\", \"white\" ],\n \"size\" : { \"UK\" : 7, \"US\" : 8, \"EURO\" : 41, \"footlength\" : 27.3 }\n] );\n\nsession.commit();\n\nsession.endTransaction();</code></pre>\n\n<p> </p>","a":[{"id":1649682,"option":"1","correct":false},{"id":1649683,"option":"2","correct":false},{"id":1649684,"option":"3","correct":true},{"id":1649685,"option":"4","correct":false}]},{"q":"<p>You have a data model that resembles a tree-like structure in MongoDB documents as shown. Each tree node in a document stores the id of node's \"parent\", the node's initial stop in the \"left\" field, and its return stop in the \"right\" field. You need to write a query to retrieve the descendants of a node</p>\n\n<pre class=\"prettyprint\"><code>db.categories.insertMany( [\n   { _id: \"Subjects\", parent: 0, left: 1, right: 12 },\n   { _id: \"Programming\", parent: \"Books\", left: 2, right: 11 },\n   { _id: \"Languages\", parent: \"Programming\", left: 3, right: 4 },\n   { _id: \"Databases\", parent: \"Programming\", left: 5, right: 10 },\n   { _id: \"MongoDB\", parent: \"Databases\", left: 6, right: 7 },\n   { _id: \"SQL\", parent: \"Databases\", left: 8, right: 9 }\n] )</code></pre>\n\n<p>Which of the following queries can perform the above scenario?</p>\n\n<p><strong>Queries</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>var dbCategory = db.categories.findOne( { _id: \"Databases\" } );\ndb.categories.find( {$descendants :{ left: { $gt: dbCategory.left }, right: { $lt: dbCategory.right } } } );</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>var dbCategory = db.categories.findOne( { _id: \"Databases\" } );\ndb.categories.find( { $descendants: [ dbCategory.left , dbCategory.right ] } );</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>var dbCategory = db.categories.findOne( { _id: \"Databases\" } );\ndb.categories.find( { left: { dbCategory.left }, right: { dbCategory.right } } );</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>var dbCategory = db.categories.findOne( { _id: \"Databases\" } );\ndb.categories.find( { left: { $gt: dbCategory.left }, right: { $lt: dbCategory.right } } );</code></pre>\n\n<p> </p>","a":[{"id":1649670,"option":"1","correct":false},{"id":1649671,"option":"2","correct":false},{"id":1649672,"option":"3","correct":false},{"id":1649673,"option":"4","correct":true}]},{"q":"<p>You have a collection 'employees' in a company's database as shown below. You need to find the employment type for every employee based on the following conditions. If the salary of the employee is less than 50000 then the 'emp_type' of that employee is 'INTERN' and if the salary of the employee is greater than or equal to 50000 then 'emp_type' is Full Time 'FTE'. You have to write a query to display  'emp_name' and 'emp_type' .</p>\n\n<p><strong>Collection:</strong> employees </p>\n\n<p>{ \"_id\" : ObjectId(\"61166f60126b3df0e7da57a5\"), \"emp_id\" : 4109, \"emp_name\" : \"Alice Smith\", \"salary\" : 50000 }        <br>\n{ \"_id\" : ObjectId(\"61166f60126b3df0e7da57a6\"), \"emp_id\" : 7612, \"emp_name\" : \"Bob Jones\", \"salary\" : 10000 }<br>\n{ \"_id\" : ObjectId(\"61166f60126b3df0e7da57a7\"), \"emp_id\" : 1245, \"emp_name\" : \"Tara Green\", \"salary\" : 90000 }<br>\n{ \"_id\" : ObjectId(\"61166f60126b3df0e7da57a8\"), \"emp_id\" : 5002, \"emp_name\" : \"Paul Miller\", \"salary\" : 60000 }        <br>\n{ \"_id\" : ObjectId(\"61166f60126b3df0e7da57a9\"), \"emp_id\" : 2435, \"emp_name\" : \"Ben Johnson\", \"salary\" : 40000 }        </p>\n\n<p>Which of the folllowing query can you perform to implement the above scenario?</p>\n\n<p><strong>Query:</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>db.employees.aggregate([{\n $project:{\n emp_id: 1,\n emp_type:{$cond: { if: { $gte: [ \"$salary\", 50000 ] }, then: \"FTE\", else: \"INTERN\" }}\n}}])</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>db.employees.aggregate([{\n $project:{\n emp_name: 1,\n emp_type:{cond: { if: { $gt: [ \"salary\", 50000 ] }, then: \"FTE\", else: \"INTERN\" }}\n}}])</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>db.employees.aggregate([{\n $project:{\n emp_name: 1,\n emp_type:{$cond: { if: { $gte: [ \"$salary\", 50000 ] }, then: \"FTE\", else: \"INTERN\" }}\n}}])</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>db.employees.aggregate([{\n $project:{\n emp_name: 1,\n emp_type:{cond: { if: { $gt: [ \"$salary\", 50000 ] }, then: \"FTE\", else: \"INTERN\" }}\n}}])</code></pre>\n\n<p> </p>","a":[{"id":1643887,"option":"1","correct":false},{"id":1643888,"option":"2","correct":false},{"id":1643889,"option":"3","correct":true},{"id":1643890,"option":"4","correct":false}]},{"q":"<p>You have two collections 'people' and 'sports' in a sports academy database 'sportsDB' as shown below.</p>\n\n<p><strong>Collections: </strong></p>\n\n<p>people</p>\n\n<p>{ \"_id\" : ObjectId(\"611663b8bad18d25fa2ccb36\"), \"stud_id\" : 1, \"name\" : \"Alice\", \"std\" : 7, \"div\" : \"B\" }<br>\n{ \"_id\" : ObjectId(\"611663b8bad18d25fa2ccb37\"), \"stud_id\" : 2, \"name\" : \"Bob\", \"std\" : 5, \"div\" : \"A\" }<br>\n{ \"_id\" : ObjectId(\"611663b8bad18d25fa2ccb38\"), \"stud_id\" : 3, \"name\" : \"Tara\", \"std\" : 8, \"div\" : \"B\" }<br>\n{ \"_id\" : ObjectId(\"611663b8bad18d25fa2ccb39\"), \"stud_id\" : 4, \"name\" : \"Mike\", \"std\" : 9, \"div\" : \"C\" } </p>\n\n<p>sports</p>\n\n<p>{ \"_id\" : ObjectId(\"611663c1bad18d25fa2ccb3a\"), \"sport_id\" : 21, \"winner\" : \"Alice\", \"sport\" : \"Badminton\" }<br>\n{ \"_id\" : ObjectId(\"611663c1bad18d25fa2ccb3b\"), \"sport_id\" : 34, \"winner\" : \"Mike\", \"sport\" : \"Carrom\" }<br>\n{ \"_id\" : ObjectId(\"611663c1bad18d25fa2ccb3c\"), \"sport_id\" : 60, \"winner\" : \"Tara\", \"sport\" : \"Tennis\" }<br>\n{ \"_id\" : ObjectId(\"611663c1bad18d25fa2ccb3d\"), \"sport_id\" : 40, \"winner\" : \"Bob\", \"sport\" : \"Chess\" }</p>\n\n<p>You want to join these two collections based on the matching field between them. Store the result of join in a new field 'prizes'. Which of the following queries will you perform in the above scenario?</p>\n\n<p><strong>Queries</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>db.people.aggregate([{\n $lookup:{\n from : \"sport\",\n $where : \"name\",\n $match : \"winner\",\n as : \"prizes\"\n }\n}] )</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code> db.people.aggregate([{\n $mergeFields:{\n from : \"sport\",\n $where : \"name\",\n $match : \"winner\",\n as : \"prizes\"\n }\n}] )</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>db.people.aggregate([{\n $merge:{\n from : \"sport\",\n localField : \"name\",\n foreignField : \"winner\",\n as : \"prizes\"\n }\n}] )</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>db.people.aggregate([{\n $lookup:{\n from : \"sport\",\n localField : \"name\",\n foreignField : \"winner\",\n as : \"prizes\"\n }\n}])</code></pre>\n\n<p> </p>","a":[{"id":1643883,"option":"1","correct":false},{"id":1643884,"option":"2","correct":false},{"id":1643885,"option":"3","correct":false},{"id":1643886,"option":"4","correct":true}]},{"q":"<p>Alice is working in the security department in a company. She needs to add a new user in the 'employees' database to assign a role to the new user. Create a user 'taragreen10'. Allow the database read access to this user using a password string 'password@123'. Then which of the following operations she can perform to implement the above scenario?</p>\n\n<p><strong>Operations</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>use employees\ndb.createUser(\n  {\n    user: \"taragreen10\",\n    pwd: \"password@123\",\n    roles: [\n       { role: \"r\", db: \"employees\" }\n]}</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>use employees\ndb.createNewUser(\n  {\n    user: \"taragreen10\",\n    pwd: \"\"password@123,\n    roles: [\n       { role: \"r\", db: \"employees\" }\n]}</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>use employees\ndb.createUser(\n  {\n    user: \"taragreen10\",\n    pwd: \"\"password@123,\n    roles: [\n       { role: \"read\", db: \"employees\" }\n]}</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>use employees\ndb.createNewUser(\n  {\n    user: \"taragreen10\",\n    pwd: \"\"password@123,\n    roles: [\n       { role: \"read\", db: \"employees\" }\n]}</code></pre>\n\n<p> </p>","a":[{"id":1640275,"option":"1","correct":false},{"id":1640276,"option":"2","correct":false},{"id":1640277,"option":"3","correct":true},{"id":1640278,"option":"4","correct":false}]},{"q":"<p>Bob has created a new collection<strong> </strong><em>shoes</em><strong> </strong>in a database 'shopDB'. The collection has numerous documents in it. The snapshot for one of its documents is given below. For faster querying on the data, he needs to apply an index to the collection.</p>\n\n<p><strong>Document</strong></p>\n\n<pre class=\"prettyprint\"><code>{\n \"_id\" : ObjectId(\"61150aecc3c85b54beefd6b0\"),\n \"type\" : \"Sneakers\",\n \"qty\" : 15,\n \"color\" : [ \"black\", \"red\", \"blue\", \"gray\", \"white\" ],\n \"size\" : { \"UK\" : 6, \"US\" : 7, \"EURO\" : 40, \"footlength\" : 26.3 } \n}</code></pre>\n\n<p>Queries might be used against any of the attributes in 'size' subdocument. To optimize performance, Bob needs to create a separate index on each attribute. How can he do that?</p>","a":[{"id":1640271,"option":"db.collection.createIndex({\"size\":1});","correct":false},{"id":1640272,"option":"db.collection.createIndex({\"size.$**\":1});","correct":true},{"id":1640273,"option":"db.collection.createIndex({\"*size.*\":1});","correct":false},{"id":1640274,"option":"db.collection.createIndex({\"$**.size\":1});","correct":false}]},{"q":"<p>You have a tree of documents from a collection 'items' inside a 'shop' database. The relationship between the documents is modeled using the materialized path patterns. You have to find the descendants of 'Electronics' using the regular expressions.</p>\n\n<p><strong>Collection: </strong>items</p>\n\n<pre class=\"prettyprint\"><code>{ \"_id\" : ObjectId(\"6114e99ac3c85b54beefd6aa\"), \"item\" : \"Products\", \"category\" : null }\n{ \"_id\" : ObjectId(\"6114e99ac3c85b54beefd6ab\"), \"item\" : \"Electronics\", \"category\" : \"Products\" }\n{ \"_id\" : ObjectId(\"6114e99ac3c85b54beefd6ac\"), \"item\" : \"TV\", \"category\" : \"Products, Electronics\" }\n{ \"_id\" : ObjectId(\"6114e99ac3c85b54beefd6ad\"), \"item\" : \"Computers\", \"category\" : \"Products, Electronics\" }\n{ \"_id\" : ObjectId(\"6114e99ac3c85b54beefd6ae\"), \"item\" : \"Laptop\", \"category\" : \"Products, Electronics, Computers\" }</code></pre>\n\n<p>Which of the following query can be performed in the above scenario?</p>","a":[{"id":1639579,"option":"db.items.find( { category: Electronics} )","correct":false},{"id":1639580,"option":"db.items.find( { category: *\\Electronics\\ } )","correct":false},{"id":1639581,"option":"db.items.find( { category: /Electronics/ } )","correct":true},{"id":1639582,"option":" db.items.find( { category: \\Electronics*\\ } )","correct":false}]},{"q":"<p>You have two collections 'student' and 'course' in a 'school' database as given below. Whenever a student enrolls in a course, the same information will get reflected in the 'student' collection. You need to update a collection 'student', create a new property 'enrolled_in' in that collection, refer to the '' of collection 'courses' using the name 'course_id' inside a collection 'student' and view the collection 'student' to verify the linking.</p>\n\n<p><strong>Collection:</strong> student</p>\n\n<p>{ \"_id\" : ObjectId(\"6114e0d1dc8487c288da2fab\"), \"name\" : \"Lisa Davis\", \"status\" : \"Y\" }</p>\n\n<p><strong>Collection:</strong> courses</p>\n\n<p>{ \"_id\" : ObjectId(\"6114e0d2dc8487c288da2fac\"), \"course_name\" : \"MongoDB\", \"duration\" : \"54hr\" }</p>\n\n<p>Which of the following query can implement the above scenario and link both collections dynamically?</p>\n\n<p><strong>Queries</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use school\n&gt; db.student.updateMany({$set:{enrolled_in:[{course_id: ObjectId(\"6114e0d2dc8487c288da2fac\")}]}})\n&gt; db.student.find().pretty()</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use school\n&gt; db.student.updateMany({}, {$set:{enrolled_in:[{course_id: courses.ObjectId(\"6114e0d2dc8487c288da2fac\")}]}})\n&gt; db.student.find().pretty()</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>​&gt; use school\n&gt; db.student.updateOne({}, {$set:{enrolled_in:[{course_id: courses.ObjectId(\"6114e0d2dc8487c288da2fac\")}]}})\n&gt; db.student.find().pretty()\n\n​</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use school\n&gt; db.student.updateOne({}, {$set:{enrolled_in:[{course_id: ObjectId(\"6114e0d2dc8487c288da2fac\")}]}})\n&gt; db.student.find().pretty()</code></pre>","a":[{"id":1639575,"option":"1","correct":false},{"id":1639576,"option":"2","correct":false},{"id":1639577,"option":"3","correct":false},{"id":1639578,"option":"4","correct":true}]},{"q":"<p>You have a collection 'products' with items given below in a database 'shop'. You need to find the items and amount spent by customers 'Bob', 'Lisa' and 'Anita' and arrange the result in descending order. </p>\n\n<p><strong>Collection: </strong>products</p>\n\n<pre class=\"prettyprint\"><code>{ \"_id\" : ObjectId(\"6114c51c28c156d47239805d\"), \"items\" : [ \"Oximeter\" ], \"price\" : 100, \"customer_name\" : \"Bob\" }\n{ \"_id\" : ObjectId(\"6114c51c28c156d47239805e\"), \"items\" : [ \"Mask\", \"Sanitizer\" ], \"price\" : 200, \"customer_name\" : \"Ben\" }\n{ \"_id\" : ObjectId(\"6114c51c28c156d47239805f\"), \"items\" : [ \"Oximeter\", \"Mask\" ], \"price\" : 150, \"customer_name\" : \"Lisa\" }{ \"_id\" : ObjectId(\"6114c51c28c156d472398060\"), \"items\" : [ \"Sanitizer\" ], \"price\" : 50, \"customer_name\" : \"Alice\" }       \n{ \"_id\" : ObjectId(\"6114c51c28c156d472398061\"), \"items\" : [ \"Thermometer\", \"Oximeter\" ], \"price\" : 300, \"customer_name\" : \"Tara\" }     \n{ \"_id\" : ObjectId(\"6114c51c28c156d472398062\"), \"items\" : [ \"Mask\" ], \"price\" : 30, \"customer_name\" : \"Mike\" }\n{ \"_id\" : ObjectId(\"6114c51c28c156d472398063\"), \"items\" : [ \"Thermometer\", \"Sanitizer\" ], \"price\" : 250, \"customer_name\" : \"Anita\" }</code></pre>\n\n<p>Which of the following query you can perform in the above scenario:</p>\n\n<p><strong>Query</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>db.products.aggregate( \n [ {$match:{customer_name:{$like:[\"Bob\", \"Lisa\", \"Anita\"]}}}, {$group:{_id:\"$items\",amount:{$sum:\"$price\"}}},\n{$sort:{$group:-1}}\n]) </code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>db.products.aggregate( \n [ {$match:{customer_name:{$in:[\"Bob\", \"Lisa\", \"Anita\"]}}}, {$group:{_id:\"$items\",amount:{$sum:\"$price\"}}},\n{$sort:{$group:-1}}\n]) </code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>db.products.aggregate( \n [ {$match:{customer_name:{$in:[\"Bob\", \"Lisa\", \"Anita\"]}}}, {$group:{_id:\"$items\",amount:{$sum:\"$price\"}}},\n{$sort:{amount:-1}}\n]) </code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>db.products.aggregate( \n [ {$match:{{$customer_name:[{\"Bob\"}$or{\"Lisa\"}$or{\"Anita\"}]}}}, {$group:{_id:\"$items\",amount:{$sum:\"$price\"}}},\n{$sort:{amount:-1}}\n])</code></pre>\n\n<p> </p>","a":[{"id":1639489,"option":"1","correct":false},{"id":1639490,"option":"2","correct":false},{"id":1639491,"option":"3","correct":true},{"id":1639492,"option":"4","correct":false}]},{"q":"<p>You are working on a comapany's database using MongoDB shell. You have created an employees database using the following code.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>db.employees.insertMany([\n   { name: {first: \"Alice\", last:\"Smith\"} , gender:\"F\", dept:\"A\", age:20, _id:1},\n   { name: {first: \"Bob\", last: \"Jones\"}, gender:\"M\", dept:\"A\", age:23, _id:2},\n   { name: {first: \"Ben\", last: \"Johnson\"}, gender:\"M\", dept:\"B\", age:19, _id:3},\n   { name: {first: \"Mike\", last: \"White\"}, gender:\"M\", dept:\"C\", age:18, _id:4},\n   { name: {first: \"Tara\", last: \"Green\"}, gender:\"F\", dept:\"B\", age:22, _id:5},\n   { name: {first: \"Anita\", last: \"Williams\"}, gender:\"F\", dept:\"D\", age:24, _id:6},\n   { name: {first: \"Lisa\", last: \"Davis\"}, gender:\"F\", dept:\"E\", age:23, _id:7}\n])</code></pre>\n\n<p>If you want to find the information of employees who work in department 'A' or 'D', then which of the following ways can you perform in this operation:</p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>db.employees.find({dept:{$in:[\"A\", \"D\"]}})</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>db.employees.find({$or:[{dept:/A/i},{dept:/D/i}]})</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>db.employees.aggregate( \n [ {$match:{dept:{$in:[\"A\",\"D\"]}}}])</code></pre>\n\n<p> </p>","a":[{"id":1638829,"option":"1 and 2","correct":false},{"id":1638830,"option":"2 and 3","correct":false},{"id":1638831,"option":"1 and  3","correct":false},{"id":1638832,"option":"All of these","correct":true}]},{"q":"<p>Bob has created a new collection<strong> </strong><em>shoes</em><strong> </strong>in MongoDB Shell using the following code<strong>.</strong> If he wants to find the 'color' category of shoes whose 'qty' field is greater than <em>20</em> and set it to black and red, then which of the following functionality can he perform in this scenario.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>db.shoes.insertMany([\n   { type: \"Sneakers\", qty: 15, color: [\"black\", \"red\"], size: { UK: 6, US: 7, EURO: 40, footlength: 26.3 } },\n   { item: \"High-Tops\", qty: 30, color: [\"gray\"], size: { UK: 10, US: 11, EURO: 44, footlength: 29.3 } },\n   { item: \"Chuck Taylor\", qty: 25, color: [\"gel\", \"blue\"], size: { UK: 11, US: 12, EURO: 45, footlength: 30.0 } }\n])</code></pre>\n\n<p><strong>Functionality</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>db.shoes.update(\n   { qty: { $gte: 20 } },\n   { $set: { color: [\"black\", \"red\"] } }\n)</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>db.shoes.findAndModify(\n   {\n     query: { qty: { $gte: 20 } },\n     update: { $set: { color: [\"black\", \"red\"] } },\n     upsert: true\n   }\n)</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>db.shoes.find(\n   { qty: { $gt: 20 } },\n   { $set: { color: [\"black\", \"red\"] } },\n   { multi: true }\n)</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>db.shoes.update(\n   { qty: { $gt: 20 } },\n   { $set: { color: [\"black\", \"red\"] } },\n   { multi: true }\n)</code></pre>\n\n<p> </p>","a":[{"id":1637702,"option":"1","correct":false},{"id":1637703,"option":"2","correct":false},{"id":1637704,"option":"3","correct":false},{"id":1637705,"option":"4","correct":true}]},{"q":"<p>You have a database 'books' in Amazon S3 for the region 'AWS / Mumbai (ap-south-1)'. In this database, you have a collection named 'novels'. You have created a datastore with a bucket as 'mydb-books-list'.</p>\n\n<p>You need to perform the following queries on this database using Shell commands:<br>\n1. List the datastores present in a current Data Lake.<br>\n2. Rename the collection 'novels' to 'oldbooks'.<br>\n3. Verify if the name is changed or not.<br>\n4. Drop this collection.<br>\n5. Drop a database and the datastore.</p>\n\n<p>Which of the following shows the correct code to perform the above operations?</p>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>&gt; db.liststores()\n&gt; db.renameCollection(\"books.novel\").to( \"books.oldbooks\")\n&gt; db.showCollections()\n&gt; db.dropCollection(\"oldbooks\")\n&gt; db.dropDatabase\n&gt; db.dropStore(\"mydb-books-list\")</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>&gt; db.lakes.listStores()\n&gt; db.mydb-books-list.run({ renameCollection: books.novel\", to: \"books.oldbooks\" })\n&gt; db.mydb-books-list.run({ showCollections : all })\n&gt; db.mydb-books-list.run({ drop : \"oldbooks\"})\n&gt; db.mydb-books-list.run({ dropDatabase: current })\n&gt; db.mydb-books-list.run({ dropStore})</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>&gt; db.runCommand({ listStores: 1 })\n&gt; db.runCommand({ \"renameCollection\": books.novel\", \"to\": \"books.oldbooks\" })\n&gt; db.runCommand({ \"storageGetConfig\" : 1 })\n&gt; db.runCommand({ \"drop\" : \"oldbooks\"})\n&gt; db.runCommand({ \"dropDatabase\": 1 })\n&gt; db.runCommand({ dropStore: \"mydb-books-list\" })</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>&gt; db.adminCommand({ listStores: all })\n&gt; db.adminCommand({rename{ \"books.novel\",\"books.oldbooks\" }})\n&gt; db.adminCommand({ getcollections})\n&gt; db.adminCommand( drop{\"oldbooks\"})\n&gt; db.adminCommand(dropDatabas{\"books\"})\n&gt; db.adminCommand(dropStore{\"mydb-books-list\" })</code></pre>\n\n<p> </p>","a":[{"id":1652561,"option":"1","correct":false},{"id":1652562,"option":"2","correct":false},{"id":1652563,"option":"3","correct":true},{"id":1652564,"option":"4","correct":false}]},{"q":"<p>You have a database 'exams' in Amazon S3 for the region 'AWS / Mumbai (ap-south-1)'. You are working on this database using MongoDB Atlas. You are connected with the MongoDB Shell using the connection string provided by the MongoDB Atlas and you have created a Data lake in Atlas and want to create a data store using Mongo CLI.</p>\n\n<p>Create a datastore named 'papers'. Add a bucket 'test_papers' in the store.</p>\n\n<p>Which of the following command shows the correct way for creating a data store?</p>","a":[{"id":1652557,"option":"db.createStore({name: \"papers\", service: \"s3\", region: \"ap-south-1\", bucket: \"test_papers\"})","correct":false},{"id":1652558,"option":"db.runCommand({ createStore: \"papers\", provider: \"s3\", region: \"ap-south-1\", bucket: \"test_papers\"})","correct":true},{"id":1652559,"option":"db.addStore({ store: \"papers\", dataprovider: \"s3\", region: \"ap-south-1\", bucket: \"test_papers\"})","correct":false},{"id":1652560,"option":"db.run($createStore: { store: \"papers\", provider: \"s3\", region: \"ap-south-1\", bucket: \"test_papers\"})","correct":false}]},{"q":"<p>You have a collection 'goods' in the database 'sportshop'. </p>\n\n<p>You need to perform the given operations on the database:<br>\n1. Check whether the collection 'goods' is a capped collection or not. If it is not a capped collection, then convert it into a capped collection with a size of 10000 bytes.<br>\n2. Display the documents available in the collection 'goods' in their reverse order of insertion.<br>\n3. Create a new collection named 'goodsorders' with a size of 50000 bytes and it should not contain more than 10000 documents.</p>\n\n<p>Which of the following set of commands will perform the above operations successfully?</p>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>&gt; db.collection.isCapped(goods)\n&gt; db.adminCommand({\"convertToCapped\": \"goods\", size: 100000});\n&gt; db.goods.find().sort( { $natural: -i } )\n&gt; db.insertCollection(\"goodsorders\", { isCapped : true, size : 500000, maxdocs : 10000 } )</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>&gt; db.goods.isCapped()\n&gt; db.runCommand({\"convertToCapped\": \"goods\", size: 100000});\n&gt; db.goods.find().sort( { $natural: -1 } )\n&gt; db.createCollection(\"goodsorders\", { capped : true, size : 500000, max : 10000 } )</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>&gt; db.goods.isCapped()\n&gt; db.convertToCapped({collection:\"goods\", size: 100000});\n&gt; db.goods.find().reversedInsertion()\n&gt; db.createCollection(\"goodsorders\", { isCapped : true, size : 500000, documents{$max : 10000} } )</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>&gt; db.goods.isCapped()\n&gt; db.adminCommand({\"convertToCapped\": \"goods\", size: 100000});\n&gt; db.goods.find().sort( { $natural: -1 } )\n&gt; db.createCappedCollection(\"goodsorders\", { size : 500000, max : 10000 } )</code></pre>\n\n<p> </p>","a":[{"id":1652553,"option":"1","correct":false},{"id":1652554,"option":"2","correct":true},{"id":1652555,"option":"3","correct":false},{"id":1652556,"option":"4","correct":false}]},{"q":"<p>You have a collection 'touristplaces' in a database 'travel'. You need to find out all information about the sessions, transactions, storage, count, etc. about the collection 'touristplaces' and rename the collection.</p>\n\n<p>Get a comprehensive overview of the collection 'touristplaces' and rename the collection 'touristplaces' to 'destinations'.</p>\n\n<p>Which of the following set of commands can perform the above scenario?</p>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use travel\n&gt; db.travel.stats()\n&gt; db.renameCollection(\"travel.touristplaces\" to: \"travel.destinations\")</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use travel\n&gt; mongostat -c touristplaces\n&gt; db.mongoCommand( { renameCollection: \"travel.touristplaces\", to: \"travel.destinations\" } )</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use travel\n&gt; db.touristplaces.stats()\n&gt; db.adminCommand( { renameCollection: \"travel.touristplaces\", to: \"travel.destinations\" } )</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use travel\n&gt; db.touristplaces.stats()\n&gt; db.collectionCommand( { rename: \"travel.touristplaces\", to: \"travel.destinations\" } )</code></pre>\n\n<p> </p>","a":[{"id":1652549,"option":"1","correct":false},{"id":1652550,"option":"2","correct":false},{"id":1652551,"option":"3","correct":true},{"id":1652552,"option":"4","correct":false}]},{"q":"<p>You have a collection 'goods_bags' in the database 'sportshop' with documents as given below. <br>\n<strong>Collection:</strong> goods_bags<br>\n{ \"_id\" : ObjectId(\"60d0aa96e46e8eec3a590be0\"), \"item\" : \"Tool Bag\", \"qty\" : 100, \"spec\" : [ { \"color\" : \"Green\", \"size\" : \"small\" }, { \"color\" : \"black\", \"size\" : \"medium\" } ] }<br>\n{ \"_id\" : ObjectId(\"60d0ac6ee46e8eec3a590be1\"), \"item\" : \"Safari Bag\", \"qty\" : 30, \"spec\" : [ { \"color\" : \"Green\", \"size\" : \"small\" }, { \"color\" : \"grey\", \"size\" : \"medium\" } ] }<br>\n{ \"_id\" : ObjectId(\"60d0aca7e46e8eec3a590be2\"), \"item\" : \"Duffel\", \"qty\" : 20, \"spec\" : [ { \"color\" : \"Brown\", \"size\" : \"small\" }, { \"color\" : \"grey\", \"size\" : \"medium\" } ] }</p>\n\n<p>You need to find the unique names of colors in which the bags are available and update the quantity of Duffel to 21 using incrementation.</p>\n\n<p>Which of the following set of commands will perform the above operations successfully?</p>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use sportshop\n&gt; db.goods_bags.find ( distinct: color )\n&gt; db.goods_bags.find( query: { item: \"Duffel\" }, update: {$set: { qty:21 } }, upsert: true } )</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use sportshop\n&gt; db.runCommand ( { unique: \"goods_bags\", : \"spec.color\" } )\n&gt; db.runCommand( {collection: \"goods_bags\", query:{ item:\"Duffel\"}, update:{ $inc:{ qty:21 }}, upsert: true} )</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use sportshop\n&gt; db.runCommand( { distinct: \"goods_bags\", key: \"color\" } )\n&gt; db.runCommand( {findAndModify:\"goods_bags\", query:{item: \"Duffel\"}, update:{qty: $inc(1)}}, upsert:true } )</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use sportshop\n&gt; db.runCommand( { distinct: \"goods_bags\", key: \"spec.color\" } )\n&gt; db.runCommand( {findAndModify: \"goods\", query:{ item: \"Duffel\" }, update:{ $inc: { qty:1 }}, upsert: true } )</code></pre>\n\n<p> </p>","a":[{"id":1652545,"option":"1","correct":false},{"id":1652546,"option":"2","correct":false},{"id":1652547,"option":"3","correct":false},{"id":1652548,"option":"4","correct":true}]},{"q":"<p>You have a collection 'property' in a database 'finances' as given below.<br>\n<strong>Collection:</strong> property<br>\n{ \"_id\" : 101, \"person\" : \"Lisa\", \"salary\" : 10000, \"expenditure\" : 15000, \"property\" : [ \"house\" ] }<br>\n{ \"_id\" : 102, \"person\" : \"Tom\", \"salary\" : 20000, \"expenditure\" : 18000, \"property\" : [ \"house\", \"car\" ] }<br>\n{ \"_id\" : 103, \"person\" : \"Shital\", \"salary\" : 25000, \"expenditure\" : 19000, \"property\" : [ \"house\", \"land\", \"car\" ] }<br>\n{ \"_id\" : 104, \"person\" : \"Kristen\", \"salary\" : 17000, \"expenditure\" : 20000, \"property\" : [ \"house\", \"land\" ] }<br>\n{ \"_id\" : 105, \"person\" : \"Mike\", \"salary\" : 12000, \"expenditure\" : 9000, \"property\" : [ \"car\" ] }</p>\n\n<p>You need to perform the following operations on a database:<br>\n1. Return all the documents in a such way that only the last element should be present in the 'property' array.<br>\n2. Find the people who don't own a house and the land.<br>\n3. Create an index on the field 'person'.<br>\n4. Find the document containing the name of a person as 'Shital'.</p>\n\n<p>Which of the following options will perform the above operations?</p>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>&gt; db.property.find( { property: { $nin: [ 1, 2 ] } } )\n&gt; db.property.find( { property: { $nq: [\"house\",\"land\"] } } )\n&gt; db.property.createIndex( { _id: person } )\n&gt; db.property.find( { $elmMatch: \"Shital\" } )</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>&gt; db.property.find( {}, { property: { $: [\"car\"] } } )\n&gt; db.property.find( { property: { $not: [\"house\",\"land\"] } } )\n&gt; db.property.createIndex( { person: 1 } )\n&gt; db.property.find( { $text: \"Shital\" } )</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>&gt; db.property.find( {}, { property: { $slice: [ 3 ] } } )\n&gt; db.property.find( { property: { $nq: [\"house\",\"land\"] } } )\n&gt; db.property.createIndex( { person: 1 } )\n&gt; db.property.find( { $text: { person: \"Shital\" } } )</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>&gt; db.property.find( {}, { property: { $slice: [ 1, 2 ] } } )\n&gt; db.property.find( { property: { $nin: [\"house\",\"land\"] } } )\n&gt; db.property.createIndex( { person: \"text\" } )\n&gt; db.property.find( { $text: { $search: \"Shital\" } } )</code></pre>\n\n<p> </p>","a":[{"id":1652541,"option":"1","correct":false},{"id":1652542,"option":"2","correct":false},{"id":1652543,"option":"3","correct":false},{"id":1652544,"option":"4","correct":true}]},{"q":"<p>You have a collection 'people' in a database 'finance' as given below.<br>\n<strong>Collection:</strong> people<br>\n{ \"_id\" : 101, \"person\" : \"Lisa\", \"salary\" : 10000, \"expenditure\" : 15000 }<br>\n{ \"_id\" : 102, \"person\" : \"Tom\", \"salary\" : 20000, \"expenditure\" : 18000 }<br>\n{ \"_id\" : 103, \"person\" : \"Shital\", \"salary\" : 25000, \"expenditure\" : 19000 }<br>\n{ \"_id\" : 104, \"person\" : \"Kristen\", \"salary\" : 17000, \"expenditure\" : 20000 }<br>\n{ \"_id\" : 105, \"person\" : \"Mike\", \"salary\" : 12000, \"expenditure\" : 9000 }</p>\n\n<p>You need to find the documents for the persons whose expenditure is more than their monthly salary. Choose the correct set of commands that will find the required results.</p>","a":[{"id":1652537,"option":"db.people.find( { $where: {$expenditure> $salary } } )","correct":false},{"id":1652538,"option":"db.people.find({$expr: {$gt: [\"$expenditure\",\"$salary\" ]}})","correct":true},{"id":1652539,"option":"db.people.find( { $expr: { $gt: [ \"$salary\" , \"$expenditure\" ] } } )","correct":false},{"id":1652540,"option":"db.people.find( { $gt: {\"$expenditure\",\"$salary\" } } )","correct":false}]},{"q":"<p>A user 'John' wants to connect with a database 'bookingdata' available on a remote machine 'starairlines.onlinebooking.com'. On this machine, the MongoDB instance is running at the non-default port 28014.<br>\nHow will you write a command to connect and authenticate to a remote MongoDB instance?</p>","a":[{"id":1652533,"option":"dbconnect -cluster starairlines.onlinebooking.com -collection bookingdata --username John -port 28014","correct":false},{"id":1652534,"option":"mongod --database starairlines.onlinebooking.com --collection bookingdata -user John --port 28014","correct":false},{"id":1652535,"option":"mongo --username John --password --authenticationDatabase bookingdata --host starairlines.onlinebooking.com --port 28014","correct":true},{"id":1652536,"option":"mongo --username John --password --authenticate bookingdata --remotehost starairlines.onlinebooking.com --port 28014","correct":false}]},{"q":"<p>You have an application based on social media that generates a large amount of data on daily basis. To provide a seamless user experience by ensuring the high availability of the data, you need to create multiple copies of your database.</p>\n\n<p>Create a new replica named 'replica1' of the database at \"C:\\Program Files\\MongoDB\\data\" that runs using the default MongoDB instance. Enable this server instance using MongoDB services.</p>\n\n<p> Which of the following commands will start the new MongoDB server instance with replication?</p>","a":[{"id":1652529,"option":"mongod --port 27017 --dbpath \"C:\\Program Files\\MongoDB\\data\" --replSet replica1","correct":true},{"id":1652530,"option":"mongos --port 27017 --replSet replica1 --path \"C:\\Program Files\\MongoDB\\data\"","correct":false},{"id":1652531,"option":"mongo --port 27017 --replSet replica1 --configpath \"C:\\Program Files\\MongoDB\\data\"","correct":false},{"id":1652532,"option":"mongod --config --port 27017 --path \"C:\\Program Files\\MongoDB\\data\" --replSet replica1","correct":false}]},{"q":"<p>To improve the query performance, you need to manage the mongod process using customization of the mongod server.</p>\n\n<p>Perform the following operations using the Mongo Shell:<br>\n1. Change the default data directory for mongod to \"/mongodb/server/mydir/\".<br>\n2. Start the mongod listening on non-default port 27019.<br>\n3. Start the mongod process as a daemon and store its output to a file 'newmongod.log' at the path \"/mongodb/log/newlog/\".<br>\n4. Shut down the mongod with timeoutSecs set to 5 from the Mongo Shell.</p>\n\n<p>Which of the following set of commands will perform the above operations successfully?</p>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>&gt; mongod --dir /mongodb/server/mydir/\n&gt; mongod --configport 27019\n&gt; mongod --db --logfile /mongodb/log/newlog/newmongod.log\n&gt; db.killServer({timeout : 5})</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>&gt; mongod --setpath /mongodb/server/mydir/\n&gt; mongod --port 27019\n&gt; mongod --daemon --log /mongodb/log/newlog/newmongod.log\n&gt; db.shutdownServer({timeoutAfterSecs : 5})</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>&gt; mongod --path /mongodb/server/mydir/\n&gt; mongod --port 27019\n&gt; mongod --service --logpath /mongodb/log/newlog/newmongod.log\n&gt; db.runCommand({shutdownServer, timeoutSecs : 5})</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>&gt; mongod --dbpath /mongodb/server/mydir/\n&gt; mongod --port 27019\n&gt; mongod --fork --logpath /mongodb/log/newlog/newmongod.log\n&gt; db.shutdownServer({timeoutSecs : 5})</code></pre>\n\n<p> </p>","a":[{"id":1652525,"option":"1","correct":false},{"id":1652526,"option":"2","correct":false},{"id":1652527,"option":"3","correct":false},{"id":1652528,"option":"4","correct":true}]},{"q":"<p>You have a collection 'asianews' in a database 'newsupdates'. You want to collect detailed information about Database queries executed against this database.</p>\n\n<p>You need to perform the following operations:<br>\n1. View all commands that are currently running/in-progress for the database 'newsupdates'.<br>\n2. Set a profiler that collects data for commands that take longer than 25 slowms.</p>\n\n<p>Which of the following will perform the above operation successfully?</p>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use newsupdates\n&gt; db.findOp()\n&gt; db.addProfilingl(0, { slowms: 25 })</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use newsupdates\n&gt; db.getcurrentOp()\n&gt; db.addProfilingLevel(2, { slowms: 25 })</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use newsupdates\n&gt; db.currentOp()\n&gt; db.setProfilingLevel(1, { slowms: 25 })</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use newsupdates\n&gt; db.currentOp()\n&gt; db.profilingLevel($set: 2, { slowms: 25 })</code></pre>\n\n<p> </p>","a":[{"id":1652521,"option":"1","correct":false},{"id":1652522,"option":"2","correct":false},{"id":1652523,"option":"3","correct":true},{"id":1652524,"option":"4","correct":false}]},{"q":"<p>You have a single instance of a MongoDB server (127.0.0.1) that is currently running on port 27017. You want to distribute the data from your database across multiple data centers to mitigate the problem of unavailability of data when the server goes down. For this, you want to run another instance of MongoDB named 'ServerB' (127.0.0.1:27018) by configuring port 27018 using the sharding technique.</p>\n\n<p>You need to perform the following operations:<br>\n1. Create a separate database named 'configdb' in the data folder that is located in MongoDB installation folder.<br>\n2. Start Server B in configuration mode. <br>\n3. Start the mongos instance by specifying Server B as the configuration server.<br>\n4. Connect server B with default MongoDB server instance using the MongoDB Shell.</p>\n\n<p>Which of the following set of commands will perform the above operations without causing any errors?</p>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>&gt; mkdir /data/myconfigdb\n&gt; mongos -start ServerB –configdb: 27018\n&gt; mongos -start ServerB –configdb: 27018\n&gt; mongo -connecthost ServerB –port 27017</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>&gt; mkdir /data/myconfigdb\n&gt; mongod –configdb ServerB: 27018\n&gt; mongos –configdb ServerB: 27018\n&gt; mongo –host ServerB –port 27017</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>&gt; mkdir /data/myconfigdb\n&gt; mongod -n –configdb ServerB: 27018\n&gt; mongos -c –configdb ServerB: 27018\n&gt; mongo –rplSet ServerB –port 27017</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>&gt; mkdir /data/myconfigdb\n&gt; mongod --db configdb ServerB: 27018\n&gt; mongos --db configdb ServerB: 27018\n&gt; mongo –ins ServerB –port: 27017</code></pre>\n\n<p> </p>","a":[{"id":1652517,"option":"1","correct":false},{"id":1652518,"option":"2","correct":true},{"id":1652519,"option":"3","correct":false},{"id":1652520,"option":"4","correct":false}]},{"q":"<p>You are dealing with an application having a large database named 'microblogs'. Given below is a sample document from the collection 'blogusers'. <br>\n<strong>Document:</strong><br>\n{ \"_id\" : ObjectId(\"60cb59a41c3423c6cd1188cb\"), \"blog_id\" : \"5432\",  \"author\" : \"Eric Stokes\",  \"title\" : \"Environment protection\"}</p>\n\n<p>For maintaining the efficiency of the database, you need to distribute the load of the server among the instances of a server using the sharding technique. Considering 'title' as a shared key, you need to perform range-based sharding on a collection 'blogusers' using the shard key.</p>\n\n<p>Which of the following will perform the given operation successfully?</p>","a":[{"id":1652513,"option":"sh.shardCollection(\"microblogs.blogusers\").shardkey({ title: 1} )","correct":false},{"id":1652514,"option":"sh.shardCollection(\"microblogs.blogusers\", { $shardkey:{title: 1} })","correct":false},{"id":1652515,"option":"sh.shardCluster(\"microblogs.blogusers\", { title: \"hashed\"} )","correct":false},{"id":1652516,"option":"sh.shardCollection(\"microblogs.blogusers\", { title: 1} )","correct":true}]},{"q":"<p>You have a collection 'transactiondb' in a database 'mybank. You have protected the database by allowing access to the authorized users. You need to update the database rights for the user.<br>\nUpdate the rights of the user 'alicesmith11' and password with a new password 'password@123', and allow the database read access to this user. You need to update the custom data as { title: \"Cloud developer\" } and grant privileges for 'find' and 'update' actions on a collection 'transactiondb'.<br>\nWhich of the following queries can perform the above scenario?</p>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use mybank\n&gt; db.updateSecurity(\"alicesmith11'\",{ pwd:\"password@123\", customData: {title:\"Cloud developer\" } })\n&gt; privileges:[{resource: {db:\"mybank\", collection: \"transactiondb\"}, actions:[\"find\", \"update\" ]}]</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use mybank\n&gt; db.revokeUser(\"alicesmith11'\",{ pwd: \"password@123\", customData: { title: \"Cloud developer\"}} )\n&gt; privileges:[{ resource:{db: \"mybank\", collection:\"transactiondb\"}, actions:[\"find\", \"update\" ] }]</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use mybank\n&gt; db.updateUser( \"alicesmith11\",{ pwd: \"password@123\", customData: { title: \"Cloud developer\"}} )\n&gt; privileges:[{ resource:{db:\"mybank\", collection:\"transactiondb\"}, actions:[\"find\", \"update\" ] }]</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use mybank\n&gt; db.changeUserPassword(\"alicesmith11\",{pwd: \"password@123\", customData:{title:\"Cloud developer\"} })\n&gt; privileges:[{ resource:{db: \"mybank\", collection:\"transactiondb\"}, actions:[\"find\", \"update\" ] }]</code></pre>\n\n<p> </p>","a":[{"id":1652509,"option":"1","correct":false},{"id":1652510,"option":"2","correct":false},{"id":1652511,"option":"3","correct":true},{"id":1652512,"option":"4","correct":false}]},{"q":"<p>You have a collection named 'users' in a database 'friendschat'. The collection has numerous documents archived in it. The snapshot for one of its documents is given below. For faster querying on the data, you need to apply an index to the collection.<br>\n<strong>Document:</strong><br>\n{  _id: ObjectId(\"523cba3c73a8049bcdbf6007\"),  name: 'Amruta Shinde', age: 26, nationality: \"India\", address: { city: \"Mumbai\" },</p>\n\n<p>Get the all indexes that are already created on a collection 'users'. Create an index on a collection 'books' using the field 'city'. Also, create a compound index using the fields 'name' and 'age'. You need to get the results sorted first by name in ascending order and then by age in descending order.<br>\nWhich of the following will perform these operations successfully?</p>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use friendschat\n&gt; db.users.geAllIndexes()\n&gt; db.products.createIndex( { \"address[\"city\"]\":1 } )\n&gt; db.products.createIndex( { \"name_age\": 1 } )\n&gt; db.events.find().sort( { name: asc},{ age: desc } )</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use friendschat\n&gt; db.users.find().Indexes()\n&gt; db.products.createIndex( { \"address&gt;city\":1 } )\n&gt; db.products.createIndex( { \"name\": 1 + \"age\": 1 } )\n&gt; db.events.find().sort( [ name: 1, age: -1 ] )</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use friendschat\n&gt; db.users.getIndexes()\n&gt; db.products.createIndex( { \"\\address\\city\\\":1 } )\n&gt; db.products.createIndex( { \"name\": 1, \"age\": 1 } )\n&gt; db.events.find().sort( { name: asc, age: desc } )</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use friendschat\n&gt; db.users.getIndexes()\n&gt; db.products.createIndex( { \"address.city\":1 } )\n&gt; db.products.createIndex( { \"name\": 1, \"age\": 1 } )\n&gt; db.events.find().sort( { name: 1, age: -1 } )</code></pre>\n\n<p> </p>","a":[{"id":1652505,"option":"1","correct":false},{"id":1652506,"option":"2","correct":false},{"id":1652507,"option":"3","correct":false},{"id":1652508,"option":"4","correct":true}]},{"q":"<p>You have a collection named 'books' in a database 'library'. The collection has numerous documents archived in it. The snapshot for a few documents from this collection is given below.<br>\n<strong>Collection:</strong> books<br>\n{ \"_id\" : ObjectId(\"60cb59a41c3423c6cd1188cb\"), \"book_id\" : \"5432\", \"name\" : \"Learning Python\", \"author\":\"David Smith\"}<br>\n{ \"_id\" : ObjectId(\"60cb59a41c3423c6cd1188cb\"), \"book_id\" : \"100002\", \"name\" : \"Head first Python\", \"author\":\"Scott Meyer\"}</p>\n\n<p>For efficient searching of the data, you need to create an index on a collection 'books' using the field 'book_id' and then remove the index.</p>\n\n<p>Which of the following options will perform these operations successfully?</p>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use library\n&gt; db.products.ensureIndex(\"book_id\")\n&gt; db.products.deleteIndex(\"book_id\")</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use library\n&gt; db.products.createIndex( { \"book_id\": 1 } )\n&gt; db.products.dropIndex( { \"book_id\": 1 } )</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use library\n&gt; db.products.createIndex( { \"book_id\": -1 } )\n&gt; db.products.deleteIndex( { \"book_id\": -1 } )</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use library\n&gt; db.products.newIndex( {\"book_id\"} )\n&gt; db.products.dropIndex( {\"book_id\"} )</code></pre>\n\n<p> </p>","a":[{"id":1652501,"option":"1","correct":false},{"id":1652502,"option":"2","correct":true},{"id":1652503,"option":"3","correct":false},{"id":1652504,"option":"4","correct":false}]},{"q":"<p>You want to start a session to perform CRUD transactions on the collections 'students' and 'staff' in a database 'college'. You need to build the pre-requisites before starting a transaction.</p>\n\n<p>Write the session methods for:<br>\ni. Start the session.<br>\nii. Build the session objects for the collections 'students' and 'staff'.<br>\niii. End the session.</p>\n\n<p>Which of the following options can perform the above scenario?</p>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>session = db.getMongo().startSession({ readPreference: { mode: \"primary\" }, writeConcern: { w: \"majority\" }});\nstudentsCollection = session.getDatabase(\"college\").students;\nstaffCollection = session.getDatabase(\"college\").staff;\nsession.endSession();</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>session = db.mongo().startSession({readPreference: { mode: \"primary\" } , writeConcern: { w: \"majority\" }});\nstudentsCollection = session.database(\"college\").collection(\"students\");\nstaffCollection = session.database(\"college\").collection(\"staff\");\nsession.end();</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>session = db.getMongo().startSession({readPreference: { mode: \"primary\" }, writeConcern: { w: \"majority\" }});\nstudentsCollection = session.object(\"college.students\");\nstaffCollection = session.object(\"college.staff\");\nsession.endSession();</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>session = db.getMongo().startSession({readPreference: { mode: \"primary\" }, writeConcern: { w: \"majority\" }});\nstudentsCollection = session.transactionDatabase(\"college\").students;\nstaffCollection = session.transactionDatabase(\"college\").staff;\nsession.abortSession();</code></pre>\n\n<p> </p>","a":[{"id":1652497,"option":"1","correct":true},{"id":1652498,"option":"2","correct":false},{"id":1652499,"option":"3","correct":false},{"id":1652500,"option":"4","correct":false}]},{"q":"<p>You have two collections namely 'student' and 'courses' as given below in a database 'learning'. Also, the object references (IDs) for these collections are given below. You want to link these collections in such a way that whenever a student subscribes to any course, the same information will get reflected in the 'student' collection. You need to update a collection 'student', create a new property 'subscriptions' in a collection 'student', refer to the object of collection 'courses' using the name 'sub_course' inside a collection 'student' and view the collection 'student' to verify the linking.<br>\n<strong>Collection1:</strong> student<br>\n{ \"_id\" : ObjectId(\"60cb59a41c3423c6cd1188cb\"), \"name\" : \"Darwin\", \"isSubscribed\" : \"yes\"}<br>\n<strong>Collection2: </strong>courses<br>\n{ \"_id\" : ObjectId(\"60cb5a2e1c3423c6cd1188cc\"), \"course_nm\" : \"react native\", \"price\" : 500 }</p>\n\n<p>How will you write a query to link these two collections dynamically?</p>\n\n<p><strong>Queries</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use learning\n&gt; db.student.updateMany($set:{$sub_course:[\"subscriptions\": \"60cb5a2e1c3423c6cd1188cc\"]}})\n&gt; db.student.find().pretty()</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use learning\n&gt; db.student.updateOne({$id, $name}, {$set:subscriptions([{\"sub_course\": \"60cb5a2e1c3423c6cd1188cc\"}])})\n&gt; db.student.find().pretty()</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use learning\n&gt; db.student.updateOne({}, {set:{subscriptions:[{sub_course: courses.ObjectId(\"60cb59a41c3423c6cd1188cb\")}]}})\n&gt; db.student.find().pretty()</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use learning\n&gt; db.student.updateOne({}, {$set:{subscriptions:[{sub_course: ObjectId(\"60cb5a2e1c3423c6cd1188cc\")}]}})\n&gt; db.student.find().pretty()</code></pre>\n\n<p> </p>","a":[{"id":1652493,"option":"1","correct":false},{"id":1652494,"option":"2","correct":false},{"id":1652495,"option":"3","correct":false},{"id":1652496,"option":"4","correct":true}]},{"q":"<p>Given below are the two documents from the collection 'food_orders' available in a database 'gourmetcircle'. Whenever the customer places the order, you need to retrieve his address from document2. To avoid the repetition of the same task, you need to embed document2 in document1.<br>\n<strong>Document1: </strong>{_id: \"235142\",name: \"Sam Peterson\"}<br>\n<strong>Document2: </strong>{cust_id: \"235142\", street: \"142 SBH Garden\", city: \"Sun city\", state: \"MA\", zip: \"85631\"}</p>\n\n<p>How will you embed document2 in document1 to model the One-to-One relationship in a single document?</p>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>{\n_id: \"235142\", name: \"Sam Peterson\",\naddress:[ {cust_id: \"235142\"}, {street: \"142 SBH Garden\"}, {city: \"Sun city\"}, {state: \"MA\"}, \n{zip:\"85631\"} ]\n}</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>{\n_id: \"235142\", name: \"Sam Peterson\",\naddress: {street: \"142 SBH Garden\", city: \"Sun city\", state: \"MA\", zip: \"85631\" }\n}</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>{\ncust_id: \"235142\" , name: \"Sam Peterson\",\naddress: { _id: \"235142\", street: \"142 SBH Garden\", city: \"Sun city\", state: \"MA\", zip: \"85631\" }\n}</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>{\n_id: \"235142\", name: \"Sam Peterson\",\naddress: { [ street: \"142 SBH Garden\", city: \"Sun city\", state: \"MA\", zip: \"85631\" ] }\n}</code></pre>\n\n<p> </p>","a":[{"id":1652489,"option":"1","correct":false},{"id":1652490,"option":"2","correct":true},{"id":1652491,"option":"3","correct":false},{"id":1652492,"option":"4","correct":false}]},{"q":"<p>You have a collection 'purchase_orders' with the documents as given below in a database 'myshop'. You need to find the names of all products that were sold out as well as to find out the total amount spent on each item by all the customers.</p>\n\n<p><strong>Collection:</strong> purchase_orders<br>\n{ \"_id\" : ObjectId(\"60cb177c1c3423c6cd1188c4\"), \"item\" : \"Oximeter\", \"price\" : 50, \"customer_name\" : \"Alice\" }<br>\n{ \"_id\" : ObjectId(\"60cb177c1c3423c6cd1188c5\"), \"item\" : \"Sanitizer\", \"price\" : 20, \"customer_name\" : \"Jeff\" }<br>\n{ \"_id\" : ObjectId(\"60cb177c1c3423c6cd1188c6\"), \"item\" : \"Mask\", \"price\" : 10, \"customer_name\" : \"Kristen\" }<br>\n{ \"_id\" : ObjectId(\"60cb177c1c3423c6cd1188c7\"), \"item\" : \"Sanitizer\", \"price\" : 20, \"customer_name\" : \"Eric\" }<br>\n{ \"_id\" : ObjectId(\"60cb177c1c3423c6cd1188c8\"), \"item\" : \"Thermometer\", \"price\" : 30, \"customer_name\" : \"Jack\" }</p>\n\n<p>How will you write the queries to perform the given operations on a collection myshop.purchase_orders?</p>\n\n<p><strong>Queries</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use myshop\n&gt; db.purchase_orders.distinct(\"item\")\n&gt; db.purchase_orders.aggregate( [ \n {$match:{}},\n {$group:{_id:\"$item\",amount:{$sum:\"$price\"}} } \n ] )</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use myshop\n&gt; db.purchase_orders.aggregate($distinct:{\"item\"})\n&gt; db.purchase_orders.aggregate( [ \n {$match:{_id:\"$item\"}},\n {$group:{amount:{$sum:\"$price\"}} } \n ] )</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use myshop\n&gt; db.purchase_orders.distinct(\"item\")\n&gt; db.purchase_orders.aggregate( [ \n {$match:{distinct(\"customer_name\")}},\n {$group:{\"$item\",amount:{$sum:\"$price\"}} } \n ] )</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use myshop\n&gt; db.purchase_orders.distinct(\"customer_name\")\n&gt; db.purchase_orders.aggregate( [ \n {$match:{amount:{$sum:\"$price\"}}},\n {$group:{_id:\"$item\"} } \n ] )</code></pre>\n\n<p> </p>","a":[{"id":1652485,"option":"1","correct":true},{"id":1652486,"option":"2","correct":false},{"id":1652487,"option":"3","correct":false},{"id":1652488,"option":"4","correct":false}]},{"q":"<p>You have a collection 'purchase_orders' with the documents as given below in a database 'myshop'.<br>\n<strong>Collection</strong>: purchase_orders<br>\n{ \"_id\" : ObjectId(\"60cb177c1c3423c6cd1188c4\"), \"item\" : \"Oximeter\", \"price\" : 50, \"customer_name\" : \"Alice\" }<br>\n{ \"_id\" : ObjectId(\"60cb177c1c3423c6cd1188c5\"), \"item\" : \"Sanitizer\", \"price\" : 20, \"customer_name\" : \"Jeff\" }<br>\n{ \"_id\" : ObjectId(\"60cb177c1c3423c6cd1188c6\"), \"item\" : \"Mask\", \"price\" : 10, \"customer_name\" : \"Kristen\" }<br>\n{ \"_id\" : ObjectId(\"60cb177c1c3423c6cd1188c7\"), \"item\" : \"Sanitizer\", \"price\" : 20, \"customer_name\" : \"Eric\" }<br>\n{ \"_id\" : ObjectId(\"60cb177c1c3423c6cd1188c8\"), \"item\" : \"Thermometer\", \"price\" : 30, \"customer_name\" : \"Jack\" }</p>\n\n<p>How will you write a query to find out how many sanitizers were sold?</p>","a":[{"id":1652481,"option":"db.purchase_orders.find({$count:{\"item\":\"Sanitizer\"}})","correct":false},{"id":1652482,"option":"db.purchase_orders.aggregate().count{\"item\":\"Sanitizer\"})","correct":false},{"id":1652483,"option":"db.purchase_orders.count({\"item\":\"Sanitizer\"})","correct":true},{"id":1652484,"option":"db.purchase_orders.count({\"Sanitizer\"})","correct":false}]},{"q":"<p>You have a collection 'employee' with the documents as given below in a database 'company'.<br>\n<strong>Collection: </strong>employee<br>\n{    \"_id\" : ObjectId(\"60caded31c3423c6cd1188bd\"),   \"name\" : \"Paul Miller\", \"dept\" : 101, \"salary\" : 50000 }<br>\n{    \"_id\" : ObjectId(\"60caded31c3423c6cd1188be\"),   \"name\" : \"Sarah Johnson\", \"dept\" : 103, \"salary\" : 40000 }<br>\n{    \"_id\" : ObjectId(\"60caded31c3423c6cd1188bf\"),   \"name\" : \"Maria Smith\", \"dept\" : 208, \"salary\" : 60000}</p>\n\n<p>Find out all data of the employees whose salary is greater than or equal to 50000 but less than 100000. Replace the document for the employee who does not fit in the above condition with the new data as given below and display the updated documents.</p>\n\n<p>designation: Sr manager, experience: 10</p>\n\n<p>Choose the correct set of queries to get the required results.</p>\n\n<p><strong>Queries</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use company\n&gt; db.employee.find({$or: {{\"salary\"&gt;=50000},{\"salary\"&lt;100000}})\n&gt; db.employee.updateOne({\"name\":\"Paul Miller\",{\"designation\":\"Sr manager\",\"experience\":10}})\n&gt; db.employee.find().pretty()</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use company\n&gt; db.employee.find({$and: {{\"salary\"&gt;=50000},{\"salary\"&lt;100000}})\n&gt; db.employee.modify({\"name\":\"Paul Miller\",{\"designation\":\"Sr manager\",\"experience\":10}})\n&gt; db.employee.find().pretty()</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use company\n&gt; db.employee.find({$and:{\"salary\":{$lt:50000}},{\"salary\":{$gt:100000}}]})\n&gt; db.employee.replace({\"name\":\"Paul Miller\",\"designation\":\"Sr manager\",\"experience\":10})\n&gt; db.employee.find().pretty()</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use company\n&gt; db.employee.find({$and:[{\"salary\":{$gte:50000}},{\"salary\":{$lt:100000}}]})\n&gt; db.employee.replaceOne({\"name\":\"Paul Miller\"},{\"designation\":\"Sr manager\",\"experience\":10})\n&gt; db.employee.find().pretty()</code></pre>\n\n<p> </p>","a":[{"id":1652477,"option":"1","correct":false},{"id":1652478,"option":"2","correct":false},{"id":1652479,"option":"3","correct":false},{"id":1652480,"option":"4","correct":true}]},{"q":"<p>Consider a collection 'books' in a database 'library' as given below. Update the document which has a book 'Clean code'. Modify the value of 'book' as 'Basics of programming' for this document.<br>\n<strong>Collection:</strong> books<br>\n{ \"_id\" : ObjectId(\"60ca3f091c3423c6cd1188b8\"), \" book\" : \"Clean code\" }<br>\n{ \"_id\" : ObjectId(\"60ca3f091c3423c6cd1188b9\"), \"book\" : \"Refactoring\" }<br>\nIdentify the correct query statement which will display the required output for the given operation.</p>","a":[{"id":1652473,"option":"db.books.updateOne( {\" book\" :\"Clean code\"}, {$set:{\"book\":\"Basics of programming\"}});","correct":true},{"id":1652474,"option":"db.books.update( {\"book\":\"Basics of programming\"}, {$set:{\" book\" :\"Clean code\"}});","correct":false},{"id":1652475,"option":"db.books.updateMany( {\" book\" :\"Clean code\"}, {$update:{\"book\":\"Basics of programming\"}});","correct":false},{"id":1652476,"option":"db.books.updateOne( {\"book\":\"Basics of programming\"}, {$where: {\" book\" :\"Clean code\"}});","correct":false}]},{"q":"<p>To keep the track of your daily sales transactions, you need to create a database 'sales' while working with MongoDB. Before creating the database, you must check for the names of existing databases to prevent failure while creating a new database.<br>\nYou need to perform the following commands:<br>\n1. Create the database 'sales'<br>\n2. Find the name of the current database that you are using<br>\n3. Create a collection 'orders' in the database<br>\n4. Delete the collection 'Orders' and also delete the database 'sales'<br>\nWhich of the following shows the correct set of commands to perform the above operations using MongoShell?</p>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>&gt; sh db\n&gt; create database sales\n&gt; use sales\n&gt; sales.createCollection(\"orders\")\n&gt; sales.deleteCollection() \n&gt; dropDatabase()</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>&gt; show alldatabases\n&gt; use sales\n&gt; currentdb()\n&gt; sales.newCollection(\"orders\")\n&gt; sales.collection.drop() \n&gt; sales.dropDatabase()</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>&gt; show databases\n&gt; use sales\n&gt; db\n&gt; db.createCollection(\"orders\")\n&gt; db.orders.drop() \n&gt; db.dropDatabase()</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>&gt; show databases\n&gt; use sales\n&gt; db\n&gt; db.createCollection(\"orders\")\n&gt; drop collection orders\n&gt; drop database sales</code></pre>\n\n<p> </p>","a":[{"id":1652469,"option":"1","correct":false},{"id":1652470,"option":"2","correct":false},{"id":1652471,"option":"3","correct":true},{"id":1652472,"option":"4","correct":false}]},{"q":"<p>You have a MongoDB instance running on localhost at non-default port 27019. You want to connect with this instance. Which of the following commands will you use to connect with this MongoDB instance?</p>","a":[{"id":1652465,"option":"mongos -rep 27017 --port 27019","correct":false},{"id":1652466,"option":"mongo -n port 27019","correct":false},{"id":1652467,"option":"mongod --port 27019","correct":true},{"id":1652468,"option":"mongo --port 27019","correct":false}]},{"q":"<p>You have a collection 'goods' in the database 'sportshop' with documents as given below. <br>\n<strong>Collection</strong>: goods<br>\n{ \"_id\" : ObjectId(\"60caf89d1c3423c6cd1188c2\"), \"item\" : \"Soccer ball\", \"qty\" : 25, \"color\" : [ \"red\", \"white\" ] }<br>\n{ \"_id\" : ObjectId(\"60caf89d1c3423c6cd1188c1\"), \"item\" : \"Cricket bat\", \"qty\" : 100, \"color\" : [ \"black\", \"brown\" ] }<br>\n{ \"_id\" : ObjectId(\"60caf89d1c3423c6cd1188c0\"), \"item\" : \"Hockey stick\", \"qty\" : 50, \"color\" : [ \"black\", \"brown\" ] }<br>\nYou need to find the total number of documents in a collection 'goods' and return the count variable as 'total'. Find the number of documents having quantity less than 50.<br>\nWhich of the following set of commands will perform the above operations successfully?</p>\n\n<p><strong>Query</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>db.goods.aggregate( [ { $count: \"total\" } ])\ndb.goods.find( { qty: { $lt: 50 } } ).count()</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>db.goods.count( {\"_id\" as \"total\"} )\ndb.goods.count( { $lt: { qty: 50 } } )</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>db.goods.aggregate.count($id:\"total\" )\ndb.getCount( { qty: { $lte: 50 } } )</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>db.goods.estimatedCount( { $count: \"total\" } )\ndb.goods.find( { qty: { $lt: 50 } } ).count()</code></pre>\n\n<p> </p>","a":[{"id":1653101,"option":"1","correct":true},{"id":1653102,"option":"2","correct":false},{"id":1653103,"option":"3","correct":false},{"id":1653104,"option":"4","correct":false}]},{"q":"<p>You have a collection 'employees' in a database 'company' as given below. <br>\n<strong>Collection</strong>: employees<br>\n{ \"_id\" : ObjectId(\"60d1bdd023275c561c3d8e7f\"), \"emp_id\" : 3209, \"emp_name\" : \"Lisa Davis\", \"salary\" : 50000 }<br>\n{ \"_id\" : ObjectId(\"60d1bdd023275c561c3d8e80\"), \"emp_id\" : 9012, \"emp_name\" : \"Tom Cook\", \"salary\" : 20000 }<br>\n{ \"_id\" : ObjectId(\"60d1bdd023275c561c3d8e81\"), \"emp_id\" : 1035, \"emp_name\" : \"Shital Aggarwal\", \"salary\" : 60000 }<br>\n{ \"_id\" : ObjectId(\"60d1bdd023275c561c3d8e82\"), \"emp_id\" : 5642, \"emp_name\" : \"Kristen Stokes\", \"salary\" : 17000 }<br>\n{ \"_id\" : ObjectId(\"60d1bdd023275c561c3d8e83\"), \"emp_id\" : 2465, \"emp_name\" : \"Mike Johnson\", \"salary\" : 40000 }<br>\nYou need to perform the given operation on the database. Find the 'emp_type' for every employee based on the following condition. If the salary of an employee is greater than or equal to 40000, then display 'emp_type' as 'full-time'. Otherwise, display it as 'part_time'. Return the fields 'emp_id' and 'emp_type' for all documents as the result set.<br>\nHow will you write a query to get the required results using the above condition?</p>\n\n<p><strong>Query</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>db.employees.find([ \n{ $aggregate: { $addField: { emp_id,  emp_type: { $if: { $salary:{ $gte:[ 40000 ]} ,\n\"fulltime\"}, else: \"part-time\" } } } }\n])</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>db.employees.addField([\n{ $aggregate:{ emp_id,\n emp_type:{ $cond: { $if: { $gte: [\"salary\", 40000 ] }, $then: \"full-time\", $else:\"part-time\" } } }}\n])</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>db.employees.aggregate([\n{ $project: {emp_id: 1, emp_type:{$cond:{ if:{$gte:[ \"$salary\", 40000]}, then:\"full-time\", else: \"part-time\" }}} }\n])</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>db.employees.find([\n{ $select: {emp_id: 1, emp_type:{ $cond:{{if:{ $gte:[ \"$salary\", 40000 ], true[\"full-time\"] }, else: \"part-time\"} } } }\n])</code></pre>\n\n<p> </p>","a":[{"id":1653097,"option":"1","correct":false},{"id":1653098,"option":"2","correct":false},{"id":1653099,"option":"3","correct":true},{"id":1653100,"option":"4","correct":false}]},{"q":"<p>Consider a collection 'places' in a database 'tourism' with the documents as given below. <br>\n<strong>Collection:</strong> places<br>\n{ \"_id\" : ObjectId(\"60d0121761cd5ba95d843cc7\"), \"name\" : \"Hanging Garden\", \"location\" : { \"type\" : \"Point\", \"coordinates\" : [ -73.97, 40.77 ] }, \"category\" : \"Parks\" }<br>\n{ \"_id\" : ObjectId(\"60d0121761cd5ba95d843cc8\"), \"name\" : \"Mumbai darshan\", \"location\" : { \"type\" : \"Point\", \"coordinates\" : [ -73.9928, 40.7193 ] }, \"category\" : \"tourist attraction\" }<br>\n{ \"_id\" : ObjectId(\"60d0121d61cd5ba95d843cc9\"), \"name\" : \"Tip of Nariman Point\", \"location\" : { \"type\" : \"Point\", \"coordinates\" : [ -73.9375, 40.8303 ] }, \"category\" : \"tourist attraction\" }</p>\n\n<p>The collection is indexed using the \"2dSphere\" index on the filed \"location\". A user is located at a location with coordinates (-73.93414657, 40.82302903). You need to perform the given operations on the database using Geospatial Queries.<br>\n1. Find all places within five miles of the user.<br>\n2. Consider the radius of the earth in miles as 3963.2.<br>\n3. Find all places within six miles of the user in sorted order from nearest to farthest.</p>\n\n<p>Which of the following set of commands will perform the above operations successfully?</p>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>&gt; db.places.find({type:{$geoSphere:{$centerSphere:[[-73.93414657, 40.82302903], 5*3963.2]}}})\n&gt; var meters_per_mile = 1609.34\n&gt; db.places.find({ location:{$centerSphere:{$geoWithin:{type:\"Sphere\", coordinates:[-73.93414657,\n40.82302903]}, $maxDistance:6/meters_per_mile }}})</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>&gt; db.places.find({ location:{$geoWithin:{$centerSphere:[[-73.93414657, 40.82302903],5/3963.2] }}})\n&gt; var meters_per_mile = 1609.34\n&gt; db.places.find({ location:{$nearSphere:{ $geometry:{type:\"Point\", coordinates:[-73.93414657, 40.82302903]}, $maxDistance:6*meters_per_mile }}})</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>&gt; db.places.find({ location:{$centerSphere:{$nearSphere:[[ -73.93414657,40.82302903], 3963.2] }}})\n&gt; var meters_per_mile = 1609.34\n&gt; db.places.find({ location:{$geoWithin:{$near:{type:\"Polygon\", coordinates:[-73.93414657,40.82302903]}, $gt:6*meters_per_mile }}})</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>&gt; db.places.find({ location: {$nearSphere:{$centerSphere:[[-73.93414657, 40.82302903],5/3963.2] }}})\n&gt; var meters_per_mile = 1609.34\n&gt; db.places.find({ location:{$nearSphere:{$in:{type:\"2DSphere\", coordinates:[-73.93414657, 40.82302903]}, $maxDistance:6*meters_per_mile}}})</code></pre>\n\n<p> </p>","a":[{"id":1653093,"option":"1","correct":false},{"id":1653094,"option":"2","correct":true},{"id":1653095,"option":"3","correct":false},{"id":1653096,"option":"4","correct":false}]},{"q":"<p>You have a database 'socialconnect' in MongoDB. A user 'gretawilson72' has access to the database. As an administrator for the database, you want to find out the session log generated for the user 'gretawilson72'. You need to enlist all sessions generated when a user 'gretawilson72' was working on the database 'socialconnect'.</p>\n\n<p>Choose the correct option that performs the given operation successfully.</p>","a":[{"id":1653089,"option":" db.sessions.find( {user: \"gretawilson7\", db: \"socialconnect\" } )","correct":false},{"id":1653090,"option":"db.system.sessions.aggregate( [ { $listSessions: { users: [ {user: \"gretawilson7\", db: \"socialconnect\" } ] } } ] )","correct":true},{"id":1653091,"option":"db.getAllSessions( [ { $sessions: { {user: \"gretawilson7\", db: \"socialconnect\" } } } ] )","correct":false},{"id":1653092,"option":"db.aggregateSessions( [ $list: { Sessions: { users: [ {user: \"gretawilson7\", db: \"socialconnect\" } ] } } ] )","correct":false}]},{"q":"<p>You are currently logged in a MongoDB Shell as an administrator. You are using the database 'admin' and you have a collection 'user_transactions'. You need to take the backup of certain contents of your database by exporting its content into '.bson' files.<br>\nYou need to do the following:<br>\n1. Take the backup of the all documents from collection 'user_transactions' where 'transaction_status' is 'processed'.<br>\n2. Store the backup at new location 'C:\\Users\\user\\Desktop\\datadump'.<br>\n3. View the contents of backup file 'user_transactions'.bson'.<br>\n4. Import the backup file 'user_transactions.bson' that is created at 'C:\\Users\\user\\Desktop\\datadump\\admin\\user_transactions' into a new database 'testdb' .<br>\nWhich of the following set of commands will perform the above operations successfully?</p>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use admin\n&gt; mongodump --o C:\\Users\\user\\Desktop\\datadump -db admin -collection user_transactions --criteria \"{status: processed}\"\n&gt; jsondump C:\\Users\\user\\Desktop\\datadump\\admin\\user_transactions.json\n&gt; restoredump -d testdb ''C:\\Users\\user\\Desktop\\datadump\\admin\\user_transactions\"</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use admin\n&gt; mongodump --out C:\\Users\\user\\Desktop\\datadump -d admin -c user_transactions --query \"{status: processed}\"\n&gt; bsondump C:\\Users\\user\\Desktop\\datadump\\admin\\user_transactions.bson\n&gt; mongorestore ''C:\\Users\\user\\Desktop\\datadump\\admin\\user_transactions\" -d testdb</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use admin\n&gt; mongodump --out gzip C:\\Users\\user\\Desktop\\datadump -d admin -c user_transactions --gssapiServiceName \"{status: processed}\"\n&gt; mongodump C:\\Users\\user\\Desktop\\datadump\\admin\\user_transactions\n&gt; restorecollection ''C:\\Users\\user\\Desktop\\datadump\\admin\\user_transactions\" -d testdb</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use admin\n&gt; mongodump --gzip C:\\Users\\user\\Desktop\\datadump -d admin -c user_transactions --queryFile \"{status: processed}\"\n&gt; jsondump C:\\Users\\user\\Desktop\\datadump\\admin\\user_transactions.json\n&gt; mongo --restore -d admin ''C:\\Users\\user\\Desktop\\datadump\\admin\\user_transactions\" -d testdb</code></pre>\n\n<p> </p>","a":[{"id":1653085,"option":"1","correct":false},{"id":1653086,"option":"2","correct":true},{"id":1653087,"option":"3","correct":false},{"id":1653088,"option":"4","correct":false}]},{"q":"<p>You have a collection 'employees' in a database 'mycompany'. You have created one replica of the MongoDB server (127.0.0.1:27017) and connected it to the server. To ensure the high viability of the data, you want to set up one more shard- ServerC (127.0.0.1:27019) and shard the database 'mycompany'.<br>\nFirst of all, you need to connect to the mongo server and add a new instance ServerC (127.0.0.1:27019) to the existing MongoDB cluster. Secondly, shard the database 'mycompany' and the collection using the shard keys 'employee_id' and 'employee_name'.</p>\n\n<p>Which of the following queries will perform best in the above scenario?</p>\n\n<p><strong>Queries</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>&gt; mongo --host --port 27017\n&gt; sh.addShard(\"ServerC:27019\")\n&gt; sh.enableSharding(mycompany)\n&gt; sh.shardCollection(\"db.employees\", {\"employee_id\":1, \"employee_name\":1})</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>&gt; mongo --host --port 27017\n&gt; sh.ShardServer(\"ServerC:27019\")\n&gt; sh.sharddatabase(mycompany)\n&gt; sh.shardCollection(\"db.employees\", {$shardkey:{\"employee_id\":1, \"employee_name\":1}})</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>&gt; mongo --host --port 27017\n&gt; sh.ShardCluster(\"ServerC:27019\")\n&gt; sh.addShard(mycompany)\n&gt; sh.shardCollection(\"db.employees\").shardKey({\"employee_id\":1 , \"employee_name\":1})</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>&gt; mongo --host --port 27017\n&gt; sh.shard(\"ServerC:27019\")\n&gt; sh.enableShardingOn(mycompany)\n&gt; sh.shardCollection(\"db.employees\").shardMany({\"employee_id\":1, \"employee_name\":1})</code></pre>\n\n<p> </p>","a":[{"id":1653081,"option":"1","correct":true},{"id":1653082,"option":"2","correct":false},{"id":1653083,"option":"3","correct":false},{"id":1653084,"option":"4","correct":false}]},{"q":"<p>You are given a tree of documents from a collection 'subjects' available in a database 'learning'. The relationship between the documents is modeled using the materialized path patterns. <br>\n<strong>Collection:</strong> subjects<br>\n{ \"_id\" : \"Products\", \"category\" : null }<br>\n{ \"_id\" : \"Electronics\", \"category\" : \",Products,\" }<br>\n{ \"_id\" : \"TV\", \"category\" : \",Products,Electronics,\" }<br>\n{ \"_id\" : \"Computers\", \"category\" : \",Products,Electronics,\" }<br>\n{ \"_id\" : \"Laptop\", \"category\" : \",Products,Electronics,Computers,\" }</p>\n\n<p>You need to query the documents to perform the below operations:<br>\ni. Retrieve the whole tree, sorting by the field 'category'.<br>\nii. Find the descendants of 'Electronics' using the regular expressions.<br>\niii. Find descendants of 'Products' where the 'Products' is at the topmost level of the hierarchy.<br>\niv. Find the child named 'Laptop' using its ancestors.</p>\n\n<p>Which of the following queries can perform the above scenario?</p>\n\n<p><strong>Queries</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use learning\n&gt; db.subjects.find( { category } )\n&gt; db.subjects.find( { category: Electronics} )\n&gt; db.subjects.find( {category : Products } )\n&gt; db.subjects.find( {category:Laptop } )</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use learning\n&gt; db.subjects.find().sort( { category: \"products\" } )\n&gt; db.subjects.find( { category: /products/Electronics/ } )\n&gt; db.subjects.find( {category : */Products/ } )\n&gt; db.subjects.find( {category : */Computers/ } )</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use learning\n&gt; db.subjects.find().sort( { category: 1 } )\n&gt; db.subjects.find( { category: /,Electronics,/ } )\n&gt; db.subjects.find( {category : /^,Products,/ } )\n&gt; db.subjects.find( {category : /^,Products,Electronics,Computers,/ } )</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use learning\n&gt; db.subjects.find().sort( { index: 1 } )\n&gt; db.subjects.find( { category: *\\Electronics\\ } )\n&gt; db.subjects.find( {category : \\Products,\\ } )\n&gt; db.subjects.find( {category : \\*,Products,Electronics,Computers,\\ } )</code></pre>\n\n<p> </p>","a":[{"id":1653077,"option":"1","correct":false},{"id":1653078,"option":"2","correct":false},{"id":1653079,"option":"3","correct":true},{"id":1653080,"option":"4","correct":false}]},{"q":"<p>You have a collection 'purchase_orders' with the documents as given below in a database 'myshop'.<br>\n<strong>Collection</strong>: purchase_orders<br>\n{ \"_id\" : ObjectId(\"60cb177c1c3423c6cd1188c4\"), \"item\" : \"Oximeter\", \"price\" : 50, \"customer_name\" : \"Alice\" }<br>\n{ \"_id\" : ObjectId(\"60cb177c1c3423c6cd1188c5\"), \"item\" : \"Sanitizer\", \"price\" : 20, \"customer_name\" : \"Jeff\" }<br>\n{ \"_id\" : ObjectId(\"60cb177c1c3423c6cd1188c6\"), \"item\" : \"Mask\", \"price\" : 10, \"customer_name\" : \"Kristen\" }<br>\n{ \"_id\" : ObjectId(\"60cb177c1c3423c6cd1188c7\"), \"item\" : \"Sanitizer\", \"price\" : 20, \"customer_name\" : \"Eric\" }<br>\n{ \"_id\" : ObjectId(\"60cb177c1c3423c6cd1188c8\"), \"item\" : \"Thermometer\", \"price\" : 30, \"customer_name\" : \"Jack\" }<br>\n{ \"_id\" : ObjectId(\"60cb177c1c3423c6cd1188c8\"), \"item\" : \"Mask\", \"price\" : 10, \"customer_name\" : \"Alice\" }<br>\n{ \"_id\" : ObjectId(\"60cb177c1c3423c6cd1188c8\"), \"item\" : \"Thermometer\", \"price\" : 30, \"customer_name\" : \"Jeff\" }<br>\n<br>\nWrite a query to find out the names of items and amount spent by the customers 'Alice' and 'Jeff' and arrange the results in descending order.</p>\n\n<p><strong>Query</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>db.purchase_orders.aggregate([\n{$match:{{$icustomer_name:[ {\"Alice\"}$or{\"Jeff\"} ]}}}, \n{$group:{_id:\"$item\", amount:{$total:\"$price\"}} sort:desc }\n])</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>db.purchase_orders.aggregate([\n{$match:{customer_name:{$like:[\"Alice\", \"Jeff\"]}}}, \n{$group:{_id:\"$item\", amount:{$sum:\"$price\"}}},\n{$sort:{$price:desc}} \n])</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>db.purchase_orders.aggregate([\n{$match:{customer_name:{$between:[\"Alice\", \"Jeff\"]}}},\n{$group:{_id:\"$item\", amount:{$sum:\"$price\"}}},\n{$sort:{$group:-1}} \n])</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>db.purchase_orders.aggregate([\n{$match:{customer_name:{$in:[\"Alice\", \"Jeff\"]}}},\n{$group:{_id:\"$item\", amount:{$sum:\"$price\"}}},\n{$sort:{amount:-1}} \n])</code></pre>\n\n<p> </p>","a":[{"id":1653073,"option":"1","correct":false},{"id":1653074,"option":"2","correct":false},{"id":1653075,"option":"3","correct":false},{"id":1653076,"option":"4","correct":true}]},{"q":"<p>You have a collection 'goods' with the documents as given below in a database 'sportshop'.<br>\n<strong>Collection:</strong> goods<br>\n{ \"_id\" : ObjectId(\"60caf89d1c3423c6cd1188c0\"), \"item\" : \"Hockey stick\", \"qty\" : 50, \"color\" : [ \"black\", \"brown\" ] }           \"<br>\n{ \"_id\" : ObjectId(\"60caf89d1c3423c6cd1188c1\"), \"item\" : \"Cricket bat\", \"qty\" : 100, \"color\" : [ \"black\", \"brown\" ] }         {<br>\n{ \"_id\" : ObjectId(\"60caf89d1c3423c6cd1188c2\"), \"item\" : \"Soccer ball\", \"qty\" : 25, \"color\" : [ \"red\", \"white\" ] }<br>\n{ \"_id\" : ObjectId(\"60cafc521c3423c6cd1188c3\"), \"item\" : \"Net\", \"qty\" : 30, \"spec\" : [ { \"color\" : \"blue\", \"type\" : \"long\" },  { \"color\" : \"white\", \"type\" : \"medium\" } ] }<br>\nFind the items having the colors black and brown, find the items for which type is mentioned as a medium and find all items having the color property with two values in them.<br>\nWhich of the following options will be useful in finding the required data as mentioned?</p>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use sportshop\n&gt; db.goods.find({$and: [{color:\"black\"},{color:\"brown\"}]})\n&gt; db.goods.find({\"type\":\"medium\"});\n&gt; db.goods.find({color:2})</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use sportshop\n&gt; db.goods.find({color:[\"black\",\"brown\"]})\n&gt; db.goods.find({spec:{$elemMatch:{\"type\":\"medium\"}}});\n&gt; db.goods.find({$color:2})</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use sportshop\n&gt; db.goods.find({color:{\"black\" &amp;&amp; \"brown\"}})\n&gt; db.goods.find({spec:{$match:{\"type\":\"medium\"}}});\n&gt; db.goods.find(color:{$size:2})</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use sportshop\n&gt; db.goods.find({[color:\"black\"]$or[color:\"brown\"]})\n&gt; db.goods.find({spec:{\"type\":\"medium\"}}});\n&gt; db.goods.find({$size:{color:2}})</code></pre>\n\n<p> </p>","a":[{"id":1653069,"option":"1","correct":false},{"id":1653070,"option":"2","correct":true},{"id":1653071,"option":"3","correct":false},{"id":1653072,"option":"4","correct":false}]},{"q":"<p>You have a database 'library' built using MongoDB. You need to perform the following operations on the database. You need to find out the names of the existing collections in the database 'library', create a collection 'books' in a database 'library' and in collection 'books', add the documents with the values given below. You need to search for the document with the key-value pair 'book- Clean code' and then print the data of all documents in a human-readable format.<br>\n<strong>Documents</strong><br>\n{ \"book\": \"Clean code\", \"author\": \"Robert Martin\" }<br>\n{ \"book\": \"Refactoring\",\"author\":\"Martin Fowler\"}<br>\nWhich of the following shows the correct set of commands to perform the above operations using MongoShell?</p>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use library\n&gt; show db.collections\n&gt; db.collections.insert({\" book\" :\"Clean code\", \"author\":\"Robert Martin\"}, {\"book\":\"Refactoring\",\"author\":\"Martin Fowler\"})\n&gt; db.document.find({\" book\" :\"Clean code\"})\n&gt; db.document.find().hprint()</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use library\n&gt; show collections\n&gt; db.books.insertMany([{\" book\" :\"Clean code\", \"author\":\"Robert Martin\"}, {\"book\":\"Refactoring\",\"author\":\"Martin Fowler\"}])\n&gt; db.books.find({\" book\" :\"Clean code\"})\n&gt; db.books.find().pretty()</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use library\n&gt; db collections\n&gt; db.collections.insertMany([{\" book\" :\"Clean code\", \"author\":\"Robert Martin\"}, {\"book\":\" Refactoring\",\"author\":\"Martin Fowler\"}])\n&gt; db.books.get({\" book\" :\"Clean code\"})\n&gt; db.books.print().pretty()</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>&gt; use library\n&gt; show collections\n&gt; db.books.insertValues([{\" book\" :\"Clean code\", \"author\":\"Robert Martin\"}, {\"book\":\"Refactoring\",\"author\":\"Martin Fowler\"}])\n&gt; db.books.find({\" book\" :\"Clean code\"})\n&gt; db.books.find().val()</code></pre>\n\n<p> </p>","a":[{"id":1653065,"option":"1","correct":false},{"id":1653066,"option":"2","correct":true},{"id":1653067,"option":"3","correct":false},{"id":1653068,"option":"4","correct":false}]}]
[{"q":"<p>You want to create an application using Flask that passes the data into an HTML file and displays that data in the browser. From the application file, pass the following values in the HTML file:<br>\n<strong>Title</strong>: My web page, content: Learn Python with me!<br>\n<br>\nCreate an HTML file named mypage.html and display the value of the title variable as the title of the web page. Also, display the value of the content variable using the largest heading tag in HTML.<br>\n<br>\nIdentify the correct code for the app.py and mypage.html files to build the above application.</p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1</strong></p>\n\n<pre class=\"prettyprint\"><code># app.py\n\nfrom flask import Flask, render_template\n\napp = Flask(__name__) \n@app.route(\"/\")\ndef home( title='My web page',\n        content='Learn Python with me!'):\n    return render_html(mypage.html)\n    \nif __name__==\"__main__\":\n app.run(debug=True)\n\n# mypage.html\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;{title}&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;{content} &lt;/h1&gt;\n    &lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p><strong>2</strong></p>\n\n<pre class=\"prettyprint\"><code># app.py\n\nfrom flask import Flask, render_template\n\napp = Flask(__name__) \n@app.route(\"/\")\ndef home():\n    return render_template(\n        'mypage.html',\n        title='My web page',\n        content='Learn Python with me!'\n    )\n    \nif __name__==\"__main__\":\n app.run(debug=True)\n\n# mypage.html\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;{{title}}&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;{{content}} &lt;/h1&gt;\n    &lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p><strong>3</strong></p>\n\n<pre class=\"prettyprint\"><code># app.py\n\nfrom flask import Flask, render_template\n\napp = Flask(__name__) \n@app.route(\"/\")\ndef home():\n    return render_template(\n        'mypage.html',\n       &lt; title='My web page'&gt;,\n        &lt;content='Learn Python with me!'&gt;\n    )\n    \nif __name__==\"__main__\":\n app.run(debug=True)\n\n# mypage.html\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;{%title%}&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;{%content%} &lt;/h1&gt;\n    &lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p><strong>4</strong></p>\n\n<pre class=\"prettyprint\"><code># app.py\n\nfrom flask import Flask, render_template\n\napp = Flask(__name__,  title='My web page',\n        content='Learn Python with me!') \n@app.route(\"/\")\ndef home():\n    return render_template('mypage.html')\n    )\n    \nif __name__==\"__main__\":\n app.run(debug=True)\n\n# mypage.html\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;title&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;content &lt;/h1&gt;\n    &lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1764977,"option":"1","correct":false},{"id":1764978,"option":"2","correct":true},{"id":1764979,"option":"3","correct":false},{"id":1764980,"option":"4","correct":false}]},{"q":"<p>You want to build your website using Flask. You have created the code for the website using an HTML file named index.html. Which of the following methods of the Flask will return output for the HTML file?<br>\n&nbsp;</p>","a":[{"id":1764973,"option":"render_html('index.html')","correct":false},{"id":1764974,"option":"url_for('index.html')","correct":false},{"id":1764975,"option":"show_template('index.html')","correct":false},{"id":1764976,"option":"render_template('index.html')","correct":true}]},{"q":"<p>Consider the Flask program given alongside.</p>\n\n<pre class=\"prettyprint\"><code>from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef demo():\n    return 'Method used is: %s' % request.method\n   \nif __name__==\"__main__\":\n app.run(debug=True)</code></pre>\n\n<p><br>\nWhat is the output of the program when executed on localhost?</p>","a":[{"id":1764981,"option":"Method used is: POST","correct":false},{"id":1764982,"option":"Method used is: GET","correct":true},{"id":1764983,"option":"Method used is: HEAD","correct":false},{"id":1764984,"option":"Method used is: NONE","correct":false}]},{"q":"<p>You are creating a single-page application in Flask. You need to catch all endpoints that route the requests to your application.<br>\nConcerning the above requirement, create a route to display the application name entered by the user. Create the second route with the default Url as '/appfiles/myapps/app.py'. Display the default Url on the page. Create another route that accepts a custom path from the user. Both the routes for the application Url must be routed using the same variable.<br>\n<br>\nIdentify the correct code snippet to create the routes.</p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1</strong></p>\n\n<pre class=\"prettyprint\"><code>from flask import Flask\nfrom flask import url_for\napp = Flask(__name__)\n\n@app.route(\"/appinfo/app_name\")\ndef user():\n   return f'Application name is: {app_name}'\n\n@app.route('/&lt;app_path&gt;= /appfiles/myapps/app.py')\n@app.route('/&lt;app_path&gt;')\ndef get_path('app_path'):\n    return app_path\n\nif __name__==\"__main__\":\n app.run(debug=True)</code></pre>\n\n<p>&nbsp;</p>\n\n<p><strong>2</strong></p>\n\n<pre class=\"prettyprint\"><code>from flask import Flask\napp = Flask(__name__)\n\n@app.route(\"/appinfo/&lt;app_name&gt;\")\ndef user(app_name):\n   return 'Application name is: %s' % app_name\n\n@app.route('/', defaults={'app_path': '/appfiles/myapps/app.py'})\n@app.route('/&lt;path:app_path&gt;')\ndef get_path(app_path):\n    return app_path\n\nif __name__==\"__main__\":\n app.run(debug=True)</code></pre>\n\n<p>&nbsp;</p>\n\n<p><strong>3</strong></p>\n\n<pre class=\"prettyprint\"><code>from flask import Flask\nfrom flask import escape\napp = Flask(__name__)\n\n@app.route(\"/&lt;app_name&gt;\")\ndef user(app_name):\n   return 'Application name is: escape{(app_name)}\n\n@app.route('/'app_path': /appfiles/myapps/app.py)\n@app.route('/&lt;app_path:path&gt;')\ndef get_path(path):\n    return escape{(app_path})\n\nif __name__==\"__main__\":\n app.run(debug=True)</code></pre>\n\n<p>&nbsp;</p>\n\n<p><strong>4</strong></p>\n\n<pre class=\"prettyprint\"><code>from flask import Flask\napp = Flask(__name__)\n\n@app.route(\"/appinfo/&lt;app_name&gt;\")\ndef user(app_name):\n   return 'Application name is: %s' , app_name\n\n@app.route(defaults: app_path{ '/appfiles/myapps/app.py'})\n@app.route('/&lt;path:app_path&gt;')\ndef get_path(app_path):\n    return app_path\n\nif __name__==\"__main__\":\n app.run(debug=True)</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1764965,"option":"1","correct":false},{"id":1764966,"option":"2","correct":true},{"id":1764967,"option":"3","correct":false},{"id":1764968,"option":"4","correct":false}]},{"q":"<p>You want to create a single-page website using Flask. When you run the website on a localhost, you want to display a message on its homepage. How will you create a function named 'greetuser' that displays a message as 'Welcome to my website!' using the '/' route?</p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1</strong></p>\n\n<pre class=\"prettyprint\"><code> @app.route()\ndef greetuser():\n    return 'Welcome to my website!'</code></pre>\n\n<p><strong>2</strong></p>\n\n<pre class=\"prettyprint\"><code> @app.route(__main__)\ndef greetuser():\n    return 'Welcome to my website!'</code></pre>\n\n<p><strong>3</strong></p>\n\n<pre class=\"prettyprint\"><code> @app.route(local)\ndef greetuser():\n    return 'Welcome to my website!'</code></pre>\n\n<p>4</p>\n\n<pre class=\"prettyprint\"><code> @app.route('/')\ndef greetuser():\n    return 'Welcome to my website!'</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1764957,"option":"1","correct":false},{"id":1764958,"option":"2","correct":false},{"id":1764959,"option":"3","correct":false},{"id":1764960,"option":"4","correct":true}]},{"q":"<p>You are sending the data to a server via a form on a web page. You should check that the server is getting data correctly. A FastCGI server is running in the background of the Apache server. Create a simple script to check the username you submitted earlier using a form. If the username is available on the server, send the username back to the client in the HTML format along with the HTTP status code.<br>\n<br>\nHow will you write the fcgi script to get a username response from a server?</p>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>def app(environ, start_response):\n    remote = wsgi.FieldStorage(environ['wsgi.input'], environ=environ)\n    username = 'Lisa'\n    if 'username' in remote:\n        username = request_data.get_first('username')\n    start_response('wsgi.errors', [('200 OK','text/html')])\n    return('Username is %s' % (cgi.escape(username)))\nwsgi.run_once(app, bindAddress = '/tmp/fcgi.sock').run()</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>def app(environ, start_response):\n    remote = cgi.FieldInput(environ['wsgi.url_scheme'], environ=environ)\n    username = 'Lisa'\n    if not 'username' in remote:\n        username = remote.get_first('username')\n    start_response('200 OK', [('status', 'text/html')])\n    return('Username is %s' % (cgi.escape(username)))\nWSGIServer(app, bindAddress = '/tmp/fcgi.sock').run()</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>def app(environ, start_response):\n    remote = cgi.FieldStorage(environ['wsgi.input'], environ=environ)\n    username = 'Lisa'\n    if 'username' in remote:\n        username = remote.get_first('username')\n    start_response('200 OK', [('Content-Type', 'text/html')])\n    return('Username is %s' % (cgi.escape(username)))\nWSGIServer(app, bindAddress = '/tmp/fcgi.sock').run()</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>def app(path, send_response):\n    remote = cgi.FormStorage(path['wsgi.input'], environ=environ)\n    username = 'Lisa'\n    if 'username' in remote:\n        username = remote.get_first('username')\n    send_response('404 Not Found', [('SERVER_PROTOCOL', 'text/html')])\n    return('Username is %s' % (cgi.escape(username)))\nWSGIServer(app, bindAddress = '/tmp/fcgi.sock').run()</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1757928,"option":"1","correct":false},{"id":1757929,"option":"2","correct":false},{"id":1757930,"option":"3","correct":true},{"id":1757931,"option":"4","correct":false}]},{"q":"<p>You need to process the incoming requests to the Apache server on which your application 'TellMeAudio' is deployed. You have installed flup on your host to work with FastCGI. A .fcgi file is required to pass the application data to the FastCGI server. How will you create the FastCGI server file for your application?</p>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>#!/usr/bin/python\nfrom Flask import FlupServer\nfrom tellmeaudio import app\napp = Flask(__name__)\n# app code\nif __name__ == '__main__':\n    Apache.run(app)</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>#!/usr/bin/python\nfrom Flask.flup import WSGIServer\nfrom app import tellmeaudio \napp = Flask(__name__)\n# app code\nif __name__ == '__main__':\n    app.run()</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>#!/usr/bin/python\nfrom flup.server.fcgi import FASTCGIServer\nfrom tellmeaudio import app\napp = Flask(__name__)\n# app code\nif __name__ == '__main__':\n    FASTCGIServer(app).run()</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>#!/usr/bin/python\nfrom flup.server.fcgi import WSGIServer\nfrom tellmeaudio import app\napp = Flask(__name__)\n# app code\nif __name__ == '__main__':\n    WSGIServer(app).run()</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1757924,"option":"1","correct":false},{"id":1757925,"option":"2","correct":false},{"id":1757926,"option":"3","correct":false},{"id":1757927,"option":"4","correct":true}]},{"q":"<p>Your application is deployed on an Apache server and it is sending the data to a server by appending the name of your .fcgi file in the application URL. So, you do not want your application .fcgi file to appear in the application URL. How will you configure your application to route your requests to the FastCGI server?</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>You should always handle the application data using the POST method and without the plain text to route requests to the FastCGI server.</li>\n\t<li>You should remove all the Request specific variables in the .fsgi file before routing requests to the FastCGI server.</li>\n\t<li>You should hide all environment variables passed in the configuration file before routing the requests to the FastCGI server.</li>\n\t<li>You should use ScriptAlias and SetHandler configuration directives to route requests to the FastCGI server.</li>\n</ol>","a":[{"id":1757920,"option":"1","correct":false},{"id":1757921,"option":"2","correct":false},{"id":1757922,"option":"3","correct":false},{"id":1757923,"option":"4","correct":true}]},{"q":"<p>You need to deploy your WSGI application on the Ngnix server. You have created the FastCGI server file for communication between the server and the browser. However, the connection has failed. Which of the following do you need to pass explicitly to communicate with the FastCGI server?</p>","a":[{"id":1757916,"option":"A new port number as HTTP port 80 might be busy","correct":false},{"id":1757917,"option":"The path to the socket to the WSGIServer","correct":true},{"id":1757918,"option":"FastCGI HTTP handler","correct":false},{"id":1757919,"option":"Standard encryption type for query encryption","correct":false}]},{"q":"<p>You need to call the event handler when an event is triggered while requesting the function in Sijax. Create a function 'connect_app' displaying the text 'App is connected!'. Call the following events handlers with their respective events triggered at the time of function call:</p>\n\n<ul>\n\t<li>If a problem occurs before the response function is executed, call an event handler displaying an alert with the text as 'Cannot be connected to an application at this moment.'</li>\n\t<li>If a problem occurs after the response function is executed, call an event handler displaying an alert with the text as 'Connection is stopped.'</li>\n\t<li>If the request is not valid, then call the event handler displaying the text, 'Function not found!'.</li>\n</ul>\n\n<p><br>\nIdentify the correct code snippet to implement the above functioning while handling the requests.</p>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>def handle_before(obj_response):\n    obj_response.alert('Cannot be connected to an application at this moment.')\ndef handler_after(obj_response):\n    obj_response.alert('Connection is stopped.')\ndef handler_on_invalid_request(obj_response, connect_app):\n    obj_response.alert('%s Function not found!' % function_name)\nsijax_instance = Sijax()\nsijax_instance.register_event(Sijax.EVENT.PRE_PROCESSING, handle_before)\nsijax_instance.register_event(Sijax.EVENT.POST_PROCESSING, handler_after)\nsijax_instance.register_event(Sijax.EVENT.INVALID_REQUEST, handler_on_invalid_request)\nsijax_instance.register_function('App is connected!', lambda r: r.alert('App is connected!'))</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>def before_function_handler(connect_app):\n    obj_response.alert('Cannot be connected to an application at this moment.')\ndef after_function_handler(connect_app):\n    obj_response.alert('Connection is stopped.')\ndef on_invalid_request_handler(obj_response, connect_app):\n    obj_response.alert('%s Function not found!' % function_name)\nsijax_instance = Sijax()\nsijax_instance.trigger_event(Sijax.FUNCTION_BEFORE_PROCESSING, before_function_handler\nsijax_instance.trigger_event(Sijax.FUNCTION_AFTER_PROCESSING, after_function_handler)\nsijax_instance.trigger_event(Sijax.FUNCTION_INVALID_REQUEST, on_invalid_request_handler)\nsijax_instance.register_function('App is connected!', lambda r: r.alert('App is connected!'))</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>def before_handler(obj_response):\n    obj_response.alert('Cannot be connected to an application at this moment.')\ndef after_handler(obj_response):\n    obj_response.alert('Connection is stopped.')\ndef invalid_request_handler(obj_response, connect_app):\n    obj_response.alert('%s Function not found!' % function_name)\nsijax_instance = Sijax()\nsijax_instance.register_event(Sijax.EVENT_BEFORE_PROCESSING, before_handler)\nsijax_instance.register_event(Sijax.EVENT_AFTER_PROCESSING, after_handler)\nsijax_instance.register_event(Sijax.EVENT_INVALID_REQUEST, invalid_request_handler)\nsijax_instance.register_callback('App is connected!', lambda r: r.alert('App is connected!'))</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>def before_handler(obj_response):\n    obj_response.alert('Cannot be connected to an application at this moment.')\ndef after_handler(obj_response):\n    obj_response.alert('Connection is stopped.')\ndef invalid_request_handler(obj_response, connect_app):\n    obj_response.alert('%s Function not found!' % function_name)\nsijax_instance = Sijax()\nsijax_instance.call_event(Sijax.EVENT:_BEFORE_, before_handler)\nsijax_instance.call_event(Sijax.EVENT: _AFTER_, after_handler)\nsijax_instance.call_event(Sijax.EVENT:_INVALID_REQUEST_, invalid_request_handler)\nsijax_instance.register_function('App is connected!', lambda r: r.alert('App is connected!'))</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1757912,"option":"1","correct":false},{"id":1757913,"option":"2","correct":false},{"id":1757914,"option":"3","correct":true},{"id":1757915,"option":"4","correct":false}]},{"q":"<p>You must register two or more functions with a single call in Sijax to avoid code repetition. Create 'display_msg' and 'display_text' functions that display print the messages 'Request accepted' and 'Request dispatched' respectively. Register both functions with a single call.<br>\nWhich is the correct way to perform the above operation?</p>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>class Handler(object):\nHandler():\n    def display_msg(obj_response):\n        app.logger.alert(\"Request accepted!\")\n    def display_text(obj_response):\n        app.logger.alert(\"Request dispatched!\")\nsijax_instance.register_many(object)</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>class Handler(object):\n    @broadcast_response\n    def display_msg((sijax.response.BaseResponse):\n       self.alert(\"Request accepted!\")\n    @broadcast_response\n    def display_text((sijax.response.BaseResponse):\n       self.alert(\"Request dispatched!\")\nsijax_instance.register_object(Handler)</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>class Handler(object):\n    @staticmethod\n    def display_msg(obj_response):\n        obj_response.alert(\"Request accepted!\")\n    @staticmethod\n    def display_text(obj_response):\n        obj_response.alert(\"Request dispatched!\")\nsijax_instance.register_object(Handler)</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>class Handler(object):\n    @expose_methods\n    def display_msg(obj_response):\n        obj_response.alert(\"Request accepted!\")\n    def display_text(obj_response):\n        obj_response.alert(\"Request dispatched!\")\nsijax_instance.register_object(Handler)</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1757908,"option":"1","correct":false},{"id":1757909,"option":"2","correct":false},{"id":1757910,"option":"3","correct":true},{"id":1757911,"option":"4","correct":false}]},{"q":"<p>You need to trigger a function upon a request in Flask-Sijax. Create a function named 'show_msg' that shows an alert with the text as 'Hello Pythonise!'.When a server handles the request using Sijax, pass the same message to the browser.<br>\nIdentify the correct code to write the above function using Sijax methods.</p>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>@app.route('/')\ndef index():\n   return 'Configuration is done.'\n@flask_sijax.route(app, '/hello')\ndef hello():\n   def show_msg(obj_response):\n        obj_response.alert('Hello Pythonise!')\n\n    if g.sijax.is_sijax_request:\n        g.sijax.register_callback('Hello Pythonise!', show_msg)\n        return g.sijax.process_request()\n\n    return _render_template('hello.html')</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>@app.route('/')\ndef index():\n   return 'Configuration is done.'\n@app.route(flask_sijax, '/hello')\ndef hello():\n   def show_msg(obj_response):\n        app.logger.alert(('Hello Pythonise!')\n\n    if g.app.sijax_request:\n        g.sijax.register_function(show_msg, 'Hello Pythonise!')\n        return g.sijax.app_request()\n\n    return _render_template('hello.html')</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>@app.route('/')\ndef index():\n   return 'Configuration is done.'\nclass ServResponse(sijax.response.BaseResponse):\ndef hello():\n   def show_msg(obj_response):\n        self.alert('Hello Pythonise!')\n    if g.sijax.is_sijax_request:\n        g.sijax.response('Hello Pythonise!', show_msg)\n        return g.sijax.process_request()\n    return _render_template('hello.html')</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>@app.route('/')\ndef index():\n   return 'Configuration is done.'\n@flask_sijax.route(app, '/hello')\ndef hello():\n   def show_msg(obj_response):\n       sijax_instance = Sijax()\n       sijax_instance.set_data.alert('Hello Pythonise!')\n    if g.sijax.is_sijax_instance:\n        g.sijax.register_callback(show_msg, 'Hello Pythonise!')\n        return g.sijax_instance.process_request()\n    return _render_template('hello.html')</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1757904,"option":"1","correct":true},{"id":1757905,"option":"2","correct":false},{"id":1757906,"option":"3","correct":false},{"id":1757907,"option":"4","correct":false}]},{"q":"<p>You have installed Flask-Sijax using pip at your application source path. Now, you need to use Sijax in your application by doing the client-side configuration. How will you update your app source code to work with Sijax?</p>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>We wiill need to update the configuration file using the following configuration options to locate the JS and JSON:\napp.config['SIJAX_JS'] = path to sijax.js files\napp.config['SIJAX_JSON'] = '/static/js/sijax/json2.js'\n\nAnd, include the files in the application as following:\n\njavascript_code = sijax_instance.get_js()\nSijax.setRequestUri('route to pass the requests')\n</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>We wiill need to update the configuration file using the following configuration options to locate the JS and JSON:\napp.config['SIJAX_PATH'] = path to sijax.js files\napp.config['SIJAX_JSON_URI'] = '/static/js/sijax/json2.js'\n\nAnd, include the files in the application as following:\n\n&lt;script type=\"text/javascript\"&gt;\n    var csrfToken = \"{{ csrf_token() }}\"\n&lt;/script&gt;\n</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>We wiill need to update the configuration file using the following configuration options to locate the JS and JSON:\napp.config['SIJAX_CONFIG_PATH'] = path to sijax.js files\napp.config['SIJAX_JSON_URI'] = '/static/js/sijax/json2.js'\n\nAnd, include the files in the application as following:\n\ninstance = Sijax()\ninstance.set_data(POST_DATA_HERE)\ninstance.set_request_uri(URI_OF_THE_CURRENT_PAGE)</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>We wiill need to update the configuration file using the following configuration options to locate the JS and JSON:\napp.config['SIJAX_STATIC_PATH'] = path to sijax.js files\napp.config['SIJAX_JSON_URI'] = '/static/js/sijax/json2.js'\n\nAnd, include the files in the application as following:\n\n&lt;script type=\"text/javascript\" src=\"/static/jquery.js\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\" src=\"/static/sijax.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1757900,"option":"1","correct":false},{"id":1757901,"option":"2","correct":false},{"id":1757902,"option":"3","correct":false},{"id":1757903,"option":"4","correct":true}]},{"q":"<p>You need to handle your app requests using Sijax in Flask. You will need to execute the function 'greet_users()' when the request is made. How will you register the function 'greet_user' to handle the requests?</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>You should use the statement 'sijax.is_sijax_request' with the return statement as a request type and register the function using the @app.route decorator.</li>\n\t<li>You should register the function 'greet_user' with @flask_sijax.route to make it capable to handle the Sijax requests.</li>\n\t<li>You should configure the static path of the application source using 'sijax.get_js()|safe' to render the Sijax for the application.</li>\n\t<li>You should register the function 'greet_user' with @app.template_global('csrf_token') to make it capable to handle the Sijax requests.</li>\n</ol>","a":[{"id":1757896,"option":"1","correct":false},{"id":1757897,"option":"2","correct":true},{"id":1757898,"option":"3","correct":false},{"id":1757899,"option":"4","correct":false}]},{"q":"<p><strong>Scenario</strong>: You need to create a database in SQLite for your web application.<br>\n<strong>Problem Statement:</strong> How will you create an 'inventory' database with id, name, quantity, and price fields?</p>\n\n<p><strong>Options</strong></p>\n\n<p>1.&nbsp;</p>\n\n<pre class=\"prettyprint\"><code>import sqlite3\nconn = sqlite3.create_databse('inventory.db')\nc = conn('inventory.db')\nc.query(CREATE TABLE products(id INTEGER, name TEXT, quantity INTEGER, price REAL))\nconn.execute()\nprint(\"db is created\")\nconn.close()</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>import sqlite3\nconn = sqlite3.connect('inventory.db')\nc = conn.cursor()\nc.execute('''CREATE TABLE products(id INTEGER, name TEXT, quantity INTEGER, price REAL)''')\nconn.commit()\nprint(\"db is created\")\nconn.close()</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>import sqlite3\nconn = sqlite3.create('inventory.db')\nc = cursor.connect(inventory)\nc.run(''CREATE TABLE products(id INTEGER, name VARTEXT, quantity INTEGER, price REAL)'')\nconn.commit()\nprint(\"db is created\")\nconn.close()</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>import sqlite3\nconn = sqlite3.connect('inventory.db')\nc = cursor(inventory)\nc.execute('''CREATE TABLE products(id INTEGER, name TEXT, quantity INTEGER, price FLOAT)''')\nc.commit()\nprint(\"db is created\")\nconn.close()</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1757892,"option":"1","correct":false},{"id":1757893,"option":"2","correct":true},{"id":1757894,"option":"3","correct":false},{"id":1757895,"option":"4","correct":false}]},{"q":"<p>You want to build a web application using <em>Flask</em><strong>.&nbsp;</strong>You have the following HTML code in <em>login.html</em> file in which you have a form that is used to send the information to the server.</p>\n\n<pre class=\"prettyprint\"><code>{% extends \"base.html\" %}\n{% block title %}Login Page{% endblock %}\n\n{% block content %}\n&lt;form action=\"#\" method=\"post\"&gt;\n    &lt;p&gt;Name:&lt;/p&gt;\n    &lt;p&gt;&lt;input type=\"text\" name=\"nm\" /&gt;&lt;/p&gt;\n    &lt;p&gt;&lt;input type=\"submit\" value=\"submit\"/&gt;&lt;/p&gt;\n&lt;/form&gt;\n{% endblock %}</code></pre>\n\n<p>Once you hit the submit button you get&nbsp;redirected to a page that displays the name the user entered. In order to render this template using python you run the following code.&nbsp;But unfortunately the code does not render the template. What are the errors in //Line1 and //Line2 which needs to be corrected in order to get the right result?</p>\n\n<pre class=\"prettyprint\"><code>from flask import Flask, redirect, url_for, render_template, request\n\napp = Flask(_name_)\n\n@app.route(\"/\")\ndef home():\n    return render_template(\"index.html\")\n\n@app.route(\"/login\", methods=[\"HEAD\", \"GET\"])// Line1\ndef login():\n    if request.method == \"HEAD\":  //Line2\n        user = request.form[\"nm\"]\n        return redirect(url_for(\"user\", usr=user))\n    else:\n        return render_template(\"login.html\")\n\n@app.route(\"/&lt;usr&gt;\")\ndef user(usr):\n    return f\"&lt;h1&gt;{usr}&lt;/h1&gt;\"\nif _name_ == \"_main_\":\n    app.run(debug=True)</code></pre>","a":[{"id":1740608,"option":"In //Line1 methods should be HEAD and POST and in //Line2 method should be POST","correct":false},{"id":1740609,"option":"In //Line1 methods should be GET and POST and in //Line2 method should be GET","correct":false},{"id":1740610,"option":"In //Line1 methods should be GET and POST and in //Line2 method should be POST","correct":true},{"id":1740611,"option":"In //Line1 methods should be HEAD and POST and in //Line2 method should be HEAD","correct":false}]},{"q":"<p>You want to build a web application using <em>Flask</em><strong>.&nbsp;</strong>Which of the following method can be used to render the \"index.html\" template file in which we will be passing some variables to be displayed?</p>\n\n<p>&nbsp;</p>","a":[{"id":1740616,"option":"display_template() method","correct":false},{"id":1740617,"option":"render() method","correct":false},{"id":1740618,"option":"render_template() method","correct":true},{"id":1740619,"option":"redirect() method","correct":false}]},{"q":"<p>You want to build a web application using <em>Flask</em><strong>.&nbsp;</strong>You have the following HTML code in a file named <em>index.html.&nbsp;</em></p>\n\n<pre class=\"prettyprint\"><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;{{ title }}&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;ol&gt;\n        {% for member in members: %}\n        &lt;li&gt;{{ member }}&lt;/li&gt;\n    {% endfor %}\n    &lt;/ol&gt;\n    &lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p>You want to pass two variables in this template, title, and list of usernames. Which of the following code in Python can render templates?</p>\n\n<p><strong>Code</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>@app.route('/')\n@app.route('/index')\ndef index():\n    users = [ 'Alice','Bob','Ben' ]\n    return render_template('index.html', title=&lt;'HELLO Members!'&gt;, members=&lt;users&gt;)</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>@app.route('/', '/index')\ndef index():\n    users = [ 'Alice','Bob','Ben' ]\n    return render_template('index.html', title={{'HELLO Members!'}}, members={{users}})</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>@app.route(/, /index)\ndef index():\n    users = { 'Alice','Bob','Ben' }\n    return render_template('index.html', title=&lt;{'HELLO Members!'}&gt;, members=&lt;{users}&gt;)</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>@app.route('/')\n@app.route('/index')\ndef index():\n    users = [ 'Alice','Bob','Ben' ]\n    return render_template('index.html', title='HELLO Members!', members=users)</code></pre>\n\t</li>\n</ol>","a":[{"id":1740604,"option":"1","correct":false},{"id":1740605,"option":"2","correct":false},{"id":1740606,"option":"3","correct":false},{"id":1740607,"option":"4","correct":true}]},{"q":"<p>You want to build a web application using <em>Flask</em><strong>.&nbsp;</strong>Flask can make use of the <em>SQLite3</em> module of python to create the database web applications. How can you connect a database named \"mydatabase.db\" with SQLite3?</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>connect = sqlite3.start(\"mydatabase.db\")  </code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>con = sqlite3.start(connect, \"mydatabase.db\")  </code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>con = connect(sqlite3, \"mydatabase.db\")  </code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>con = sqlite3.connect(\"mydatabase.db\")  </code></pre>\n\t</li>\n</ol>","a":[{"id":1740249,"option":"1","correct":false},{"id":1740250,"option":"2","correct":false},{"id":1740251,"option":"3","correct":false},{"id":1740252,"option":"4","correct":true}]},{"q":"<p>You want to build a web application using <em>Flask</em><strong>.&nbsp;</strong>Which of the following syntax is used to set the session variable to a specific value on the server?</p>\n\n<p><strong>Syntax</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>session.push(&lt;variable-name&gt;, value)</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>session.start(&lt;variable-name&gt;, value)</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Session(&lt;variable-name&gt;) = &lt;value&gt;</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Session[&lt;variable-name&gt;] = &lt;value&gt;</code></pre>\n\t</li>\n</ol>","a":[{"id":1740245,"option":"1","correct":false},{"id":1740246,"option":"2","correct":false},{"id":1740247,"option":"3","correct":false},{"id":1740248,"option":"4","correct":true}]},{"q":"<p>You want to build a web application using <em>Flask</em><strong>.&nbsp;</strong>You want to enhance users' experience in Flask and want to track the user's activities on the web and reflect some suggestions according to their choices. Which of the following will be the most appropriate for the above scenario?</p>","a":[{"id":1740241,"option":"Flask HTTP Methods","correct":false},{"id":1740242,"option":"Flask Cookies","correct":true},{"id":1740243,"option":"Flask Templates","correct":false},{"id":1740244,"option":"Flask Session","correct":false}]},{"q":"<p>You want to build a web application using <em>Flask</em><strong>. The&nbsp;</strong>HTTP protocol is the basis for data communication on World Wide Web. Suppose you want to send the data in unencrypted form to the server without the response body. Which of the following HTTP method will you use?</p>","a":[{"id":1739860,"option":"GET","correct":false},{"id":1739861,"option":"PUT","correct":false},{"id":1739862,"option":"HEAD","correct":true},{"id":1739863,"option":"POST","correct":false}]},{"q":"<p>You want to build a web application using <em>Flask</em><strong>. </strong>If you make&nbsp;any request other than&nbsp;<em><code>GET</code></em>&nbsp;to a route without the&nbsp;<code>methods</code>&nbsp;argument and a list of methods, then which of the following HTTP status code will you get as a result?</p>","a":[{"id":1738652,"option":"200 OK","correct":false},{"id":1738653,"option":"502 Bad Gateway","correct":false},{"id":1738654,"option":"404 Not Found","correct":false},{"id":1738655,"option":"405 Method Not Allowed","correct":true}]},{"q":"<p>You want to build a web application using <em>Flask</em><strong>. </strong>&nbsp;Why would you want to build URLs using the URL reversing function instead&nbsp;of hard-coding them into your templates in Flask? Which of the following statements is the reason for this?</p>\n\n<p><strong>Statements</strong></p>\n\n<ol>\n\t<li>Reversing is often more descriptive than hard-coding the URLs.</li>\n\t<li>You can change your URLs but you have to manually change the hard-coded URLs.</li>\n\t<li>URL building handles escaping of special characters transparently.</li>\n\t<li>The generated paths are always absolute, avoiding unexpected behavior of relative paths in browsers.</li>\n</ol>","a":[{"id":1738601,"option":"1 and 2","correct":false},{"id":1738602,"option":"3 and 4","correct":true},{"id":1738603,"option":"1, 2 and 3","correct":false},{"id":1738604,"option":"2, 3 and 4","correct":false}]},{"q":"<p>You want to build a web application using <em>Flask</em><strong>. </strong>In which of the following&nbsp;ways you can redirect a user to another endpoint in flask?</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>from flask import Flask\nfrom flask import Flask redirect, url_for\n\napp = Flask(_name_)\n\n@app.route('/')\ndef index():\n    return redirect(url_for('login'))</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>from flask import Flask\nfrom flask import Flask, redirect\n\napp = Flask(_name_)\n\n@app.route('/')\ndef index():\n    return redirect(\"http://login.com\", code=302)</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>from flask import Flask\nfrom flask import Flask,redirect\n\napp = Flask(_name_)\n\n\n@app.route('/')\ndef index():\n    return redirect(\"http://login.com\")</code></pre>\n\t</li>\n</ol>","a":[{"id":1738593,"option":"1 or 2","correct":false},{"id":1738594,"option":"2 or 3","correct":false},{"id":1738595,"option":"1 or 3","correct":false},{"id":1738596,"option":"All of these","correct":true}]},{"q":"<p>You want to build a web application using <em>Flask</em><strong>.&nbsp;</strong>You have a function that analyzes the CSV files with <em>pandas</em> and produces a dictionary with summary information. Your task is to return the result as a response from a Flask view.</p>\n\n<p>Which of the following code snippets can you use to implement the above mentioned scenario?</p>\n\n<p><strong>Code Snippets</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>from flask import Flask\n\napp = Flask(_name_)\n\n@app.route(\"/summary\")\ndef summary():\n    d = make_summary()\n    return d</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>from flask import Flask\n​​​​​​​from flask import jsonify\n\napp = Flask(_name_)\n\n@app.route(\"/summary\")\ndef summary():\n    d = make_summary()\n    return jsonify(d)</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>from flask import Flask\nfrom flask import json\n\napp = Flask(_name_)\n\n@app.route('/summary')\ndef summary():\n    data = make_summary()\n    response = app.response_class(\n        response=json.dumps(data),\n        status=200,\n        mimetype='application/json'\n    )\n    return response</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>from flask import Flask\nfrom flask import jsonify, make_response\n\napp = Flask(_name_)\n\n@app.route('/summary')\ndef summary():\n    d = make_summary()\n    return make_response(jsonify(d), 200)</code></pre>\n\t</li>\n</ol>\n\n<p>&nbsp;</p>","a":[{"id":1738581,"option":"1 or 2","correct":false},{"id":1738582,"option":"3 or 2","correct":false},{"id":1738583,"option":"1 or 4","correct":false},{"id":1738584,"option":"All of these","correct":true}]},{"q":"<p>You want to build a web application using <em>Flask</em><strong>.&nbsp;</strong>In which of the following URL's the following Flask application will be running?</p>\n\n<pre class=\"prettyprint\"><code>from flask import Flask\n\napp = Flask(_name_)\n\n@app.route('/')\ndef home():\n    return 'Hello World!'</code></pre>","a":[{"id":1735426,"option":"127.0.0.1:5000/","correct":false},{"id":1735427,"option":"127.0.0.1:5000/route","correct":false},{"id":1735428,"option":"http://127.0.0.1:5000/","correct":true},{"id":1735429,"option":"http:127.0.0.1:5000/route","correct":false}]},{"q":"<p>You want to build a web application using <em>Flask</em><strong>.&nbsp;</strong>How can you change the default host and port in the Flask?</p>\n\n<p><em>Note</em>: The <em>host</em> should be 0.0.0.0 and the <em>port</em> should be 8080.</p>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>from flask import Flask\napp = Flask(_name_)\n \n@app.route(\"/\")\ndef index():\n    return \"Hello, World!\"\n \nif _name_ == \"_main_\":\n    app.run(host=\"0.0.0.0\", port=8080)</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>from flask import Flask\napp = Flask(_name_)\n \n@app.route(\"/\")\ndef index():\n    return \"Hello, World!\"\n \nif _name_ == \"_main_\":\n    app.run(host=\"0.0.0.0:8080\")</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>from flask import Flask\napp = Flask(_name_)\n \n@app.route(\"/8080\")\ndef index():\n    return \"Hello, World!\"\n \nif _name_ == \"_main_\":\n    app.run(host=\"0.0.0.0\")</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>from flask import Flask\napp = Flask(_name_)\n \n@app.route(\"/\")\ndef index():\n    return \"Hello, World!\"\n \nif _name_ == \"_main_\":\n    app.run(host=\"localhost\", port=8080)</code></pre>","a":[{"id":1735422,"option":"1","correct":true},{"id":1735423,"option":"2","correct":false},{"id":1735424,"option":"3","correct":false},{"id":1735425,"option":"4","correct":false}]},{"q":"<p>You want to build a web application using <em>Flask</em><strong>. </strong>Which of the following HTTP methods&nbsp;is used to replace all the current representation of the target resource with the uploaded content?</p>\n\n<p>&nbsp;</p>","a":[{"id":1735414,"option":"GET","correct":false},{"id":1735415,"option":"PUT","correct":true},{"id":1735416,"option":"REPLACE","correct":false},{"id":1735417,"option":"POST","correct":false}]},{"q":"<p>You want to build a web application using <em>Flask</em><strong>.&nbsp;</strong>Flask supports various types of the HTTP protocol for data retrieval. You have to choose all the correct options that are supported on Flask. Which of the following HTTP methods are supported by Flask?</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>PUT</li>\n\t<li>DELETE</li>\n\t<li>HEAD</li>\n\t<li>TAIL</li>\n\t<li>GET</li>\n</ol>","a":[{"id":1735410,"option":"1, 2, 5 ","correct":false},{"id":1735411,"option":"1, 2, 3, 4","correct":false},{"id":1735412,"option":"1, 2, 3, 5","correct":true},{"id":1735413,"option":"All of these","correct":false}]},{"q":"<p>You want to build a web application using <em>Flask</em><strong>.&nbsp;</strong>If you want to add the mailing feature, to send a message which of the following code snippets can you run in order to do so?</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>from flask_mail import Mail, Message\nfrom flask import Flask\n \napp = Flask(_name_)\nmail = Mail(app)\n \n@app.route(“/mail”)\ndef email():\n    msg = Message( \"Hello Message\", sender=\"admin@test.com\", recipients=[“to@test.com”])\n   mail.send(msg)</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>from flask-mail import Mail, Message\nfrom flask import Flask\n \napp = Flask(_name_)\nmail = Mail(app)\n \n@app.route(“/mail”)\ndef email():\n    message = Message( “Hello Message”, sender=”admin@test.com”, recipients=[“to@test.com”])\n   mail.sent(message)</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>from flask_mail import Mail, Message\nfrom flask import Flask\n \napp = Flask(_name_)\nmail = Mail(app)\n \n@app.route(“/mail”)\ndef email():\n    msg = Message( “Hello Message”, sender=”admin@test.com”, recipients=[“to@test.com”])\n    msg.body='hello!!'\n   mail.send(msg)\n</code></pre>\n\t</li>\n</ol>","a":[{"id":1734544,"option":"2 or 3","correct":false},{"id":1734545,"option":"1 or 2","correct":false},{"id":1734546,"option":"1 or 3","correct":true},{"id":1734547,"option":"None of these","correct":false}]},{"q":"<p>You want to build a web application using <em>Flask</em><strong>.&nbsp;</strong>Predict the output of the following code:</p>\n\n<pre class=\"prettyprint\"><code>from flask import url_for\n\n@app.route('/')\ndef head():\n    return 'head'\n\n@app.route('/signin')\ndef sigin():\n    return 'signin'\n\n@app.route('/user/&lt;username&gt;')\ndef profile(username):\n    return f'{username}\\'s profile'\n\nwith app.test_request_context():\n    print(url_for('index'))\n    print(url_for('login'))\n    print(url_for('login', next='/'))\n    print(url_for('profile', username='Alice Smith'))</code></pre>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>/head\n/signin\n/signin?next=/\n/user/Alice Smith</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>/\n/signin\n/signin?next=/\n/user/Alice%20Smith</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>/head\n/signin\n/signin/next/\n/user/Alice%20Smith</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>/\n/signin\n/signin/next/\n/user/AliceSmith</code></pre>\n\t</li>\n</ol>","a":[{"id":1734491,"option":"1","correct":false},{"id":1734493,"option":"2","correct":true},{"id":1734495,"option":"3","correct":false},{"id":1734496,"option":"4","correct":false}]},{"q":"<p>You want to build a web application using <em>Flask</em>. You want to map the URL of your website with the associated function that is intended to return a string and output the name of your organization. How can you do so in Flask?</p>","a":[{"id":1733872,"option":"Using Flask HTTP Methods","correct":false},{"id":1733873,"option":"Using Flask URL Building","correct":false},{"id":1733874,"option":"Using Flask App Routing","correct":true},{"id":1733875,"option":"Using Flask Redirect","correct":false}]},{"q":"<p><strong>Numpy </strong>is a <strong>Flask Python </strong>package. Which of the following statements about Numpy is correct:</p>\n\n<ol>\n\t<li>NumPy is more compact than a list</li>\n\t<li>NumPy is more convenient than a list</li>\n\t<li>Numpy is more efficient than List</li>\n\t<li>It is simpler to read and write items with NumPy</li>\n</ol>","a":[{"id":819546,"option":"1","correct":false},{"id":819547,"option":"1 and 4","correct":false},{"id":819548,"option":"1, 2, and 3","correct":false},{"id":819549,"option":"All of these","correct":true}]},{"q":"<p>For using objects in Flask, _____________________________________ needs to be imported.</p>","a":[{"id":129708,"option":"flask ","correct":false},{"id":129709,"option":"request ","correct":false},{"id":129710,"option":"All of these","correct":true},{"id":129711,"option":"None of these","correct":false}]},{"q":"<p>In Flask, how is an application secured using <strong>SQL injection</strong>?</p>","a":[{"id":129588,"option":"Using (.) in sql query ","correct":false},{"id":129589,"option":"Using (?) in sql query ","correct":false},{"id":129590,"option":"Using (.) and (?) in sql query","correct":true},{"id":129591,"option":"Using (;) in sql query ","correct":false}]},{"q":"<p>In Flask, which of the following parameters is passed to the <strong>open_instance_resource()</strong> function?</p>","a":[{"id":129580,"option":"Resource","correct":false},{"id":129581,"option":"Mode","correct":false},{"id":129582,"option":"Both of these","correct":true},{"id":129583,"option":"None of these","correct":false}]},{"q":"<p>In Flask, which of the following methods is called, by default, by the <strong>process_response()</strong> method?</p>","a":[{"id":129528,"option":"before_request() ","correct":false},{"id":129529,"option":"after_request() ","correct":true},{"id":129530,"option":"Both of these","correct":false},{"id":129531,"option":"None of these","correct":false}]},{"q":"<p>In Flask, which of the following is the correct usage of a <strong>filter</strong>?</p>","a":[{"id":129540,"option":"<h3>{{ product['price']|format_currency }}</h3> ","correct":true},{"id":129541,"option":"<h3>{ product['price']|format_currency }</h3> ","correct":false},{"id":129542,"option":"<h3>{{ product['price'] format_currency }}</h3> ","correct":false},{"id":129543,"option":"{{ product['price'] format_currency }}","correct":false}]},{"q":"<p>In Flask, which of the following <strong>status codes</strong> is returned when a server responds to a request successfully?</p>","a":[{"id":129824,"option":"400 ","correct":false},{"id":129825,"option":"200 ","correct":true},{"id":129826,"option":"404 ","correct":false},{"id":129827,"option":"202 ","correct":false}]},{"q":"<p>In Flask, which of the following is a <strong>context</strong>?</p>","a":[{"id":129532,"option":"Dictionary","correct":true},{"id":129533,"option":"List","correct":false},{"id":129534,"option":"Array","correct":false},{"id":129535,"option":"Set","correct":false}]},{"q":"<p>In Flask, which of the following is used to differentiate between <strong>deployment-specific</strong> files and <strong>version-controlled</strong> application?</p>","a":[{"id":129500,"option":"Static files","correct":false},{"id":129501,"option":"Instance folders","correct":true},{"id":129502,"option":"Views","correct":false},{"id":129503,"option":"All of these","correct":false}]},{"q":"<p>In Flask, the <strong>instance</strong> folder acts like a holder bin for ________________________________________.</p>","a":[{"id":129504,"option":"Database files","correct":false},{"id":129505,"option":"Session files","correct":true},{"id":129506,"option":"All of these","correct":false},{"id":129507,"option":"None of these","correct":false}]},{"q":"<p>In Flask, which of these provides the data from a client to server?</p>","a":[{"id":129680,"option":"Response ","correct":false},{"id":129681,"option":"Request ","correct":true},{"id":129682,"option":"Both of these","correct":false},{"id":129683,"option":"Params","correct":false}]},{"q":"<p>In Flask, what is the precedence of a session over a cookie?</p>","a":[{"id":129756,"option":"Lower","correct":false},{"id":129757,"option":"Greater","correct":true},{"id":129758,"option":"Equal","correct":false},{"id":129759,"option":"None of these","correct":false}]},{"q":"<p>In Flask, which of the following methods is used to store the uploaded files on a server?</p>","a":[{"id":129724,"option":"store() ","correct":false},{"id":129725,"option":"save() ","correct":true},{"id":129726,"option":"save_file() ","correct":false},{"id":129727,"option":"file() ","correct":false}]},{"q":"<p>In Flask, which of the following parameters is passed in an <strong>open_session()</strong> method?</p>","a":[{"id":129572,"option":"Response ","correct":false},{"id":129573,"option":"Request ","correct":true},{"id":129574,"option":"Both of these","correct":false},{"id":129575,"option":"Params","correct":false}]},{"q":"<p>In Flask, what does <strong>jinja_env</strong> do?</p>","a":[{"id":129604,"option":"It sets up the development environment.","correct":false},{"id":129605,"option":"It loads templates.","correct":true},{"id":129606,"option":"Both of these","correct":false},{"id":129607,"option":"None of these","correct":false}]},{"q":"<p>In Flask, <strong>open_session()</strong> method is used to __________________.</p>","a":[{"id":129576,"option":"Open a session ","correct":false},{"id":129577,"option":"Create a session ","correct":false},{"id":129578,"option":"Open and create a session ","correct":true},{"id":129579,"option":"Start a session ","correct":false}]},{"q":"<p>In Flask, which of the following methods is used to navigate between pages?</p>","a":[{"id":129780,"option":"navigate() ","correct":false},{"id":129781,"option":"redirect() ","correct":true},{"id":129782,"option":"goto()","correct":false},{"id":129783,"option":"None of these","correct":false}]},{"q":"<p>Which of these statements about the <strong>Flask</strong> framework is correct?</p>","a":[{"id":818896,"option":"Flask is a micro web framework that is primarily build for small applications with simpler requirements. In Flask, you are required to use external libraries and it is a ready-to-use framework.","correct":true},{"id":818897,"option":"Flask is built for larger applications. It provides flexibility and allows developers to use the right tools for their project. The developer can select the database, URL structure, template style, etc. it is heavily configurable.","correct":false},{"id":818898,"option":"Both of these","correct":false},{"id":818899,"option":"None of these","correct":false}]},{"q":"<p>In Flask, which of the following methods is used to remove a session?</p>","a":[{"id":818846,"option":"session.remove()","correct":false},{"id":818847,"option":"session.end()","correct":false},{"id":818848,"option":"session.push()","correct":false},{"id":818849,"option":"session.pop()","correct":true}]},{"q":"<p>In Flask, what does <strong>url_for()</strong> function do?</p>","a":[{"id":129496,"option":"It defines the URL of static files.","correct":true},{"id":129497,"option":"It defines the URL of dynamic files.","correct":false},{"id":129498,"option":"It defines the URL of static and dynamic files.","correct":false},{"id":129499,"option":"None of these","correct":false}]},{"q":"<p>In Flask, which of the following keys needs to be defined to use a <strong>Session</strong>?</p>","a":[{"id":129844,"option":"Private","correct":false},{"id":129845,"option":"Public","correct":false},{"id":129846,"option":"Secret","correct":true},{"id":129847,"option":"Server","correct":false}]},{"q":"<p>In Flask, which of the following methods is triggered when the <strong>request context</strong> is popped?</p>","a":[{"id":129688,"option":"tearup_request()","correct":false},{"id":129689,"option":"teardown_request()","correct":true},{"id":129690,"option":"tearupdown_request()","correct":false},{"id":129691,"option":"None of these","correct":false}]},{"q":"<p>In Flask, which of the following response codes will be displayed if no <strong>keys</strong> are present in the form?</p>","a":[{"id":129700,"option":"404","correct":false},{"id":129701,"option":"200","correct":false},{"id":129702,"option":"400","correct":true},{"id":129703,"option":"None of these","correct":false}]},{"q":"<p>In Flask, which of the following is used to store cookies?</p>","a":[{"id":129760,"option":"set_cookie","correct":true},{"id":129761,"option":"cookie","correct":false},{"id":129762,"option":"store_cookie","correct":false},{"id":129763,"option":"None of these","correct":false}]},{"q":"<p>In Flask, what is the use of the <strong>abort()</strong> function?</p>","a":[{"id":129784,"option":"To stop the action ","correct":false},{"id":129785,"option":"To stop a server response ","correct":false},{"id":129786,"option":"To stop a server request ","correct":true},{"id":129787,"option":"To end a server request ","correct":false}]},{"q":"<p>What is the significance of <span class=\"mathjax-latex\">\\(Z\\)</span> in the following Flask code that is used for redirection:</p>\n\n<pre class=\"prettyprint\"><code>Flask.redirect(X,Y,Z)</code></pre>\n\n<p> </p>","a":[{"id":819550,"option":"Location","correct":false},{"id":819551,"option":"Statuscode","correct":false},{"id":819552,"option":"Response ","correct":true},{"id":819553,"option":"Error code","correct":false}]},{"q":"<p>In Flask, which of the following statements about <strong>to_python() </strong>and<strong> to_url()</strong> methods is correct:</p>\n\n<ol>\n\t<li><strong>to_python()</strong> is used to convert the path of a URL to a Python object that is passed to the <strong>view</strong> function</li>\n\t<li><strong>to_url() </strong>is used by the <strong>url_for()</strong> method to convert arguments to their appropriate forms in a URL</li>\n</ol>","a":[{"id":819542,"option":"Only 1","correct":false},{"id":819543,"option":"Only 2","correct":false},{"id":819544,"option":"Both 1 and 2","correct":true},{"id":819545,"option":"None of these","correct":false}]},{"q":"<p>In Flask, <strong>preprocess_request()</strong> is invoked before the ______________________________ method.</p>","a":[{"id":129564,"option":"before_request() ","correct":true},{"id":129565,"option":"after_request() ","correct":false},{"id":129566,"option":"Both of these","correct":false},{"id":372418,"option":"None of these","correct":false}]},{"q":"<p>In Flask, which of the following parameters is passed into <strong>wsgi_app</strong> method:</p>\n<ol>\n<li>Start_response</li>\n<li>Environment</li>\n<li>Stop_response</li>\n</ol>","a":[{"id":129484,"option":"1","correct":false},{"id":129485,"option":"2","correct":false},{"id":129486,"option":"1 and 2","correct":true},{"id":129487,"option":"3","correct":false}]},{"q":"<p>If a <strong>response</strong> object in Flask is of the correct type, which of the following statements is correct?</p>","a":[{"id":129816,"option":"It is directly returned from the view.  ","correct":true},{"id":129817,"option":"A response object is created with the data and its default parameters.  ","correct":false},{"id":129818,"option":"It provides extra information.  ","correct":false},{"id":372416,"option":"None of these","correct":false}]},{"q":"<p>In Flask, which of the following methods is used to display a customized error page instead of the traditional error page?</p>","a":[{"id":129772,"option":"errorhandle() ","correct":false},{"id":129773,"option":"errorhandler() ","correct":true},{"id":129774,"option":"handleerror() ","correct":false},{"id":129775,"option":"error()","correct":false}]},{"q":"<p>In Flask, which of the following commands is used to start a <strong>development server</strong> in <strong>debug</strong> mode?</p>","a":[{"id":129608,"option":"app.debug = True\r\napp.run()","correct":false},{"id":129609,"option":"app.run(debug=True)","correct":false},{"id":129610,"option":"Both of these","correct":true},{"id":129611,"option":"None of these","correct":false}]},{"q":"<p>How many blueprints can be created in an application?</p>","a":[{"id":129512,"option":"One","correct":false},{"id":129513,"option":"Same as the number of keys","correct":false},{"id":129514,"option":"As many as needed","correct":true},{"id":129515,"option":"Same as the number of templates","correct":false}]},{"q":"<p>Which of these parts of the following Flask code represents the View part of the Flask MVC pattern:</p>\n\n<pre class=\"prettyprint\"><code>from flask import Flask //1\napp = Flask(_name_)\n@app.route(‘/data’) //2\n    def data ( ) :\n    user = request.arg.get (‘user’)\napp.run(debug = True) //3\n</code></pre>","a":[{"id":818257,"option":"1","correct":false},{"id":818258,"option":"2","correct":false},{"id":818259,"option":"3","correct":true},{"id":818260,"option":"None of these","correct":false}]},{"q":"<p>In Flask, which of the following parameters is to be passed to the <strong>process_response()</strong> method?</p>","a":[{"id":129524,"option":"Request ","correct":false},{"id":129525,"option":"Response ","correct":true},{"id":129526,"option":"Both of these","correct":false},{"id":129527,"option":"Error ","correct":false}]},{"q":"<p>In Flask, which of these is used to convert a <strong>URL</strong> into a function?</p>","a":[{"id":129624,"option":"url() ","correct":false},{"id":129625,"option":"url_for() ","correct":true},{"id":129626,"option":"url_function() ","correct":false},{"id":129627,"option":"url_if() ","correct":false}]},{"q":"<p>In Flask, a <strong>URL</strong> depends on the ________________________________ module.</p>","a":[{"id":129616,"option":"Werkzeug's url module ","correct":false},{"id":129617,"option":"Werkzeug's routing module ","correct":true},{"id":129618,"option":"Both of these","correct":false},{"id":129619,"option":"None of these","correct":false}]},{"q":"<p>In Flask, which of the following methods are used to request for a database:</p>\n\n<ol>\n\t<li>before_request() </li>\n\t<li>after_request() </li>\n\t<li>connection_request()</li>\n\t<li>teardown_request()</li>\n</ol>","a":[{"id":818925,"option":"1, 2, and 3","correct":false},{"id":818926,"option":"2, 3, and 4","correct":false},{"id":818927,"option":"1, 3, and 4","correct":false},{"id":818928,"option":"1, 2, and 4","correct":true}]},{"q":"<p>In Flask, which of the following categories is present by default?</p>","a":[{"id":129852,"option":"Warning ","correct":false},{"id":129853,"option":"Error ","correct":false},{"id":129854,"option":"Message ","correct":true},{"id":129855,"option":"Result","correct":false}]},{"q":"<p>In Flask, what is the standard mode of <strong>open_instance_resource()</strong>?</p>","a":[{"id":129584,"option":"r","correct":false},{"id":129585,"option":"rw","correct":false},{"id":129586,"option":"b","correct":false},{"id":129587,"option":"rb","correct":true}]},{"q":"<p>In Flask, which of the following functions is used to <strong>flash</strong> a message?</p>","a":[{"id":129868,"option":"flash_message() ","correct":false},{"id":129869,"option":"flash() ","correct":true},{"id":129870,"option":"get_flash_message() ","correct":false},{"id":129871,"option":"message() ","correct":false}]},{"q":"<p>In Flask, what is the <strong>typecast</strong> of the return value from views?</p>","a":[{"id":129828,"option":"Json ","correct":false},{"id":129829,"option":"Object ","correct":true},{"id":129830,"option":"String ","correct":false},{"id":129831,"option":"Array","correct":false}]},{"q":"<p>In Flask, which of the following displays the logs of a server instead of \"404 page not found\" error message while routing the application to another URL?</p>","a":[{"id":129880,"option":"Logs ","correct":false},{"id":129881,"option":"Logging ","correct":false},{"id":129882,"option":"Logger ","correct":true},{"id":129883,"option":"Log","correct":false}]},{"q":"<p>In Flask, which of the following methods is used instead of a <strong>template engine</strong>?</p>","a":[{"id":129840,"option":"close()","correct":false},{"id":129841,"option":"quit()","correct":false},{"id":129842,"option":"escape()","correct":true},{"id":291477,"option":"None of these","correct":false}]},{"q":"<p>In Flask web framework, the uploaded files are stored as _____________________.</p>","a":[{"id":129728,"option":"A same file type","correct":false},{"id":129729,"option":"A Python object","correct":true},{"id":129730,"option":" A Flask object","correct":false},{"id":129731,"option":"An Array","correct":false}]},{"q":"<p>In Flask web framework, where are the uploaded files saved?</p>","a":[{"id":129736,"option":"Filesystem ","correct":false},{"id":129737,"option":"Memory ","correct":true},{"id":129738,"option":"Server ","correct":false},{"id":129739,"option":"Locally","correct":false}]},{"q":"<p>In Flask, which of the following invokes <strong>log_exception</strong>?</p>","a":[{"id":129600,"option":"logger","correct":false},{"id":129601,"option":"logging.logger","correct":false},{"id":129602,"option":"handle_exception","correct":true},{"id":129603,"option":"None of these","correct":false}]},{"q":"<p>In Flask, which of the following is used to generate URL for <strong>static</strong> files?</p>","a":[{"id":129664,"option":"url_static ","correct":false},{"id":129665,"option":"static ","correct":true},{"id":129666,"option":"static_url ","correct":false},{"id":129667,"option":"All of these","correct":false}]},{"q":"<p>In Flask, which of the following PB commands is used to resume the execution of a program?</p>","a":[{"id":819554,"option":"<b>","correct":false},{"id":819555,"option":"<c>","correct":true},{"id":819556,"option":"<s>","correct":false},{"id":819557,"option":"<l>","correct":false}]},{"q":"<p>In Flask, which of the following methods is used to hold a message?</p>","a":[{"id":129864,"option":"get_flash_message()","correct":false},{"id":129865,"option":"get_flashed_message()","correct":true},{"id":129866,"option":"flash()","correct":false},{"id":129867,"option":"flash_message()","correct":false}]}]
[{"q":"<p>What is the output of the following pseudocode:</p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>INTERFACE HACKEREARTH:\n    SET VAR STRING hack = \"Hi HackerEarth!\"\n    INVOKE FUNCTION func\nEND\n\nPUBLIC CLASS Main inherits INTERFACE HACKEREARTH and defines:\n    SET VAR STRING hack = \"Hello World!\"\n    \n    PUBLIC VOID FUNCTION func:\n        PRINT VAR hack\n    END\n        \n    PUBLIC FUNCTION Main:\n        SET Object obj as new Object for Class Main() /*This is the object created for the interface \n                                                        HACKEREARTH*/\n        INVOKE obj.func()\n    END\n</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1700786,"option":"Hi HackerEarth!","correct":false},{"id":1700787,"option":"Hello World!","correct":true},{"id":1700788,"option":"Compilation error","correct":false},{"id":1700789,"option":"None of these","correct":false}]},{"q":"<p>Which of the following statements is not correct about the C# code snippet given below?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>public class Hackerearth\n{\n    public virtual void hack(int h)\n    { \n        \n    }\n}\n\npublic abstract class hacker : Hackerearth\n{\n    public abstract override void hack(int h);\n}\n\npublic class hack_class : hacker\n{\n    public override void hack(int h)\n    { \n        \n    }\n}</code></pre>\n\n<p><strong>Statements:</strong></p>\n\n<ol>\n\t<li>The abstract class cannot override the virtual method with an abstract method.</li>\n\t<li>The method hack&nbsp;on the&nbsp;class hack_class cannot call the method hack on class Hackerearth.</li>\n</ol>","a":[{"id":1419632,"option":"Only Statement 1","correct":true},{"id":1419633,"option":"Only Statement 2","correct":false},{"id":1419634,"option":"Both 1 and 2","correct":false},{"id":1419635,"option":"None of the statements ","correct":false}]},{"q":"<p>Determine the output of the given code snippet?<br>\n<strong> code:</strong></p>\n\n<pre class=\"prettyprint\"><code>interface Foo {\nString name = \"Foo\";\nvoid print();\n}\nclass Bar implements Foo {\nString name = \"Bar\";\n\npublic void print() {\n    System.out.println(name); // Line 1\n}\npublic static void main(String[] args) {\nFoo foo = new Bar(); // Line 2\nfoo.print(); // Line 3\n}\n}</code></pre>\n\n<p> </p>","a":[{"id":1655785,"option":"Foo","correct":false},{"id":1655786,"option":"Bar","correct":true},{"id":1655787,"option":"Compilation failure at Line 1","correct":false},{"id":1655788,"option":"Compilation failure at Line 2","correct":false}]},{"q":"<p>Which of the following class declarations can be used to represent aggregation in java?</p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>class A{\n}\nclass B{\nA obj;\n}</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>class A{\n}\nclass B extends A{\n}</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>class A{\n}\nclass B extends A{\n}\nclass C extends A{\n}</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>class A{\n}\nclass B extends A{\n}\nclass C extends B{\n}</code></pre>\n\n<p> </p>","a":[{"id":1655917,"option":"1","correct":true},{"id":1655918,"option":"2","correct":false},{"id":1655919,"option":"3","correct":false},{"id":1655920,"option":"4","correct":false}]},{"q":"<p>Which of the following code snippet should be appended to the code snippet given alongside to print all the client names along with their clientids?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>Map&lt;String, Integer&gt; clientid = new HashMap&lt;&gt;();\nclientid.put(\"John\", 2);\nclientid.put(\"Don\", 4);\nclientid.put(\"Ron\", 30);</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>clientid.forEach((name, clientid) -&gt; System.out.println(name + \" is \" + clientid + \" id\"));</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>clientid.forAll((name, clientid) ). System.out.println(name + \"\" is \"\" + clientid + \"\" id\"\"));</code></pre>\n\n<p> </p>","a":[{"id":1655913,"option":"1","correct":true},{"id":1655914,"option":"2","correct":false},{"id":1655915,"option":"Either 1 or 2","correct":false},{"id":1655916,"option":"None of these","correct":false}]},{"q":"<p>Which line in the C# code snippet given below produces an error?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>interface Interface   // line 1\n{ \n    void ImplementMethod();   // line 2\n    \n} \nclass ImplementInterface    // line 3\n{ \n    static void Main()   // line 4\n    { \n        ImplementInterface obj = new ImplementInterface();   // line 5\n        obj.ImplementMethod();    // line 6\n        \n    } \n    public void ImplementMethod()    // line 7\n    { \n        \n    } \n    \n}</code></pre>\n\n<p> </p>","a":[{"id":1419097,"option":"Line 3","correct":false},{"id":1419098,"option":"Line 5","correct":false},{"id":1419099,"option":"Line 2","correct":false},{"id":1419100,"option":"The code does not give any error","correct":true}]},{"q":"<p>What will be the output of the following C# code?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\ninterface hack1 \n{  \n    void hack_func();  \n}  \ninterface hack2 \n{  \n    void hack_func();  \n}  \n\nclass Hack: hack2, hack1 \n{  \n    void hack1.hack_func() \n    {  \n        Console.WriteLine(\"hi\");  \n    }  \n    void hack2.hack_func() \n    {  \n        Console.WriteLine(\"hello\");  \n    }  \n}  \n    \nclass Hackerearth \n{  \n    static void Main(string[] args) \n    {  \n        hack2 h2 = new Hack(); \n        hack1 h1 = (hack1)h2;\n    \n        h1.hack_func();  \n        h2.hack_func();\n    }  \n}  </code></pre>\n\n<p> </p>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hi\nhello\n</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hi\nhi\n</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hello\nhello\n</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1419002,"option":"1","correct":true},{"id":1419003,"option":"2","correct":false},{"id":1419004,"option":"3","correct":false},{"id":1419005,"option":"The code gives a compilation error","correct":false}]},{"q":"<p>In C#, you are working on Indexers and you are using an indexer in an Interface. Which of the following statements in the given scenario is a valid alternative that can be used to apply the explicit interface member with respect to the code snippet given below and also what will be its benefit?<br>\n<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>public interface InterfaceUsingIndexers\n{\n    int this[int index]\n    {\n        get;\n        set;\n        \n    }\n}\nclass ClassInterfaceIndexer: InterfaceUsingIndexers\n{\n    private int[] array = new int[100];\n    public int this[int index] \n    {\n        get =&gt; array [index];\n        set =&gt; array [index] = val;\n        \n    }\n}</code></pre>\n\n<p><br>\n<br>\n<strong>Statements</strong>:</p>\n\n<ol>\n\t<li>\n\t<p>Implement the fully qualified name of the interface member. This helps in avoiding ambiguity in the case of a class implementing multiple interfaces containing the same indexer signature. ​<br>\n\t </p>\n\t</li>\n\t<li>\n\t<p>Implement the partially qualified name of the interface member. This helps in avoiding ambiguity in the case of a class implementing multiple interfaces containing the same indexer signature. ​<br>\n\t </p>\n\t</li>\n\t<li>\n\t<p>Implement the fully qualified name of the interface member. This helps in avoiding exceptions in the case of a class implementing single interfaces containing the same indexer signature. ​<br>\n\t </p>\n\t</li>\n\t<li>\n\t<p>Implement the fully qualified name of the interface member. This helps in avoiding exceptions in the case of a class implementing multiple interfaces containing the same indexer signature. ​</p>\n\t</li>\n</ol>","a":[{"id":1419467,"option":"1","correct":true},{"id":1419468,"option":"2","correct":false},{"id":1419469,"option":"3","correct":false},{"id":1419470,"option":"4","correct":false}]},{"q":"<p>In C#, you have an interface named 'Breed' which has a method 'Name'. Which of the following code snippets can you use to implement this interface using an abstract class 'Dog' such that the interface method maps on to the abstract class method?<br>\n<br>\n<br>\n<strong>Code Snippets:</strong></p>\n\n<p>1. </p>\n\n<pre class=\"prettyprint\"><code>abstract class Dog : Breed\n{\n    public abstract void Name();\n}</code></pre>\n\n<p> </p>\n\n<p>2. </p>\n\n<pre class=\"prettyprint\"><code>abstract class Dog.Breed\n{\n    public abstract void Name();\n}</code></pre>\n\n<p> </p>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>abstract class Dog : Breed\n{\n\n}</code></pre>\n\n<p> </p>","a":[{"id":1419607,"option":"1 and 2","correct":false},{"id":1419608,"option":"2 and 3","correct":false},{"id":1419609,"option":"only 1","correct":true},{"id":1419610,"option":"1 and 3","correct":false}]},{"q":"<p>You are given the following C# code. Determine the type of interface used in the given code.<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nusing System.Collections.Generic; \nclass Program_Demo\n{\n    static void Main()\n    {\n        Dictionary&lt;string, string&gt; dictObj = new Dictionary&lt;string, string&gt;();\n        dictObj [\"Raina\"] = \"Robin\";\n        WriteKeyA(dictObj);\n        SortedDictionary&lt;string, string&gt; sort = new SortedDictionary&lt;string, string&gt;();\n        sort[\"Raina\"] = \"Shawn\";\n        WriteKeyA(sort);\n        Console.ReadLine();\n        \n    }\n    static void WriteKeyA(IDictionary&lt;string, string&gt; i)\n    { \n        Console.WriteLine(i[\"Raina\"]); \n        \n    }\n}</code></pre>\n\n<p> </p>","a":[{"id":1419132,"option":"Sorted Dictionary","correct":false},{"id":1419133,"option":"IDictionary Interface","correct":true},{"id":1419134,"option":"INumerable Interface","correct":false},{"id":1419135,"option":"IComparable Interface","correct":false}]},{"q":"<p>What is the output of the C# code snippet given below?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nnamespace MyApplication\n{ \n    interface FirstInterface\n    { \n        void FirstMethod(); \n        \n    }\n    interface SecondInterface\n    { \n        void SecondMethod(); \n        \n    }\n    class Demo : FirstInterface, SecondInterface\n    { \n        public void FirstMethod()\n        { \n            Console.WriteLine(\"First piece of code\"); \n            \n        }\n        public void SecondMethod()\n        { \n            Console.WriteLine(\"Second piece of code\"); \n            \n        }\n        \n    }\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Demo myObj = new Demo();\n            myObj.FirstMethod();\n            myObj.SecondMethod(); \n            \n        } \n        \n    } \n    \n}</code></pre>\n\n<p> </p>\n\n<p><strong>Output:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Second piece of code\nFirst piece of code\n</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>First piece of code\n</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>First piece of code\nSecond piece of code\n</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Second piece of code</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1419102,"option":"1","correct":false},{"id":1419103,"option":"2","correct":false},{"id":1419104,"option":"3","correct":true},{"id":1419105,"option":"4","correct":false}]},{"q":"<p>What is the output of the following C# code snippet:<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nclass Rectangle : ImplementationInterface, DimensionsShape\n{\n    float x;\n    float y;\n    public Rectangle(float x, float y)\n    {\n        this.x=x;\n        this.y=y;\n        \n    }\n    float ImplementationInterface.X() =&gt; x;\n    float ImplementationInterface.Y() =&gt; y;\n    \n    float DimensionsShape.X() =&gt; x* 2.54f;\n    float DimensionsShape.Y() =&gt; y* 2.54f;\n    \n    static void Main()\n    {\n        Rectangle rect = new Rectangle(30.0f, 20.0f);\n        ImplementationInterface eDimensions = rect;\n        DimensionsShape mDimensions = rect;\n        Console.WriteLine(\"Length(in): {0}\", eDimensions.X());\n        Console.WriteLine(\"Width (in): {0}\", eDimensions.Y());\n        Console.WriteLine(\"Length(cm): {0}\", mDimensions.X());\n        Console.WriteLine(\"Width (cm): {0}\", mDimensions.Y());\n        \n    }\n}\ninterface ImplementationInterface\n{\n    float X();\n    float Y();\n}\ninterface DimensionsShape\n{\n    float X();\n    float Y();\n}\n</code></pre>\n\n<p> </p>\n\n<p><strong>Output</strong></p>\n\n<p> </p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Length(in): 30\nWidth (in): 20\nLength(cm): 76.2\nWidth (cm): 50.8</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Length(in): 30\nWidth (in): 20\nLength(cm): 76.2</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Length(in): 30\nWidth (in): 30\nLength(cm): 76.2\nWidth (cm): 76.8</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Length(in): 25\nWidth (in): 15\nLength(cm): 53.5\nWidth (cm): 35.3</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1419472,"option":"1","correct":true},{"id":1419473,"option":"2","correct":false},{"id":1419474,"option":"3","correct":false},{"id":1419475,"option":"4","correct":false}]},{"q":"<p>Which of the following meta data does a <em>BeanDefinition</em> object contain?</p>\n\n<p>i. A package-qualified class name</p>\n\n<p>ii. Configuration elements, which state how the bean should behave in the container.</p>\n\n<p>iii. Bean Dependencies</p>\n\n<p>iv. The number of connections to use in a bean that manages a connection pool</p>","a":[{"id":729444,"option":"i, ii, and iii","correct":false},{"id":729445,"option":"i, ii, and iv","correct":false},{"id":729446,"option":"i, iii, and iv","correct":false},{"id":729447,"option":"All of these","correct":true}]},{"q":"<p>What will be the output of the C# code snippet given below?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\ninterface IDumpable\n{\n    string Name \n    { \n        get; \n        set; \n        \n    }\n    void Dump();\n}\n \nclass Student : IDumpable\n{\n    string stud_name;\n    public string stud_city;\n    public int stud_roll_no;\n    public Student(string stud_name, string stud_city, int stud_roll_no)\n    {\n        this.stud_name = stud_name; \n        this.stud_city = stud_city; \n        this.stud_roll_no = stud_roll_no;\n        \n    }\n    public string Name\n    {\n        get \n        { \n            return stud_name; \n            \n        }\n        set \n        { \n            stud_name = value; \n            \n        }\n        \n    }\n    public void Dump()\n    {\n        Console.WriteLine(\"Student Details : {0}, {1}, {2}\", stud_name, stud_city, stud_roll_no);\n        \n    }\n    \n}\n \nclass Student_Test\n{\n    static void Main(string[] arg)\n    {\n        IDumpable[] test = \n        {\n            new Student(\"John\", \"Boston\", 995566777),\n            new Student(\"Mary\", \"Seattle\", 998979899),\n            new Student(\"Bob\", \"Chicago\", 994469549)\n            \n        };\n        foreach (IDumpable h in test)\n        {\n            Console.Write(h.Name + \": \");\n            h.Dump();\n            \n        }\n        \n    }\n    \n}</code></pre>\n\n<p> </p>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>John: Student Details : John, Boston, 995566777\nMary: Student Details : Mary, Seattle, 998979899\nBob: Student Details : Bob, Chicago, 994469549\n</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>John\nMary\nBob\n</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Student Details : John, Boston, 995566777\nStudent Details : Mary, Seattle, 998979899\nStudent Details : Bob, Chicago, 994469549\n</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Student Details : John, Boston, 995566777\nMary, Seattle, 998979899\nBob, Chicago, 994469549\n</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1419597,"option":"1","correct":true},{"id":1419598,"option":"2","correct":false},{"id":1419599,"option":"3","correct":false},{"id":1419600,"option":"4","correct":false}]},{"q":"<p>Which of the following C# code snippets can you use to invoke a default implementation with respect to the C# code given below?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>public interface HackI\n{\n    void hack1() =&gt; Console.WriteLine(\"Default Paint method\");\n}\npublic class Hack : HackI\n{\n    // hack1() is inherited from HackI.\n}</code></pre>\n\n<p><br>\n<br>\n<br>\n<strong>Code Snippets:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>var h = new Hack();\nh.hack1();</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>var h = new Hack();\nvar h2 = h as HackI;\nh2.hack1();</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1419622,"option":"1","correct":false},{"id":1419623,"option":"2","correct":true},{"id":1419624,"option":"1 and 2","correct":false},{"id":1419625,"option":"None of these","correct":false}]},{"q":"<p>Which of the following method implementation rules should you keep in mind while implementing the interface in the C# code given below?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>public interface WriterInterface\n{ \n    void FileWriting(); \n    \n}\n\npublic class XmlWritter: WriterInterface\n{\n    public void FileWriting()\n    {\n        Console.WriteLine(\"File is written in the XmlWriter class.\"); \n        \n    }\n}\npublic class JsonWriter: WriterInterface\n{\n    public void FileWriting()\n    {\n        Console.WriteLine(\"File is written in the JsonWritter class.\"); \n        \n    }\n}</code></pre>\n\n<p> </p>\n\n<p><strong>Rules:</strong></p>\n\n<ol>\n\t<li>The parameters must match exactly.<br>\n\t </li>\n\t<li>All the methods must be protected during implementation.<br>\n\t </li>\n\t<li>The method names and return types should be different.</li>\n</ol>","a":[{"id":1419147,"option":"Only 1","correct":true},{"id":1419148,"option":"Only 2","correct":false},{"id":1419149,"option":"Both 1 and 3","correct":false},{"id":1419150,"option":"Both 2 and 3","correct":false}]},{"q":"<p>Which of the following lines in the C# code snippet given below throws an error?<br>\n<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>public interface hack_Interface\n{\n    int hack_variable\n    {\n        \n        protected get; // L1\n        \n    }\n}\n\npublic class Hack : hack_Interface\n{\n    public int hack_variable\n    {\n        \n        protected get // L2\n        { \n            return 10; \n            \n        }\n        \n        protected set // L3\n        { \n            \n        }\n        \n    }\n}</code></pre>\n\n<p> </p>","a":[{"id":1419532,"option":"Only L1","correct":false},{"id":1419533,"option":"Only L2","correct":false},{"id":1419534,"option":"Only L3","correct":false},{"id":1419535,"option":"Both L1 and L2","correct":true}]},{"q":"<p>Which of these lines of code produces a compiler error when the code snippet given below is executed:</p>\n\n<pre class=\"prettyprint\"><code>public class SampleClass : IControl, ISurface //L1\n{\n void IControl.Paint()\n {\n System.Console.WriteLine(\"IControl.Paint\");\n }\n void ISurface.Paint()\n {\n System.Console.WriteLine(\"ISurface.Paint\");\n }\n}\nSampleClass obj = new SampleClass();\nobj.Paint(); //L2\nIControl c = obj;\nc.Paint(); //L3\nISurface s = obj;\ns.Paint(); //L4</code></pre>\n\n<p> </p>","a":[{"id":1419627,"option":"L1","correct":false},{"id":1419628,"option":"L2","correct":true},{"id":1419629,"option":"L3","correct":false},{"id":1419630,"option":"L4","correct":false}]},{"q":"<p>In Java, which of the following statements about <em>Interface</em> are true:</p>\n\n<ol>\n\t<li>An interface can extend multiple interfaces.</li>\n\t<li>An interface cannot extend any class.</li>\n\t<li>Interface methods can define an implementation by using the default methods.</li>\n\t<li>A static method in a class does not hide or override the static method in the interface that it implements.</li>\n</ol>","a":[{"id":693624,"option":"1, 2, and 3","correct":true},{"id":693625,"option":"1, 2, and 4","correct":false},{"id":693626,"option":"1, 3, and 4","correct":false},{"id":693627,"option":"All of these","correct":false}]},{"q":"<p>Which of the following options represents a valid functional interface?</p>\n\n<p><strong>Options:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>public interface Hackerearth\n{\n  int getInput(int a, int b);\n}\n</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>public interface Hiring extends Hackerearth\n{\n  int getInput(double a, double b);\n}</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>public interface Competitors\n{\n}</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>interface Hackerearth\n{\n  int getInput(int num1, int num2);\n  default int getValue()\n  {\n    return 0;\n  }\n}</code></pre>\n\t</li>\n</ol>","a":[{"id":552700,"option":"1 and 4","correct":true},{"id":552701,"option":"1 and 2","correct":false},{"id":552702,"option":"All of these","correct":false},{"id":552703,"option":"None of these ","correct":false}]},{"q":"<p>What is the output of the following Java code:</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>interface IntNumber \n{\n    void ins(int item); \n    int delt();\n}\n\nclass HackerEarth implements IntNumber \n{\n    private int stck[];\n    private int pos;\n\nHackerEarth(int size)\n{\n    stck = new int[size];\n    pos = -1;\n}\n\npublic void ins(int item) \n{\n    if(pos==stck.length-1)  \n        System.out.println(\"Overflow\");\n    else\n        stck[++pos] = item;\n}\n\npublic int delt() \n{\n    if(pos &lt; 0)\n    {\n        System.out.println(\"Underflow\");\n        return 0;\n    }\n    else\n    return stck[pos--];\n}\n}\n\nclass Hacker \n{\npublic static void main(String args[]) \n{\n    HackerEarth obj = new HackerEarth(3);\n    for(int i=0; i&lt;4; i++) obj.ins(i);\n    for(int i=0; i&lt;=3; i++)\n    System.out.println(obj.delt());\n}\n}   \n</code></pre>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Overflow\n2\n1\n0\nUnderflow\n0</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>2\n1\n0\n0</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Overflow\n2\n1\n0\n0</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>2\n1\n0\nUnderflow\n0</code></pre>\n\t</li>\n</ol>","a":[{"id":691086,"option":"1","correct":true},{"id":691087,"option":"2","correct":false},{"id":691088,"option":"3","correct":false},{"id":691089,"option":"4","correct":false}]},{"q":"<p>Which of the following keywords is used to inherit one interface from another interface in Java?</p>","a":[{"id":675882,"option":"extends","correct":true},{"id":675883,"option":"implements","correct":false},{"id":675884,"option":"extend","correct":false},{"id":675885,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>interface IntNumber \n{\n    void ins(int item); \n    int delt();\n}\n\nclass HackerEarth implements IntNumber \n{\n    private int stck[];\n    private int pos;\n\nHackerEarth(int size)\n{\n    stck = new int[size];\n    pos = -1;\n}\n\npublic void ins(int item) \n{\n    if(pos==stck.length)  \n        System.out.println(\"Overflow.\");\n    else\n        stck[++pos] = item;\n}\n\npublic int delt() \n{\n    if(pos &lt;= 0)\n    {\n        System.out.println(\"Underflow.\");\n        return 0;\n    }\n    else\n    return stck[pos--];\n}\n}\n\nclass Hacker \n{\n\npublic static void main(String args[]) \n{\n    HackerEarth obj = new HackerEarth(3);\n    for(int i=0; i&lt;4; i++) obj.ins(i);\n    for(int i=0; i&lt;=3; i++)\n    System.out.println(obj.delt());\n}\n\n}   \n</code></pre>\n\n<p> </p>","a":[{"id":691090,"option":"Overflow\r\n2\r\n1\r\n0\r\n\r\n","correct":false},{"id":691091,"option":"Overflow\r\n2\r\n1\r\n0\r\nUnderflow\r\n0","correct":false},{"id":691092,"option":"Compile Time Error","correct":false},{"id":691093,"option":"An Exception is generated at run-time","correct":true}]},{"q":"<p>In Java, which of the following methods can be declared in an <strong>interface:</strong></p>","a":[{"id":674482,"option":"Abstract methods","correct":false},{"id":674483,"option":"Static methods","correct":false},{"id":674484,"option":"Default methods","correct":false},{"id":674485,"option":"All of these","correct":true}]},{"q":"<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>import java.util.*;\nimport java.lang.*;\n\ninterface HackerEarth \n{\n    public void work();\n    class NoWork implements HackerEarth\n    {\n        private NoWork() \n        {\n            System.out.println(\"No Coding in Java\");    \n        }\n        public void work()\n        {\n            System.out.println(\"Code in Java\");    \n        }\n    }\n    HackerEarth obj = new NoWork();\n}\npublic class Main\n{\n    public static void main(String[] args)\n    {\n        getWork(HackerEarth.obj);\n    }\n    public static void getWork(HackerEarth obj) \n    {\n        obj.work();\n    }\n}\n</code></pre>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>Code in Java</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>No Coding in Java</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>No Coding in Java\nCode in Java</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>Code in Java\nNo Coding in Java</code></pre>\n\n<p> </p>","a":[{"id":674512,"option":"1","correct":false},{"id":674513,"option":"2","correct":false},{"id":674514,"option":"3","correct":true},{"id":674515,"option":"4","correct":false}]},{"q":"<p>How many methods does the<strong> HackerCoder </strong>interface have in the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>public interface Hacker\n{\n    void NotCoding();\n    void setRate(double rate);\n    double getRate();\n}\n\npublic interface Coder \n{\n    void Coding();\n    void setRate(double rate);\n    double getRate();\n}\n\npublic interface HackerCoder extends Hacker, Coder \n{\n    ......\n    ......\n}\n</code></pre>\n\n<p> </p>","a":[{"id":676578,"option":"3","correct":false},{"id":676579,"option":"4","correct":false},{"id":676580,"option":"5","correct":false},{"id":676581,"option":"6","correct":true}]},{"q":"<p>In Java, which of the following statements about the <strong>Comparator Interface</strong> is correct?</p>\n\n<ol>\n\t<li>It must be implemented by all the elements in a SortedSet.</li>\n\t<li>It defines a function that is used to compare two objects.</li>\n\t<li>It can be used to design the custom-ordering scheme.</li>\n\t<li>It is used to order the objects of user-defined classes.</li>\n</ol>","a":[{"id":578450,"option":"1, 2, and 4","correct":false},{"id":578451,"option":"2 and 4","correct":false},{"id":578452,"option":"2, 3, and 4","correct":true},{"id":578453,"option":"1 and 4","correct":false}]},{"q":"<p>In Java, which of the following is inherited by a subinterface from its superinterface?</p>\n\n<ol>\n\t<li>Abstract methods</li>\n\t<li>Default methods</li>\n\t<li>Constant fields</li>\n\t<li>Static methods</li>\n</ol>","a":[{"id":676574,"option":"1, 2, and 3","correct":true},{"id":676575,"option":"1, 2, and 4","correct":false},{"id":676576,"option":"1, 3, and 4","correct":false},{"id":676577,"option":"All of these","correct":false}]}]
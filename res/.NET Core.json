[{"q":"<p>Alice is working on the Garbage Collector (GC) to&nbsp;manage the allocation and release of memory in her .NET Core application. Which of the following statements represent the advantages of implementing the Garbage Collection:</p>\n\n<p><strong>Statements</strong></p>\n\n<ol>\n\t<li>When objects are no longer used then this Garbage Collection&nbsp;will remove those objects automatically by clearing their memory and removing it for future allocations.</li>\n\t<li>Garbage Collection&nbsp;provides safety to the memory by confirming that the object cannot use the content of another object.</li>\n\t<li>Garbage Collection's object allocation on the heap is very effective.</li>\n</ol>","a":[{"id":1727860,"option":"1 and 2","correct":false},{"id":1727861,"option":"2 and 3","correct":true},{"id":1727862,"option":"1 and 3","correct":false},{"id":1727863,"option":"All of these","correct":false}]},{"q":"<p>What could possibly be the result of returning IEnumerable from a controller action when working with web APIs in .NET Core 2.2?</p>","a":[{"id":1673179,"option":"Potential need for pool starvation","correct":false},{"id":1673180,"option":"Blocked calls","correct":false},{"id":1673181,"option":"Both 1 and 2","correct":true},{"id":1673182,"option":"Neither 1 nor 2","correct":false}]},{"q":"<p>You are using .NET Core 3.0 to load and unload a set of assemblies. When doing so, you notice that the unloading process is forced.<br>\nWhich of the following must have been used to unload the assemblies in the given scenario?</p>","a":[{"id":1673055,"option":"AssemblyLoadContext","correct":false},{"id":1673056,"option":"AppDomains","correct":true},{"id":1673057,"option":"AssemblyDependencySolver","correct":false},{"id":1673058,"option":"TestAssemblyLoadContext","correct":false}]},{"q":"<p>The code snippet given alongside is generated when adding a code based migration in .NET Entity Framework 6.<br>\nWhat can be used in place of XXX to specify a default value of 3 for Blog.Rating in this context?</p>\n\n<pre class=\"prettyprint\"><code>namespace MigrationsAutomaticDemo.Migrations\n {\n using System;\n using System.Data.Entity.Migrations;\n\n public partial class AddBlogRating : DbMigration\n {\n public override void Up()\n {\n XXX \n}\n\n public override void Down()\n {\n DropColumn(\"Blogs\", \"Rating\");\n }\n }\n }</code></pre>\n\n<p> </p>","a":[{"id":1418757,"option":"AddColumn(\"Blogs\", \"Rating\", c => c.Int(nullable: false, defaultValue: 3))","correct":true},{"id":1418758,"option":"AddColumn(\"Blogs\", \"Rating\", c => c.Int(nullable: false, 3))","correct":false},{"id":1418759,"option":"AddColumn(\"Blogs\", \"Rating\", c.Int(nullable: false, defaultValue: 3))","correct":false},{"id":1418760,"option":"Either 1 or 3","correct":false}]},{"q":"<p>in Entity Framework 6, you want to execute a query while working with DbContext. In which of the following conditions will the query execute?<strong>Conditions</strong><br>\n1. If the query is enumerated by a collection operation.<br>\n2. If LINQ operators such as First or Any are specified in the outermost part of the query.<br>\n3. If the query is enumerated by a foreach statement.</p>","a":[{"id":1418712,"option":"Only 1 and 2","correct":false},{"id":1418713,"option":"Only 2 and 3","correct":false},{"id":1418714,"option":"Only 1 and 3","correct":false},{"id":1418715,"option":"All 1, 2 and 3","correct":true}]},{"q":"<p>You are using the System.Collections.Concurrent.BlockingCollection collection class when writing parallel codes in .Net.<br>\nIn which of the following situations do the Producer threads block in the given context?<br>\n1. If no slots are available<br>\n2. If the collection is empty.</p>","a":[{"id":1418747,"option":"Only 1","correct":true},{"id":1418748,"option":"Only 2","correct":false},{"id":1418749,"option":"Both 1 and 2","correct":false},{"id":1418750,"option":"Neither 1 nor 2","correct":false}]},{"q":"<p>You want to create an element that contains three properties A, B and C present in the source element using LINQ. In the given scenario, which of the following would be a valid way to do so:<br>\n1.Usage of dot operation<br>\n2.Usage of an object initializer with a Named object type<br>\n3.Usage of an object initializer with an anonymous object type</p>","a":[{"id":1418697,"option":"Only 1,2","correct":false},{"id":1418698,"option":"Only 2,3","correct":true},{"id":1418699,"option":"Only 1,3","correct":false},{"id":1418700,"option":"All 1,2 and 3","correct":false}]},{"q":"<p>You have defined your initial query path to include an object A using the include method. The objects returned are then projected onto an anonymous type using LINQ.<br>\nWhich of the following statements can be considered valid in the given scenario?</p>","a":[{"id":1418692,"option":"a NotSupportedException is thrown","correct":false},{"id":1418693,"option":"an ArgumentException is thrown","correct":false},{"id":1418694,"option":"A will not be included in the query result","correct":true},{"id":1418695,"option":"A typeCast exception is thrown","correct":false}]},{"q":"<p>In LINQ, you are implementing a complex LINQ join method to Entities use case. You find that a join method that uses IEqualityComparer is not supported and is raising an exception.<br>\nWhat can be the reason behind this issue?</p>","a":[{"id":1418687,"option":"The controller used is not an OData endpoint","correct":false},{"id":1418688,"option":"The server page size has been set to a very low value preventing the join method from acquiring the entities required for making comparisons","correct":false},{"id":1418689,"option":"Translation of comparer to data source is not possible","correct":true},{"id":1418690,"option":"The LINQ provider is not configured to encrypt data during transport so the IAuthentication interface configuration is preventing the data from being sent","correct":false}]},{"q":"<p>You are using a template method that provides the skeleton to an algorithm that can be overridden by another class. Which type of design pattern is being referred to in the given context?</p>","a":[{"id":1418667,"option":"Structural design pattern","correct":false},{"id":1418668,"option":"Behavioral design pattern","correct":true},{"id":1418669,"option":"Productive design pattern","correct":false},{"id":1418670,"option":"Creational design pattern","correct":false}]},{"q":"<p>In .NET, you have created an Object pool to manage the object caching. What is achieved by designing the Reusable Pool class as a singleton class?</p>","a":[{"id":1418732,"option":"All Reusable objects that are not currently in use in the same object pool are managed by one coherent policy","correct":true},{"id":1418733,"option":"All Reusable objects that are currently in use in the same object pool are managed by one coherent policy","correct":false},{"id":1418734,"option":"New objects will be created if the pool is empty","correct":false},{"id":1418735,"option":"None of these","correct":false}]},{"q":"<p>In .NET, you are given that an operation can be parallelized making it computationally expensive. What can be said about the speedup of the operation if you are working with PLINQ in .NET?</p>","a":[{"id":1418777,"option":"The opportunity for speedup is high","correct":true},{"id":1418778,"option":"The opportunity for speedup is low","correct":false},{"id":1418779,"option":"The opportunity of speedup depends on the delegate for the operation","correct":false},{"id":1418780,"option":"None of these","correct":false}]},{"q":"<p>You want to communicate over the Internet when creating peer-to-peer applications. Which of these NameClasses from the .NET Framework Class Library would you use to complete the task?</p>","a":[{"id":1418672,"option":"System.Data","correct":false},{"id":1418673,"option":"System.Net","correct":true},{"id":1418674,"option":"System.Web","correct":false},{"id":1418675,"option":"System.Peer","correct":false}]},{"q":"<p>In .NET implementation, a generic collection has the default comparer as the IComparable.CompareTo(T) method.<br>\nWhich of these statements would you consider to be valid in the given context?</p>","a":[{"id":1418702,"option":"The generic collection implements the System.IComparable<T> generic interface","correct":true},{"id":1418703,"option":"The generic collection implements the non-generic System.IComparable interface","correct":false},{"id":1418704,"option":"The generic collection implements the non-generic System.Indexer interface","correct":false},{"id":1418705,"option":"The generic collection implements the System.Indexer generic interface","correct":false}]},{"q":"<p>Which of the following deductions can be made with respect to the code snippet given alongside?</p>\n\n<pre class=\"prettyprint\"><code>private class Unsubscriber : IDisposable\n{\n private List&lt;IObserver&lt;Temperature&gt;&gt; _observers;\n private IObserver&lt;Temperature&gt; _observer;\n\n public Unsubscriber(List&lt;IObserver&lt;Temperature&gt;&gt; observers, IObserver&lt;Temperature&gt; observer)\n {\n this._observers = observers;\n this._observer = observer;\n }\n\n public void Dispose()\n {\n if (! (_observer == null)) _observers.Remove(_observer);\n }\n}</code></pre>\n\n<p>1. This code enables the subscriber to call the object's IDisposable.Dispose of implementation to remove itself from the subscriber's collection.<br>\n2. This defines a provider to store references to observers so that each observer can be notified when appropriate.</p>","a":[{"id":1418752,"option":"Only 1","correct":false},{"id":1418753,"option":"Only 2","correct":false},{"id":1418754,"option":"Both 1 and 2","correct":true},{"id":1418755,"option":"Neither 1 nor 2","correct":false}]},{"q":"<p>A small logistic management company has <em>20</em> managers situated at different locations in a country. The company has installed a desktop application on each manager's laptop to help them create daily report of the orders placed and deliveries accomplished. Currently, managers send their reports to the owner via mail. The owner however wants to generate and check the report on his own anytime he wants. To do so, he decides to create a web application in .NET.<br>\n<br>\nWhich of the following concepts of design pattern would solve the owner's problem?</p>","a":[{"id":1418742,"option":"Remote Proxy design pattern","correct":true},{"id":1418743,"option":"Facade design pattern","correct":false},{"id":1418744,"option":"Virtual proxy design pattern","correct":false},{"id":1418745,"option":"Decorator design pattern","correct":false}]},{"q":"<p>In .NET, you are using a non-generic Hashtable collection class. The requirement is to replace the usage of Hashtable in your implementation with its generic counterparts in order to introduce type safety.<br>\nWhich of these are valid counterparts to be used in the given scenario?</p>","a":[{"id":1418682,"option":"Dictionary<TKey,TValue>","correct":true},{"id":1418683,"option":"List<T>","correct":false},{"id":1418684,"option":"Queue<T>","correct":false},{"id":1418685,"option":"LinkedList<T>","correct":false}]},{"q":"<p>You have enabled a custom convention as given alongside when working with .Net Entity Framework 6.<br>\n<br>\nWhich of these code snippets can you use to configure all properties called Key to be the primary key of their entity only if they are an integer?</p>\n\n<pre class=\"prettyprint\"><code>public class ProductContext : DbContext\n {\n static ProductContext()\n {\n Database.SetInitializer(new DropCreateDatabaseIfModelChanges&lt;ProductContext&gt;());\n }\n\n public DbSet&lt;Product&gt; Products { get; set; }\n\n protected override void OnModelCreating(DbModelBuilder modelBuilder)\n {\n modelBuilder.Properties()\n .Where(p =&gt; p.Name == \"Key\")\n .Configure(p =&gt; p.IsKey());\n }\n }</code></pre>\n\n<p> </p>","a":[{"id":1418707,"option":"modelBuilder.Properties<int>()\r\n.Where(p => p.Name == \"Key\")\r\n.Configure(p => p.IsKey());","correct":true},{"id":1418708,"option":"modelBuilder.Properties<int>()\r\n.Where(x => x.Name == \"Key\")\r\n.Configure(x => x.IsKey().HasColumnOrder(1));","correct":false},{"id":1418709,"option":"modelBuilder.Properties<int>()\r\n.Configure(p => p.IsKey());\r\n.Where(p => p.Name == \"Key\")","correct":false},{"id":1418710,"option":"Either 1 or 2","correct":false},{"id":1418711,"option":"Either 2 or 3","correct":false}]}]
[{"q":"<p>Consider the given Elixir code snippet.<br>\nDetermine XXXX and YYYY so that the output produced will be [\"n\", \"e\", \"w\"?</p>\n\n<pre class=\"prettyprint\"><code>iex&gt; Regex.split(~r{ XXXX }, \"new\", YYYY)</code></pre>\n\n<p> </p>","a":[{"id":749376,"option":"XXXX - n(?<second>e)w\r\nYYYY - on: [:second], include_captures: true","correct":true},{"id":749377,"option":"XXXX - (e)\r\nYYYY - on: [:second], include_captures: true","correct":false},{"id":749378,"option":"XXXX - n(?<second>e)w\r\nThere will be no code at YYYY","correct":false},{"id":749379,"option":"There will be no code at XXXX\r\nThere will be no code at YYYY","correct":false}]},{"q":"<p>What is the output of the following Elixir code snippet:</p>\n\n<pre class=\"prettyprint\"><code>iex&gt; [head | _] = [3,6,9]   //line1\niex&gt; head  * 2       //line2\niex&gt; _ * 3      //line3</code></pre>\n\n<p> </p>","a":[{"id":749372,"option":"[6,12,18]\r\n[9,18,27]","correct":false},{"id":749373,"option":"[3,6,9]\r\n[3,6,9]","correct":false},{"id":749374,"option":"Compilation error at line 1","correct":false},{"id":749375,"option":"Compilation error at line 3","correct":true}]},{"q":"<p>If you want to build a new ISO naive datetime object using the new(year, month, day, hour, minute, second, microsecond) method in Elixir, then which of the following are the correct inputs that can be given to the function mentioned in the process of creating the required ISO naive datetime:</p>\n\n<p>1. NaiveDateTime.new(2019, 04, 16, 23, 59, 59, 999_999)<br>\n2. NaiveDateTime.new(2019, 04, 16, 23, 59, 59, {0, 1})<br>\n3. NaiveDateTime.new(2019, 04, 16, 23, 59, 59, {0, 1}, Calendar.ISO)<br>\n4. NaiveDateTime.new(2019, 04, 16, 23, 59, 60, 999_999, Calendar.ISO)</p>\n\n<p> </p>","a":[{"id":749368,"option":"Only 2","correct":false},{"id":749369,"option":"1 and 4","correct":false},{"id":749370,"option":"1, 2, and 3","correct":true},{"id":749371,"option":"1, 2, 3, and 4","correct":false}]},{"q":"<p>Assume that you have created two callbacks in Elixir, then which of the following annotations is used on these callbacks to inform the compiler about your intention for the subsequent function definition to define a callback?</p>","a":[{"id":749364,"option":"@impl true","correct":true},{"id":749365,"option":"@impl false","correct":false},{"id":749366,"option":"@doc","correct":false},{"id":749367,"option":"@impl doc","correct":false}]},{"q":"<p>Consider the given Elixir code snippet.</p>\n\n<pre class=\"prettyprint\"><code>IO.puts Regex.XXXX, \"abcd abce\")</code></pre>\n\n<p>Determine XXXX so that the code produces \"cddcee\" as output upon execution?</p>","a":[{"id":749360,"option":"scan(~r/c(d|e)/","correct":true},{"id":749361,"option":"run(~r/c(de)/","correct":false},{"id":749362,"option":"scan(~r/c|(d/e)/","correct":false},{"id":749363,"option":"run(~r/c(d-e)/","correct":false}]},{"q":"<p>You are using the :dest option with the compile(files, options \\\\ []) for compiling a file. You want the file you are compiling to get written to dest.<br>\nWhich of the following will you use so that the required purpose can be served?</p>","a":[{"id":749356,"option":"Task.async/1 ","correct":false},{"id":749357,"option":"compile_to_path/3","correct":true},{"id":749358,"option":"Task.await/1 ","correct":false},{"id":749359,"option":"compile_files/2","correct":false}]},{"q":"<p>You are using the collector function returned by into(collectable) function for injecting the terms of every {:cont, term} command into the collectable.<br>\nWhat value will be returned by the function if the injection is interrupted suddenly in the given scenario?</p>","a":[{"id":749352,"option":"0","correct":false},{"id":749353,"option":"1","correct":false},{"id":749354,"option":"NULL","correct":false},{"id":749355,"option":"Any value","correct":true}]},{"q":"<p>You are calling the reducer() method with the enumerable element and the accumulator contents in Elixir.<br>\nIn the process, which of the following functions if returned by the :suspend accumulator will cause the :suspended tuple to be handled explicitly by the caller?</p>","a":[{"id":749348,"option":"reducer/0 function ","correct":true},{"id":749349,"option":" result/0 function","correct":false},{"id":749350,"option":"reduce/3 function","correct":false},{"id":749351,"option":"slice/1 function","correct":false}]},{"q":"<p>You are going to use the slicing_fun() in Elixir with the given information.<br>\n<strong>start is a number &gt;=0<br>\nlength is a number &gt;= 1<br>\ncount is the maximum amount of elements in the enumerable, where start + length &lt;= count</strong><br>\n<br>\nIn the given scenario what will the function return?</p>","a":[{"id":749344,"option":"A non empty list where the amount of elements is equal to length","correct":true},{"id":749345,"option":"A non empty list where the amount of elements is equal to count","correct":false},{"id":749346,"option":"A non empty list where the amount of elements is equal to start","correct":false},{"id":749347,"option":"A non empty list where the amount of elements is equal to length + count","correct":false}]},{"q":"<p>Which of the following will be the output of the given code snippet?</p>\n\n<pre class=\"prettyprint\"><code>str_1 = \"Happy\"\nstr_2 = \"New Year!\"\nstr_3 = \"New Year!\"\nstr_4 = \"Happy New Year!\"\nif str_1 === str_2 do\nIO.puts (true)\nelse\nIO.puts (false)\nend\nif (str_2 === str_3) do\nIO.puts(true)\nelse\nIO.puts(false)\nend\nif (str_3 === str_4) do\nIO.puts(true)\nelse\nIO.puts(false)\nend\nif (str_1 === (str_2 &lt;&gt; str_4)) do\nIO.puts(true)\nelse\nIO.puts(false)\nend\nif ((str_1 &lt;&gt; str_2) === str_4) do\nIO.puts(true)\nelse\nIO.puts(false)\nend</code></pre>\n\n<p> </p>","a":[{"id":749340,"option":"True\r\nTrue\r\nTrue\r\nTrue\r\nTrue","correct":false},{"id":749341,"option":"False\r\nTrue\r\nFalse\r\nTrue\r\nTrue","correct":false},{"id":749342,"option":"False\r\nTrue\r\nFalse\r\nFalse\r\nFalse","correct":true},{"id":749343,"option":"False\r\nFalse\r\nFalse\r\nFalse\r\nFalse","correct":false}]},{"q":"<p>You are returned with a collector function on using the into(collectable) function that is used to inject the terms of every {:cont, term} command into the collectable.<br>\n<br>\nWhich of these will be passed to the function if the injection is interrupted suddenly in the given scenario?</p>","a":[{"id":749336,"option":":done","correct":false},{"id":749337,"option":":halt","correct":true},{"id":749338,"option":":into","correct":false},{"id":749339,"option":":stop","correct":false}]},{"q":"<p>Determine the correct output of the code snippet shown alongside in Elixir?</p>\n\n<pre class=\"prettyprint\"><code>iex(4)&gt; Enum.reduce(\n\t\t[1,2,3],\n\t\tfn(element,sum) -&gt; sum+element end\n\t\t)</code></pre>\n\n<p> </p>","a":[{"id":749332,"option":"5","correct":false},{"id":749333,"option":"6","correct":true},{"id":749334,"option":"3","correct":false},{"id":749335,"option":"1","correct":false}]},{"q":"<p>Determine the correct output of the code snippet shown alongside in Elixir?</p>\n\n<pre class=\"prettyprint\"><code>iex(3)&gt; Enum.filter(\n\t\t[1,2,3],\n\t\tfn(x) -&gt; rem(x,2)==1 end\n\t\t)</code></pre>\n\n<p> </p>","a":[{"id":749328,"option":"[1, 3]","correct":true},{"id":749329,"option":"[3]","correct":false},{"id":749330,"option":"[1, 2,3]","correct":false},{"id":749331,"option":"None of these","correct":false}]},{"q":"<p>Which of the following is considered a tail call in Elixir?</p>","a":[{"id":749324,"option":"def fun(...) do\t\r\n\t1+another_fun(...)\r\nend","correct":false},{"id":749325,"option":"def fun(...) do\r\n...\r\n\tif something do\r\n\t...\r\n\tanother_fun(...)\r\n\tend\r\nend","correct":true},{"id":749326,"option":"Both Choice 1 and 2","correct":false},{"id":749327,"option":"None of these","correct":false}]},{"q":"<p>You are using the info(fun, item) to get specific information about a function.<br>\nIf the function is anonymous, for which of the following atoms will the information not be provided?<br>\n<br>\n1. :index<br>\n2. :new_uniq<br>\n3. :pid</p>","a":[{"id":749304,"option":"Only 1","correct":false},{"id":749305,"option":"1 and 2","correct":false},{"id":749306,"option":"2 and 3","correct":false},{"id":749307,"option":"1, 2 and 3","correct":true}]},{"q":"<p>You have a naive datetime in the given format:<br>\n2010-11-02 01:30:20<br>\n<br>\nWhat will happen if you call the add(naive_datetime, amount_to_add) with amount_to add as -10 in Elixir?</p>","a":[{"id":749276,"option":"The naive datetime will become 2010-11-02 01:30:10","correct":true},{"id":749277,"option":"The naive datetime will become 2010-11-02 01:30:30","correct":false},{"id":749278,"option":"The naive datetime will remain 2010-11-02 01:30:20","correct":false},{"id":749279,"option":"An error will be thrown","correct":false}]},{"q":"<p>Consider the given code snippet.</p>\n\n<pre class=\"prettyprint\"><code>Enum.reduce([3, 2, 5], 0, XXXX)</code></pre>\n\n<p>Determine the value of XXXX in Elixir to produce the output as 10 upon execution?</p>","a":[{"id":749220,"option":"&+/2","correct":true},{"id":749221,"option":"&-/2","correct":false},{"id":749222,"option":"^+/2","correct":false},{"id":749223,"option":"^&+/2","correct":false}]},{"q":"<p>You want to print callback info and docs for a given elixir module while working on the interactive elixir shell. In the given context which of these IEx helpers can be utilized for doing so?</p>","a":[{"id":749216,"option":"b/1","correct":true},{"id":749217,"option":"c/1","correct":false},{"id":749218,"option":"h/1","correct":false},{"id":749219,"option":"i/1","correct":false}]},{"q":"<p>Predict the error in the Elixir code snippet given alongside.</p>\n\n<pre class=\"prettyprint\"><code>defmodule Math do\n     def multiply(num1, num2) do\n            num1 * num2\n     end\nend\n\nIO.puts Math.multiply(5)</code></pre>\n\n<p> </p>","a":[{"id":749208,"option":"An argument was included for num2, not num1","correct":false},{"id":749209,"option":"The function was expecting a string as an argument, but it received an integer","correct":false},{"id":749210,"option":"Only one argument was included in the function call when the function requires two parameters","correct":true},{"id":749211,"option":"The function was defined outside its scope","correct":false}]},{"q":"<p>You want a failure to be propagated to another process on the failure of a process started with spawn/1.<br>\nWhich of the following will you use to link the two processes manually so that the above objective can be achieved?</p>","a":[{"id":749048,"option":"spawn_link/1","correct":false},{"id":749049,"option":"Process.link/1","correct":true},{"id":749050,"option":"spawn.link/1","correct":false},{"id":749051,"option":"Process.link/Process","correct":false}]},{"q":"<p>Which of the following code snippets will give an error in Elixir?</p>\n\n<pre class=\"prettyprint\"><code>1. iex&gt; {:ok, val1} = {:ok, 5}\n{:ok, 5}\niex&gt; val1\n5\n\n2. iex&gt; {:ok, val2} = {:right, 5}\n{:ok, 5}\niex&gt; val2\n5</code></pre>\n\n<p> </p>","a":[{"id":748952,"option":"Only 1","correct":false},{"id":748953,"option":"Only 2","correct":true},{"id":748954,"option":"Both 1 and 2","correct":false},{"id":748955,"option":"Neither 1 nor 2","correct":false}]},{"q":"<p>Consider the code in Elixir given alongside.</p>\n\n<pre class=\"prettyprint\"><code>1| iex&gt; Num1 = 5\n2| iex&gt; Num2 = Num1\n3| iex&gt; 3 = Num3\n4| IO.puts (Num1)\n5| IO.puts (Num2)\n6| IO.puts (Num3)\n7| iex&gt; Num4 = 9\n8| iex&gt; 9 = 4</code></pre>\n\n<p>What is the first line that will generate an error and what will be the first error encountered in the given context?<br>\n </p>","a":[{"id":748760,"option":"2                                                                                                                                                                                                                                                                                                                                                                           NameError\r\n","correct":false},{"id":748761,"option":"3 \r\nSyntaxError","correct":false},{"id":748762,"option":"4\r\nTypeError","correct":true},{"id":748763,"option":"5                                                                                                                                                                                                                                                                                                                                                           TypeError","correct":false}]},{"q":"<p>Consider the given code segment.</p>\n\n<pre class=\"prettyprint\"><code>out_of_network = ?\ncost = ?\ncond do\nto_string((out_of_network &amp;&amp; cost) &gt; 1000) -&gt; IO.puts (\"\"The maximum out-of-network cost is $1000.\"\")\nto_string((!out_of_network &amp;&amp; cost) &gt; 5000) -&gt; IO.puts (\"\"The maximum in-network cost is $5000.\"\")\ntrue -&gt; IO.puts (\"\"Expense approved!\"\")\nend</code></pre>\n\n<p><br>\nWhich of the following values for \"out_of_network\" and \"cost\" would result in both \"The maximum out-of-network cost is $1000.\" and \"The maximum in-network cost is $5000.\" being printed?<br>\n </p>","a":[{"id":748748,"option":"out_of_network = True\r\ncost = 5000","correct":false},{"id":748749,"option":"out_of_network = False\r\ncost = 5000","correct":false},{"id":748750,"option":"out_of_network = False\r\n cost = 7500","correct":false},{"id":748751,"option":"None of the above","correct":true}]},{"q":"<p>What will be the output of the given code snippet?</p>\n\n<pre class=\"prettyprint\"><code>x = 1/0\ntry do\n\tIO.puts (x)\n\tIO.puts (\"No error occurred!\")\nrescue\n\tZeroDivisionError -&gt; IO.puts (\"An error occurred!\")\n\tafter\n\tIO.puts (\"Done!\")\nend</code></pre>\n\n<p> </p>","a":[{"id":748692,"option":"Done!","correct":false},{"id":748693,"option":"An error occurred!\r\nDone!","correct":false},{"id":748694,"option":"No error occurred!\r\nDone!","correct":true},{"id":748695,"option":"A ZeroDivisionError error message","correct":false}]},{"q":"<p>Consider the program shown alongside.</p>\n\n<pre class=\"prettyprint\"><code>defmodule Math do\n   def mystery(num1, num2) do\n    if num2 === 1 do\n       num1\n    else\n       num3 = num1 * num2\n       mystery(num3, num2 - 1)\n       end\n   end\nend\n</code></pre>\n\n<p><br>\nWhich of the following actions is performed by the function “mystery” in the given context?<br>\n </p>","a":[{"id":748534,"option":"The function displays the Fibonacci series","correct":false},{"id":748535,"option":"The function performs the Pythagorean theorem","correct":false},{"id":748536,"option":"The function multiplies the three parameters together","correct":false},{"id":748537,"option":"The function finds the factorial of a number using Recursion","correct":true}]},{"q":"<p>Predict the output of the following code.</p>\n\n<pre class=\"prettyprint\"><code>clubMembers = [\"John\", \"Mary\", \"Rose\", \"Michael\"]\nbannedMembers = [\"Joseph\", \"Martha\", \"June\"]\nname = \"Joseph\"\nif name in clubMembers do\n\tIO.puts (\"Welcome back!\")\nelse\n\tIO.puts (\"Sorry, you're not on the list.\")\nend\nif name in bannedMembers do\n\tIO.puts (\"You've been banned!\")\nend</code></pre>\n\n<p> </p>","a":[{"id":748530,"option":"You've been banned!","correct":false},{"id":748531,"option":"Welcome back!","correct":false},{"id":748532,"option":"You've been banned!\r\nSorry, you're not on the list.","correct":false},{"id":748533,"option":"Sorry, you're not on the list.\r\nYou've been banned!","correct":true}]},{"q":"<p>Consider the given code snippet.</p>\n\n<pre class=\"prettyprint\"><code>try do \nEnum.each ( [2, 1, 0, -1, -2], fn(x) -&gt; div(2 / x) end)\nrescue\nZeroDivisionError -&gt; IO.puts (\"\"We can't divide by 0!\"\")\nend</code></pre>\n\n<p><br>\nWhich of the following will be the output of the above code?<br>\n </p>","a":[{"id":748522,"option":"We can't divide by 0!","correct":false},{"id":748523,"option":"1.0\r\n2.0\r\nWe can't divide by 0!","correct":true},{"id":748524,"option":"1.0\r\n2.0\r\nWe can't divide by 0!\r\n-2.0\r\n-1.0","correct":false},{"id":748525,"option":"An uncaught ZeroDivisionError","correct":false}]},{"q":"<p>Consider the given snippet of code.</p>\n\n<pre class=\"prettyprint\"><code>1| defmodule Math do\n2|      def sum(num1, num2) do\n3|             num1 + num2\n4|             end\n5|     end\n6|     #Calls the function\n7|     IO.puts Math.sum(2, 3)</code></pre>\n\n<p>Which of the following line will be executed after line 7, when the above code is run?<br>\n </p>","a":[{"id":748518,"option":"6","correct":false},{"id":748519,"option":"2","correct":false},{"id":748520,"option":"3","correct":true},{"id":748521,"option":"No line will be executed. The output screen will show “UndefinedFunctionError”","correct":false}]},{"q":"<p>You have defined the following list<br>\n<br>\niex(1)&gt; prime_numbers = [1, 2, 3, 5, 7]<br>\n[1, 2, 3, 5, 7]<br>\n<br>\nNow, you want to change the above list as<br>\n[11, 2, 3, 5, 7]<br>\n<br>\nWhich of the following is the correct way to do so?</p>","a":[{"id":748514,"option":" List.replace_at(prime_numbers, 0, 11)","correct":true},{"id":748515,"option":" List.replace_at(prime_numbers, 1, 11)","correct":false},{"id":748516,"option":" List.put_at(prime_numbers, 0, 11)","correct":false},{"id":748517,"option":" List.put_at(prime_numbers, 1, 11)","correct":false}]},{"q":"<p>In Elixir, which of the following characters can be used to delimit a region of source code that may span multiple lines?</p>","a":[{"id":748510,"option":"#","correct":false},{"id":748511,"option":"%","correct":false},{"id":748512,"option":"//","correct":false},{"id":748513,"option":"None of these","correct":true}]},{"q":"<p>In Elixir, assume that you have defined the following module with two functions. If you load this module to a shell, then which of the following will return an <strong>UndefinedFunctionError </strong>exception:</p>\n\n<pre class=\"prettyprint\"><code>defmodule TestPrivate do\n\tdef double(a) do\n\t\tsum(a,a)\n\tend\n\t\n\tdefp sum(a,b) do\n\t\ta+b\n\tend\nend\n</code></pre>\n\n<p> </p>","a":[{"id":748506,"option":"TestPrivate.double(3)","correct":false},{"id":748507,"option":"TestPrivate.sum(3, 4)","correct":true},{"id":748508,"option":"Both of these","correct":false},{"id":748509,"option":"None of these","correct":false}]},{"q":"<p>In Elixir, assume that you have set the default function for multiple arguments. Determine how many different functions can be generated from the following code:</p>\n\n<pre class=\"prettyprint\"><code>defmodule MyModule do\n\tdef fun(a, b\\\\1, c, d \\\\ 2) do\n\t\ta + b + c + d\n\tend\nend</code></pre>\n\n<p> </p>","a":[{"id":748502,"option":"1","correct":false},{"id":748503,"option":"2","correct":false},{"id":748504,"option":"3","correct":true},{"id":748505,"option":"4","correct":false}]},{"q":"<p>In Elixir, which of the following statements about the <strong>arity</strong> of a function is correct:<br>\n<br>\nStatement 1: A high-arity function delegates to a low-arity function.<br>\nStatement 2: Two functions with the same name but different arities are two different functions.</p>","a":[{"id":748498,"option":"Statement 1","correct":false},{"id":748499,"option":"Statement 2","correct":true},{"id":748500,"option":"Both of these","correct":false},{"id":748501,"option":"None of these","correct":false}]},{"q":"<p>Arrange the given set of action in the correct order for the expression given below?<br>\n<br>\niex(5)&gt; -5 |&gt; abs |&gt; Integer.to_string |&gt; IO.puts<br>\n<br>\nA. Prints to the console<br>\nB. Calculates the abs value<br>\nC. Initial value as -5<br>\nD. Converts to string</p>","a":[{"id":748340,"option":"C->B->D->A","correct":true},{"id":748341,"option":"C->D->B->A","correct":false},{"id":748342,"option":"B->C->D->A","correct":false},{"id":748343,"option":"B->D->C->A","correct":false}]},{"q":"<p>During the compile time, what will the following Elixir expression be translated into:</p>\n\n<pre class=\"prettyprint\"><code>prev(arg1, arg2) |&gt; next(arg3, arg4)</code></pre>\n\n<p> </p>","a":[{"id":748336,"option":"next(prev(arg1, arg2)","correct":false},{"id":748337,"option":"next(prev(arg1, arg2), arg3, arg4)","correct":true},{"id":748338,"option":"prev((arg1, arg2), next(arg3, arg4))","correct":false},{"id":748339,"option":"None of these","correct":false}]},{"q":"<p>In Elixir, which of the following is not a valid name of a variable?</p>","a":[{"id":748332,"option":"valid_variable_name","correct":false},{"id":748333,"option":"validAndRecommended","correct":false},{"id":748334,"option":"Valid_Name","correct":true},{"id":748335,"option":"valid_name?","correct":false}]},{"q":"<p>In Elixir, which of the following characters will you use to put multiple expressions in a single line?</p>","a":[{"id":748328,"option":"!","correct":false},{"id":748329,"option":"&","correct":false},{"id":748330,"option":":","correct":false},{"id":748331,"option":";","correct":true}]},{"q":"<p>What is the output of the following Elixir code:</p>\n\n<pre class=\"prettyprint\"><code>iex(2)&gt; 2 * (\n3 + 1\n) / 4</code></pre>\n\n<p> </p>","a":[{"id":748324,"option":"2","correct":true},{"id":748325,"option":"0","correct":false},{"id":748326,"option":"Not defined ","correct":false},{"id":748327,"option":"Error","correct":false}]},{"q":"<p>Which of the following is a disadvantage of Elixir?<br>\n </p>","a":[{"id":748320,"option":"Functional programming ","correct":false},{"id":748321,"option":"Process-oriented programming","correct":false},{"id":748322,"option":"High-latency","correct":true},{"id":748323,"option":"High concurrency ","correct":false}]},{"q":"<p>What is the output of the following Elixir code:</p>\n\n<pre class=\"prettyprint\"><code>iex&gt; Enum.reduce(\n[\"X\",\"Y\",\"Z\"], \"@\", \nfn(x,acc)-&gt; x &lt;&gt; acc\nend)\n</code></pre>\n\n<p> </p>","a":[{"id":748316,"option":"\"XYZ@\"","correct":false},{"id":748317,"option":"“ZYX@”","correct":true},{"id":748318,"option":"“@XYZ”","correct":false},{"id":748319,"option":"“@ZYX”","correct":false}]},{"q":"<p>What is the output of the following Elixir code:</p>\n\n<pre class=\"prettyprint\"><code>iex&gt; 3 == 3.0\niex&gt; 3 === 3.0\n</code></pre>\n\n<p> </p>","a":[{"id":748312,"option":"true\r\ntrue","correct":false},{"id":748313,"option":"false\r\nfalse","correct":false},{"id":748314,"option":"false\r\ntrue","correct":false},{"id":748315,"option":"true\r\nfalse","correct":true}]},{"q":"<p>In Elixir, which of the following is the most common reserved attribute?<br>\n </p>","a":[{"id":748308,"option":"@before_compile","correct":false},{"id":748309,"option":"@after_compile","correct":false},{"id":748310,"option":"@behaviour","correct":false},{"id":748311,"option":"@moduledoc","correct":true}]},{"q":"<p>Which of these functions will you use to replace '?' in the following Elixir code to print the given output on the screen:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>iex&gt; Enum.___?___(\n[1, 2, 3, 4, 5, 6, 7, 8, 9], 2, \nfn x -&gt; x + 2000 \nend)</code></pre>\n\n<p><strong>Output</strong></p>\n\n<p>[2001, 2, 2003, 4, 2005, 6, 2007, 8, 2009]</p>","a":[{"id":748304,"option":"uniq_by","correct":false},{"id":748305,"option":"map","correct":false},{"id":748306,"option":"map_every","correct":true},{"id":748307,"option":"reduce","correct":false}]},{"q":"<p>Which of these function calls will you use to call the following function in another module:</p>\n\n<pre class=\"prettyprint\"><code>defmodule Geometry do\n\tdef rectangle_area(a,b), do: a*b\nend</code></pre>\n\n<p> </p>","a":[{"id":748296,"option":"Geometry.rectangle_area 3, 2","correct":false},{"id":748297,"option":"Geometry.rectangle_area(3, 2)","correct":false},{"id":748298,"option":"Both of these","correct":true},{"id":748299,"option":"All of these","correct":false}]},{"q":"<p>In Elixir, which of the following options is not enumerable?</p>","a":[{"id":748292,"option":"Lists","correct":false},{"id":748293,"option":"Tuples","correct":true},{"id":748294,"option":"Keyword lists","correct":false},{"id":748295,"option":"Maps","correct":false}]},{"q":"<p>What is the output of the following Elixir code:</p>\n\n<pre class=\"prettyprint\"><code>iex&gt; hd [2.71828, :e, \"\"Happy New Year\"\"]\niex&gt; tl [2.71828, :e, \"\"Happy New Year\"\"]</code></pre>\n\n<p> </p>","a":[{"id":747924,"option":"2.71828\r\n[:e, \"\"Happy New Year\"\"]","correct":true},{"id":747925,"option":"[2.71828, :e]\r\n\"Happy New Year\"","correct":false},{"id":747926,"option":"[ ]\r\n[2.71828, :e, \"Happy New Year\"]","correct":false},{"id":747927,"option":"[2.71828, :e, \"\"Happy New Year\"\"]\r\n[ ]","correct":false}]},{"q":"<p>In Elixir, which of the following syntaxes is used to display the text 'Welcome John' on the output screen:</p>\n\n<pre class=\"prettyprint\"><code>1) iex&gt; name = \"John\"\n   iex&gt; \"Welcome #{name}\"\n\n2) iex&gt; name = \"John\"\n   iex&gt; \"Welcome \" &lt;&gt; name</code></pre>\n\n<p> </p>","a":[{"id":747920,"option":"1","correct":false},{"id":747921,"option":"2","correct":false},{"id":747922,"option":"Both of these","correct":true},{"id":747923,"option":"None of these","correct":false}]},{"q":"<p>In Elixir, which of the following code snippets is not used to display <strong>Null or [ ]</strong> on the output screen:</p>\n\n<pre class=\"prettyprint\"><code>1) iex&gt; [5] -- [5.0]\n2) iex&gt; [5.0] -- [5]\n3) iex&gt; [5] -- [5]\n4) iex&gt; [5.0] -- [5.0]</code></pre>\n\n<p> </p>","a":[{"id":747916,"option":"Only 1","correct":false},{"id":747917,"option":"Only 4","correct":false},{"id":747918,"option":"1 or 2","correct":true},{"id":747919,"option":"2 or 4","correct":false}]},{"q":"<p>Consider the given Elixir code snippet.</p>\n\n<pre class=\"prettyprint\"><code>defmodule Math do\n  def findSum([start | en], calc) do\n   findSum(XXXX)\n  end\n\n  def findSum([], calc) do\n    calc\n  end\nend\nIO.puts Math.findSum([2,5,3], 0)</code></pre>\n\n<p><br>\nWhat will you use at XXXX so that the output produced upon execution is 10?</p>","a":[{"id":749260,"option":"en, start + calc","correct":true},{"id":749261,"option":"en + start, calc","correct":false},{"id":749262,"option":"en, start - calc","correct":false},{"id":749263,"option":"en, calc - start","correct":false}]},{"q":"<p>Consider the given code snippet.</p>\n\n<pre class=\"prettyprint\"><code>defmodule Math do\n  def findSum([start | en], calc) do\n   findSum(en, -start - calc)\n  end\n\n  def findSum([], en) do\n    en\n  end\nend\n\nIO.puts Math.findSum([2,5,3], realValue)</code></pre>\n\n<p><br>\nWhat value will you use as realValue so that the output produced upon execution is -3?</p>","a":[{"id":749252,"option":"0","correct":false},{"id":749253,"option":"1","correct":false},{"id":749254,"option":"2","correct":false},{"id":749255,"option":"3","correct":true}]}]
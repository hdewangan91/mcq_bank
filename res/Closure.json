[{"q":"<p>Ben is working on Closures using VanillaJS. He is using the closure&nbsp;function to capture&nbsp;variables from its lexical scope.&nbsp;Then which of the options allows to capture the variables using closure?</p>","a":[{"id":1721391,"option":"event handling","correct":false},{"id":1721392,"option":"callbacks","correct":false},{"id":1721393,"option":"DOM object","correct":false},{"id":1721394,"option":"Both 1 and 2","correct":true}]},{"q":"<p>Mark is working on Closures using VanillaJS. He has a requirement to access the defined variables statically of the outer scopes.&nbsp;Then which of the options can he choose?</p>","a":[{"id":1721387,"option":"lexical scope","correct":true},{"id":1721388,"option":"local scope","correct":false},{"id":1721389,"option":"method scope","correct":false},{"id":1721390,"option":"None of the these","correct":false}]},{"q":"<p>Anita is working on Closures using VanillaJS. She has currently initialized a few variables in a few nested methods. Then&nbsp;the accessibility of those variables is determined by the position of whom?</p>","a":[{"id":1721383,"option":"variables inside the nested scopes","correct":true},{"id":1721384,"option":"sibling variables","correct":false},{"id":1721385,"option":"global scope variables","correct":false},{"id":1721386,"option":"parent method scope","correct":false}]},{"q":"<p>What is the output of the following Javascript code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>function entrance() {\n  let status = 'I at entrance!';\n  function desk() {\n    console.log(status); \n    let status = 'I at desk station!';\n  }\n  desk();\n}\nentrance();</code></pre>","a":[{"id":1721379,"option":"I at entrance!","correct":false},{"id":1721380,"option":"I at desk station!","correct":false},{"id":1721381,"option":"status","correct":false},{"id":1721382,"option":"Error","correct":true}]},{"q":"<p>What is the output of the following Javascript code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>function hack1() {\n  let i = 0;\n  console.log(i++); \n}\nfunction hack2() {\n  let i = 1;\n  console.log(i++); \n}\nhack1();\nhack2();</code></pre>","a":[{"id":1720654,"option":"0 and 1","correct":true},{"id":1720655,"option":"1 and 2","correct":false},{"id":1720656,"option":"Error","correct":false},{"id":1720657,"option":"1 and Error","correct":false}]},{"q":"<p>What is the output of the following Javascript code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>function hacker() {\n  let count = 0;\n  if(count === 1 ){\n     console.log(count++);\n  } \n  else {\n     count--;\n  }\n}\nhacker();\nhacker();\nhacker();\n\nconsole.log(count);</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1720650,"option":"No output","correct":false},{"id":1720651,"option":"1 and 3","correct":false},{"id":1720652,"option":"0 and 3","correct":false},{"id":1720653,"option":"Error","correct":true}]},{"q":"<p>Ben is working on Closures using VanillaJS. He defined a variable and want that variable to exist within some boundaries. This accessibility of variables is managed by whom?</p>","a":[{"id":1720642,"option":"scope","correct":true},{"id":1720643,"option":"document object","correct":false},{"id":1720644,"option":"constructor","correct":false},{"id":1720645,"option":"window object","correct":false}]},{"q":"<p>What is the output of the following Javascript snippet:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>let score = 0;\n\nfunction fouls() {\n  let score = 20;\n  score -= 1;\n}\n\nfouls();\nfouls();\nfouls();\nconsole.log(score);</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1720029,"option":"17","correct":false},{"id":1720030,"option":"20","correct":false},{"id":1720031,"option":"0","correct":true},{"id":1720032,"option":"undefined","correct":false}]},{"q":"<p>What is the output of the following Javascript snippet:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>let errors = 0;\n\nfunction check(output) {\nif(!output)\n  errors += 1;\n}\n\ncheck(true);\ncheck(1);\ncheck(0);\n\nconsole.log(errors);</code></pre>","a":[{"id":1720033,"option":"1","correct":true},{"id":1720034,"option":"2","correct":false},{"id":1720035,"option":"undefined","correct":false},{"id":1720036,"option":"0","correct":false}]},{"q":"<p>What is the output of the following code snippets?</p>\n\n<p><strong>Code</strong><br>\n1.</p>\n\n<pre class=\"prettyprint\"><code>var me = \"boy.\"\nlet closure = { [me] in\n    print(\"I am a \\(me)\")\n}\nme = \"girl.\"\nclosure()\n</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>var me = \"girl.\"\nlet closure = {\n    print(\"I am a \\(me)\")\n}\nme = \"boy.\"\nclosure()</code></pre>\n\n<p> </p>","a":[{"id":1656509,"option":"1) I am a boy. 2) I am a girl.","correct":false},{"id":1656510,"option":"1) I am a girl. 2) I am a girl.","correct":false},{"id":1656511,"option":"1) I am a boy. 2) I am a boy.","correct":true},{"id":1656512,"option":"1) I am a girl. 2) I am a boy.","correct":false}]}]
[{"q":"<p>A Java program has the following three classes:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>private class A{\n.....\n}\nprivate class B{\nstatic class C{\n...}\n}\npublic class D{\n....\n}</code></pre>\n\n<p>What is the name of this Java file?</p>","a":[{"id":1655797,"option":"B.java","correct":false},{"id":1655798,"option":"C.java","correct":false},{"id":1655799,"option":"D.java","correct":true},{"id":1655800,"option":"A.java","correct":false}]},{"q":"<p>You have a class named hack&nbsp;in your C# implementation. Now if you are required to create an object of this class namely A and instantiate two properties X and Y for the object created with the values \"Y\" and \"N\" respectively, at the time of the class initiation process then&nbsp;which of the following&nbsp;syntaxes can you use to perform this action?<br>\n<strong>Syntax:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hack A = new hack\n{ \n    X = \"Y\", \n    Y = \"N\" \n};</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>new demo A = A.set \n{ \n    X = \"Y\", \n    Y = \"N\" \n};</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>new demo A\n{ \n    X = \"Y\", \n    Y = \"N\" \n};</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>demo.A.new \n{ \n    X = \"Y\", \n    Y = \"N\" \n};</code></pre>\n\t</li>\n</ol>","a":[{"id":1419367,"option":"1","correct":true},{"id":1419368,"option":"2","correct":false},{"id":1419369,"option":"3","correct":false},{"id":1419370,"option":"4","correct":false}]},{"q":"<p>Predict the output of the code snippet given alongside.</p>\n\n<pre class=\"prettyprint\"><code>public class Test{\npublic static void main(String[] args){\nTeacher t = new Student();\nSystem.out.println(t.name);\n}}\nclass Teacher{\nString name=\"Sam\";\n}\nclass Student{\nString name=\"Kevin\";\n}</code></pre>\n\n<p> </p>","a":[{"id":1655993,"option":"Sam","correct":false},{"id":1655994,"option":"Kevin","correct":false},{"id":1655995,"option":"Compilation error","correct":true},{"id":1655996,"option":"Run-time error","correct":false}]},{"q":"<p>You want to enable the automatic conversion of a checked RemoteException to an unchecked RemoteException while performing remoting in Spring. Which of the following would you need to do to achieve this?</p>\n\n<p> </p>","a":[{"id":1655985,"option":"a non-Rmi interface needs to be provided","correct":true},{"id":1655986,"option":"a HTTPInvoker session needs to be supplied","correct":false},{"id":1655987,"option":"a Dispatcher servlet config file needs to be setup","correct":false},{"id":1655988,"option":"None of these","correct":false}]},{"q":"<p>What will the given code snippet produce as output when you execute it?</p>\n\n<p><strong>code:</strong></p>\n\n<pre class=\"prettyprint\"><code>\n    abstract class Teacher{\n    private void show() {\n    System.out.print(\" Teacher\");\n    }}\n    public class Student extends Teacher{\n    protected void show() { // line 5\n    System.out.print(\" Student\");\n    }\n    public static void main(String[] args) {\n    Teacher teacher = new Student();\n    teacher.show(); // line 10\n    } }</code></pre>\n\n<p> </p>","a":[{"id":1655801,"option":"Teacher","correct":false},{"id":1655802,"option":"Student","correct":false},{"id":1655803,"option":"Compilation error at line 5","correct":false},{"id":1655804,"option":"Compilation error at line 10","correct":true}]},{"q":"<p>Two scenarios are given:<br>\nA.</p>\n\n<pre class=\"prettyprint\"><code> public class A extends B, C {.....}</code></pre>\n\n<p>B.</p>\n\n<pre class=\"prettyprint\"><code> public interface P extends Q,R{......}</code></pre>\n\n<p>Here, B and C are classes while Q and R are interfaces. here is an issue in one of the scenarios. Identify the class along with the issue?</p>","a":[{"id":1655793,"option":"The issue is in scenario A. A class cannot inherit from more than one class in Java.","correct":false},{"id":1655794,"option":"The issue is in scenario B. A public interface cannot inherit from more than one interface in Java.","correct":true},{"id":1655795,"option":"The issue is in scenario A. The syntax of inheritance is incorrect as the access specifier of B and C is specified.","correct":false},{"id":1655796,"option":"The issue is in B. The syntax of inheritance is incorrect as access specifier of Q and R is not specified.","correct":false}]},{"q":"<p>Class A has the following members:<br>\nint amount = 12;<br>\nString str = \"Welcome to PNB\";<br>\nfinal float rate = 4.5;<br>\nClass B has the following members:<br>\nfinal String name = \"Goodbye!\";<br>\nOut of A and B, identify the class which is an interface?</p>","a":[{"id":1655789,"option":"A","correct":false},{"id":1655790,"option":"B","correct":true},{"id":1655791,"option":"Neither A nor B","correct":false},{"id":1655792,"option":"Both A and B","correct":false}]},{"q":"<p>You have the following class in your Java program:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>public class Super {\npublic static float calc(int p, int r, int t){\nreturn (p*r*t)/100;\n}\n}</code></pre>\n\n<p><br>\nWhat can you do to create a class 'Sub' that inherits from class 'Super' and has the method 'calc' as well?</p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<p>Simply override the calc function in Sub class</p>\n\n<p><strong>2.</strong></p>\n\n<p>Change the return type of calc function in Sub class</p>\n\n<p><strong>3.</strong></p>\n\n<p>Change the order of arguments in calc function on Sub class</p>\n\n<p><strong>4.</strong></p>\n\n<p>The function cannot be overridden.</p>","a":[{"id":1655909,"option":"1","correct":false},{"id":1655910,"option":"2","correct":false},{"id":1655911,"option":"3","correct":false},{"id":1655912,"option":"4","correct":true}]},{"q":"<p>Predict the output of the given code snippet.<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>public class Test{\npublic static void main(String[] args){\nStudent s =new Student();\nSystem.out.println(s.marks);\n}}\nclass Student{\npublic int marks;\n}</code></pre>\n\n<p> </p>","a":[{"id":1655905,"option":"0","correct":true},{"id":1655906,"option":"Null","correct":false},{"id":1655907,"option":"Garbage value","correct":false},{"id":1655908,"option":"Error","correct":false}]},{"q":"<p>What will be the output for the following C++ code?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass F\n{\n    \n};\n  \nclass S : public F\n{\n    \n};\n\ntemplate&lt;typename X, typename Y&gt;\nclass check\n{\n    class F { };\n    static F find( ... ); \n    \n    class T { F f[2]; };\n    static T find( Y* );\n    \n    public:\n    enum \n    { \n        m = sizeof(T) == sizeof(find(static_cast&lt;X*&gt;(0)))\n        \n    };\n    \n};\n\ntemplate &lt;class Q, class R&gt; \n\nbool checkIf() \n{\n    return check&lt;Q, R&gt;::m;\n}\n\n\nint main()\n{\n    \n    check &lt;class F, class S&gt; t (F,S);\n    cout &lt;&lt; checkIf&lt;class F, class S&gt;() &lt;&lt;endl;\n    return 0;\n    \n}</code></pre>\n\n<p> </p>","a":[{"id":1488095,"option":"0","correct":true},{"id":1488096,"option":"1","correct":false},{"id":1488097,"option":"NULL","correct":false},{"id":1488098,"option":"cannot determine the output","correct":false}]},{"q":"<p>Consider the C# snippet below. Which of the following syntaxes can you use to create an instance of class B?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>class hackA \n{ \n    class hackB \n    { \n        // Add Demo code \n        \n    } \n}</code></pre>\n\n<p> </p>\n\n<p> </p>\n\n<p><strong>Syntax:</strong><br>\n </p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>A.B myInstance = new A.B()</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>B myInstance = new B()</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>B.myInstance.new()</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>B.myInstance = new B()</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1419362,"option":"1","correct":true},{"id":1419363,"option":"2","correct":false},{"id":1419364,"option":"3","correct":false},{"id":1419365,"option":"4","correct":false}]},{"q":"<p>What is the output of the following C# code?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        dynamic emp= new Employee();\n        emp.DisplayEmployeeinfo(101, \"James\");\n        emp.DisplayEmployeeinfo(\"101\");\n        emp.hackster();\n        \n    }\n}\npublic class Employee\n{\n    public void DisplayEmployeeinfo(int id)\n    {\n        Console.WriteLine(\"Employee Dummy data\");\n        \n    }\n    public void hackster()\n    {\n        Console.WriteLine(\"Happy Coding\");\n        \n    }\n}</code></pre>\n\n<p> </p>","a":[{"id":1419217,"option":"Code throws Run-time Error","correct":true},{"id":1419218,"option":"Code throws Compile-Time Error","correct":false},{"id":1419219,"option":"Code throws Linker Error","correct":false},{"id":1419220,"option":"None of these","correct":false}]},{"q":"<p>In Python 3, you are given the following code. Determine X if you are required to obtain the provided output:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>class sample:\n    count = 0\n    def __repr__(self):\n        return 'Python test'\n    def display(self):\n        X\n\ntemp1 = sample()\ntemp2 = temp1.display()\ndel temp1\nprint(temp2)</code></pre>\n\n<p><strong>Output</strong></p>\n\n<pre class=\"prettyprint\"><code>27</code></pre>\n\n<p> <strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>count = 0\nfor i in range(1,10):\n    count = count*2\nreturn count</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>for i in range(1,11):\n    count = i+i*2\nreturn count</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>for i in range(1,10):\n    count = i+i*2\nreturn count</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>for i in range(0,10):\n    count = i+i*2\nreturn count</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":150551,"option":"1","correct":false},{"id":150552,"option":"2","correct":false},{"id":150553,"option":"3","correct":true},{"id":150554,"option":"4","correct":false}]},{"q":"<p>In Python 3, you have created an object of a class locally inside a method instead of passing it as an argument while calling the method. Which of the following statements about this scenario is correct:</p>\n\n<ol>\n\t<li>It is a weak relationship. It is not displayed in the class diagram.</li>\n\t<li>It is a weak relationship. It is displayed in the class diagram.</li>\n\t<li>It is a strong relationship. It is not displayed in the class diagram.</li>\n\t<li>It is a strong relationship. It is displayed in the class diagram.</li>\n</ol>","a":[{"id":730688,"option":"1","correct":true},{"id":730689,"option":"2","correct":false},{"id":730690,"option":"3","correct":false},{"id":730691,"option":"4","correct":false}]},{"q":"<p>In C++, which of the following statements defines an <strong>orthogonal base class</strong>?</p>","a":[{"id":133158,"option":"If two base classes have no overlapping methods or data, then they are said to be independent of or orthogonal to each other.","correct":true},{"id":133159,"option":"If two base classes have one or more overlapping methods or data, then they are said to be dependent on each other.","correct":false},{"id":133160,"option":"If two classes operate in the same dimension, then they are said to be orthogonal to each other. ","correct":false},{"id":133161,"option":"None of these","correct":false}]},{"q":"<p>A _________________ encapsulates multiple objects into a single object in JSP.</p>","a":[{"id":41244,"option":"Bean","correct":true},{"id":41245,"option":"Plugin","correct":false},{"id":41246,"option":"Papam","correct":false}]},{"q":"<p>In JSP, which of the following is a <strong>base</strong> class of all classes?</p>","a":[{"id":40628,"option":"java.lang.Object","correct":true},{"id":40629,"option":"java.lang.Object.Collection","correct":false},{"id":40630,"option":"java.lang.Object.*","correct":false},{"id":40631,"option":"java.lang.Object.Generic","correct":false}]},{"q":"<p>Which of the following <strong>C#</strong> keyword should you use in the class definitions to allow the given code to compile successfully?</p>\n\n<p> </p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>public class Manager\n{\n    public void EvaluateEmployee (Employee emp);\n}\n\npublic class Manager\n{\n    public void Login();\n}</code></pre>\n\n<p> </p>","a":[{"id":1419297,"option":"partial","correct":true},{"id":1419298,"option":"abstract","correct":false},{"id":1419299,"option":"virtual","correct":false},{"id":1419300,"option":"interface","correct":false}]},{"q":"<p>The following Python 3 code:</p>\n\n<ul>\n\t<li>Denotes a list of candies\n\t<ul>\n\t\t<li>The list of tuples represents the type of candy and its quantity. For example in (2, 1), '2' represents the type of candy, and '1' represents the quantity of that specific type.</li>\n\t</ul>\n\t</li>\n\t<li>Has a class named <strong>shop</strong></li>\n</ul>\n\n<p>If you are required to pay an extra charge on the purchase of any of the types of candies, determine the charge for each type based on the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>class shop:\n    charges = 10\n    def candy_count(self, candies):\n        result = {} \n        for i, j in candies: \n            result.setdefault(j, []).append(i) \n        return result\n         \n    def candy_count_result(self,a):\n        return a*shop.charges\n    \nobj1 = shop()\ntry:\n    candies = [(2, 1), (1, 1), (4, 4), (5, 6), (7, 5), (6, 4)] \n    a = obj1.candy_count(candies) \n    b = obj1.candy_count_result(a)\n    print(a)\nexcept Exception as e:\n    print(e)</code></pre>\n\n<p> </p>","a":[{"id":1207695,"option":"{10: [2, 1], 40: [2, 6], 60: [2], 50: [7]}","correct":false},{"id":1207696,"option":"{1: [2, 1], 4: [4, 6], 5: [7], 6: [5]}","correct":false},{"id":1207697,"option":"An exception is raised because of unsupported operand type(s).","correct":true},{"id":1207698,"option":"SyntaxError","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include&lt;iostream&gt;\nusing namespace std;\n\nint &amp;fun(){\n    static int x = 10;\n    return x;\n}\n\nint main(){\n    fun() = 50;\n    cout &lt;&lt; fun() &lt;&lt; endl;\n    return 0;\n}\n</code></pre>","a":[{"id":132161,"option":"Compilation error","correct":false},{"id":132162,"option":"10","correct":false},{"id":132163,"option":"50","correct":true},{"id":132164,"option":"Runtime error","correct":false}]},{"q":"<p>In C++, which of the following about the valid syntax of a dynamic_cast operator is correct?</p>","a":[{"id":146435,"option":"dynamic_cast < type-id > ( expression )","correct":true},{"id":146436,"option":"dynamic_cast (expression)","correct":false},{"id":146437,"option":"dynamic_cast<type-id> ( expression, reference_parameters, pointer_values)","correct":false},{"id":146438,"option":"None of these","correct":false}]},{"q":"<p>In C++, which of the following statements about an <strong>anonymous</strong> class is true?</p>","a":[{"id":133178,"option":"It cannot have a destructor.  ","correct":false},{"id":133179,"option":"It cannot have a constructor.  ","correct":true},{"id":133180,"option":"It cannot be created.","correct":false},{"id":133181,"option":"All of these","correct":false}]},{"q":"<p>In JSP, which of the following methods is described in the <strong>JComponent</strong> class?</p>","a":[{"id":40612,"option":"add() ","correct":false},{"id":40613,"option":"remove() ","correct":false},{"id":40614,"option":"add() and remove() ","correct":true},{"id":40615,"option":"delete()","correct":false}]},{"q":"<p>In JSP, which of the following is used to instantiate a <strong>JavaBean</strong>?</p>","a":[{"id":40640,"option":"jsp:useBean","correct":true},{"id":40641,"option":"jsp:useFind","correct":false},{"id":40642,"option":"jsp:FindBean","correct":false},{"id":40643,"option":"jsp:Find ","correct":false}]},{"q":"<p>What is the output of the following C# code?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nclass Hackster\n{\n    public Hackster(Hackster hacker)\n    {\n        Name = hacker.Name;\n        Age = hacker.Age;\n    }\n    public Hackster(string name, int age)\n    {\n        Name = name;\n        Age = age;\n    }\n    public int Age \n    { \n        get; \n        set; \n    }\n    public string Name \n    { \n        get; \n        set; \n    }\n    public string Hackerdetails()\n    {\n        return Name + \" is \" + Age.ToString();\n    }\n}\n\nclass HackTest\n{\n    static void Main()\n    {\n        Hackster h1 = new Hackster(\"John\", 15);\n        Hackster h2 = new Hackster(h1);\n        \n        h1.Age = 20;\n        \n        h2.Age = 14 + h1.Age;\n        \n        h2.Name = \"Mary\";\n        h2.Name += \" Brown\";\n        \n        Console.WriteLine(h1.Hackerdetails());\n        Console.WriteLine(h2.Hackerdetails());\n    }\n}</code></pre>\n\n<p><strong>Output:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>John is 20\nMary is 34</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>John Brown is 20\nMary is 14</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>John is 20\nMary Brown is 34</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>John is 15\nMary Brown is 29</code></pre>\n\t</li>\n</ol>","a":[{"id":1419542,"option":"1","correct":false},{"id":1419543,"option":"2","correct":false},{"id":1419544,"option":"3","correct":true},{"id":1419545,"option":"4","correct":false}]},{"q":"<p>Which of the following statements is correct, if the following C# code snippet is executed?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\npublic class Foo\n{\n    public int NumberOfBars= 2;\n    public static void bar1() \n    { \n        Console.WriteLine(\"Welcome to bar1!\"); \n    }\n    public void bar2() \n    {\n        Console.WriteLine(\"Welcome to bar2!\");\n        \n    }\n}\n\npublic class Foo2\n{\n    public static void initiation()\n    {\n        Foo hack= new Foo();\n        int i = hack.NumberOfBars; \n        hack.bar2();\n        Foo.bar1();\n        \n    }\n    public static void Main() \n    {\n        initiation();\n        \n    }\n\n}</code></pre>\n\n<p><br>\n<br>\n<strong>Statements:</strong></p>\n\n<ol>\n\t<li> The code gives the following output -\n\t<pre class=\"prettyprint\"><code>Welcome to bar2!\nWelcome to bar1!</code></pre>\n\t<br>\n\t </li>\n\t<li>The code gives the following output -  \n\t<pre class=\"prettyprint\"><code>Welcome to bar1!\nWelcome to bar2!\n</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>The code gives a compile-time error<br>\n\t </li>\n\t<li>The code gives a runtime error</li>\n</ol>","a":[{"id":1419397,"option":"1 and 4","correct":false},{"id":1419398,"option":"2 and 4","correct":false},{"id":1419399,"option":"3","correct":false},{"id":1419400,"option":"1","correct":true}]},{"q":"<p>  What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>class fun: \n    def __init__(self, l): \n        self.l = l \n    def __iter__(self): \n        self.a = 15\n        return self\n    def __next__(self): \n        a = self.a \n        if a &gt; self.l: \n            raise StopIteration \n        self.a = a + 1; \n        return a \nfor i in fun(18): \n    print(i, end= ' ')</code></pre>\n\n<p> </p>","a":[{"id":1121861,"option":"16 17 18","correct":false},{"id":1121862,"option":"15 16 17 18","correct":true},{"id":1121863,"option":"15 16 17","correct":false},{"id":1121864,"option":"None","correct":false}]},{"q":"<p>In C++, which of the following statements about <strong>pure virtual</strong> functions is true?</p>","a":[{"id":154415,"option":"They have a complete function body.","correct":false},{"id":154416,"option":"They are never called.","correct":false},{"id":154417,"option":"They will be called only when an object has to be deleted.","correct":false},{"id":154418,"option":"They are defined only in the derived class.","correct":true}]},{"q":"<p>In C++, which of the following is a valid type of <strong>inheritance</strong>?</p>","a":[{"id":132549,"option":"Single ","correct":false},{"id":132550,"option":"Multiple ","correct":false},{"id":132551,"option":"Multilevel ","correct":false},{"id":132552,"option":"All of these","correct":true}]},{"q":"<p>In C++, which of the following classes is used to design a <strong>base</strong> class?</p>","a":[{"id":147697,"option":"Abstract class","correct":true},{"id":147698,"option":"Derived class","correct":false},{"id":147699,"option":"Parent class","correct":false},{"id":147700,"option":"None of these","correct":false}]},{"q":"<p>In C#, if you are required to implement the following code, then which of these statements about this code is correct?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>public class DelegateOperation\n{\n    public delegate void CompleteOperationCallback(bool answer);\n    public void OperationExecution(CompleteOperationCallback, methodToBeCalledOperationTerminated)\n    {\n        bool answer=false;\n        methodToBeCalledOperationTerminated.Invoke(answer); \n    } \n}\n\npublic class Program_Client\n{\n    DelegateOperation operationObject;\n    public Client()\n    {\n        operationObject=new DelegateOperation();\n        operationObject.OperationExecution(OperationTerminated);\n    }\n    public void OperationTerminated(bool ReceivedAnswer)\n    { // Log operation answer \n    \n    }\n}</code></pre>\n\n<p><strong>Statements:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>There is no tight coupling between the DelegateOperation class and the Program_Client class</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>There is a tight coupling between the DelegateOperation class and the Program_Client class</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>If any other class needs to use the DelegateOperation class functionality, there is no change in the DelegateOperation class, and we need not rebuild it.</code></pre>\n\t</li>\n</ol>","a":[{"id":1419012,"option":"Both 1 and 2","correct":false},{"id":1419013,"option":"Both 2 and 3","correct":false},{"id":1419014,"option":"Both 1 and 3","correct":true},{"id":1419015,"option":"None of these","correct":false}]},{"q":"<p>Which line in the C# code snippet given below will produce an error?<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;  // line 1\npublic class SealedClass  // line 2\n{\n    public int a;  // line 3\n    public int b;  // line 4\n}\nclass SealedTest  // line 5\n{\n    static void Main()  // line 6\n    { \n        SealedClass obj = new SealedClass();  // line 7\n        obj.a = 40;  // line 8\n        obj.b = 80;  // line 9\n        Console.WriteLine(\"x = {0}, y = {1}\", obj .a, obj .b);  // line 10\n        Console.ReadLine();  // line 11\n    }\n}</code></pre>","a":[{"id":1419152,"option":"Line 7","correct":false},{"id":1419153,"option":"Line 10","correct":false},{"id":1419154,"option":"Line 2","correct":false},{"id":1419155,"option":"The code doesn't contain any error","correct":true}]},{"q":"<p>Which of the following statements is incorrect about the class <strong>Fun</strong> in the C# code snippet given below?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>public static class Fun\n{\n    public static void fun2()\n    {\n        Console.WriteLine(\"Welcome to Hogwarts!\");\n        \n    }\n}</code></pre>\n\n<p><br>\n<br>\n<strong>Statements</strong>:</p>\n\n<ol>\n\t<li>\n\t<p>The class Fun can only have static members. </p>\n\t</li>\n\t<li>\n\t<p>The class Fun cannot be instantiated.</p>\n\t</li>\n\t<li>\n\t<p>The class Fun can contain instance constructors.</p>\n\t</li>\n\t<li>\n\t<p>Only 1 copy of the class Fun exists in the memory.</p>\n\t</li>\n</ol>","a":[{"id":1419387,"option":"1","correct":false},{"id":1419388,"option":"2","correct":false},{"id":1419389,"option":"3","correct":true},{"id":1419390,"option":"4","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt; \nusing namespace std; \n\nint i; \n\nclass A \n{ \npublic: \n\t~A() \n\t{ \n\t\ti = 10; \n\t} \n}; \n\nint foo() \n{ \n\ti = 3; \n\t{ \n\t\tA ob; \n\t} \n\treturn i; \n} \n\nint main() \n{ \n\tcout &lt;&lt;foo() ; \n\treturn 0; \n} \n</code></pre>\n\n<p> </p>","a":[{"id":132305,"option":"3","correct":false},{"id":132306,"option":"10","correct":true},{"id":132307,"option":"Nothing will be printed as an output","correct":false},{"id":132308,"option":"Compilation error","correct":false}]},{"q":"<p>In C++, which of the following statements about a <strong>destructor</strong> is correct?</p>","a":[{"id":132329,"option":"There can only be one destructor in a class","correct":false},{"id":132330,"option":"Destructor is a member function which destructs or deletes an object","correct":false},{"id":132331,"option":"Both of these","correct":true},{"id":132332,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>class operations:\n    def __init__(self):\n        self.name = [\" \", \"Bob\", \"Rebecca\", \"Clint\", \"11231\", \"32i73\"]\n        \n    def data(self, names):\n        self.names = list(filter(lambda el:el[0].isupper() and el[1:].islower(),names))\n        return self.name\n    \n    def display(self, result):\n        length = len(''.join(self.names))\n        n = sorted([int(x) for x in result if x.isdigit()])\n        for i in ((filter(lambda x:x&gt;length,n))):\n            return i\n\no = operations()\nnames = ['Alice', 'mark Thomas', 'rebecca', 'Bob1231', '08732', 'Clint', \"11231\", \"32i73\"]\nresult = o.data(names)\ndis = o.display(result)\nprint(dis)</code></pre>\n\n<p> </p>","a":[{"id":1207839,"option":"32i73","correct":false},{"id":1207840,"option":"11231","correct":true},{"id":1207841,"option":"08732","correct":false},{"id":1207842,"option":"Bob1231","correct":false}]},{"q":"<p>If the output of the following Python 3 code must match the output that is provided here, determine the value of X.</p>\n\n<p><strong>Code</strong> </p>\n\n<pre class=\"prettyprint\"><code>class test:\n    def __init__(self, a):\n        self.a = a\n        \n    def operation(self, a, b):\n        X\n        return a\n\na = ['a','e','i','o','u','A','E','I','O','U',' ']\nobj = test(a)\nb = \"HackerEarth Tests\"\nc = obj.operation(a,b)\nprint(c)</code></pre>\n\n<p><strong>Output</strong></p>\n\n<pre class=\"prettyprint\"><code>['a', 'e', 'E', ' ']</code></pre>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>for i in a:\n            if i not in b:\n                a = a[:a.index(i+1)]+a[a.index(i):]</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>for i in a:\n            if i not in b:\n                a = a[:a.index(i)]+a[a.index(i)+1:]</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>for i in b:\n            if i not in a:\n                a = a[:a.index(i)]+a[a.index(i)+1:]</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>for i in b:\n            if i not in a:\n                a = a[:a.index(i+1)]+a[a.index(i)+1:]</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1207691,"option":"1","correct":false},{"id":1207692,"option":"2","correct":true},{"id":1207693,"option":"3","correct":false},{"id":1207694,"option":"4","correct":false}]},{"q":"<p>In Python 3, you are given the following Code 1 and Code 2. Which of these will display a runtime error?</p>\n\n<p><strong>Code 1</strong></p>\n\n<pre class=\"prettyprint\"><code>class demo:\n    def reset(self):\n        self.x = 0\n        self.y = 0\np = demo()\ndemo.reset(p)\nprint(p.x, p.y)\n</code></pre>\n\n<p><strong>Code 2</strong> </p>\n\n<pre class=\"prettyprint\"><code>class demo:\n        def reset(self):\n                self.x = 0\n                self.y = 0\np = demo()\np.reset()\nprint(p.x, p.y)</code></pre>\n\n<p> </p>","a":[{"id":730484,"option":"Code 1","correct":false},{"id":730485,"option":"Code 2","correct":false},{"id":730486,"option":"Both of these","correct":false},{"id":730487,"option":"None of these","correct":true}]},{"q":"<p>What is the output of the following Python code:</p>\n\n<pre class=\"prettyprint\"><code>class sample:\n    def __init__(self):\n        return 'HackerEarth'\n    def display(self):\n        print 'HackeEarth'\na = sample()\nprint a\n</code></pre>","a":[{"id":149197,"option":"AttributeError","correct":false},{"id":149198,"option":"NameError","correct":false},{"id":149199,"option":"TypeError","correct":true},{"id":149200,"option":"SyntaxError","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>class Python: \n        \"ss\"  #line 2  \n        1222    # line 3\n        \"ss\"    \n        \"Welcome\" \n        a = 5\n        def display(self):\n                print('Python')\nprint(Python.a, Python.__doc__)  # line 9</code></pre>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>5 ss 1222 ss Welcome</code></pre>\n\t<strong>  </strong></li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>5 ss</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>\n\n<p> </p>","a":[{"id":730672,"option":"1","correct":false},{"id":730673,"option":"2","correct":true},{"id":730674,"option":"Compilation error at line 2 ","correct":false},{"id":730675,"option":"Compilation error at line 9","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>class world:\n \n    def __init__(wow):\n        wow.__newtime()\n \n    def dow(wow):\n        print ('HackerEarth ')\n \n    def __newtime(wow):\n        print ('Python test')\n \nx = world()\nx.dow()</code></pre>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>HackerEarth \nPython test</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Python test\nHackerEarth </code></pre>\n\t \n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>HackerEarth</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":730524,"option":"1","correct":false},{"id":730525,"option":"2","correct":true},{"id":730526,"option":"3","correct":false},{"id":730527,"option":"TypeError","correct":false}]},{"q":"<p>Three car companies manufacture a specific set of cars every quarter.</p>\n\n<p><strong>Company1</strong> is the parent company of <strong>company2</strong> and <strong>company3</strong>. If <strong>company2</strong> and <strong>company3</strong> want to sign a partnership, then they require information about the ratio of cars manufactured by <strong>company2</strong> to the ratio of cars manufactured by <strong>company3</strong>.</p>\n\n<p>Determine the required ratio based on the output of the following Python 3 code.</p>\n\n<pre class=\"prettyprint\"><code>class company1:\n    cars_manuf = 100\n    def x(self): \n        company1.cars_manuf = 150\n       \nclass company2(company1): \n    cars_manuf = 1000\n    def x(self): \n        print(company2.cars_manuf*company1.cars_manuf)\n  \nclass company3(company1):\n    def x(self): \n        cars_manuf = 10\n      \nclass Partner(company2, company3): \n    def x(self): \n        partner_car_val = company2.cars_manuf/company3.cars_manuf   \n        return partner_car_val\nobj = Partner() \na = obj.x()\nprint(a)</code></pre>\n\n<p> </p>","a":[{"id":1208704,"option":"1.0","correct":false},{"id":1208705,"option":"0.1","correct":false},{"id":1208706,"option":"10.0","correct":true},{"id":1208707,"option":"100.0","correct":false}]},{"q":"<p>You are required to perform some calculations to determine the profit difference between the various departments in a company. The calculations to be performed are provided in the following Python 3 code. If <strong>ID_num</strong> is 201 and <strong>dept</strong> is 1, then determine the output.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>class company:\n    def __init__(self):\n        #ID = {ID_num: [Dept_num, dept_profit]}\n        self.ID = {101:[1, 8000],102:[1,6000],201:[1,6000],\n            202:[1,5500]}\n        self.dept_num = {1:[101,102,201,202]}\n        \n    def data(self):\n        d = self.ID.copy()\n        d.update(self.dept_num)\n        return d\n     \n    def data_profit(self, a, ID_num, dept):\n        val = a[ID_num][dept]-a[ID_num+1][dept]\n        return val\n               \ns = company()\na = s.data()\nID_num, dept = map(int, input().split(\",\"))\nb = s.data_profit(a, ID_num, dept)\nprint(b)</code></pre>\n\n<p> </p>","a":[{"id":1207815,"option":"2500","correct":false},{"id":1207816,"option":"500","correct":true},{"id":1207817,"option":"1000","correct":false},{"id":1207818,"option":"ValueError","correct":false}]},{"q":"<p>What is the output of the following Python code:</p>\n\n<pre class=\"prettyprint\"><code>from copy import copy\nclass sample:\n  pass\n\na = sample()\na.lst = [1, 2, 3]\na.str = 'hacker'\nb = copy(a)\na.lst.append('earth')\na.str = 'Python'\nprint b.str</code></pre>","a":[{"id":150651,"option":"[1,2,3]","correct":false},{"id":150652,"option":"hacker","correct":true},{"id":150653,"option":"earth","correct":false},{"id":150654,"option":"hacker earth","correct":false}]},{"q":"<p>What is the output of the following Python code:</p>\n\n<pre class=\"prettyprint\"><code>class Rectangle(object):\n    def __init__(self, w, h):\n        self.width = w\n        self.height = h\n    def area(self):\n        return self.width * self.height\n    def __str__(self):\n        return '(Rectangle: %s, %s)' %(self.width, self.height)\n\nr1 = Rectangle(12,24)\nprint r1\n</code></pre>","a":[{"id":150575,"option":"(Rectangle: 12,  24)","correct":true},{"id":150576,"option":"288","correct":false},{"id":150577,"option":"(Rectangle: 24, 12)","correct":false},{"id":150578,"option":"144","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include&lt;iostream&gt; \nusing namespace std; \n\nclass Base \n{ \n    int x; \n    public: \n        virtual void fun() = 0; \n        int getX() \n        { \n            return x; \n        } \n}; \n\nclass Derived: public Base \n{ \n\tint y; \n    public: \n\tvoid fun() \n    { \n        cout &lt;&lt; \"Hello HackerEarth!\"; \n    } \n}; \nint main(void) \n{ \n\tDerived d; \n\td.fun(); \n\treturn 0; \n} \n</code></pre>\n\n<p> </p>","a":[{"id":133314,"option":"Hello HackerEarth!","correct":true},{"id":133315,"option":"Prints nothing as an output","correct":false},{"id":133316,"option":"Compilation error","correct":false},{"id":133317,"option":"Runtime error","correct":false}]},{"q":"<p>You are leading a group of students for a sports event. Some students have registered for the event and some have not. You are given the following Python 3 code. Determine the output that checks if Alice and Bob have registered for the event using the code. </p>\n\n<pre class=\"prettyprint\"><code>class Sports(object):\n\n        def __init__(boy, why):\n                boy.why = \"Sports 2020:\"\n\n        def Identity(boy):\n                return boy.why\n\n        def isBoy(boy):\n                return False\n\nclass Check(Sports):\n    \n        def isBoy(boy):\n                return True\n                \nx= Sports(\"Alice\")\nprint(x.Identity(), x.isBoy())\n\nx = Check(\"Bob\") \nprint(x.Identity(), x.isBoy())</code></pre>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Sports 2020: True\nSports 2020: False</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Sports 2020: False\nSports 2020: True</code></pre>\n\t<strong>  </strong></li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Alice: False\nBob: True</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Alice: True\nBob: False</code></pre>\n\t</li>\n</ol>","a":[{"id":730520,"option":"1","correct":false},{"id":730521,"option":"2","correct":true},{"id":730522,"option":"3\r\n","correct":false},{"id":730523,"option":"4","correct":false}]},{"q":"<p>In C++, which of the following statements about the Polymorphism technique are correct:</p>\n\n<ol>\n\t<li>Compile-time polymorphism is achieved by the function overloading or the operator overloading.</li>\n\t<li>Runtime polymorphism is achieved by the function overriding.</li>\n\t<li>Compile-time polymorphism is achieved by both function overloading and function overriding.</li>\n</ol>\n\n<p> </p>","a":[{"id":157855,"option":"1 and 2","correct":true},{"id":157856,"option":"2 and 3","correct":false},{"id":157857,"option":"1 and 3","correct":false},{"id":157858,"option":"All of these","correct":false}]},{"q":"<p>In C++, if class <strong>C</strong> is derived from class <strong>B </strong>that is derived from class <strong>A </strong>through public inheritance, then which of the following data can be accessed by class <strong>C</strong>?</p>","a":[{"id":134119,"option":"Protected and Private data of B","correct":false},{"id":134120,"option":"Protected and Public data of A","correct":false},{"id":134121,"option":"Protected and Private data of A and B","correct":false},{"id":134122,"option":"Protected data of A and B","correct":true}]}]
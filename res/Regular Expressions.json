[{"q":"<p>What is the output of the C# code snippet given below?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nusing System.Text.RegularExpressions;\n\nnamespace Hackerearth\n{\n    public class Hack\n    { \n        static bool hack_func(string h)\n        { \n            return Regex.IsMatch(h, @\"[a-zA-Z]\"); \n            \n        }\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(hack_func(\"149-199\"));\n            Console.WriteLine(hack_func(\"Hackerearth\")); \n        }\n    } \n}</code></pre>\n\n<p><strong>Output</strong>:</p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>149-199\nHackerearth</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>True\nFalse</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>False\nTrue</code></pre>\n\t</li>\n</ol>","a":[{"id":1419247,"option":"1","correct":false},{"id":1419248,"option":"2","correct":false},{"id":1419249,"option":"​The code will give Compile-Time Error","correct":false},{"id":1419250,"option":"3","correct":true}]},{"q":"<p>What is the output of the given code snippet:</p>\n\n<p><strong>Code snippet</strong></p>\n\n<pre class=\"prettyprint\"><code>fun main(){\n  val string=\"I was in a room with a box in hand. The box is in red color\"\n  val temp1=\"box\".toRegex()\n  val temp2=temp1.find(string)\n  val m=temp2?.value\n  val n=temp2?.range\n  println(\"$m $n\")\n  \n  val temp3=temp1.find(string,11)\n  val m2=temp3?.value\n  val n2=temp3?.range\n  println(\"$m2 $n2\")\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1764949,"option":"box 23..25\r\nbox 40..42","correct":false},{"id":1764950,"option":"box 23..25\r\nbox 23..25","correct":true},{"id":1764951,"option":"box 40..42\r\nbox 40..42","correct":false},{"id":1764952,"option":"box 40..42\r\nbox 23..25","correct":false}]},{"q":"<p>What is the output of the given code snippet:</p>\n\n<p><strong>Code snippet</strong></p>\n\n<pre class=\"prettyprint\"><code>fun main(){\n  val temp1=Regex(\"\"\"\\d+\"\"\").findAll(\"ab12cd34ef 56gh7 8i)\n  val temp2=StringBuilder()\n  for(i in temp1){\n     temp2.append(i.value+\" \")\n  }\n  println(temp2)\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1764953,"option":"1 2 3 4 5 6 7 8","correct":false},{"id":1764954,"option":"12345678","correct":false},{"id":1764955,"option":"12 34 56 7 8","correct":true},{"id":1764956,"option":"Error","correct":false}]},{"q":"<p>You want to use regular expressions in a Kotlin program where you have to check the email validation.<br>\n<br>\n<strong>Rules</strong></p>\n\n<ol>\n\t<li>The valid email should have the @ and . in the mail address which allows only 2 to 6 characters after \".\"</li>\n\t<li>Capital letters can be allowed but special characters are not allowed after \".\" and @.</li>\n\t<li>Before @ there can be any alphanumeric characters involved.</li>\n</ol>\n\n<pre class=\"prettyprint\"><code>\"\"\"[a-z]+@[a-zA-Z_%$#]+?\\.[a-z123.*A-Z]{2,6}\"\"\" </code></pre>\n\n<p>The above expression is showing invalid for valid emails too.<br>\nWhich of the following regular expressions is correct based on the above conditions?</p>","a":[{"id":1764889,"option":"\"\"\"\\w+@[0-9]+?\\.[a-zA-Z0-9$%^]{2,6}\"\"\"","correct":false},{"id":1764890,"option":"\"\"\"\\w+@[+a-zA-Z]+?\\.[a-zA-Z]{1,7}\"\"\"","correct":false},{"id":1764891,"option":"\"\"\"\\w+@[a-zA-Z]+?\\.[a-zA-Z]{2,6}\"\"\"","correct":true},{"id":1764892,"option":"\"\"\"\\w$%^@+@[a-zA-Z]+?\\.[a-zA-Z]{1,7}\"\"\"","correct":false}]},{"q":"<p>John is working on Regular Expressions using Vanilla.JS. He has written the following&nbsp;code snippet which returns the last index of matched string using the exec() method. What should he replace in the comment, such that the regular expression should return the last index as 8 for the input <em>hackhbbdearth</em>?</p>\n\n<p><strong>Code</strong>:</p>\n\n<pre class=\"prettyprint\"><code>let Re = //Comment\nlet Result = Re.exec('hackhbbdearth');\nconsole.log('The value of lastIndex is ' + Re.lastIndex);</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1713149,"option":"/hack(h+)d/g","correct":false},{"id":1713150,"option":"/h(t+)rth/g","correct":false},{"id":1713151,"option":"/h(c+)bd/g","correct":false},{"id":1713152,"option":"/h(b+)d/g","correct":true}]},{"q":"<p>Ben is working on Regular Expressions using Vanilla.JS. He has written a code snippet using a regular expression where he is making use of match() method with regular expression \"<strong>/d(b+)d/g</strong>\" as an input. What should Ben replace in the comment to get an output <em>dbbd</em>?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>let A = //Code\nlet res = A.match(/d(b+)d/g);\nconsole.log(res);</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1713145,"option":"cdbbdbsbz","correct":true},{"id":1713146,"option":"dbbwdbsbz","correct":false},{"id":1713147,"option":"cdbdbbsbz","correct":false},{"id":1713148,"option":"dbdbdbsbz","correct":false}]},{"q":"<p>Anita is working on regualar expression using Vanilla.JS. She is using a regular expression method to successfully match. This&nbsp;method also returns an array and it also updates the properties of the associated regular expression object&nbsp;<code>RegExp</code>. If the match is failed the&nbsp;method will return&nbsp;a&nbsp;<code>null value.T</code>hen which of the following methods or combination of methods can she use to get such a result?</p>","a":[{"id":1713141,"option":"exec()","correct":true},{"id":1713142,"option":"test()","correct":false},{"id":1713143,"option":"search()","correct":false},{"id":1713144,"option":"exec() and match()","correct":false}]},{"q":"<p>Ben is currently working on Regular Expressions using Vanilla.JS. He wants to use a regular expression to test&nbsp;for a match in a string. And he wrote a function that accepts the index of the match, or&nbsp;<code>-1</code>&nbsp;if the search fails.&nbsp;Then which of the following options can be used?</p>","a":[{"id":1713137,"option":"exec()","correct":false},{"id":1713138,"option":"match()","correct":false},{"id":1713139,"option":"search()","correct":true},{"id":1713140,"option":"test()","correct":false}]},{"q":"<p>Mike is currently working on Regular Expressions using Vanilla.JS. He wants to use a regular expression to test&nbsp;for a match in a string and he wrote a function that takes boolean as input depending on the match.&nbsp;Then which of the following options can be used?</p>","a":[{"id":1713133,"option":"exec()","correct":false},{"id":1713134,"option":"match()","correct":false},{"id":1713135,"option":"matchAll()","correct":false},{"id":1713136,"option":"test()","correct":true}]},{"q":"<p>Mark is currently working on Regular Expressions using Vanilla.JS. He wants to use a regular expression to return&nbsp;an array containing all of the matches and capturing groups. And also return&nbsp;<code>null</code>&nbsp;if no match is found.&nbsp;Then which of the following options can be used?</p>","a":[{"id":1713129,"option":"search()","correct":false},{"id":1713130,"option":"match()","correct":true},{"id":1713131,"option":"matchAll()","correct":false},{"id":1713132,"option":"exec()","correct":false}]},{"q":"<p>Lisa is currently using Regular Expressions in Vanilla.JS. She wants to write a code where&nbsp;it returns a function that can create the RegExp object's prototype. Which of the following options can she use?</p>","a":[{"id":1711400,"option":"source","correct":false},{"id":1711401,"option":"constructor","correct":true},{"id":1711402,"option":"compile()","correct":false},{"id":1711403,"option":"exec()","correct":false}]},{"q":"<p>John is working on Regular Expressions in Vanilla.JS. He wants to&nbsp;global flag&nbsp;RegExp&nbsp;object to match the input string. He has written the following code. What is the output of the code?</p>\n\n<pre class=\"prettyprint\"><code>let message = 'Welcome to Hackerearth';\nlet exp = /hack/gi;\n\nlet m1 = [];\nlet match;\ndo {\n    match = exp.exec(message);\n    if(match) {\n      m1.push(match);\n    }\n} while(match != null)\n\nconsole.dir(m1);</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1711396,"option":"SyntaxError: Invalid regular expression flags","correct":false},{"id":1711397,"option":"Output: Hackerearth","correct":false},{"id":1711398,"option":"Returns: Array(1)","correct":true},{"id":1711399,"option":"Output: Hack","correct":false}]},{"q":"<p>Mark is currently working on Regular Expressions using Vanilla.JS. He wrote a function that takes input from the user. This input function is returning a string input. Using regular expression he wants to break this input into an array of substrings. Then which of the following functions can be used?</p>","a":[{"id":1711297,"option":"Array.substring()","correct":false},{"id":1711298,"option":"trim()","correct":false},{"id":1711299,"option":"exec()","correct":false},{"id":1711300,"option":"split()","correct":true}]},{"q":"<p>Ben is currently working on Regular Expressions using Vanilla.JS. He is currently using the&nbsp;<code>RegExp</code>&nbsp;constructor with a string literal.&nbsp;He wants to use backslash as an escape in his regular expression. Then which of the following given codes can be used in this scenario?</p>\n\n<p><strong>Codes</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&amp;');</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>string.replace(/[.*+?^${}()|/g, '$&amp;');</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>new RegExp('/[.*+?^${}()|[\\]\\\\]/g');</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1711293,"option":"1","correct":true},{"id":1711294,"option":"2","correct":false},{"id":1711295,"option":"3","correct":false},{"id":1711296,"option":"Both 1 and 3","correct":false}]},{"q":"<p>What is the value of <strong>$txt</strong> in the following Perl code:</p>\n\n<pre class=\"prettyprint\"><code>my $txt = 'I am learning Perl';                    \n$txt =~ /(\\w+)$/;\n</code></pre>","a":[{"id":9514,"option":"Perl ","correct":false},{"id":9515,"option":"I","correct":false},{"id":9516,"option":"I am learning Perl","correct":true},{"id":9517,"option":"Empty string","correct":false}]},{"q":"<p>You want to use the code snippet given alongside in your Java application.</p>\n\n<pre class=\"prettyprint\"><code>String reg=\"[\\\\w]+ [\\\\w]+ [\\\\w]+\";\nString input = XXX;\nSystem.out.println(input.matches(reg));</code></pre>\n\n<p>Which of these strings should you use in place XXX to produce \"true\" as the output?<br>\n<br>\n1. \"Car Horn \"<br>\n2. \"1 22 333\"<br>\n3. \"1_A 2_B C_3\"<br>\n4. \"1a 2-r c_3\"</p>","a":[{"id":1656029,"option":"1 and 3","correct":false},{"id":1656030,"option":"2 and 3","correct":true},{"id":1656031,"option":"2, 3 and 4","correct":false},{"id":1656032,"option":"2 and 4","correct":false}]},{"q":"<p>You are using the given method of the Matcher class. public String group(int group) You performed a matching operation and the match is successful. However, the specified group fails in matching any part of the input sequence. What will happen as a result of this?</p>","a":[{"id":1655849,"option":"IllegalStateException will be thrown","correct":false},{"id":1655850,"option":"0 will be returned","correct":false},{"id":1655851,"option":"Null will be returned","correct":true},{"id":1655852,"option":"Empty subsequence will be returned","correct":false}]},{"q":"<p>You are using the following Matcher class when working with Java 8.<br>\n    public int start(int group)<br>\nWhich of these exceptions will this method throw if you had previously performed a match operation that failed?</p>","a":[{"id":1655829,"option":"IllegalStateException","correct":true},{"id":1655830,"option":"IndexOutOfBoundsException","correct":false},{"id":1655831,"option":"IllegalArgumentException","correct":false},{"id":1655832,"option":"ClassCastException","correct":false}]},{"q":"<p>Which of the following syntaxes can be used in place of YYY in the C# code given below to produce the output as follows?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nusing System.Text.RegularExpressions;\nnamespace RegularExp\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        { \n            string s = \"GoodMorning\";\n            YYY\n            {\n                Console.WriteLine(\"First part of the string matched\"); \n                \n            }\n            else if(Regex.IsMatch(s,\"Morning$\"))\n            { \n                Console.WriteLine(\"Second part of the string matched\"); \n                \n            }\n            else\n            { \n                Console.WriteLine(\"No part of the string matched\"); \n                \n            } \n            \n        } \n        \n    } \n    \n}</code></pre>\n\n<p><br>\n<br>\n<strong>Output</strong></p>\n\n<pre class=\"prettyprint\"><code>First part of the string matched</code></pre>\n\n<p> </p>\n\n<p> </p>\n\n<p><br>\n<strong>Syntaxes</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>if(Regex.IsMatch(s,\"^good\",RegexOptions.IgnorePatternWhitespace))</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>if(Regex.IsMatch(s,\"^good\",RegexOptions.IgnoreCase))</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>if(Regex.IsMatch(s,\"^  Good\",RegexOptions.IgnoreCase))</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1419242,"option":"1","correct":false},{"id":1419243,"option":"3","correct":false},{"id":1419244,"option":"2","correct":true},{"id":1419245,"option":"All of these","correct":false}]},{"q":"<p>If you have executed the following C# code snippet, then which of the following statements is correct?<br>\n<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System; \nusing System.Text.RegularExpressions; \n \nclass RegExpr\n{ \n    static void Main() \n    { \n        Regex regex = new Regex(@\"[^x-z]\"); \n        Match match = regex.Match(\"xmas\"); \n        if (match.Success) \n        { \n            Console.WriteLine(\"The matching value will be: \" + match.Value); \n            \n        } \n        \n    } \n}</code></pre>\n\n<p><br>\n<br>\n<strong>Statements:</strong></p>\n\n<ol>\n\t<li> The code produces the following output-<br>\n\t   The matching value will be: xm<br>\n\t </li>\n\t<li>The code produces the following output-<br>\n\t   The matching value will be: ma<br>\n\t </li>\n\t<li>The code produces the following output-<br>\n\t   The matching value will be: m<br>\n\t </li>\n\t<li> The code gives a Compile-Time Error</li>\n</ol>","a":[{"id":1419232,"option":"1","correct":false},{"id":1419233,"option":"2","correct":false},{"id":1419234,"option":"3","correct":true},{"id":1419235,"option":"4","correct":false}]},{"q":"<p>If you have executed the following C# code snippet, then which of the following statements is correct?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System; \nusing System.Text.RegularExpressions; \n \nclass RegExpr\n{ \n    static void Main() \n    {\n        Regex regex = new Regex(@\"c...r\"); \n        Match match = regex.Match(\"There was a chair lying in his house which was 10 acres wide.\"); \n        if (match.Success) \n        { \n            Console.WriteLine(\"The value which matches is: \" + match.Value); \n            \n        } \n        \n    } \n}</code></pre>\n\n<p><br>\n<br>\n<strong>Statements:</strong></p>\n\n<ol>\n\t<li>The code produces the following output -<br>\n\tThe value which matches is: chair<br>\n\t </li>\n\t<li> Code gives Compile-Time Error<br>\n\t </li>\n\t<li>The code produces the following output-<br>\n\tThe value which matches is: acres<br>\n\t </li>\n\t<li> The code does not print anything</li>\n</ol>\n\n<p> </p>\n\n<p> </p>","a":[{"id":1419227,"option":"1","correct":true},{"id":1419228,"option":"2","correct":false},{"id":1419229,"option":"3","correct":false},{"id":1419230,"option":"4","correct":false}]},{"q":"<p>What is the output of the following C# code snippet?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System; \nusing System.Text.RegularExpressions; \n \nclass Hackerearth\n{ \n    public static void Main(string[] args)  \n    {\n        Regex h = new Regex(@\"p*q\"); \n        Match hack = h.Match(\"pqqqqrst\"); \n        if (hack.Success) \n        { \n            Console.WriteLine(hack.Value); \n            \n        } \n    } \n}</code></pre>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>qqqp</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>pq</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>qqqqp</code></pre>\n\t</li>\n</ol>","a":[{"id":1419237,"option":"1","correct":false},{"id":1419238,"option":"2","correct":true},{"id":1419239,"option":"3","correct":false},{"id":1419240,"option":"None of these","correct":false}]},{"q":"<p>Which of the following regex patterns syntaxes can be used in place of XXX to successfully validate an email address using the  Javascript given code snippet?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>function EmailValidation(email_id) \n{\n    const regex_pattern = XXX\n \n    if (regex_pattern.test(email_id)) \n    {\n        console.log('The email address is valid');\n        \n    }\n    else \n    {\n        console.log('The email address is not valid');\n        \n    }\n}\n\nEmailValidation('javascript@gmail.com');\nEmailValidation('helloworld123@com');</code></pre>\n\n<p> </p>\n\n<p><strong>Syntaxes</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>/^(([^&lt;&gt;()[\\]\\\\.,;:\\s@\\\"]+(\\.[^&lt;&gt;()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}));</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>/^(([^&lt;&gt;()[\\]\\\\.,;:\\s@\\\"]+(\\.[^&lt;&gt;()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,4}))$/;</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>/^(([^&lt;&gt;()[\\]\\\\.,;:\\s@\\\"]+(\\.[^&lt;&gt;()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1420392,"option":"1","correct":false},{"id":1420393,"option":"2","correct":false},{"id":1420394,"option":"3","correct":true},{"id":1420395,"option":"None of these","correct":false}]},{"q":"<p>Determine the output of the Javascript code snippet given below:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>var a = /xy/i,\nb = new RegExp(a, \"g\");\nconsole.log(a.test(\"xy\")); \nconsole.log(b.test(\"xy\")); \nconsole.log(a.test(\"XY\"));\nconsole.log(b.test(\"XY\"));</code></pre>\n\n<p><strong>Output</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>true\ntrue\ntrue\ntrue</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>true\ntrue\ntrue\nfalse</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>true\ntrue\nfalse\nfalse</code></pre>\n\n<p>4. </p>\n\n<pre class=\"prettyprint\"><code>false\nfalse\nfalse\nfalse</code></pre>\n\n<p> </p>","a":[{"id":1420587,"option":"1","correct":false},{"id":1420588,"option":"2","correct":true},{"id":1420589,"option":"3","correct":false},{"id":1420590,"option":"4","correct":false}]},{"q":"<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>import java.util.*;\nimport java.lang.*;\n\npublic class StringMatch\n{\n    public static void main(String[] args)\n    {\n        String regex = \".@.\";\n        StringMatch.compare(\"Hacker@Earth.com\", regex);\n        StringMatch.compare(\"a@N\", regex);\n        StringMatch.compare(\"Java@Program\", regex);\n    }\n    public static void compare(String str, String regex)\n    {\n        if (str.matches(regex))\n        {\n            System.out.println(str + \" matches\");\n        }\n        else\n        {\n            System.out.println(str + \" does not match\");\n        }\n    }\n}</code></pre>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>Hacker@Earth.com does not match\na@N matches\nJava@Program does not match</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>Hacker@Earth.com does not match\na@N matches\nJava@Program matches</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>Hacker@Earth.com matches\na@N matches\nJava@Program matches</code></pre>\n\n<p> </p>","a":[{"id":692452,"option":"1","correct":true},{"id":692453,"option":"2","correct":false},{"id":692454,"option":"3","correct":false},{"id":692455,"option":"Compilation error","correct":false}]}]
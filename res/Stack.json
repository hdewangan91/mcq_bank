[{"q":"<p>You are required to find valid and the longest parentheses. The provided code can be used to perform this task but some logic statements are missing in this code. Which of the following code statements will you use to replace <em>//code</em>?&nbsp;</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>function Hacker(string str){\n  n=length of string\n  if (n &lt;= 1)\n     return 0\n  declare and initialize x=0\n  declare an array arr of size n\n  arr={0};\n  for i=1 to n\n\tif (str[i] == ') and i - arr[i - 1] - 1 &gt;= 0 and str[i - arr[i - 1] - 1] == '(')\n        if(i - arr[i - 1] - 2 &gt;= 0)\n           arr[i]= arr[i - 1] + 2+ //code\n\t  x= max(arr[i], x);\n   return x;\n</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1690386,"option":"arr[i - arr[i - 1] - 2]","correct":true},{"id":1690387,"option":"arr[i - arr[i] - 2]","correct":false},{"id":1690388,"option":"arr[i - arr[i + 1] - 2]","correct":false},{"id":1690389,"option":"arr[arr[i - 1] - 2]","correct":false}]},{"q":"<p>What is the time complexity of the following code:</p>\n\n<pre class=\"prettyprint\"><code>func hacker(Queue Q)\n  read stack S\n  while (Q is not empty) \n\tpush(front of Q) into S\n\tpop top element of Q\n\n  while (S is not empty) \n\tpush(top of S)into Q\n\tpop top element S</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1689723,"option":"O(n)","correct":true},{"id":1689724,"option":"O(n*n)","correct":false},{"id":1689725,"option":"O(log n)","correct":false},{"id":1689726,"option":"O(n log n)","correct":false}]},{"q":"<p>In data structures, which of the following code can reverse a string:</p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hackreverse(String str)\n  Stack stk\n  n=size of str\n  for i=0 to n\n    push(ith character of string)into stk\n  String rev = \"\";\n  while (stk is not empty)\n    rev = rev + stk.peek()\n  return rev</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hackreverse(String str)\n  Stack stk\n  n=size of str\n  for i=0 to n\n    push(ith character of string)into stk\n  String rev = \"\";\n  while (stk is not empty)\n    rev = rev + stk.pop()\n  return rev</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hackreverse(String str)\n  Stack stk\n  n=size of str\n  for i=0 to n\n    push(ith character of string)into stk\n  String rev = \"\";\n  while (stk is not empty)\n    rev = rev + stk.peek()</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hackreverse(String str)\n  Stack stk\n  n=size of str\n  for i=0 to n\n    push(ith character of string)into stk\n  String rev = \"\";\n  while (stk is not empty)\n    rev = rev + stk.pop()\n    pop element from stk\n  return rev</code></pre>\n\t</li>\n</ol>","a":[{"id":1692119,"option":"1","correct":false},{"id":1692120,"option":"2","correct":true},{"id":1692121,"option":"3","correct":false},{"id":1692122,"option":"4","correct":false}]},{"q":"<p>In data structures, what is the output of the following code:</p>\n\n<pre class=\"prettyprint\"><code>Input stack s= 20 6 5 10 11 -3 -2 5 4\n\nfunction Hackerearth(Stack s)\n  Stack temp\n  while (s is not empty) \n    push(top of s)into temp\n\tpop element from s\n\tbool result = true\n\twhile (size of temp &gt; 1) \n\t  int x = top of temp \n\t  pop element from temp\n\t  int y = top of temp\n      pop element from temp\n\t  if (abs(x - y) != 1)\n\t  result = false;\n\t  push x into s\n      push y into s\n\tif (size of temp == 1)\n\t  push(top of temp) into s\n return result</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1692115,"option":"True","correct":true},{"id":1692116,"option":"False","correct":false},{"id":1692117,"option":"Compilation error","correct":false},{"id":1692118,"option":"None of these","correct":false}]},{"q":"<p>In data structures, what is the output of the following code:</p>\n\n<pre class=\"prettyprint\"><code>input Q= [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n      k= 5\n\nfunction Hacker(int k, Queue Q)\n if (Q is empty or k &gt; size of Q)\n  return;\n if (k &lt;= 0)\n  return;\n Stack S\n for i=0 to k \n  push into S(front of Q)\n  pop from Q\n while (!S.empty())\n  push into Q(top element of S);\n  Stack.pop();\n for i=0 to size of Q-K\n  push into Q(front of Q);\n  pop from Q\n\nfunction print(queue&lt;int&gt;&amp; Q)\n  while (Q is not empty)\n   print(front of Q)\n   pop from Q</code></pre>","a":[{"id":1692111,"option":"50 40 30 20 10 60 70 80 90 100","correct":true},{"id":1692112,"option":"30 20 10 50 40 60 70 80 90 100","correct":false},{"id":1692113,"option":"10 20 30 40 50 60 70 80 90 100","correct":false},{"id":1692114,"option":"60 70 80 90 100 50 40 30 20","correct":false}]},{"q":"<p>In data structures, what is the output of the following code:</p>\n\n<pre class=\"prettyprint\"><code>For input string = \"IIDDD\"\n\nfunction(string str)\n  String res\n  n=length of str\n  Stack s;\n  for i=0 to n\n   s.push(i + 1);\n\tif (i == seq.length() or seq[i] == 'I')\n\t while s is not empty\n\t   res += convert to string(top ele of s)\n\t   res+= \" \"\n\t   s.pop()\n   print res\n</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1690561,"option":"4 1 6 5 4 3","correct":false},{"id":1690562,"option":"1 2 6 5 4 3","correct":true},{"id":1690563,"option":"1 2 3 4 5 6","correct":false},{"id":1690564,"option":"1 2 4 5 3 6","correct":false}]},{"q":"<p>In data structures, if the input stack is&nbsp;<em>[1, 2, 3, 4, 5]</em>, then what is the output of the following code:</p>\n\n<pre class=\"prettyprint\"><code>void hacker(Stack S, int n,int c=0)\n{\nif (S is empty || c == n)\n\treturn;\ncharacter x = S.top();\nS.pop();\nhacker(S, n, c+1);\nif (c != n/2)\n\tS.push(x);\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1688889,"option":"1 3 4 5","correct":false},{"id":1688890,"option":"1 2 4 5","correct":true},{"id":1688891,"option":"1 2 3 4 ","correct":false},{"id":1688892,"option":"2 3 4 5","correct":false}]},{"q":"<p>Which of the following options will you use to replace&nbsp;<strong>//CODE1&nbsp;</strong>in the provided code?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>func hacker(int hack[], int n, int a[])\n    STACK st\n    push 0 into st\n    a[0] = 1\n    for i=1 to n \n      while (st is not empty &amp;&amp; hack[top of st] &lt;= hack[i])\n            st.pop()\n      a[i] = //Code1\n      st.push(i)\n </code></pre>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>(st.empty()) ? (i + 1) : (i - st.top());</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>(st.top()) ? (i + 1) : (i - st.empty());</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>(st.top()) ? (i + 1) : (i - st.top());</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>(st.pop()) ? (i + 1) : (i - st.top());</code></pre>\n\t</li>\n</ol>","a":[{"id":1687678,"option":"1","correct":true},{"id":1687679,"option":"2","correct":false},{"id":1687680,"option":"3","correct":false},{"id":1687681,"option":"4","correct":false}]},{"q":"<p>What is the time&nbsp;complexity of the following code if <em>Code 2</em> is executed after <em>Code 1</em>?</p>\n\n<p><strong>Code 1</strong></p>\n\n<pre class=\"prettyprint\"><code>​void hacker1(int hack[], int n)\n\tstack s1;\n\tfor i=0 to n\n\tpush hack[i] into s1\n\tSTACK temp = calling function hacker2 by passing value s1\n\tfor i=0 to n\n\t  hack[i] = top of temp\n\t  pop the top value of temp</code></pre>\n\n<p><strong>Code 2</strong></p>\n\n<pre class=\"prettyprint\"><code>STACK hacker2(STACK s2)\n\tSTACK temp2;\n\twhile (s2 is not empty)\n\t\tint tmp = top of s2\n\t\ts2.pop();\n\t\twhile (!temp2.empty() &amp;&amp;temp2.top() &lt; tmp)\n\t\t\tpush(top of temp2) into s2\n\t\t\ttemp2.pop()\n\n\t\tpush tmp into temp2\n\treturn temp2</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1687401,"option":"O(n*n)","correct":true},{"id":1687402,"option":"O(n*n*n)","correct":false},{"id":1687403,"option":"O(n)","correct":false},{"id":1687404,"option":"O(n log n)","correct":false}]},{"q":"<p>What is the output&nbsp;of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nstack&lt;char&gt; st;\nstring ns;\nchar hack_insert(char x)\n{\n\tif(st.size() == 0)\n\tst.push(x);\n\telse\n\t{\n\t\tchar a = st.top();\n\t\tst.pop();\n\t\thack_insert(x);\n\t\tst.push(a);\n\t}\n}\nchar hack()\n{\n\tif(st.size()&gt;0)\n\t{\n\t\tchar x = st.top();\n\t\tst.pop();\n\t\thack();\n\t\thack_insert(x);\n\t}\n}\nint main()\n{\n\tst.push('1');\n\tst.push('2');\n\tst.push('3');\n\tst.push('4');\n\thack();\n\twhile(!st.empty())\n\t{\n\t\tchar p=st.top();\n\t\tst.pop();\n\t\tns+=p;\n\t}\n\tcout&lt;&lt;ns[3]&lt;&lt;\" \"&lt;&lt;ns[2]&lt;&lt;\" \"\n\t\t&lt;&lt;ns[1]&lt;&lt;\" \"&lt;&lt;ns[0]&lt;&lt;endl;\n\treturn 0;\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1686781,"option":"4 1 2 3","correct":false},{"id":1686782,"option":"4 3 2 1","correct":true},{"id":1686783,"option":"2 1 4 3","correct":false},{"id":1686784,"option":"1 2 4 3","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nbool hackeval(char a){\n switch (a) {\n  case '+':\n  case '-':\n  case '/':\n  case '*':\n  return true;\n }\n  return false;\n}\nstring hackexp(string str)\n{\n  stack&lt;string&gt; s;\n  int l = str.size();\n  for (int i = 0; i &lt; l; i++) {\n\tif (hackeval(str[i])) {\n\t  string op1 = s.top();\n\t  s.pop();\n\t  string op2 = s.top();\n\t  s.pop();\n\t  string temp = str[i] + op2 + op1;\n\t  s.push(temp);\n\t  }\n\t  else {\n\t  s.push(string(1, str[i]));\n\t  }\n\t}\n\tstring a = \"\";\n\twhile (!s.empty()) {\n\t\ta += s.top();\n\t\ts.pop();\n\t}\n\treturn a;\n}\nint main(){\n  string str = \"LOVE/-HA/CKER-*\";\n  cout &lt;&lt;hackexp(str);\n  return 0;\n}\n</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1674132,"option":"*-/-/LOVEHACKER","correct":false},{"id":1674133,"option":"LOVEHACKER*-/-/","correct":false},{"id":1674134,"option":"K*-ERCH/A-O/VEL","correct":false},{"id":1674135,"option":"*K-ERC/HA-O/VEL","correct":true}]},{"q":"<p>What is the time complexity of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nvoid hack(int h[], int n)\n{\n   stack&lt;int&gt; s;\n   s.push(h[0]);\n   for (int i = 1; i &lt; n; i++)\n\t{\n      if (s.empty()) {\n\t    s.push(h[i]);\n\t\tcontinue;\n\t\t}\n\t  while (s.empty() == false\n\t\t\t&amp;&amp; s.top() &lt; h[i])\n\t\t{\n\t\t  cout &lt;&lt; s.top()&lt;&lt; \" --&gt; \" &lt;&lt; h[i] &lt;&lt; endl;\n\t\t  s.pop();\n\t\t}\n\t\ts.push(h[i]);\n\t}\n     while (s.empty() == false) {\n        cout &lt;&lt; s.top() &lt;&lt; \" --&gt; \" &lt;&lt; -1 &lt;&lt; endl;\n        s.pop();\n    }\n}\nint main()\n{\n  int arr[] = { 17, 18, 21, 3 };\n  int n = sizeof(arr) / sizeof(arr[0]);\n  hack(arr, n);\n  return 0;\n}\n</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1674128,"option":"O(n)","correct":true},{"id":1674129,"option":"O(log n)","correct":false},{"id":1674130,"option":"O(n^2)","correct":false},{"id":1674131,"option":"O(1)","correct":false}]},{"q":"<p>In data structures, what is the time complexity of the following code:</p>\n\n<pre class=\"prettyprint\"><code>function HackSpan(int arr[], int n, int sum[])\n\tstack st\n\tpush 0 into stack\n\tsum[0] = 1\n\tfor (int i = 1; i &lt; n; i++) \n\t  while (st is not empty &amp;&amp; arr[top of st] &lt;= ith element of arr)\n\t    pop top element of st\n      end of while\n\t\tif(st is empty) then \n         sum[i]=i + 1\n        else\n         sum[i]=(i - top of st)\n        end if\n\t push i into st</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1668399,"option":"O(log n)","correct":false},{"id":1668400,"option":"O(n)","correct":true},{"id":1668401,"option":"O(n^2)","correct":false},{"id":1668402,"option":"O(n log n)","correct":false}]},{"q":"<p>Consider you have implemented pseudocode that converts the infix expression to Postfix expression. Your pseudocode defines the function <strong>infix_to_Postfix()</strong> that takes the <strong>exp</strong> <strong>infix</strong> <strong>expression</strong> and <strong>n</strong> length of the <strong>infix</strong> <strong>expression</strong> as input and returns a <strong>Postfix expression</strong> as output. </p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>FUNCTION Operators( c )\n    SWITCH(c)\n        CASE '+'\n        CASE '-'\n            RETURN 1\n\n        CASE '*'\n        CASE '/'\n            RETURN 2\n\n        CASE '^'\n            RETURN 3\n\n    ENDSWITCH\n\n    RETURN -1\nAND FUN\n\n\n\nFUNCTION infix_to_Postfix( exp, n )\n\n    INT count=0\n\n    STRING ans=\"\"\n\n    DECLARE s : STACK of CHAR\n\n    FOR i -&gt; 0 TO n-1\n        CHAR c=exp[i]\n\n        IF isLetterOrDigit(c)\n            ans+=c\n        ELSE IF c=='('\n            s.PUSH(c)\n        ELSE IF c==')'\n            WHILE s.EMPTY()==FALSE &amp;&amp; s.TOP()!='('\n                ans+=s.POP()\n            ENDWHILE\n\n            s.POP()\n            count+=1\n        ELSE\n            WHILE s.EMPTY()==FALSE &amp;&amp; Operators(c)&lt;operators(s.TOP())\n                ans+=s.POP()\n            ENDWHILE\n\n            s.PUSH(c)\n            count+=1\n        ENDIF\n    ENDFOR\n\n    WHILE s.EMPTY()==FALSE\n        IF s.TOP()=='('\n            RETURN \"The Expression is invalid\"\n        ENDIF\n        ans+=s.POP()\n    ENDWHILE\n\n    RETURN ans\nENDFUNCTION</code></pre>\n\n<p><strong>Note:</strong></p>\n\n<ol>\n\t<li>The function <strong>isLetterOrDigit() </strong>takes a character as input and if the character is an alphabet or digit it returns <strong>TRUE</strong> else it returns <strong>FALSE</strong>.</li>\n\t<li>Consider the data structure <strong>STACK</strong> as a given built-in Stack with methods <strong>PUSH(), POP(), EMPTY(), TOP()</strong>.</li>\n\t<li><strong>PUSH()</strong> - It pushes one element to the stack</li>\n\t<li><strong>POP()</strong> - It pops the top element from the stack and returns it</li>\n\t<li><strong>EMPTY()</strong> - this method checks whether the stack is empty or not. If the stack is empty it returns <strong>TRUE</strong> else it returns <strong>FALSE</strong></li>\n\t<li><strong>TOP()</strong> - this method returns the top element of the stack</li>\n</ol>\n\n<p>Now, if the <strong>exp='t+g*(q^j-x)^(b+a*m)-i'</strong> and <strong>n=21 </strong>then what would be the value of the variable <strong>count </strong>in the above pseudocode?</p>","a":[{"id":1599518,"option":"10","correct":true},{"id":1599519,"option":"11","correct":false},{"id":1599520,"option":"12","correct":false},{"id":1599521,"option":"13","correct":false}]},{"q":"<p>Mary's teacher gave him a string and asked him to validate it. The String consists of only these characters<strong> '(', '{', '['</strong>. You can say that a string is a valid sequence when it is inserted with certain numbers and mathematical operators it should give a valid mathematical expression.<br>\nConditions for a Valid bracket</p>\n\n<ol>\n\t<li>Open brackets must be closed by the same type of brackets.</li>\n\t<li>Open brackets must be closed in the correct order.</li>\n</ol>\n\n<p>Examples of valid expressions are <strong>' [ { } ] ', ' { [ { [ ] } ] } ', ' ( { [ ] ( ) } ( ) ) '</strong><br>\nExamples of Invalid expressions are <strong>' { ( ', ' ( ] [ ', ' { } { ', ' ] [ { } ) ( ', ' [ ( ) ) ] '</strong></p>\n\n<p><strong>Note - Bullet points, explanation of brackets clarity.</strong></p>\n\n<p> </p>\n\n<p>So Mary has implemented the below pseudocode which defines the function <strong>Check_Valid()</strong> that takes the string <strong>exp</strong> and <strong>n</strong> the length of the string as input. If the string is a valid string then the function returns <strong>TRUE</strong> or else it returns <strong>FALSE</strong></p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>FUNCTION Check_Valid( exp, n )\n    DECLARE s : STACK of CHAR\n    CHAR x\n    INT count=0\n\n    FOR i -&gt; 0 to n-1\n        IF ( exp[i]=='(' || exp[i]=='[' || exp[i]=='{' )\n            s.PUSH(exp[i])\n            CONTINUE\n        ENDIF\n\n        IF s.EMPTY()==TRUE\n            RETURN FALSE\n        ENDIF\n\n        SWITCH (exp[i])\n            CASE ')':\n                t=s.TOP()\n                s.POP()\n                count+=1\n                IF (t == '{' || t == '[')\n                    RETURN FALSE\n                ENDIF\n                BREAK\n\n            CASE '}':\n                t=s.TOP()\n                s.POP()\n                count+=1\n                IF (t == '(' || t == '[')\n                    RETURN FALSE\n                ENDIF\n                BREAK\n\n            CASE ']':\n                t=s.TOP()\n                s.POP()\n                count+=1\n                IF (t == '(' || t == '{')\n                    RETURN FALSE\n                ENDIF\n                BREAK\n        ENDSWITCH\n    ENDFOR\n\n    RETURN s.EMPTY()\nENDFUN</code></pre>\n\n<p><strong>Note: </strong></p>\n\n<ol>\n\t<li>Consider the data structure <strong>STACK</strong> as a given built-in Stack with methods <strong>PUSH(), POP(), EMPTY(), TOP()</strong>.</li>\n\t<li><strong>PUSH()</strong> - It pushes one element to the stack</li>\n\t<li><strong>POP()</strong> - It pops the top element from the stack and returns it</li>\n\t<li><strong>EMPTY()</strong> - this method checks whether the stack is empty or not. If the stack is empty it returns <strong>TRUE</strong> else it returns <strong>FALSE</strong></li>\n\t<li><strong>TOP()</strong> - this method returns the top element of the stack</li>\n</ol>\n\n<p>If the <strong>exp=' { ( ) } [ ( { [ } ) ] ] '</strong> and <strong>n=12 </strong>then what would be the value of the variable <strong>count </strong>in the above pseudocode?</p>\n\n<p> </p>\n\n<ol>\n</ol>","a":[{"id":1596432,"option":"1","correct":false},{"id":1596433,"option":"2","correct":false},{"id":1596434,"option":"3","correct":true},{"id":1596435,"option":"4","correct":false}]},{"q":"<p>Alice has a DVD Stack in his room. Each DVD represents a different movie. She has to pick the DVD from the DVD stack. But to do this she needs to take out each DVD one by one from the DVD stack. On every DVD she wrote the name of the movie that the DVD contains. But to see what name does DVD has, she needs to take out the DVD only then she can see. So she started taking out DVD's from the stack and checking each DVD. Now, Alice has decided to again put the remaining DVDs onto the stack. Alice wanted to know how many operations she needs to perform for this task. So she has implemented a program.</p>\n\n<p><strong>Function 1:</strong></p>\n\n<pre class=\"prettyprint\"><code>FUNCTION put_back_DVD(dvd_list, n, new_dvd, count)\n\tl[n]=new_dvd\n    n=n+1\n    count+=1\nENDFUN</code></pre>\n\n<p><strong>Function 2:</strong></p>\n\n<pre class=\"prettyprint\"><code>FUNCTION take_out_DVD(dvd_list, n, count)\n\tdvd=l[n-1]\n    n-=1\n    count+=1\n    RETURN dvd\nENDFUN</code></pre>\n\n<p>The above pseudocodes represent 2 functions <strong>put_back_DVD()</strong> and <strong>take_out_DVD()</strong> . While Alice was searching for the DVD she takes out one by one this operation was written as <strong>take_out_DVD()</strong> and after finding out the DVD she put back the remaining DVDs, this operation was written as <strong>take_out_DVD()</strong>. She passed a count variable in each function to count the total number of operations she needs to perform.</p>\n\n<p><strong>take_out_DVD()</strong><br>\nThe function <strong>take_out_DVD()</strong> takes the <strong>dvd_list</strong> the total stack of DVDs, <strong>n</strong> the total number of DVD's present on the stack at that time and the <strong>count</strong> variable. In this way, she takes out each DVD and checks the movie name written on it.</p>\n\n<p><strong>put_back_DVD()</strong><br>\nThe <strong>put_back_DVD()</strong> takes <strong>dvd_list</strong> the total stack of DVDs, <strong>n</strong> the total number of DVD's present on the stack at that time, <strong>new_DVD</strong> this is one of remaining DVD's that were taken out and the <strong>count</strong> variable. In this way, she puts back each DVD. </p>\n\n<p>Now if Alice has a total of <strong>417</strong> DVD's on the DVD Stack and the if the targeted DVD was at the <strong>269</strong>th position from the bottom of the stack. If Alice executes this as the program, what will be the value of the <strong>count</strong> variable after performing all these operations.<br>\n </p>","a":[{"id":1582849,"option":"536","correct":false},{"id":1582850,"option":"296","correct":false},{"id":1582851,"option":"297","correct":true},{"id":1582852,"option":"537","correct":false}]},{"q":"<p>Mike and his friends were standing in a straight line with a 1-meter distance between each of them. Mike was standing at 5th position.<br>\n<strong>[ Alice, Ben, Bob, Mary, Mike ]</strong> - Mike and his friends<br>\n<strong>[194, 165, 172, 168, 182] </strong>- Heights of Mike and his friends in cm.<br>\nThe distance between Alice and Ben is 1 meter and the distance between Ben and Bob is 1 meter and so on. Mike and his friends are looking at Alice. If Bob finds out the distance between him and the first person who is taller than him. He finds out that it is Alice, 2 meters away from him. So Mike observed this and implemented a code that will populate an array, that will indicate the distance of the first person who is taller than the subject.<br>\nThe populated array for the above example is <br>\n<strong>[1, 1, 2, 1, 4]</strong><br>\nConsider Alice is facing the wall, so his distance would be <strong>1 meter</strong> from the <strong>wall</strong> by default.<br>\nMike has implemented the below Pseudocode that includes the function <strong>Find_Out()</strong>. this function takes 2 inputs <strong>Heights</strong> the array that contains the heights of Mike and his friends and <strong>n</strong> the number of people.</p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>FUNCTION Find_Out( Heights, n )\n    DECLARE temp : STACK of INT\n    temp.PUSH(0)\n\n    DECLARE A : ARRAY[n] of INT\n    A[0]=1\n\n    FOR i -&gt; 1 to n-1\n    \n          // Line 7\n            temp.POP()\n        ENDWHILE\n\n        IF temp.EMPTY()==TRUE\n            A[i]=i+1\n        ELSE\n            A[i]=(i-temp.TOP())\n        ENDIF\n\n        temp.PUSH(i)\n\n    ENDFOR\n\n    FOR i -&gt; 0 to n-1\n        PRINT A[i]\nENDFUN</code></pre>\n\n<p><strong>Note: </strong></p>\n\n<ol>\n\t<li>Consider the data structure <strong>STACK</strong> as a given built-in Stack with methods <strong>PUSH(), POP(), EMPTY(), TOP()</strong>.</li>\n\t<li><strong>PUSH()</strong> - It pushes one element to the stack</li>\n\t<li><strong>POP()</strong> - It pops the top element from the stack and returns it</li>\n\t<li><strong>EMPTY()</strong> - this method checks whether the stack is empty or not. If the stack is empty it returns <strong>TRUE</strong> else it returns <strong>FALSE</strong></li>\n\t<li><strong>TOP()</strong> - this method returns the top element of the stack</li>\n</ol>\n\n<p> </p>\n\n<p>Mike was stuck at <strong>Line 7</strong>. Which of the following options best fit in <strong>Line 7</strong> such that the Pseudocode always returns the correct output if the code is executed?</p>\n\n<p> </p>\n\n<p> </p>\n\n<p> </p>","a":[{"id":1594666,"option":"WHILE temp.EMPTY()==FALSE AND Heights[temp.TOP()]<=Heights[i]","correct":true},{"id":1594667,"option":"WHILE temp.EMPTY()==FALSE AND Heights[temp.TOP()]>=Heights[i]","correct":false},{"id":1594668,"option":"WHILE temp.EMPTY()==TRUE AND Heights[temp.TOP()]<=Heights[i]","correct":false},{"id":1594669,"option":"WHILE temp.EMPTY()==TRUE AND Heights[temp.TOP()]>=Heights[i]","correct":false}]},{"q":"<p>Lisa was working on her maths homework. She was calculating Arithmetic expressions. But she doesn't know whether her answer is correct or not. But her teacher gave a Pseudocode to check the answer.</p>\n\n<p>Consider the below Pseudocode that defines the function <strong>Evaluate_Postfix_Expression() </strong>that takes <strong>exp</strong> the <strong>PostFix</strong> expression and <strong>m</strong> the length of the <strong>PostFix </strong>expression as input. </p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>FUNCTION Evaluate_Postfix_Expression( exp, m )\n    INT count=0\n    DECLARE s : STACK of INT\n\n    FOR i -&gt; 0 TO m-1\n        CHAR c=exp[i]\n\n        IF c==' '\n            CONTINUE\n        ELSEIF IS_DIGIT(c)\n            INT n=0\n\n            WHILE IS_DIGIT(c)\n                n=n*10 + INT(c)\n                i+=1\n                c=exp[i]\n            ENDWHILE\n\n            i-=1\n            \n            s.PUSH(n)\n            count+=1\n\n        ELSE\n            INT v1=s.POP()\n            INT v2=s.POP()\n\n            SWITCH(c)\n                CASE '+'\n                    s.PUSH(v2+v1)\n                    BREAK\n\n                CASE '-'\n                    s.PUSH(v2-v1)\n                    BREAK\n\n                CASE '/'\n                    s.PUSH(v2/v1)\n                    BREAK\n\n                CASE '*'\n                    s.PUSH(v2*v1)\n                    BREAK\n            ENDSWITCH\n        ENDIF\n    ENDFOR\n\n    RETURN s.POP()\nENDFUN</code></pre>\n\n<p><strong>Note:</strong></p>\n\n<ol>\n\t<li><strong>IS_DIGIT()</strong> will take a character type and check if it is a digit i.e 0,1,2,3,4,5,6,7,8,9</li>\n\t<li>The <strong>PostFix</strong> expression will always be a valid expression</li>\n\t<li>In the <strong>PostFix</strong> expression, each operator and operand is space-separated</li>\n\t<li>Consider the data structure <strong>STACK</strong> as a given built-in Stack with methods <strong>PUSH(), POP(), EMPTY(), TOP()</strong>.</li>\n\t<li><strong>PUSH()</strong> - It pushes one element to the stack</li>\n\t<li><strong>POP()</strong> - It pops the top element from the stack and returns it</li>\n\t<li><strong>EMPTY()</strong> - this method checks whether the stack is empty or not. If the stack is empty it returns <strong>TRUE</strong> else it returns <strong>FALSE</strong></li>\n\t<li><strong>TOP()</strong> - this method returns the top element of the stack</li>\n</ol>\n\n<p>If the <strong>exp</strong> is <strong>\"234 162 - 2 / 3 * 9 +\" </strong>and <strong>m=21, what</strong> will be the value of variable <strong>count </strong>if the above Pseudocode is executed with these inputs?</p>\n\n<p> </p>","a":[{"id":1597487,"option":"2","correct":false},{"id":1597488,"option":"3","correct":false},{"id":1597489,"option":"4","correct":false},{"id":1597490,"option":"5","correct":true}]},{"q":"<p>In Compiler Design, the <em>sdcc sourcefile.c</em> command is used to compile, assemble, and link your source file. If you are required to retrieve the Assembler listing file that contains the updated <em>linked</em> information, then which of the following output files is used to retrieve the file?</p>","a":[{"id":840453,"option":"sourcefile.rst","correct":true},{"id":840454,"option":"sourcefile.lst","correct":false},{"id":840455,"option":"sourcefile.asm","correct":false},{"id":840456,"option":"sourcefile.rel","correct":false}]},{"q":"<p>In Compiler Design, if the <em>SDCC that is installed</em> fails to perform a proper build on the computer, then which of the following commands is used to configure and build the compiler?</p>","a":[{"id":840449,"option":"Configure:\r\n./configure 2>&1 | tee configure.log\r\n\r\nBuild:\r\nmake 2>&1 | tee make.log","correct":true},{"id":840450,"option":"Configure:\r\n./configure | tee configure.log\r\n\r\nBuild:\r\nmake | tee make.log","correct":false},{"id":840451,"option":"Both of these","correct":false},{"id":840452,"option":"None of these","correct":false}]},{"q":"<p>In Compiler Design, if you are required to implement the <em>stack</em> temporary data while code is being executed, then which of the following data is stored in the stack:</p>\n\n<ol>\n\t<li>Function arguments</li>\n\t<li>Compiler temporaries</li>\n\t<li>Interrupt contexts</li>\n</ol>","a":[{"id":840433,"option":"1 and 2","correct":false},{"id":840434,"option":"2 and 3","correct":false},{"id":840435,"option":"1 and 3","correct":false},{"id":840436,"option":"All of these","correct":true}]},{"q":"<p>In Compiler Design, if you are required to write<strong> </strong><em>0x01</em><strong> </strong>to the following <em>data</em><strong> </strong>variable declaration in the <em>8051</em> microcontroller, then which of these commands is implemented in the assembly code:</p>\n\n<pre class=\"prettyprint\"><code>__idata unsigned char test_idata;</code></pre>\n\n<p> </p>","a":[{"id":840465,"option":"78r00 mov r0,\r\n76 01 mov @r0,","correct":true},{"id":840466,"option":"mov r0,\r\nmov @r0,","correct":false},{"id":840467,"option":"78r00 mov r0,\r\n74 01 mov @r0,","correct":false},{"id":840468,"option":"None of these","correct":false}]},{"q":"<p>In compiler design, you are required to test an <em>Interrupt Service Routine</em><strong> </strong>by performing the simulation process with certain instructions. This can be performed by using the simple instructions to set the high interrupt that can cause the 8051 microcontroller to jump to the interrupt vector table.</p>\n\n<p>Which of the following instructions will you use to interrupt the microcontroller and allow it to interrupt the vector table?</p>","a":[{"id":840461,"option":"SETB TF1","correct":true},{"id":840462,"option":"SETB TF0","correct":false},{"id":840463,"option":"SETtable TF1","correct":false},{"id":840464,"option":"SETable TF0","correct":false}]},{"q":"<p>In Compiler Design, if these steps are used to execute an interrupt in the microcontroller, then which of the following sequence of the steps is valid:</p>\n\n<ol>\n\t<li>The current status of all the interrupts are saved internally</li>\n\t<li>The microcontroller gets the address of the Interrupt Sevice Routine from the interrupt vector table and jumps to it.</li>\n\t<li>The microcontroller closes the currently executing instruction and saves the address of the next instruction (PC) on the stack.</li>\n</ol>","a":[{"id":840457,"option":"1 -> 2 -> 3","correct":false},{"id":840458,"option":"3 -> 1 -> 2","correct":true},{"id":840459,"option":"2 -> 3 -> 1","correct":false},{"id":840460,"option":"3 -> 2 -> 1","correct":false}]},{"q":"<p>In Compiler Design, if you are required to remove a template type parameter from the brace-enclosed initializer file while using the <em>GNU Compiler Collection</em><strong> </strong>system, then which of the following commands is used?</p>","a":[{"id":840445,"option":"-fdeduce-init-list","correct":true},{"id":840446,"option":"-fdeduce-init","correct":false},{"id":840447,"option":"-fdeduce-list","correct":false},{"id":840448,"option":"None of these","correct":false}]},{"q":"<p>In Compiler Design, which of the following commands is used to retrieve debugging information in the <em>stabs</em> format while using <em>GNU extensions</em> that are implemented by the <em>GNU debugger:</em></p>\n\n<ol>\n\t<li>-gstabs</li>\n\t<li>-gstabs+</li>\n\t<li>-gdwarf</li>\n</ol>","a":[{"id":840441,"option":"1","correct":false},{"id":840442,"option":"2","correct":true},{"id":840443,"option":"3","correct":false},{"id":840444,"option":"None of these","correct":false}]},{"q":"<p>In Compiler Design, which of the following intel compiler commands is used to retrieve symbolic debug information in the object file and change the default optimization from <em>-O2</em> to <em>-O0</em>?</p>","a":[{"id":840429,"option":"-fast","correct":false},{"id":840430,"option":"-g","correct":true},{"id":840431,"option":"-debug all","correct":false},{"id":840432,"option":"None of these","correct":false}]},{"q":"<p>In Compiler Design, which of the following commands is used to allocate a heap size of <em>2048</em> while working in the <em>SDCC</em>?</p>","a":[{"id":840425,"option":"Implement the sdcc -c _heap.c -D HEAP_SIZE=2048 command and link it with the sdcc main.rel _heap.rel command","correct":false},{"id":840426,"option":"Implement the sdcc -c _heap.c HEAP_SIZE=2048 command and link it with the sdcc main.rel _heap.rel command","correct":false},{"id":840427,"option":"Implement the sdcc _heap.c -D HEAP_SIZE=2048 command and link it with the sdcc main.rel _heap.rel command","correct":true},{"id":840428,"option":"None of these","correct":false}]},{"q":"<p>In Compiler Design, if you are required to set the environment variable in <em>SDCC</em>, then which of the following environment variables does not allow the <em>SDCC</em><strong> </strong>to install the signal handler to debug the compiler?</p>","a":[{"id":840417,"option":"SDCC_LEAVE_SIGNALS","correct":true},{"id":840418,"option":"SDCC_HOME","correct":false},{"id":840419,"option":"SDCC_INCLUDE","correct":false},{"id":840420,"option":"SDCC_LIB","correct":false}]},{"q":"<p>In Compiler Design, which of the following linker options is used to place the value of <strong>xdata </strong>in the external memory space of the 8051 microcontroller?</p>","a":[{"id":840373,"option":"--stack-loc","correct":false},{"id":840374,"option":"--xstack--loc","correct":true},{"id":840375,"option":"--data--loc","correct":false},{"id":840376,"option":"Both 1,2","correct":false}]},{"q":"<p>In Compiler Design, which of the following statements about stacks in an embedded system is true:</p>\n\n<ol>\n\t<li>Programs store temporary data in a stack during the execution of code blocks.</li>\n\t<li>Interrupt contexts and return addresses that are not stored in a stack.</li>\n\t<li>The stack memory will be free for use by a subsequent function as soon as the function returns.</li>\n</ol>","a":[{"id":840369,"option":"1","correct":false},{"id":840370,"option":"1 and 2","correct":false},{"id":840371,"option":"1 and 3","correct":true},{"id":840372,"option":"2","correct":false}]},{"q":"<p>In Compiler Design, which of the following statements about the verbose<strong> </strong>command in SDCC is true:</p>\n\n<ol>\n\t<li>It shows the actual commands that the compiler is executing.</li>\n\t<li>It shows the various actions that the compiler is performing.</li>\n</ol>","a":[{"id":840345,"option":"1","correct":false},{"id":840346,"option":"2","correct":true},{"id":840347,"option":"Both of these","correct":false},{"id":840348,"option":"None of these","correct":false}]},{"q":"<p>In Compiler Design, which of the following is used to generate and debug information while using SDCC?</p>\n\n<p> </p>","a":[{"id":840341,"option":"debug","correct":false},{"id":840342,"option":"gendebug","correct":false},{"id":840343,"option":"--debug","correct":true},{"id":840344,"option":"--gendebug","correct":false}]},{"q":"<p>In Compiler Design, which of the following will you use so that the linker can check whether the internal RAM usage is within the limit of the given value in MCS51?</p>","a":[{"id":840321,"option":"--code-size","correct":false},{"id":840322,"option":"--xram-size","correct":false},{"id":840323,"option":"--iram-size","correct":true},{"id":840324,"option":"--pack-size","correct":false}]},{"q":"<p>In Compiler Design, which of the following compiler flags will you use to detect runtime buffer overflow?</p>","a":[{"id":840313,"option":"-D_FORTIFY_SOURCE=2","correct":true},{"id":840314,"option":"-D_FORTIFY_SOURCE=1","correct":false},{"id":840315,"option":"-D_FORTIFY_SOURCE=0","correct":false},{"id":840316,"option":"-D_FORTIFY_SOURCE= -1","correct":false}]},{"q":"<p>In Compiler Design, which of the following types of memories is not fragmented because it allows the operating system to manage its storage efficiently?</p>","a":[{"id":840309,"option":"Stack","correct":true},{"id":840310,"option":"Heap","correct":false},{"id":840311,"option":"Both of these","correct":false},{"id":840312,"option":"None of these","correct":false}]},{"q":"<p>In Compiler Design, if you want to allocate the variables into the directly addressable portion of the internal RAM of an 8051 microcontroller, which of the following address spaces will you assign your variables in?</p>","a":[{"id":840397,"option":"__idata","correct":true},{"id":840398,"option":"__pdata","correct":false},{"id":840399,"option":"__far","correct":false},{"id":840400,"option":"__code","correct":false}]},{"q":"<p>In Compiler Design, which of these is not a valid label in the following code:</p>\n\n<pre class=\"prettyprint\"><code>__asm\nmov b,#10\n00001$:\ndjnz b,00001$\n__endasm ;</code></pre>\n\n<p> </p>","a":[{"id":840409,"option":"__asm","correct":false},{"id":840410,"option":"mov b","correct":false},{"id":840411,"option":"djnz","correct":false},{"id":840412,"option":"All of these","correct":true}]},{"q":"<p>In Compiler Design, which of the following global registers is used by SDCC to pass the first non-bit parameter to a function and also pass the return value of a function:</p>\n\n<ol>\n\t<li>DPL</li>\n\t<li>DPH</li>\n\t<li>B</li>\n\t<li>ACC</li>\n</ol>","a":[{"id":840401,"option":"1, 2, and 3","correct":false},{"id":840402,"option":"1, 3, and 4","correct":false},{"id":840403,"option":"1, 2, and 4","correct":false},{"id":840404,"option":"1, 2, 3, and 4","correct":true}]},{"q":"<p>In Compiler Design, which of the following is used to turn off induction optimizations for a given function while working on SDCC?</p>","a":[{"id":840389,"option":"noinduction","correct":false},{"id":840390,"option":"-noinduction","correct":false},{"id":840391,"option":"--noinduction","correct":true},{"id":840392,"option":"induction = false","correct":false}]},{"q":"<p>In Compiler Design, which of the following commands is used to convert the <strong>ihx </strong>format to the <strong>hex </strong>format using a program called <strong>packihx</strong>?</p>","a":[{"id":840377,"option":"packihx LedBlink.ihx > LedBlink.hex","correct":false},{"id":840378,"option":"packihx \"filename\".ihx >\"filename\".hex","correct":true},{"id":840379,"option":"packihx ihx > hex","correct":false},{"id":840380,"option":"Either 2 or 3","correct":false}]},{"q":"<p>In Compiler Design, which of the following is used to disable peephole optimization with built-in rules in SDCC?</p>","a":[{"id":840337,"option":"--no-peep","correct":true},{"id":840338,"option":"-no-peep","correct":false},{"id":840339,"option":"no-peep","correct":false},{"id":840340,"option":"peep=false;","correct":false}]},{"q":"<p>In Compiler Design, which of these is used to describe the special function registers and special __bit variables of an 8051 microprocessor:</p>\n\n<ol>\n\t<li>__sfr</li>\n\t<li>__sfr16</li>\n\t<li>__sfr32</li>\n\t<li>__sbit</li>\n</ol>","a":[{"id":840365,"option":"1, 2, and 3","correct":false},{"id":840366,"option":"1, 2, and 4","correct":false},{"id":840367,"option":"2, 3, and 4","correct":false},{"id":840368,"option":"All of these","correct":true}]},{"q":"<p>In Compiler Design, which of these alternatives is the correct way to declare a bit in SDCC?</p>","a":[{"id":840361,"option":"bit test_bit;","correct":false},{"id":840362,"option":"_bit test_bit;","correct":false},{"id":840363,"option":"__bit test_bit;","correct":true},{"id":840364,"option":"None of these","correct":false}]},{"q":"<p>In Compiler Design, which of the following commands is used when the compiler must treat all warnings as errors while working in SDCC?</p>","a":[{"id":840349,"option":"-error","correct":false},{"id":840350,"option":"--error","correct":false},{"id":840351,"option":"-Werror","correct":false},{"id":840352,"option":"--Werror","correct":true}]},{"q":"<p>In Compiler Design, which of the following must be considered while porting code to other compilers:</p>\n\n<ol>\n\t<li>The endianness of the compilers differs and adapt where needed</li>\n\t<li>The startup code contains the correct initialization</li>\n\t<li>The sizes of short, int, and long must match</li>\n</ol>","a":[{"id":840405,"option":"1 and 2","correct":false},{"id":840406,"option":"1 and 3","correct":false},{"id":840407,"option":"2 and 3","correct":false},{"id":840408,"option":"All of these","correct":true}]},{"q":"<p>In Compiler Design, which of the following commands is used to invoke the compiler to use a binary constant in SDCC?</p>","a":[{"id":840353,"option":"--std-sdccxx","correct":true},{"id":840354,"option":"--sdccxx","correct":false},{"id":840355,"option":"--sdccxx","correct":false},{"id":840356,"option":"std-sdccxx","correct":false}]},{"q":"<p>In Compiler Design, which of the following debugging options generates DWARF .debug_pubnames and .debug_pubtypes sections?</p>","a":[{"id":840317,"option":"-gpubnames","correct":true},{"id":840318,"option":"-ggnu-pubnames","correct":false},{"id":840319,"option":"Both 1,2","correct":false},{"id":840320,"option":"-ggnupubnames","correct":false}]},{"q":"<p>In Compiler Design, if you are required to write a code of <em>exception handling</em> by using <em>C++</em>, then which of the following is used to store the exceptions at one location:</p>\n\n<ol>\n\t<li>Stack</li>\n\t<li>Heap</li>\n</ol>","a":[{"id":840437,"option":"1","correct":false},{"id":840438,"option":"2","correct":true},{"id":840439,"option":"Both of these","correct":false},{"id":840440,"option":"None of these","correct":false}]},{"q":"<p>In Compiler Design, which of the following functions in a compiler is used to generate an information message for each function in the source file?</p>","a":[{"id":840413,"option":"--verbose","correct":false},{"id":840414,"option":"--cyclomatic","correct":true},{"id":840415,"option":"--nostdine","correct":false},{"id":840416,"option":"None of these","correct":false}]},{"q":"<p>In Compiler Design, which of the following is the correct format for inline assembler code definition:<br>\n1. \"__asm<br>\n; This is a comment<br>\nlabel:<br>\nnop<br>\n__endasm;\"<br>\n2. __asm__ (”; This is a comment\\nlabel:\\n\\tnop”);<br>\n3. __asm(”; This is a comment\\nlabel:\\n\\tnop”);</p>\n\n<p> </p>\n\n<p> </p>","a":[{"id":840385,"option":"1","correct":false},{"id":840386,"option":"2","correct":false},{"id":840387,"option":"2 and 3","correct":false},{"id":840388,"option":"1 and 2","correct":true}]},{"q":"<p>In Compiler Design, which of the following is the command to disable interrupts locally in <em>SDCC</em>?</p>","a":[{"id":840421,"option":"__critical{ i++; }","correct":true},{"id":840422,"option":"__critical{ i--; }","correct":false},{"id":840423,"option":"__critical{ i; }","correct":false},{"id":840424,"option":"None of these","correct":false}]}]
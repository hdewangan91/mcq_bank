[{"q":"<p>You have been asked to create an object and you need to check the ownership and claim it. You have to use the given three methods. Select the correct methods which fulfill the function of the given three methods where you know if you can own the object</p>\n\n<ul>\n\t<li>alloc - create an object and claim ownership of it.</li>\n\t<li>copy-copy object and claim ownership of it</li>\n\t<li>retain- claim ownership of the existing object</li>\n</ul>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>SomeClass* obj=[[ SomeClass alloc] init];\nSomeClass* obj=[[ SomeClass copy] ;\nSomeClass* obj=[[ SomeClass new] ;</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>SomeClass* obj=[[ SomeClass alloc] init];\nSomeClass* obj=[[ SomeClass copy] ;\nSomeClass* obj=[[ SomeClass retain] ;</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>Syntax error</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>SomeClass* obj=[[ SomeClass alloc] init];\nSomeClass* obj=[[ SomeClass copy] ;\nSomeClass* obj=[[ SomeClass renew] ;</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1769692,"option":"1","correct":true},{"id":1769693,"option":"2","correct":false},{"id":1769694,"option":"3","correct":false},{"id":1769695,"option":"4","correct":false}]},{"q":"<p>You have to write a code that implements a certain task implementation whereby it inserts the correct memory management method at the time of compilation. Select the most appropriate option which describes how the system implements the same reference counting system in the given code.&nbsp;</p>\n\n<pre class=\"prettyprint\"><code>(void)contrived \n{\n  Person *person = [[Person alloc] init];\n  [person setFirstName:@\"objective\"];\n  [person setLastName:@\"C\"];\n  [person setYearOfBirth:[[NSNumber alloc] initWithInteger:2002]];\n  NSLog(@\"person: %@\", person);\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1769688,"option":"Automatic Reference Counting makes sure that  the Person and the NSNumber objects are leaked.","correct":false},{"id":1769689,"option":"Automatic Reference Counting makes sure it retains the information about person and NSNumber","correct":false},{"id":1769690,"option":"Automatic Reference Counting  makes sure that neither the Person nor the NSNumber objects are leaked.","correct":true},{"id":1769691,"option":"Automatic Reference Counting  makes sure it copies the information about person and NSNumber","correct":false}]},{"q":"<p>What is the output to the following code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#import\n@interface SampleClass:NSObject\n- (void)sampleMethod;\n@end\n@implementation SampleClass\n- (void)sampleMethod {\n            NSLog(@\"objectiveC \\n\");\n}\n- (void)dealloc {\n        NSLog(@\"Object deallocated\");\n        [super dealloc];\n}\n@end\nint main() {\n SampleClass *sampleClass = [[SampleClass alloc]init];\n [sampleClass sampleMethod];\n  NSLog(@\"Retain Count after initial allocation: %d\",\n [sampleClass retainCount]);\n [sampleClass retain];\n  sampleClass = nil;\nreturn 0;\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1769676,"option":"objectiveC\r\nRetain Count after initial allocation: 2","correct":false},{"id":1769677,"option":"objectiveC\r\nRetain Count after initial allocation: 1","correct":true},{"id":1769678,"option":"Retain Count after initial allocation: 1\r\nobjectiveC","correct":false},{"id":1769679,"option":"No error","correct":false}]},{"q":"<p>What is the output to the following code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#import\n@interface SampleClass:NSObject\n- (void)sampleMethod;\n@end\n@implementation SampleClass\n- (void)sampleMethod {\n NSLog(@\"objectiveC! \\n\");\n}\n- (void)dealloc {\n NSLog(@\"Object deallocated\");\n}\n@end\nint main() {\n  @autoreleasepool {\n   SampleClass *sampleClass = [[SampleClass alloc]init];\n   [sampleClass sampleMethod];\n   sampleClass = nil;\n  }\n return 0;\n}</code></pre>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>","a":[{"id":1769664,"option":"Object deallocated","correct":false},{"id":1769665,"option":"objectiveC","correct":false},{"id":1769666,"option":"objectiveC\r\nObject deallocated","correct":true},{"id":1769667,"option":"Syntax error","correct":false}]},{"q":"<p>Bob was working on a project using an operating system when he came across memory management. The operating system uses various memory allocation mechanisms. Which among the following best describes the single memory allocation?</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>Relocation-register scheme is used to protect user processes from each other, and from changing operating-system code and data.</li>\n\t<li>Main memory is divided into a number of fixed-sized partitions where each partition should contain only one process</li>\n\t<li>In this, when a partition is free, a process is selected from the input queue and is loaded into the free partition</li>\n\t<li>When the process terminates, the partition becomes available for another process.</li>\n</ol>","a":[{"id":1728126,"option":"1","correct":true},{"id":1728127,"option":"2","correct":false},{"id":1728128,"option":"3","correct":false},{"id":1728129,"option":"4","correct":false}]},{"q":"<p>In Operating System, you are working on a project. Under OS memory management keeps track of each and every memory location. Which address will OS use while a compiler converts symbolic addresses into relative addresses?</p>","a":[{"id":1728130,"option":"Symbolic addresses","correct":false},{"id":1728131,"option":"Relative addresses","correct":false},{"id":1728132,"option":"Physical addresses","correct":true},{"id":1728133,"option":"Virtual addresses","correct":false}]},{"q":"<p>In an operating system, which of these refers to the situation where the processor spends most of its time swapping processes rather than executing instructions?</p>","a":[{"id":721169,"option":"Paging","correct":false},{"id":721170,"option":"Fragmentation","correct":false},{"id":721171,"option":"Thrashing","correct":true},{"id":721172,"option":"Overlaying","correct":false}]},{"q":"<p>In C, which of the following library functions is used to block a block of memory on the heap?</p>","a":[{"id":598945,"option":"Malloc()","correct":true},{"id":598946,"option":"Calloc()","correct":false},{"id":598947,"option":"Realloc()","correct":false},{"id":598948,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following C code:</p>\n<pre class=\"prettyprint\"><code>    #include &lt;stdio.h&gt;\n    #define PI 3.14\n    int main()\n    {\n        printf(\"%d\", sizeof(PI));\n    }\n</code></pre>","a":[{"id":123292,"option":"Compilation error","correct":false},{"id":123293,"option":"4","correct":false},{"id":123294,"option":"1","correct":false},{"id":123295,"option":"8","correct":true}]},{"q":"<p>In an operating system, which of these units is responsible for mapping the logical addresses to physical addresses during the run-time?</p>","a":[{"id":721133,"option":"Address management unit","correct":false},{"id":721134,"option":"Virtual memory unit","correct":false},{"id":721135,"option":"Memory management unit","correct":true},{"id":721136,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt; \nusing namespace std; \nint main () \n{ \n\tint n = 5; \n\tint *q = new(nothrow) int[n];\n\tif (!q) \n\t\tcout &lt;&lt; \"Allocation of memory failed\\n\"; \n\telse\n\t{ \n\t\tfor (int i = 0; i &lt; n; i++) \n\t\t\tq[i] = i+1; \n\t\tfor (int i = 0; i &lt; n; i++) \n\t\t\tcout &lt;&lt; q[i] &lt;&lt; \" \"; \n\t} \n\tdelete[] q; \n\treturn 0; \n} \n</code></pre>\n\n<p> </p>","a":[{"id":604371,"option":"1 2 3 4 5","correct":true},{"id":604372,"option":"Allocation of memory failed","correct":false},{"id":604373,"option":"Compilation error","correct":false},{"id":604374,"option":"Runtime error","correct":false}]},{"q":"<p>What is the output of the following C code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;stdio.h&gt;\n#include &lt;conio.h&gt;\n#include &lt;stdlib.h&gt;\nvoid main()\n{\n    int i;\n    int *ptr = (int *) malloc(5 * sizeof(int));\n\n    for (i=4; i&gt;=0; i--)\n    {\n        *(ptr + i) = i+6;\n    }\n\n    printf(\"%d \", *ptr+4);\n    printf(\"%d \", (*ptr)++);\n    printf(\"%d \", *++ptr);\n    printf(\"%d \", ++*ptr);\n    getch();\n}\n</code></pre>","a":[{"id":600310,"option":"6 7 8 10","correct":false},{"id":600311,"option":"2 4 3 7","correct":false},{"id":600312,"option":"4 6 7 8","correct":false},{"id":600313,"option":"10 6 7 8","correct":true}]},{"q":"<p>While using ASP.NET framework, in the profiling phase of an application, the report of profiles provides details of the memory which the application requests or uses. If a portion of the memory is used by a graphics buffer or .NET CLR Dynamic libraries, answer the following questions:</p>\n\n<p>&nbsp; &nbsp; a. Where will the memory be allocated?</p>\n\n<p>&nbsp; &nbsp; b. When will the memory&nbsp;be analyzed by the profiler?</p>\n\n<p><strong>Options:</strong></p>\n\n<ol>\n\t<li>a. The memory will be allocated in the managed heap.&nbsp;<br>\n\tb. The profiler will analyze the snapshot or report of this portion that is collected while profiling.</li>\n\t<li>a. The memory will be managed by the garbage collector.<br>\n\tb. The profiler will analyze the snapshot of this portion collected while profiling.</li>\n\t<li>a. This is an illustration of the unmanaged memory.&nbsp;<br>\n\tb. The profiler will not be able to analyze it because it is an illustartion of the unmanaged memory.</li>\n\t<li>a. This is a case of the unmanaged memory which cannot be given to the managed heap.<br>\n\tb. The snapshots can be used for analysis.</li>\n</ol>","a":[{"id":498252,"option":"1","correct":false},{"id":498253,"option":"2","correct":false},{"id":498254,"option":"3","correct":true},{"id":498255,"option":"4","correct":false}]}]
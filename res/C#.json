[{"q":"<p>You have a class named hack&nbsp;in your C# implementation. Now if you are required to create an object of this class namely A and instantiate two properties X and Y for the object created with the values \"Y\" and \"N\" respectively, at the time of the class initiation process then&nbsp;which of the following&nbsp;syntaxes can you use to perform this action?<br>\n<strong>Syntax:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hack A = new hack\n{ \n    X = \"Y\", \n    Y = \"N\" \n};</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>new demo A = A.set \n{ \n    X = \"Y\", \n    Y = \"N\" \n};</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>new demo A\n{ \n    X = \"Y\", \n    Y = \"N\" \n};</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>demo.A.new \n{ \n    X = \"Y\", \n    Y = \"N\" \n};</code></pre>\n\t</li>\n</ol>","a":[{"id":1419367,"option":"1","correct":true},{"id":1419368,"option":"2","correct":false},{"id":1419369,"option":"3","correct":false},{"id":1419370,"option":"4","correct":false}]},{"q":"<p>You are given th following code. Then what type of boxing is being implemented&nbsp;in the given C# code snippet:</p>\n\n<p><strong>Code Snippet:</strong></p>\n\n<pre class=\"prettyprint\"><code>int v1 = 456;\nobject o1 = (object)v1;</code></pre>","a":[{"id":1673079,"option":"Implicit boxing","correct":false},{"id":1673080,"option":"Explicit boxing","correct":true},{"id":1673081,"option":"Test boxing","correct":false},{"id":1673082,"option":"Declarative boxing","correct":false}]},{"q":"<p>What is the output of the following code snippet?</p>\n\n<p><strong>Code snippet:</strong></p>\n\n<pre class=\"prettyprint\"><code>string sentence = \"Good Morning World\";\nstring[] words = sentence.Split(' ');\n\nforeach (var word in words)\n{\n  System.Console.WriteLine(System.Console.WriteLine(\"&lt;\"+word+\"&gt;\");\n}\n</code></pre>\n\n<p><br>\n[Note: There are three extra spaces between \"Good\" and \"Morning\".]</p>\n\n<p><strong>Output</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>&lt;Good&gt;\n&lt;&gt;\n&lt;&gt;\n&lt;&gt;\n&lt;Morning&gt;\n&lt;World&gt;</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>&lt;Good&gt;\n&lt;Morning&gt;\n&lt;World&gt;</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>&lt;Good&gt;\n&lt;&gt;\n&lt;Morning&gt;\n&lt;World&gt;</code></pre>","a":[{"id":1673075,"option":"1","correct":false},{"id":1673076,"option":"2","correct":false},{"id":1673077,"option":"3","correct":false},{"id":1673078,"option":"Compilation Error","correct":true}]},{"q":"<p>What can you do to force immediate execution of the LINQ query given alongside and cache its results:</p>\n\n<p><strong>LINQ query</strong></p>\n\n<pre class=\"prettyprint\"><code>List&lt;int&gt; numQuery2 =\n    (from num in numbers\n     where (num % 2) == 0\n     select num);</code></pre>","a":[{"id":1673071,"option":"Use the ToList() method","correct":false},{"id":1673072,"option":"Use the ToArray() method","correct":false},{"id":1673073,"option":"Both 1 and 2","correct":true},{"id":1673074,"option":"None of these","correct":false}]},{"q":"<p>Which of these lines of codes in the C# code snippet given alongside will throw a compilation error:</p>\n\n<p><strong>Code snippet</strong></p>\n\n<pre class=\"prettyprint\"><code>public class Sample\n{\n   public static void Main()\n   {\n      //L1\n      int num = 4;\n      int A = Square(num);\n\n      //L2\n      int B = Square(12);\n\n      //L3\n      int C = Square(A * 3);\n   }\n\n   static int Square(int i)\n   {\n     int input = i;\n     return input * input;\n   }\n}</code></pre>","a":[{"id":1673067,"option":"Only L1","correct":false},{"id":1673068,"option":"Only L2","correct":false},{"id":1673069,"option":"Only L3","correct":false},{"id":1673070,"option":"No error will be thrown","correct":true}]},{"q":"<p>Which of the following C# code snippets would successfully convert any expression into a delegate:</p>\n\n<p><strong>Code snippets</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>Expression&lt;Func&lt;int&gt;&gt; subtract = () =&gt; 4 -3;\nvar sub = subtract.Compile();\nvar result = sub(); \nConsole.WriteLine(result);</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>Expression&lt;Func&lt;int&gt; subtract ()&gt;  =&gt; 4 -3;\nvar sub = compile(subtract);\nvar result = sub(); \nConsole.WriteLine(result);</code></pre>","a":[{"id":1673059,"option":"1","correct":true},{"id":1673060,"option":"2","correct":false},{"id":1673061,"option":"Both 1 and 2","correct":false},{"id":1673062,"option":"None of these","correct":false}]},{"q":"<p>Which of the following statements is correct if&nbsp;the <strong>C#</strong> code given below is executed?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\npublic class Test\n{\n    static void Main(string[] args)\n    {\n        int[] array = { 4, 16, 27, 39, 74, 82, 99};\n        fun(array );\n        Console.WriteLine(array + \" \");\n    }\n    static void fun(params int [] bArray )\n    {\n        int [] cArray = { 3, 4, 5, 6, 7, 8, 9};\n        int i ;\n        for (i = 0 ;i &lt; bArray.Length ;i++)\n        if (bArray[i] % 2 == 0)\n        {\n            cArray [i] = bArray [i];\n            \n        }\n        for (i = 0 ;i &lt;= bArray .Length ;i++)\n        {\n            Console.WriteLine(cArray [i]);\n            \n        }\n    }\n}\n</code></pre>\n\n<p><strong>Output:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>4\n16\n5\n6\n74\n82\n9</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Runtime Error</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Compile time Error â€‹</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>4\n16\n27\n6\n74\n82\n9</code></pre>\n\t</li>\n</ol>","a":[{"id":1419162,"option":"3","correct":false},{"id":1419163,"option":"2","correct":false},{"id":1419164,"option":"Both 1 and 2","correct":true},{"id":1419165,"option":"Both 2 and 4","correct":false}]},{"q":"<p>In C# you are implementing an Indexer defined in the class <strong>Demo</strong> in an interface <strong>Test</strong> as shown in the code snippet given below. Which of the following&nbsp;exception is likely to be thrown by the <strong>arr</strong> object?<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>public interface Test\n{\n    int this[int index]\n    {\n        get;\n        set;\n    }\n}\n\nclass Demo : Test\n{\n    private int[] arr = new int[100];\n    public int this[int index] \n    {\n        get\n        {\n            return arr[index];\n        }\n        set\n        {\n            arr[index] = value;\n            \n        }\n    }\n}</code></pre>","a":[{"id":1419382,"option":"arr object will throw IndexOutOfRange exception.","correct":true},{"id":1419383,"option":"arr object will throw InvalidRange exception.","correct":false},{"id":1419384,"option":"arr object will throw NullPointer exception.","correct":false},{"id":1419385,"option":"arr object will throw InvalidReference exception.","correct":false}]},{"q":"<p>Which of the given following options can be used to implement the given <strong>C#</strong> code snippet successfully?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nclass Hackster\n{\n    static void Main()\n    { \n        Nullable&lt;int&gt; a = null;\n        Console.WriteLine(a.HasValue);\n        Nullable&lt;int&gt; b = 23;\n        Console.WriteLine(b.HasValue);\n        \n    }\n}</code></pre>\n\n<p><strong>Options:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>You can use the ternary operator (?:) to assign a value to the underlying type originate from the value of the nullable type.</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>If the value of nullable type is null, you can use GetValueOrDefault(T) method to get the assigned value or the provided default value.</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>You can use = and != operators with nullable type.</code></pre>\n\t</li>\n</ol>","a":[{"id":1419307,"option":"1","correct":false},{"id":1419308,"option":"2","correct":true},{"id":1419309,"option":"3","correct":false},{"id":1419310,"option":"All of these","correct":false}]},{"q":"<p>John has written the follwoing C# code to convert a decimal number into a binary number. Then which of the following syntax can be used in place of //Code comment line to complete the code snippet given below?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\nclass DeciToBinaryRecursion\n{\n    public static void Main(string[] args)\n    {\n        int number;\n        DecimalToBinaryConversion db = new DecimalToBinaryConversion ();\n        Console.Write(\" Input a decimal number : \");\n        number = int.Parse(Console.ReadLine());\n        Console.Write(\" The binary equivalent of {0} is : \", number );\n        db.deciToBinaryFunc(number );\n        Console.Write(\"\\n\");\n    }\n}\n\npublic class DecimalToBinaryConversion \n{\n    public int deciToBinaryFunc(int number )\n    {\n        int result;\n        if (number != 0)\n        {\n            //Code\n            Console.Write(result);\n            return 0;\n        }\n        else\n        { \n            return 0; \n            \n        } \n    } \n}</code></pre>\n\n<p><strong>Syntax:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>result= (number / 2) + 10 * deciToBinaryFunc(number % 2);</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>result= (number % 2) + 10 * deciToBinaryFunc(number / 2);</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>result= (number % 2) - 10 / deciToBinaryFunc(number / 2);</code></pre>\n\t</li>\n</ol>","a":[{"id":1419327,"option":"1","correct":false},{"id":1419328,"option":"2","correct":true},{"id":1419329,"option":"3","correct":false},{"id":1419330,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the C# code snippet given below?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nusing System.Text.RegularExpressions;\n\nnamespace Hackerearth\n{\n    public class Hack\n    { \n        static bool hack_func(string h)\n        { \n            return Regex.IsMatch(h, @\"[a-zA-Z]\"); \n            \n        }\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(hack_func(\"149-199\"));\n            Console.WriteLine(hack_func(\"Hackerearth\")); \n        }\n    } \n}</code></pre>\n\n<p><strong>Output</strong>:</p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>149-199\nHackerearth</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>True\nFalse</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>False\nTrue</code></pre>\n\t</li>\n</ol>","a":[{"id":1419247,"option":"1","correct":false},{"id":1419248,"option":"2","correct":false},{"id":1419249,"option":"â€‹The code will giveÂ Compile-Time Error","correct":false},{"id":1419250,"option":"3","correct":true}]},{"q":"<p>What is&nbsp;the output of the following C# code?</p>\n\n<p><strong>Code&nbsp;</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\nclass hack1 \n{\n\tpublic virtual void hack_method()\n\t{\n\t\tConsole.WriteLine(\"hackerearth\");\n\t}\n}\n\n\nclass hack2 : hack1\n{\n\tpublic new void hack_method()\n\t{\n\t\tConsole.WriteLine(\"hello world\");\n\t}\n}\n\nclass Hackerearth \n{\n\tpublic static void Main(string [] args)\n\t{\n\t\thack1 h=new hack1();\n\t\th.hack_method();\n\t\th = new hack2();\n\t\th.hack_method();\n\t}\n}\n</code></pre>\n\n<p>&nbsp;</p>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hackerearth\nhackerearth</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hackerearth\nhello world</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hello world\nhello world</code></pre>\n\t</li>\n</ol>","a":[{"id":1419512,"option":"1","correct":true},{"id":1419513,"option":"2","correct":false},{"id":1419514,"option":"3","correct":false},{"id":1419515,"option":"Compilation Error","correct":false}]},{"q":"<p>Which of the following statements is not correct about the C# code snippet given below?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>public class Hackerearth\n{\n    public virtual void hack(int h)\n    { \n        \n    }\n}\n\npublic abstract class hacker : Hackerearth\n{\n    public abstract override void hack(int h);\n}\n\npublic class hack_class : hacker\n{\n    public override void hack(int h)\n    { \n        \n    }\n}</code></pre>\n\n<p><strong>Statements:</strong></p>\n\n<ol>\n\t<li>The abstract class cannot override the virtual method with an abstract method.</li>\n\t<li>The method hack&nbsp;on the&nbsp;class hack_class cannot call the method hack on class Hackerearth.</li>\n</ol>","a":[{"id":1419632,"option":"Only Statement 1","correct":true},{"id":1419633,"option":"Only Statement 2","correct":false},{"id":1419634,"option":"Both 1 and 2","correct":false},{"id":1419635,"option":"None of the statements ","correct":false}]},{"q":"<p>Paul is asked to build an application in ASP.NET. He was working with the Finalize method in it. He wants to know which of the following statements from the options is true about the <strong>Finalize()</strong> method?</p>","a":[{"id":498248,"option":"If an object implements the Finalize() method, the garbage collector makes this object as unreachable.","correct":false},{"id":498249,"option":"If an object life cycle ends, then the Finalize() method can be invoked manually.","correct":false},{"id":498250,"option":"If the Finalize() method is used, the object will never remain in memory even when object is unreachable.","correct":false},{"id":498251,"option":"If an object implements the Finalize() method, the garbage collector will not make this object unreachable.","correct":true}]},{"q":"<p>Mike is asked to build an application in ASP.NET. He wants to know in which of the following events will&nbsp;<strong>Session_End</strong>&nbsp;be raised?</p>","a":[{"id":498244,"option":"Only by time out expiry","correct":false},{"id":498245,"option":"Only by explicitly using Session_Abandon()","correct":false},{"id":498246,"option":"App pool cycle recycles on schedule","correct":false},{"id":498247,"option":"All of the above","correct":true}]},{"q":"<p>Mike is asked to design a webpage with the following fields:</p>\n\n<ul>\n\t<li>Name</li>\n\t<li>Email</li>\n\t<li>Password</li>\n\t<li>Confirm password</li>\n</ul>\n\n<p>It is mandatory to fill the Password and Confirm password fields and the information entered should not be visible. Also, the values in the Password and Confirm Password fields should match. Which of the following validators will he select for the aforementioned task?</p>","a":[{"id":498332,"option":"RequiredFieldValidator, TextMode=\"Password\", and CompareValidator","correct":true},{"id":498333,"option":"CustomValidator, TextMode=\"Password\", and RegularExpressionValidator","correct":false},{"id":498334,"option":"RequiredFieldValidator, TextMode=\"SingleLine\", and CompareValidator","correct":false},{"id":498335,"option":"RequiredFieldValidator TextMode=\"SingleLine\", and CompareValidator","correct":false}]},{"q":"<p>In ASP.NET, which of the following statements about master pages is true:</p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>The master page Init event occurs before the page Init and Load events.</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>The master page Load event occurs after the page Init and Load events.</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>The master page Load event occurs after the page Init and before the Load events.</code></pre>\n\t</li>\n</ol>","a":[{"id":498288,"option":"1 ","correct":false},{"id":498289,"option":"2","correct":false},{"id":498290,"option":"3","correct":false},{"id":498291,"option":"1 and 2","correct":true}]},{"q":"<p>What is the output of the following ASP.NET code?</p>\n\n<pre class=\"prettyprint\"><code>class Hello {    \n   static void Main(string[] args) \n   {        \n      String r1 = \"one\";        \n      String r2 = string.Concat(r1 + \" \" + \"two\");       \n      Console.WriteLine(r2);        \n      Console.ReadLine();    \n    }\n}\n</code></pre>","a":[{"id":84132,"option":"one+\"\"+two","correct":false},{"id":84133,"option":"onetwo","correct":false},{"id":84134,"option":"one two","correct":true},{"id":84135,"option":"one \" \" two","correct":false}]},{"q":"<p>In <strong>C#</strong>, aÂ derived class wants to provide a custom implementation of the area method in order to use it to calculate the value for the area of the sphere with the given values.<br>\nWhich of the following keywords are used in the derived class in the followingÂ given scenario?</p>\n\n<p>Â </p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>public Shape(double a, double b)\n{\n    this.a = a;\n    this.b = b;\n    \n}\npublic virtual double Area()\n{\n    return a * b;\n    \n}</code></pre>\n\n<p>Â </p>","a":[{"id":1419372,"option":"Override","correct":true},{"id":1419373,"option":"abstract","correct":false},{"id":1419374,"option":"const","correct":false},{"id":1419375,"option":"static","correct":false}]},{"q":"<p>Which of the following statements is correct about the C# code snippet given below?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>public class Hackerearth&lt;H&gt;\n{\n    public H hack; \n    public void Hack()\n    {\n        H j = hack + 5;\n        \n    }\n}\nclass hack_code\n{\n    static void Main(string[] args)\n    {\n        Hackerearth&lt;int&gt; h= new Hackerearth&lt;int&gt;();\n        h.Hack();\n    }\n}</code></pre>\n\n<p>Â </p>\n\n<p><strong>Statements</strong></p>\n\n<ol>\n\t<li>The code will generate a run-time exception.<br>\n\tÂ </li>\n\t<li>The code does not print anything.<br>\n\tÂ </li>\n\t<li>The code will give a compilation error<br>\n\tÂ </li>\n\t<li>The code prints-\n\t<pre class=\"prettyprint\"><code>5</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419202,"option":"1","correct":false},{"id":1419203,"option":"2","correct":false},{"id":1419204,"option":"3","correct":true},{"id":1419205,"option":"4","correct":false}]},{"q":"<p>What will be the output of the following C# code?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nclass Hackerearth \n{\n\tpublic static void Main(string[] args)\n\t{\n\n\t\thack1 h1 = new hack2();\n\t\t\n\t\thack2 h2=(hack2)h1;\n\n\t\th2.hack_method();\n\t}\n}\n\npublic class hack1 \n{\n\tpublic void hack_method()\n\t{\n\t\tConsole.WriteLine(\"hello\");\n\t}\n}\n\npublic class hack2 : hack1 \n{\n\tpublic new void hack_method()\n\t{\n\t\t\n\t\tbase.hack_method();\n\t\tConsole.WriteLine(\"Hackerearth\");\n\t}\n}\n</code></pre>\n\n<p><br>\n<strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hello\nHackerearth</code></pre>\n\t<br>\n\tÂ </li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hackerearth\nhello</code></pre>\n\t<br>\n\tÂ </li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hello</code></pre>\n\t<br>\n\tÂ </li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hello\nhello\nHackerearth</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419142,"option":"3","correct":false},{"id":1419143,"option":"4","correct":false},{"id":1419144,"option":"1","correct":true},{"id":1419145,"option":"2","correct":false}]},{"q":"<p>What will beÂ the output of the C# code snippet given below?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nnamespace Interfaces\n{ \n    abstract class hack1\n    {\n        public int a;\n        public abstract void hack_opr();\n        \n    } \n    class hack2 : hack1\n    {\n        public int b;\n        public int s;\n        public override void hack_opr() \n        {\n            s = a + b;\n            Console.WriteLine(+a + \",\" + b);\n            Console.WriteLine(s);\n            \n        }\n        \n    } \n    class Hackerearth\n    {\n        static void Main(string[] args)\n        {\n            hack1 h1 = new hack2 ();\n            h1.a = 10;\n            hack2 h2 = new hack2 ();\n            h2.b = 35;\n            h1.hack_opr();\n        }\n        \n    }\n}</code></pre>\n\n<p>Â </p>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>10,0\n10\n</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>10,35\n45</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>0,10\n10</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>0,0\n0</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419137,"option":"1","correct":true},{"id":1419138,"option":"2","correct":false},{"id":1419139,"option":"3","correct":false},{"id":1419140,"option":"4","correct":false}]},{"q":"<p>Which of the following statements is correctÂ about the method(s) defined in the abstract class in the C# code snippet given below?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System; \nabstract class hack \n{ \n    public int hack_opr1(int Num1, int Num2) \n    { \n        return Num1 - Num2; \n        \n    } \n    public abstract int hack_opr2(int Num1, int Num2); \n    \n} \nclass hack1 : hack \n{ \n    public override int hack_opr2(int Num1, int Num2) \n    { \n        return Num1 / Num2; \n        \n    }\n    \n} \nclass Hackerearth\n{ \n    public static void Main() \n    {\n        hack1 h = new hack1(); \n        Console.WriteLine(h.hack_opr1(85, 63)); \n        Console.WriteLine(h.hack_opr2(50, 25)); \n        \n    } \n    \n}</code></pre>\n\n<p>Â </p>","a":[{"id":1419112,"option":"An abstract is defined in the abstract class","correct":false},{"id":1419113,"option":"A non-abstract is defined in the non-abstract class","correct":false},{"id":1419114,"option":"A non-abstract is defined in the abstract class","correct":true},{"id":1419115,"option":"None of these","correct":false}]},{"q":"<p>Which line in the C# code snippet given below produces an error?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>interface Interface   // line 1\n{ \n    void ImplementMethod();   // line 2\n    \n} \nclass ImplementInterface    // line 3\n{ \n    static void Main()   // line 4\n    { \n        ImplementInterface obj = new ImplementInterface();   // line 5\n        obj.ImplementMethod();    // line 6\n        \n    } \n    public void ImplementMethod()    // line 7\n    { \n        \n    } \n    \n}</code></pre>\n\n<p>Â </p>","a":[{"id":1419097,"option":"Line 3","correct":false},{"id":1419098,"option":"Line 5","correct":false},{"id":1419099,"option":"Line 2","correct":false},{"id":1419100,"option":"The code does not give any error","correct":true}]},{"q":"<p>In C# you are working on Events, you have a code given below which defines an event <strong>hackCompleted</strong>. Now, which of the following statements is correct about the <strong>EventArgs.Empty</strong> parameter passed in the <strong>OnhackCompleted()</strong> methodÂ in the code snippet given below?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>class Hackerearth\n{\n    public static void Main()\n    {\n        hackProcess h = new hackProcess();\n        h.hackCompleted += h_hackCompleted;\n        h.hackStart();\n    }\n    public static void h_hackCompleted(object sender, EventArgs e)\n    { \n        Console.WriteLine(\"hack completed\") \n    }\n}\npublic class hackProcess \n{\n    public event EventHandler hackCompleted; \n\n    public void hackStart()\n    {\n        Console.WriteLine(\"Hacking started\");\n        OnhackCompleted(EventArgs.Empty);\n    }\n    \n    protected virtual void OnhackCompleted(EventArgs e)\n    { \n        ProcessCompleted?.Invoke(this, e); \n    }\n}</code></pre>\n\n<p>Â </p>\n\n<p><strong>Statements</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>It is passed to event handlers that are associated with events that have data and it does not notify subscribers about the completion of the process.</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>It is passed to event handlers that are associated with events that do not have data and it notifies subscribers about the completion of the process.</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>It is passed to event handlers that are associated with events that have data and it notifies subscribers about the completion of the process.</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>It is passed to event handlers that are associated with events that do not have data and it does not notify subscribers about the completion of the process.</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1418992,"option":"1","correct":false},{"id":1418993,"option":"2","correct":true},{"id":1418994,"option":"3","correct":false},{"id":1418995,"option":"4","correct":false}]},{"q":"<p>In C# you are working on Events, you have a code given below which defines an event <strong>hackCompleted</strong>. Now, which of the following syntaxes can be used in place of XXX to complete the code snippet given below?</p>\n\n<p>Â </p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>class Hackerearth\n{\n    public static void Main()\n    {\n        hackProcess h = new hackProcess();\n        h.hackCompleted += h_hackCompleted;\n        h.hackStart();\n    }\n    public static void h_hackCompleted(object sender, EventArgs e)\n    { \n        Console.WriteLine(\"hack completed\") \n    }\n}\npublic class hackProcess \n{\n    public event EventHandler hackCompleted; \n\n    public void hackStart()\n    {\n        Console.WriteLine(\"Hacking started\");\n        XXX\n    }\n    \n    protected virtual void OnhackCompleted(EventArgs e)\n    { \n        ProcessCompleted?.Invoke(this, e); \n    }\n}</code></pre>\n\n<p>Â </p>\n\n<p>Â </p>\n\n<p><strong>Syntaxes</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>OnhackCompleted(EventArgs.Empty);\n</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>OnhackCompleted(True);\n</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>OnhackCompleted(False);\n</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419057,"option":"1","correct":true},{"id":1419058,"option":"2","correct":false},{"id":1419059,"option":"3","correct":false},{"id":1419060,"option":"None of these","correct":false}]},{"q":"<p>What will be the output of the following C# code?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\ndelegate void hack_del(string h);\nclass Hackerearth\n{\n    static void hack_method1(string h)\n    {\n        Console.WriteLine($\" Hackerearth, {h}!\");\n    }\n    \n    static void hack_method2(string h)\n    {\n        Console.WriteLine($\" Hack, {h}!\");\n    }\n    \n    static void Main()\n    {\n        hack_del h1, h2, h3, h4;\n        h1 = hack_method1;\n        h2 = hack_method2;\n        h3 = h1 + h2;\n        h4 = h3 - h1;\n        \n        h1(\"h1\");\n        h2(\"h2\");\n        h3(\"h3\");\n        h4(\"h4\");\n        \n    }\n}</code></pre>\n\n<p>Â </p>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hackerearth, h1!\n Hack, h2!\n Hackerearth, h3!\n Hack, h3!\n Hack, h4!</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hackerearth, h1!\n Hack, h2!\n Hack, h3!\n Hackerearth, h3!\n Hackerearth, h4!</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hackerearth, h1!\n Hack, h2!\n Hack, h3!\n Hackerearth, h3!\n Hack, h4!</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hackerearth, h1!\n Hack, h2!\n Hackerearth, h3!\n Hack, h3!\n Hackerearth, h4!</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>\n\n<p>Â  Â  Â Â </p>","a":[{"id":1419017,"option":"3","correct":false},{"id":1419018,"option":"2","correct":false},{"id":1419019,"option":"1","correct":true},{"id":1419020,"option":"4","correct":false}]},{"q":"<p>What will be the output of the following C# code?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\ninterface hack1 \n{  \n    void hack_func();  \n}  \ninterface hack2 \n{  \n    void hack_func();  \n}  \n\nclass Hack: hack2, hack1 \n{  \n    void hack1.hack_func() \n    {  \n        Console.WriteLine(\"hi\");  \n    }  \n    void hack2.hack_func() \n    {  \n        Console.WriteLine(\"hello\");  \n    }  \n}  \n    \nclass Hackerearth \n{  \n    static void Main(string[] args) \n    {  \n        hack2 h2 = new Hack(); \n        hack1 h1 = (hack1)h2;\n    \n        h1.hack_func();  \n        h2.hack_func();\n    }  \n}  </code></pre>\n\n<p>Â </p>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hi\nhello\n</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hi\nhi\n</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hello\nhello\n</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419002,"option":"1","correct":true},{"id":1419003,"option":"2","correct":false},{"id":1419004,"option":"3","correct":false},{"id":1419005,"option":"The code gives a compilation error","correct":false}]},{"q":"<p>In C#, you are working on Events. Consider the C# code snippet given below that shows how to work with events. The code contains a class named <strong>Hackerearth</strong> that has an event named <strong>ReachedThreshold</strong>. Now, which of the following statements is correct about this code snippet?<br>\n<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nnamespace hack_event\n{\n    class Hackerearth_Event\n    {\n        static void Main(string[] args)\n        {\n            Hackerearth c = new Hackerearth(new Random().Next(10));\n            c.ReachedThreshold += c_ReachedThreshold;\n            \n            Console.WriteLine(\"press the 'c' key from the keyboard to increase total\");\n            while (Console.ReadKey(true).KeyChar == 'c')\n            {\n                Console.WriteLine(\"Incrementing by 1\");\n                c.Add(1);\n                \n            }\n            \n        }\n        static void c_ReachedThreshold(object sender, EventArgs e)\n        {\n            Console.WriteLine(\"Reached the threshold already.\");\n            Environment.Exit(0);\n            \n        }\n        \n    }\n    class Hackerearth\n    {\n        private int threshold;\n        private int total;\n        public Hackerearth(int passedThreshold)\n        { \n            threshold = passedThreshold; \n            \n        }\n        public void Add(int x)\n        {\n            total += x;\n            if (total &gt;= threshold)\n            { \n                OnReachingTheThreshold(EventArgs.Empty); \n                \n            }\n            \n        }\n        protected virtual void OnReachingTheThreshold(EventArgs e)\n        {\n            EventHandler handler = ReachedThreshold;\n            if (handler != null)\n            { \n                handler(this, e); \n                \n            }\n            \n        }\n        public event EventHandler ReachedThreshold;\n        \n    }\n}</code></pre>\n\n<p>Â </p>\n\n<p><strong>Statements</strong></p>\n\n<ol>\n\t<li>The code depicts the process to raise and consume an event in the absence of data.<br>\n\tÂ </li>\n\t<li>When a Hackerearth value equals or exceeds a threshold value, the event is raised.</li>\n</ol>","a":[{"id":1418997,"option":"Only 1","correct":false},{"id":1418998,"option":"Only 2","correct":false},{"id":1418999,"option":"Both 1 and 2","correct":true},{"id":1419000,"option":"None of these","correct":false}]},{"q":"<p>In C# you are working on Events and Delegates, you have a code given below which defines an event <strong>hackProcessCompleted</strong>. Now, which of the following statements is correct about thisÂ code?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>public delegate void hack(); \n \npublic class hackProcess\n{\n    public event hackProcessCompleted; \n    public void hackStart()\n    {\n        Console.WriteLine(\"hacking initiated\");\n \n        OnhackCompleted();\n    }\n    protected virtual void OnhackCompleted() \n    { \n        hackProcessCompleted?.Invoke();  \n        \n    }\n}</code></pre>\n\n<p>Â </p>\n\n<p><strong>Statements</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>A derived class should always call the On(Name of the event) method of the base class to ensure that registered delegates receive the event.</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>On(name of the event)methods should be marked as Protected and Virtual.</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1418987,"option":"only 1","correct":false},{"id":1418988,"option":"only 2","correct":false},{"id":1418989,"option":"Both 1 and 2","correct":true},{"id":1418990,"option":"None of these","correct":false}]},{"q":"<p>What will be the output of the following C# code?</p>\n\n<p><br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Student  \n{  \n    public int ID;   \n    public String Name;  \n    public int Marks;\n}\n\nclass Program \n{\n    static void Main()\n    { \n        Student s1= new Student ()\n        {\n            ID = 101,\n            Name = \"Alice\",\n            Marks = 55\n            \n        };\n        Student s2= new Student ()\n        {\n            ID = 102,\n            Name = \"Bob\",\n            Marks = 72\n            \n        };\n        Student s3= new Student ()\n        {\n            ID = 103,\n            Name = \"Ben\",\n            Marks = 64 \n            \n        };\n        List&lt;Student &gt; StudentS1= new List&lt;Student &gt;();\n        StudentS1.Add(s1);\n        StudentS1.Add(s2);\n        StudentS1.Add(s3);\n        \n        var h = StudentS1.Select(x =&gt; x.Marks &gt; (s1.Marks + s2.Marks + s3.Marks)/3);\n        var c=0;\n        \n        foreach(var hack in h)\n        { \n            if(hack)\n            c++;\n            Console.Write(\"{0}\\n\", hack);\n        }\n        Console.WriteLine(c);\n        \n    }\n    \n}</code></pre>\n\n<p>Â </p>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>False\nTrue\nTrue\n2</code></pre>\n\n\t<p>Â </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>True\nFalse\nFalse\n1</code></pre>\n\n\t<p>Â </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>False\nTrue\nFalse\n3</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1418947,"option":"2","correct":false},{"id":1418948,"option":"1","correct":true},{"id":1418949,"option":"3","correct":false},{"id":1418950,"option":"The code gives a compilation error","correct":false}]},{"q":"<p>Which of the following statements is correctÂ if the following C# code is executed?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System; \nnamespace Delegates \n{ \n    class Hackerearth \n    { \n        delegate void hack_delegate(); \n        static void Main(string[] args) \n        {\n            hack_delegate h = delegate\n            { \n                Console.WriteLine(\"Hi Hackerearth\"); \n                \n            }; \n            h(); \n        } \n        \n    } \n}</code></pre>\n\n<p>Â </p>\n\n<ol>\n\t<li>Â The code prints -Â \n\t<pre class=\"prettyprint\"><code>Hi Hackerearth</code></pre>\n\t</li>\n\t<li>Â The code gives a runtime error<br>\n\tÂ </li>\n\t<li>Â The code does not giveÂ a compilation error</li>\n</ol>","a":[{"id":1418937,"option":"only 2","correct":false},{"id":1418938,"option":"1 and 3","correct":true},{"id":1418939,"option":"1 and 2","correct":false},{"id":1418940,"option":"All of these","correct":false}]},{"q":"<p>What will be the output of the C# code given below?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nnamespace Delegates \n{ \n    public class hack\n    { \n        public static void hack1() \n        { \n            Console.WriteLine(\"Hi\"); \n            throw new Exception(\"Caught an error\"); \n        } \n        public static void hack2() \n        { \n            Console.WriteLine(\"Hello\"); \n        } \n        \n    } \n    class Hackerearth \n    { \n        delegate void hackOp(); \n        static void Main(string[] args) \n        {\n            hackOp h = hack.hack1; \n            h += hack.hack2; \n            Delegate[] hc = h.GetInvocationList(); \n            foreach (hackOp c in hc) \n            { \n                try \n                { \n                    c(); \n                    \n                } \n                catch (Exception) \n                { \n                    Console.WriteLine(\"Error\"); \n                    \n                } \n                \n            } \n        } \n        \n    } \n    \n}</code></pre>\n\n<p><br>\n<br>\n<strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Error\nHello\n</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hi\nError\nHello\n</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Error\nHi\n</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hi\nHello\nError\n</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1418927,"option":"1","correct":false},{"id":1418928,"option":"2","correct":true},{"id":1418929,"option":"3","correct":false},{"id":1418930,"option":"4","correct":false}]},{"q":"<p>You have a C# code given below having a missing line of code (YYY). Now, which of the givenÂ statements is correct if the code is executed using theÂ following syntaxes consecutivelyÂ in place of YYY?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\npublic class Hack\n{\n    public static int hackOpr(int[] Array)\n    {\n        int max = Array[0] * Array[1];\n        for (int x = 1; x &lt;= Array.Length - 2; x++)\n        { \n            YYY \n            \n        }\n        return max ;\n }\n public static void Main()\n {\n     Console.WriteLine(hackOpr(new int[] {1, -3, 4, -5, 1}));\n     Console.WriteLine(hackOpr(new int[] {1 , 3, 4, 5, 2}));\n     Console.WriteLine(hackOpr(new int[] {1 , 3, -4, 5, 2}));\n     Console.WriteLine(hackOpr(new int[] {1 , 0, -4, 0, 2})); \n     \n } \n    \n}</code></pre>\n\n<p><br>\n<br>\n<strong>Syntaxes</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>max = Math.Max(max , Array[x] / Array[x + 1]);\n</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>max = Math.Max(max , Array[x] * Array[x - 1]);</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>max = Math.Max(max , Array[x] * Array[x + 1]);</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>max = Math.Max(max , Array[x] / Array[x - 1]);</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>\n\n<p>Â </p>\n\n<p>Â </p>\n\n<p><strong>Statements</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Syntax 1 gives an output and a runtime error</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Syntax 2 gives an output and does not throw any error</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Syntax 3 gives an output and does not throw any error</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Syntax 4 gives an output and throws a runtime error</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419337,"option":"1 and 3","correct":false},{"id":1419338,"option":"2 and 4","correct":false},{"id":1419339,"option":"1 and 4","correct":false},{"id":1419340,"option":"All of these","correct":true}]},{"q":"<p>What is the output of the following C# code?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\npublic class Demo\n{\n     int i; \n     public int j; \n     protected int k; \n     internal int m; \n     protected internal int n; \n     static int x; \n     public static int y;  \n     static void Main()\n     {\n         Demo obj = new Demo ();\n         obj.i =10; \n         obj.j =10;\n         obj.m=10;\n         obj.n=10;\n         obj.k =10; \n         x = 10; \n         y = 10; \n         y = 13;\n         Console.WriteLine(obj.i + obj.j + obj.k + obj.m + obj.n + x + y);\n         \n     }\n}</code></pre>\n\n<p>Â </p>","a":[{"id":1419282,"option":"63","correct":false},{"id":1419283,"option":"53","correct":false},{"id":1419284,"option":"70","correct":false},{"id":1419285,"option":"73","correct":true}]},{"q":"<p>What is the output of the following C# code?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nclass Hack\n{\n    static void hack(ref int h)\n    {\n        h = h* h* h;\n    }\n    \n    static void Main(string[] args)\n    {\n        int h= 15;\n        hack(ref h);\n        Console.WriteLine(h);\n    }\n    \n}</code></pre>\n\n<p>Â </p>","a":[{"id":1419262,"option":"225","correct":false},{"id":1419263,"option":"30","correct":false},{"id":1419264,"option":"3375","correct":true},{"id":1419265,"option":"0","correct":false}]},{"q":"<p>Which of the following syntaxes can be usedÂ in place of YYY in the C# code given belowÂ to produce the output as follows?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nusing System.Text.RegularExpressions;\nnamespace RegularExp\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        { \n            string s = \"GoodMorning\";\n            YYY\n            {\n                Console.WriteLine(\"First part of the string matched\"); \n                \n            }\n            else if(Regex.IsMatch(s,\"Morning$\"))\n            { \n                Console.WriteLine(\"Second part of the string matched\"); \n                \n            }\n            else\n            { \n                Console.WriteLine(\"No part of the string matched\"); \n                \n            } \n            \n        } \n        \n    } \n    \n}</code></pre>\n\n<p><br>\n<br>\n<strong>Output</strong></p>\n\n<pre class=\"prettyprint\"><code>First part of the string matched</code></pre>\n\n<p>Â </p>\n\n<p>Â </p>\n\n<p><br>\n<strong>Syntaxes</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>if(Regex.IsMatch(s,\"^good\",RegexOptions.IgnorePatternWhitespace))</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>if(Regex.IsMatch(s,\"^good\",RegexOptions.IgnoreCase))</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>if(Regex.IsMatch(s,\"^  Good\",RegexOptions.IgnoreCase))</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419242,"option":"1","correct":false},{"id":1419243,"option":"3","correct":false},{"id":1419244,"option":"2","correct":true},{"id":1419245,"option":"All of these","correct":false}]},{"q":"<p>What is the output of the following C# code?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\nclass hack1\n\n{\n\tpublic void h()\n\t{\n\t\tConsole.WriteLine(\"hi\");\n\t}\n}\n\nclass hack2 : hack1\n{\n\t\n\tvirtual public void h()\n\t{\n\t\tConsole.WriteLine(\"hello\");\n\t}\n}\n\nclass Hack {\n\t\n\tpublic static void Main()\n\t{\n\t\t\n\t\thack1 h1 = new hack2();\n\t\t\n\t\th1.h();\n\t\t\n\t\th1 = new hack1();\n\t\t\n\t\th1.h();\n\t\t\n\t}\n}</code></pre>\n\n<p><br>\nÂ </p>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hi\nhi</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hello\nhi</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hi\nhello</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hello\nhello\n</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419657,"option":"4","correct":false},{"id":1419658,"option":"2","correct":false},{"id":1419659,"option":"3","correct":false},{"id":1419660,"option":"1","correct":true}]},{"q":"<p>What is the output of the C# code snippet given below?<br>\n<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\npublic class Hack\n{\n\tpublic static void Main()\n\t{\n\t\tstring hi = \"hi\";\n        string hack = \"hi hackerearth\";\n        string hack2 = \"hi hackerearth\";\n        string hack3 = hi + \" hackerearth\";\n\n        Console.WriteLine(object.Equals(hack2, hack3));\n        Console.WriteLine(object.ReferenceEquals(hack2 , hack3));\n        Console.WriteLine(hack == hack2);\n        Console.WriteLine(object.ReferenceEquals(hack , hack2));\n\n\t}\n}\n</code></pre>\n\n<p>Â </p>\n\n<p><br>\n<strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>True\nTrue\nTrue\nFalse\n</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>True\nTrue\nTrue\nTrue\n</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>True\nFalse\nTrue\nTrue\n</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>False\nFalse\nTrue\nFalse\n</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419602,"option":"1","correct":false},{"id":1419603,"option":"2","correct":false},{"id":1419604,"option":"3","correct":true},{"id":1419605,"option":"4","correct":false}]},{"q":"<p>In C#, you are working on Object and Collection initializers. Now, you have implemented the following code with class Hack. If you are required to initialize an identity matrix by using this class, then which of the following syntaxes can be used to perform this action in this scenario?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>public class Hack\n{\n    private double[,] hack_m = new double[2,2];\n    public double this[int i, int j]\n    { \n        get \n        { \n            return hack_m[i,j]; \n            \n        }\n        set \n        { \n            hack_m[i,j] = value; \n            \n        }\n        \n    }\n}\n</code></pre>\n\n<p><br>\nÂ </p>\n\n<p><strong>Syntax:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>var k = new Hack\n{\n[0, 0] = 1.0,\n[0, 1] = 0.0,\n\n[1, 0] = 0.0,\n[1, 1] = 1.0,\n\n};\n</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>var i = new M\n{\n[0, 0] = 1.0;\n[0, 1] = 0.0;\n\n[1, 0] = 0.0;\n[1, 1] = 1.0;\n};</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>var i = new M\n{\n([0, 0] = 1.0,\n[0, 1] = 0.0),\n\n([1, 0] = 0.0,\n[1, 1] = 1.0),\n\n};</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419582,"option":"1","correct":true},{"id":1419583,"option":"2","correct":false},{"id":1419584,"option":"3","correct":false},{"id":1419585,"option":"None of these","correct":false}]},{"q":"<p>In C#, you want to define a collection initializer using object initializers to initialize objects of the class named 'Dog'. Which of the following code snippets can you use to perform this action?<br>\n<br>\n<strong>Code Snippets:</strong><br>\nÂ </p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>List&lt;Dog&gt; dogs = new List&lt;Dog&gt;\n{\n    new Dog\n    { \n        Name = \"Bob\", \n        Age=8 \n        \n    },\n    new Dog\n    { \n        Name = \"Jake\", \n        Age=2 \n        \n    },\n    new Dog\n    { \n        Name = \"Zoey\", \n        Age=14 \n        \n    }\n};</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>List&lt;Dog&gt; dogs = new List&lt;Dog&gt;\n{\n    new Dog\n    { \n         Name = \"Bob\", \n         Age=8 \n        \n    },\n    new Dog\n    { \n        Name = \"Jake\", \n        Age=2 \n        \n    },\n    { \n        null \n        \n    }\n};</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>List&lt;Dog&gt; dogs = new List&lt;Dog&gt;\n{\n    new Dog\n    { \n        Name = \"Bob\", \n        Age=8 \n        \n    },\n    new Dog\n    { \n        Name = \"Jake\", \n        Age=2 \n        \n    },\n    new Dog \n    { \n        null \n        \n    }\n};</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419577,"option":"1 and 3","correct":false},{"id":1419578,"option":"2 and 3","correct":false},{"id":1419579,"option":"1 and 2","correct":true},{"id":1419580,"option":"All of these","correct":false}]},{"q":"<p>If you have executed the C# code given below, then which of the following statements is correct?</p>\n\n<p><br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nclass Oven \n{ \n    public void DescribeOven() \n    { \n        Console.WriteLine(\"Used to bake cake and confectioneries\"); \n        ShowDetails(); \n    } \n    \n    public virtual void ShowDetails() \n    { \n        Console.WriteLine(\"Standard settings and temperature\"); \n        \n    } \n} \n \nclass MicrowaveOven : Oven \n{ \n    public new void ShowDetails() \n    { \n        Console.WriteLine(\"Used to reheat food\"); \n    } \n} \n \nclass OtgOven : Oven \n{ \n    public override void ShowDetails() \n    { \n        Console.WriteLine(\"Used to bake, toast and grill food\"); \n    } \n}\nclass Hack\n{\n    public static void Main()\n    {\n        OtgOven h=new OtgOven();\n        h.ShowDetails();\n    }\n}</code></pre>\n\n<p><br>\n<br>\n<strong>Statements:</strong></p>\n\n<ol>\n\t<li>The code printsÂ the following-\n\t<pre class=\"prettyprint\"><code>Used to bake, toast and grill food</code></pre>\n\t</li>\n\t<li>The code gives a Compilation error<br>\n\tÂ </li>\n\t<li>The code gives Runtime error</li>\n</ol>","a":[{"id":1419557,"option":"1","correct":true},{"id":1419558,"option":"2","correct":false},{"id":1419559,"option":"3","correct":false},{"id":1419560,"option":"None of these","correct":false}]},{"q":"<p>Consider the C# code snippet given below, now inÂ which of the following \"Blanks\" can you add the keyword <strong>partial</strong> to produce the output as follows:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\npublic Blank1 class C\n{\n    private int x;\n    private int y;\n    \n    public Blank2 C(int x, int y)\n    {\n        this.x = x;\n        this.y = y;\n        \n    }\n}\n\npublic Blank3 class C\n{\n    public Blank4 void Print()\n    {\n        Console.WriteLine(\"C: {0},{1}\", x, y);\n        \n    }\n}\n\nclass Hack\n{\n    static void Main()\n    {\n        C c = new C(1, 5);\n        c.Print();\n        Console.WriteLine(\"Press any key to exit.\");\n    }\n}\n</code></pre>\n\n<p>Â </p>\n\n<p><strong>Output</strong></p>\n\n<pre class=\"prettyprint\"><code>C: 1,5</code></pre>\n\n<p>Â </p>","a":[{"id":1419552,"option":"Blank1 and Blank2","correct":false},{"id":1419553,"option":"Blank1 and Blank4","correct":false},{"id":1419554,"option":"Blank1 and Blank3","correct":true},{"id":1419555,"option":"Blank3 and Blank4","correct":false}]},{"q":"<p>Which of the options is correct with respect to the following statements about the C# code snippet given below?<br>\n<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>class Oven \n{ \n    public void DescribeOven() \n    { \n        System.Console.WriteLine(\"Used to bake cake and confectionerys\"); \n        ShowDetails(); \n    } \n    \n    public virtual void ShowDetails() \n    { \n        System.Console.WriteLine(\"Standard settings and temperature\"); \n        \n    } \n} \nclass MicrowaveOven : Oven \n{ \n    public new void ShowDetails() \n    { \n        System.Console.WriteLine(\"Used to reheat food\"); \n    } \n} \n \nclass OtgOven : Oven \n{ \n    public override void ShowDetails() \n    { \n        System.Console.WriteLine(\"Used to bake, toast and grill food\"); \n    } \n}\n</code></pre>\n\n<p><br>\n<strong>Statements</strong></p>\n\n<ol>\n\t<li>\n\t<p>â€‹ DescribeOven does not access the version of ShowDetails that is defined in the MicrowaveOven class. â€‹<br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<p>â€‹ A MicrowaveOven object displays the same description as a Oven object. â€‹</p>\n\t</li>\n</ol>","a":[{"id":1419527,"option":"S1 and S2 are true. S2 is a consequence of S1.","correct":false},{"id":1419528,"option":"S1 and S2 are true. S1 is a consequence of S2.","correct":true},{"id":1419529,"option":"S1 is true and S2 is false. S1 and S2 are not related.","correct":false},{"id":1419530,"option":"S1 is false and S2 is true. S1 and S2 are not related.","correct":false}]},{"q":"<p>In C#, you are working on Polymorphism. What output will the code snippet givenÂ below produces when \"new\" is used in place of X?<br>\n<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nclass Hack_Base \n{ \n    public void hack1() \n    { \n        Console.WriteLine(\"Base - Method1\"); \n        \n    } \n} \nclass Hack_Derived : Hack_Base \n{ \n    public X void hack2() \n    { \n        Console.WriteLine(\"Derived - Method2\"); \n        \n    } \n} \nclass Hack\n{ \n    static void Main(string[] args) \n    { \n        Hack_Base h1 = new Hack_Base(); \n        Hack_Derived h2 = new Hack_Derived(); \n        Hack_Base h3 = new Hack_Derived(); \n        \n        h1.hack1(); \n        h2.hack1(); \n        h2.hack2(); \n        h3.hack1(); \n        \n    } \n}</code></pre>\n\n<p><br>\n<strong>Output</strong><br>\nÂ </p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Base - Method1 \nBase - Method2 \nDerived - Method1 \nDerived - Method2 \nDerived - Method1 \nBase - Method2</code></pre>\n\t<br>\n\tÂ </li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Base - Method1 \nBase - Method2 \nBase - Method1 \nBase - Method1</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Base - Method1 \nDerived - Method2 \nBase - Method1</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Base - Method1  \nBase - Method1 \nDerived - Method2 \nBase - Method1 </code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419517,"option":"1","correct":false},{"id":1419518,"option":"2","correct":false},{"id":1419519,"option":"3","correct":false},{"id":1419520,"option":"4","correct":true}]},{"q":"<p>In C#, you have defined a method \"DemoMethod\" as shown below.Â Which of the following method calls will throw an error in the given scenario?Â <br>\n<br>\n<em>Note</em>: Assume <strong>optÂ </strong>as the reference variable to call the method \"DemoMethod\"<br>\nÂ </p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>public void DemoMethod(int required, int optInt = default(int), string description = \"Description\")\n{\n    Console.WriteLine(\"{0}: {1} + {2} = {3}\", description, required, optInt, required + optInt);\n}</code></pre>\n\n<p><br>\n<br>\nÂ </p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>opt.DemoMethod(12, description: \"Addition with zero:\");\n</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>opt.DemoMethod(12, 10);\n</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>opt.DemoMethod(12 ,10 , description: \"Addition with zero:\");</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419507,"option":"Only 1","correct":false},{"id":1419508,"option":"Only 2","correct":false},{"id":1419509,"option":"Only 3","correct":false},{"id":1419510,"option":"Both 1 and 2","correct":true}]},{"q":"<p>Which of the following statements is correct about the lines A and B in the C# code snippet given below:<br>\n<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\npublic class Hack\n{\n    static void Main(string[] args)\n        {\n            if (hack1() &amp;&amp; hack2())   // A\n            {\n                Console.WriteLine(\"Hey\");   \n            }\n            \n            if (hack1() &amp; hack2())   // B\n            {\n                Console.WriteLine(\"Hey\");\n            }\n        }\n\t static bool hack1()\n        {\n            Console.WriteLine(\"Hi\");\n            return false ;\n        }\n\n       static bool hack2()\n        {\n            Console.WriteLine(\"Hello\");\n            return true;\n        }\n        \n}\n</code></pre>\n\n<p><br>\n<br>\n<strong>Statements</strong></p>\n\n<ol>\n\t<li>\n\t<p>â€‹ Line A and Line B gives the same output â€‹</p>\n\t</li>\n\t<li>\n\t<p>â€‹ Line A and Line B gives different outputsâ€‹</p>\n\t</li>\n\t<li>\n\t<p>â€‹ Line B gives a compilation error â€‹</p>\n\t</li>\n</ol>","a":[{"id":1419502,"option":"3","correct":false},{"id":1419503,"option":"1","correct":true},{"id":1419504,"option":"2","correct":false},{"id":1419505,"option":"None of these","correct":false}]},{"q":"<p>In C#, you are working on Pattern Matching.Â Which of the following deductions can be made about the <strong>var</strong> declaration used in the case expression in the code snippet given below?<br>\n<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>static object ShapeObjects(string shapeExplain)\n{\n    switch (shapeExplain)\n    {\n        case \"circle\":\n        return new Circle(2);\n        \n        case \"square\":\n        return new Square(4);\n\n        case \"large-circle\":\n        return new Circle(12);\n        \n        case var o when (o?.Trim().Length ?? 0) == 0:\n        return null;\n        \n        default:\n        return \"the shape explanation is not valid\";\n        \n    }\n}</code></pre>\n\n<p><br>\n<br>\n<strong>Deductions</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>var declaration has the null check which is included in the type pattern expressions.\n</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>var declaration follows the normal type inference rules that are the type inferred to be the static type of the switch expression.</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419482,"option":"Only 1","correct":false},{"id":1419483,"option":"Only 2","correct":true},{"id":1419484,"option":"Both 1 and 2","correct":false},{"id":1419485,"option":"None of these","correct":false}]},{"q":"<p>In C#, you are working on Indexers and you are using an indexer in an Interface.Â Which of the following statements in the given scenario is aÂ valid alternative that can be used to apply the explicit interface member with respect to the code snippet given below and also what will be its benefit?<br>\n<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>public interface InterfaceUsingIndexers\n{\n    int this[int index]\n    {\n        get;\n        set;\n        \n    }\n}\nclass ClassInterfaceIndexer: InterfaceUsingIndexers\n{\n    private int[] array = new int[100];\n    public int this[int index] \n    {\n        get =&gt; array [index];\n        set =&gt; array [index] = val;\n        \n    }\n}</code></pre>\n\n<p><br>\n<br>\n<strong>Statements</strong>:</p>\n\n<ol>\n\t<li>\n\t<p>Implement the fully qualified name of the interface member. This helps in avoiding ambiguity in the case of a class implementing multiple interfaces containing the same indexer signature. â€‹<br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<p>Implement the partially qualified name of the interface member. This helps in avoiding ambiguity in the case of a class implementing multiple interfaces containing the same indexer signature. â€‹<br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<p>Implement the fully qualified name of the interface member. This helps in avoiding exceptions in the case of a class implementing single interfaces containing the same indexer signature. â€‹<br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<p>Implement the fully qualified name of the interface member. This helps in avoiding exceptions in the case of a class implementing multiple interfaces containing the same indexer signature. â€‹</p>\n\t</li>\n</ol>","a":[{"id":1419467,"option":"1","correct":true},{"id":1419468,"option":"2","correct":false},{"id":1419469,"option":"3","correct":false},{"id":1419470,"option":"4","correct":false}]},{"q":"<p>What is the output of the following C# code?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\npublic class Hack\n{\n    static void Main(string[] args)\n        {\n            if (hack1() &amp;&amp; hack2())\n            {\n                Console.WriteLine(\"Hey\");\n            }\n        }\n\t static bool hack1()\n        {\n            Console.WriteLine(\"Hi\");\n            return false ;\n        }\n\n       static bool hack2()\n        {\n            Console.WriteLine(\"Hello\");\n            return true;\n        }\n        \n}\n</code></pre>\n\n<p>Â </p>\n\n<p><strong>Output</strong><br>\nÂ </p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hi\n</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hi\nHello</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hi\nHello\nHey</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419462,"option":"1","correct":true},{"id":1419463,"option":"2","correct":false},{"id":1419464,"option":"3","correct":false},{"id":1419465,"option":"The code gives a compile time error","correct":false}]},{"q":"<p>Which lineÂ in the C# code snippet given below produces an error?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;   // line 1\n\nclass Program   // line 2\n{\n    static int count = 0;   // line 3\n    string name = \"Static Program\";  // line 4\n    static void Main(string[] args)  // line 5 \n    { \n        count++;  // line 6\n        Display(\"Good Evening!\");  // line 7 \n        name = \"Static Program Again\";   // line 8\n        SetRootFolder(\"D:\\Desktop\\MyDocuments\");   // line 9\n        \n    }\n    static void Display(string text)   // line 10\n    { \n        Console.WriteLine(text);   // line 11\n        \n    }\n    public void SetRootFolder(string path)   // line 12 \n    { \n        \n    }\n }\n</code></pre>\n\n<p>Â </p>","a":[{"id":1419207,"option":"Line 12","correct":false},{"id":1419208,"option":"Line 9","correct":true},{"id":1419209,"option":"Line 8","correct":false},{"id":1419210,"option":"The code does not throw any error","correct":false}]},{"q":"<p>Which of the following statements is correct aboutÂ the C# code snippet given below?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nnamespace ExceptionProgram\n{\n class MyProgram\n {\n     static void Main(string[] args)\n     {\n         int index = 11;\n         int value = 76;\n         int[] array = new int[10];\n         try\n         { \n             array[index] = value ; \n             \n         } \n         catch(IndexOutOfRangeException e)\n         { \n             Console.WriteLine(\"Index out of bounds \"); \n             \n         }\n         Console.WriteLine(\"Rest of the snippet\"); \n         \n     } \n     \n }\n    \n}</code></pre>\n\n<p><br>\n<br>\n<strong>Statements:</strong><br>\nÂ </p>\n\n<ol>\n\t<li>\n\t<p>â€‹ It will not generate any output. â€‹<br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<p>It will output-</p>\n\n\t<pre class=\"prettyprint\"><code>Index out of bounds</code></pre>\n\n\t<p>Â </p>\n\t</li>\n\t<li>\n\t<p>â€‹ Value 76 will get assigned to array[10]. â€‹<br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<p>It will output-</p>\n\n\t<pre class=\"prettyprint\"><code>Index out of bounds \nRest of the snippet</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419197,"option":"1","correct":false},{"id":1419198,"option":"2","correct":false},{"id":1419199,"option":"3","correct":false},{"id":1419200,"option":"4","correct":true}]},{"q":"<p>What is the output of the following C# code?<br>\n<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System.Collections;\nusing System;\nclass ListProgram\n{\n    ArrayList arr= new ArrayList();\n    public object this[int pos]\n    {\n        get\n        { \n            if (pos&lt; 0 || pos &gt;= arr.Count)\n            { \n                return null; \n                \n            }\n            else\n            { \n                return (arr[pos ]); \n                \n            } \n            \n        }\n        set\n        { \n            arr[pos ] = pos; \n            \n        } \n        \n    } \n    public int Count \n    { \n        get;\n        set; \n        \n    } \n    \n}\nclass Program\n{\n    static void Main(string[] args)\n    {\n        ArrayList obj= new ArrayList();\n        obj[0] = \"1001\";\n        obj[1] = \" Anna\";\n        obj[2] = \"Female\";\n        for (int i = 0; i&lt;=obj.Count; i++)\n        Console.WriteLine(obj[i]);\n        \n    } \n    \n}</code></pre>\n\n<p><br>\n<br>\n<strong>Output:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>1001, Anna, Female</code></pre>\n\n\t<p>Â </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>0</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419177,"option":"1","correct":false},{"id":1419178,"option":"The code gives compile time error","correct":false},{"id":1419179,"option":"2","correct":false},{"id":1419180,"option":"The code gives Run-Time Error","correct":true}]},{"q":"<p>What is the output of the C# code snippet given below?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\npublic class Hack\n{\n    static void Main(string[] args)\n    {\n        String string1= \"Hello\";\n        String string2= \"WORLDS\";\n        string2= string.Concat(string1,' ',string2);\n        String string3= string2.TrimStart('H', 'e', 'l', 'R');\n        Console.WriteLine(string3);\n        \n    }\n}\n</code></pre>\n\n<p>Â </p>","a":[{"id":1419167,"option":"lo WORLDS","correct":false},{"id":1419168,"option":"o WORLDS","correct":true},{"id":1419169,"option":"ello WORLDS","correct":false},{"id":1419170,"option":"Hello WORLDS","correct":false}]},{"q":"<p>Which lines in the C# code snippet given below producesÂ an error?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>public abstract class Parent   // line 1\n\n{ \n    public abstract void A();   // line 2\n    public void D()    //line 3\n    { \n        \n    }\n    protected void E()   // line 4\n    { \n        \n    }\n    private void F()   // line 5\n    { \n        \n    }\n    \n}\npublic class Child : Parent   // line 6\n \n { \n     public override void A()   // line 7\n     { \n         \n     }\n     public void B()   // line 8\n     {\n         D();   // line 9\n         E();   // line 10\n         F();   // line 11\n         \n     } \n     \n }\n \npublic class SubChild  // line 12\n {\n     public static void C()   // line 13\n     {\n         Parent obj = new Parent ();   // line 14\n         Child obj1= new Child ();   // line 15\n         obj1.A();   // line 16\n         obj1.B();   // line 17\n         obj1.D();   // line 18\n         \n     } \n     \n }</code></pre>\n\n<p>Â </p>","a":[{"id":1419127,"option":"Line 14, Line 9","correct":false},{"id":1419128,"option":"Line 11, Line 15","correct":false},{"id":1419129,"option":"Line 11, Line 14","correct":true},{"id":1419130,"option":"Line 15, Line 10","correct":false}]},{"q":"<p>What is the output of the C# code snippet given below?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nusing System.Collections;\npublic class Collections_Example \n{\n    public static void Main() \n    {\n        BitArray bitArray1 = new BitArray(30);\n        BitArray bitArray2 = new BitArray(20);\n        bitArray2.Set(1, false);\n        bitArray2.Set(2, true);\n        bitArray2.Set(3, false);\n        bitArray2.Set(4, false);\n        bitArray2.Set(5, true);\n        \n        for (int i = 0; i &lt; bitArray2.Count/4; i++)\n        {\n            Console.Write(bitArray2[i]);\n            Console.Write(\" \");\n            \n        }\n        \n    } \n    \n}</code></pre>\n\n<p><br>\n<br>\n<strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>False False True False False </code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>False True False False False</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>False True False False True</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>False True False True True</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419092,"option":"2","correct":false},{"id":1419093,"option":"3","correct":false},{"id":1419094,"option":"4","correct":false},{"id":1419095,"option":"1","correct":true}]},{"q":"<p>What will beÂ the output of the C# code snippet given below?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Hack\n{\n    private static void ShowLINQ()\n    {\n        List&lt;Fruit&gt; fruits = BuildList();\n        var subset = from theFruit in fruits where theFruit.FruitID &lt; 6 orderby theFruit.Name select theFruit;\n        foreach (Fruit theFruit in subset)\n        { \n            Console.WriteLine(theFruit.Name + \" \" + theFruit .FruitID ); \n            \n        }\n        \n    }\n    \n    private static List&lt;Fruit &gt; BuildList()\n    {\n        return new List&lt;Fruit &gt;\n        {\n            { new Fruit() \n            { \n                Color=\"Red\", \n                Name=\"Apple\", \n                FruitID =5\n                \n            }\n                \n            },\n            { \n                new Fruit() \n                { \n                    Color=\"Green\", \n                    Name=\"Grape\", \n                    FruitID =7\n                    \n                }\n                \n            },\n            { \n                new Fruit() \n                { \n                    Color=\"Yellow\", \n                    Name=\"Banana\", \n                    FruitID =3\n                    \n                }\n                \n            },\n            { \n                new Fruit() \n                { \n                    Color=\"Saffron\", \n                    Name=\"Orange\", \n                    FruitID =2\n                    \n                }\n                \n            }\n            \n        };\n        \n    }\n    \n    public class Fruit\n    {\n        public string Color\n        { \n            get; \n            set; \n            \n        }\n        public string Name\n        { \n            get; \n            set; \n            \n        }\n        public int FruitID \n        { \n            get; \n            set; \n            \n        }\n        \n    }\n    public static void Main()\n    {\n        ShowLINQ();\n\t}\n    \n}\n</code></pre>\n\n<p><br>\n<br>\n<strong>Output:</strong><br>\nÂ </p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Apple 5\nBanana 3\nOrange 2</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Apple 5\nGrape 7\nBanana 3\n</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Orange 2\nBanana 3\nApple 5</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Grape 7\nBanana 3\nOrange 2\n</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419062,"option":"1","correct":true},{"id":1419063,"option":"2","correct":false},{"id":1419064,"option":"3","correct":false},{"id":1419065,"option":"4","correct":false}]},{"q":"<p>What will be the output of the C# code given below?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\npublic class Hack\n{\n    static void hackA(string hack_stringA)\n    {\n        hack_stringA = \"Hi\";\n    }\n    static void hackB(ref string hack_stringB)\n    {\n        hack_stringB = \"Hello\";\n    }\n    static void hackC(out string hack_stringC)\n    {\n        hack_stringC = \"Hey\";\n    }\n\tstatic void Main(string[] args)\n    {\n        string hackerearth;\n        hackC(out hackerearth);\n        Console.WriteLine(hackerearth);\n\n        hackB(ref hackerearth);\n        Console.WriteLine(hackerearth);\n\n        hackA(hackerearth);\n        Console.WriteLine(hackerearth);\n\n    }\n\n}\n</code></pre>\n\n<p><br>\n<br>\n<strong>Output</strong><br>\nÂ </p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hey\nHello\nHi\n</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hey\nHey\nHello\n</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hey\nHello\nHello\n</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419047,"option":"1","correct":false},{"id":1419048,"option":"2","correct":false},{"id":1419049,"option":"3","correct":true},{"id":1419050,"option":"None of these","correct":false}]},{"q":"<p>In C#, you are working on Events and you are implementing Interface Events. In which of the following scenarios will the code snippet given below be beneficial?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>namespace WrapTwoInterfaceEvents\n{\n    using System;\n    public interface IDrawingObject\n    {\n        event EventHandler OnDraw;\n        \n    }\n    public class Shape : IDrawingObject, IShape\n    {\n        event EventHandler PreDrawEvent;\n        object objectLock = new Object();\n        \n        #region IDrawingObjectOnDraw\n        \n        event EventHandler IDrawingObject.OnDraw\n        {\n            add\n            {\n                lock (objectLock)\n                {\n                    PreDrawEvent += value;\n                    \n                }\n                \n            }\n            remove\n            {\n                lock (objectLock)\n                {\n                    PreDrawEvent -= value;\n                    \n                }\n                \n            }\n            \n        }\n        #endregion\n        \n        public void Draw()\n        {\n            PreDrawEvent?.Invoke(this, EventArgs.Empty);\n            Console.WriteLine(\"Drawing a shape.\");\n            \n        }\n}</code></pre>\n\n<p><br>\n<br>\n<br>\nÂ </p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>This can be used in situations where a class inherits from two or more interfaces and each interface has an event with the same name.</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>This can be used in if the events should be raised at different times according to the interface specifications.</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419042,"option":"1","correct":false},{"id":1419043,"option":"2","correct":false},{"id":1419044,"option":"Both 1 and 2","correct":true},{"id":1419045,"option":"None of these","correct":false}]},{"q":"<p>Alice is working on C# Events and she wants toÂ raise base class events in derived classes. She has an abstract class Shape which contains methods to define dimensions and to calculate the area of a particular shape and also update the dimensions. Now she is facing an issue while defining a genericÂ EventHandler to handle the ShapeChanged event.Â <br>\nConsider the code snippet given below as a subset of the entire Code. What of the following syntaxes can AliceÂ use in place of XXX to create an event without the need to declare a separate delegate type?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>public class ShapeEventArgs : EventArgs\n{\n    public ShapeEventArgs(double a)\n    {\n        NewArea = a;\n        \n    }\n    public double NewArea \n    { \n        get; \n        \n    }\n    \n}\npublic abstract class Shape\n{\n    protected double _area;\n    public double Area\n    {\n        get =&gt; _a;\n        set =&gt; _a = value;\n        \n    }\n    XXX\n    public abstract void Draw();\n    protected virtual void OnShapeChanged(ShapeEventArgs e)\n    {\n        //Some code\n        }\n }</code></pre>\n\n<p><br>\n<br>\n<strong>Statement:</strong><br>\nÂ </p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>public event EventHandler&lt;ShapeEventArgs&gt; ShapeChanged;</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>public event EventHandler&lt;EventArgs&gt; ShapeChanged;</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419037,"option":"Only 1","correct":true},{"id":1419038,"option":"Only 2","correct":false},{"id":1419039,"option":"1 and 2","correct":false},{"id":1419040,"option":"None of these","correct":false}]},{"q":"<p>If you have executed the C# code given below, then which of the following statements is correct?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\nclass Hack\n{\n    delegate int del_function(int abc);\n    public int Function1(int abc)\n    {\n        Console.WriteLine(\"ABC:You are done!\");\n        return 0;\n        \n    }\n    public static void Main()\n    {\n        del_function obj;\n        Hack h = new Hack();\n        obj= new del_function(ref h.Function1);\n        obj(86);\n        \n    }\n}</code></pre>\n\n<p><br>\n<br>\n<strong>Statements:</strong></p>\n\n<ol>\n\t<li>The code gives the output-\n\t<pre class=\"prettyprint\"><code>Â ABC:You are done!</code></pre>\n\t</li>\n\t<li>The code gives a compile-time error<br>\n\tÂ </li>\n\t<li>Â The code does not giveÂ a runtime error<br>\n\tÂ </li>\n</ol>","a":[{"id":1418977,"option":"only 2","correct":false},{"id":1418978,"option":"only 3","correct":false},{"id":1418979,"option":"1 and 3","correct":true},{"id":1418980,"option":"None of these","correct":false}]},{"q":"<p>Which of the following syntaxes can be used in place of XXX to complete the C# code snippet given below?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nnamespace Delegates \n{ \n    public class Hack\n    { \n        public static void Multiply(int a, int b) \n        { \n            Console.WriteLine(\"Product={0}\",a * b); \n            \n        } \n        public static void Remainder(int a, int b) \n        { \n            Console.WriteLine(\"Mod={0}\", a % b); \n            \n        } \n        \n    } \n    class Program \n    { \n        delegate void DelOp(int x, int y); \n        static void Main(string[] args) \n        {\n            DelOp[] obj = \n            { \n                new DelOp(Hack.Multiply), \n                XXX \n                \n            }; \n            for (int i = 0; i &lt; obj.Length; i++) \n            { \n                obj[i](6, 11); \n                obj[i](10, 2); \n                obj[i](8, 4); \n                \n            } \n            \n        } \n        \n    } \n}</code></pre>\n\n<p>Â </p>\n\n<p><strong>Syntax:</strong><br>\nÂ </p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>new DelOp(Mod.Remainder)</code></pre>\n\n\t<p>Â </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>new DelOp(Program.Remainder)</code></pre>\n\n\t<p>Â </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>new DelOp(Remainder)</code></pre>\n\n\t<p>Â </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>new DelOp(Hack.Remainder)</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1418922,"option":"1","correct":false},{"id":1418923,"option":"2","correct":false},{"id":1418924,"option":"3","correct":false},{"id":1418925,"option":"4","correct":true}]},{"q":"<p>Which line in the C# code snippet given belowÂ will produce an error?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;  // line 1\nnamespace Delegates   // line 2\n{ \n    public delegate int operation(int x, int y);   // line 3\n    class Hack  // line 4\n    { \n        static int Subtraction(int a, int b)  // line 5\n        { \n            return a - b;   // line 6\n            \n        } \n        static void Main(string[] args)   // line 7\n        {\n            operation obj = new operation(Subtraction);   // line 8\n            Console.WriteLine(\"Subtraction is={0}\",obj(67,45));   // line 9\n            \n        } \n        \n    } \n }</code></pre>\n\n<p>Â </p>","a":[{"id":1418917,"option":"Line 3","correct":false},{"id":1418918,"option":"Line 5","correct":false},{"id":1418919,"option":"Line 8","correct":false},{"id":1418920,"option":"This code does not contain an error","correct":true}]},{"q":"<p>In the given C# code, which of the following canÂ be used in place of XXX and YYY to produce the output as follows?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nusing System.Collections.Generic;\nclass Hackster\n{\n    public static void Main()\n    {\n        Stack&lt;string&gt; hack_animals = new Stack&lt;string&gt;();\n        hack_animals.Push(\"dog\");\n        hack_animals.Push(\"bat\");\n        hack_animals.Push(\"cow\");\n        hack_animals.Push(\"rat\");\n        hack_animals.Push(\"cat\");\n        foreach( string h in hack_animals )\n        { \n            Console.WriteLine(h); \n            \n        }\n        hack_animals.Pop();\n        hack_animals.Peek();\n        hack_animals.Pop();\n        Stack&lt;string&gt; hack = new Stack&lt;string&gt;(hack_animals.ToArray());\n        \n        XXX\n        hack_animals.CopyTo(hack_array, hack_animals.Count);\n        Stack&lt;string&gt; hack3 = new Stack&lt;string&gt;(hack_array);\n        \n        Console.WriteLine(YYY\n        hack.Clear();\n        Console.WriteLine(\"\\n\"+ hack.Count); \n        \n    } \n    \n}</code></pre>\n\n<p>Â </p>\n\n<p>Â </p>\n\n<p><strong>Output</strong></p>\n\n<pre class=\"prettyprint\"><code>cat\nrat\ncow\nbat\ndog\n\nFalse\n\n0\n</code></pre>\n\n<p>Â </p>\n\n<p>Â </p>\n\n<p>Â </p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>XXX: hack.Contains(\"rat\"));\n\nYYY: string[] hack_array = new string[hack_animals.Count * 2];</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>XXX: string[] hack_array = new string[hack_animals.Count * 2];\n\nYYY: hack.Contains(\"rat\"));</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>XXX: string[] hack_array = new string[hack_animals.Count * 4];\n\nYYY: hack.Contains(\"cat\"));</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>XXX: string[] hack_array = new string[hack_animals.Count / 2];\n\nYYY: hack.Contains(\"cow\"));</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419457,"option":"1","correct":false},{"id":1419458,"option":"2","correct":true},{"id":1419459,"option":"3","correct":false},{"id":1419460,"option":"4","correct":false}]},{"q":"<p>What is the output of the following C# code?<br>\n<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nusing System.Collections.Generic;\nclass Hackster\n{\n    public static void Main()\n    {\n        Queue&lt;string&gt; hack_cars = new Queue&lt;string&gt;();\n        hack_cars.Enqueue(\"car\");\n        hack_cars.Enqueue(\"bus\");\n        hack_cars.Enqueue(\"taxi\");\n        hack_cars.Enqueue(\"tram\");\n        hack_cars.Enqueue(\"truck\");\n        foreach( string h in hack_cars )\n        { \n            Console.WriteLine(h); \n            \n        }\n        hack_cars.Dequeue();\n        hack_cars.Peek();\n        hack_cars.Dequeue();\n        Queue&lt;string&gt; hack = new Queue&lt;string&gt;(hack_cars.ToArray());\n        \n        string[] hack_array = new string[hack_cars.Count * 2];\n        hack_cars.CopyTo(hack_array, hack_cars.Count);\n        Queue&lt;string&gt; hack3 = new Queue&lt;string&gt;(hack_array);\n       \n        Console.WriteLine(\"\\n\"+hack.Contains(\"tram\"));\n        hack.Clear();\n        Console.WriteLine(\"\\n\"+hack.Count); \n        \n    } \n    \n}</code></pre>\n\n<p><br>\n<br>\n<strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>car\nbus\ntaxi\ntram\ntruck\n\nFalse\n\n0</code></pre>\n\t<br>\n\tÂ </li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>car\nbus\ntaxi\ntram\ntruck\n\nTrue\n\n0\n</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>car\nbus\ntaxi\ntram\ntruck\n\nTrue\n\n5</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419452,"option":"1","correct":false},{"id":1419453,"option":"2","correct":true},{"id":1419454,"option":"3","correct":false},{"id":1419455,"option":"Code gives a Compile-Time Error","correct":false}]},{"q":"<p>Which of the following statements is correct ifÂ the following C# code snippet is executed?<br>\n<br>\n<strong>Code:</strong>Â </p>\n\n<pre class=\"prettyprint\"><code>using System;\nusing System.Collections.Generic;\n\npublic class Hack\n{\n    private static void DictionaryIteration()\n    {\n        Dictionary&lt;string, Fruit&gt; fruits = BuildDictionary();\n        foreach (KeyValuePair&lt;string, Fruit&gt; kvp in fruits)\n        {\n            Fruit theFruit = kvp.Value;\n            Console.WriteLine(\"key: \" + kvp.Key);\n            Console.WriteLine(\"values: \" +\n            theFruit.Name + \" \" + theFruit.Price);\n            \n        }\n        \n    }\n    private static Dictionary&lt;string, Fruit&gt; BuildDictionary()\n    {\n        var fruits = new Dictionary&lt;string, Fruit&gt;();\n        AddToDictionary(fruits, \"Mango\", 120);\n        AddToDictionary(fruits, \"Apple\", 60);\n        AddToDictionary(fruits, \"Banana\", 40);\n        AddToDictionary(fruits, \"Pineapple\", 250);\n        return fruits;\n        \n    }\n    private static void AddToDictionary(Dictionary&lt;string, Fruit&gt; fruits, string name, int price)\n    {\n        Fruit theFruit = new Fruit();\n        theFruit.Name = name;\n        theFruit.Price = price;\n        fruits.Add(key: theFruit.Name, value: theFruit);\n        \n    }\n    public class Fruit\n    {\n        public string Name \n        { \n            get; \n            set; \n            \n        }\n        public int Price \n        { \n            get; \n            set; \n            \n        }\n        \n    }\n    public static void Main()\n    {\n        DictionaryIteration();\n\t}\n    \n}\n</code></pre>\n\n<p><br>\nÂ </p>\n\n<p><strong>Statements:</strong><br>\nÂ </p>\n\n<ol>\n\t<li>\n\t<p>The code gives the following output-</p>\n\n\t<pre class=\"prettyprint\"><code>key: Mango\nvalues: Mango 120\nkey: Apple\nvalues: Apple 60\nkey: Banana\nvalues: Banana 40\nkey: Pineapple\nvalues: Pineapple 250\n</code></pre>\n\n\t<p>Â </p>\n\t</li>\n\t<li>\n\t<p>The code gives the following output-</p>\n\n\t<pre class=\"prettyprint\"><code>key: Apple\nvalues: Apple 60\nkey: Banana\nvalues: Banana 40\nkey: Mango\nvalues: Mango 120\nkey: Pineapple\nvalues: Pineapple 250\n</code></pre>\n\n\t<p>Â </p>\n\t</li>\n\t<li>\n\t<p>â€‹ The code gives a compile-time error â€‹<br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<p>â€‹ The code does not giveÂ a runtime error â€‹</p>\n\t</li>\n</ol>","a":[{"id":1419427,"option":"2 and 4","correct":false},{"id":1419428,"option":"1 and 4","correct":true},{"id":1419429,"option":"only 3","correct":false},{"id":1419430,"option":"only 4","correct":false}]},{"q":"<p>Which of the following C# code snippets can you use to add <strong>stud1</strong> to the ArrayList given below?<br>\nÂ </p>\n\n<pre class=\"prettyprint\"><code>ArrayList students = new ArrayList(); \nStudent stud1 = new Student(\"A\"); \nStudent stud2 = new Student(\"B\"); \nStudent stud3 = new Student(\"C\");</code></pre>\n\n<p><br>\n<br>\n<strong>Code Snippets</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>students[0].Add(Student.stud1);</code></pre>\n\n\t<p>Â </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>students[0].Add(stud1);</code></pre>\n\n\t<p>Â </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>students.Add(Student.stud1);</code></pre>\n\n\t<p>Â </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>students.Add(stud1);</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419407,"option":"1","correct":false},{"id":1419408,"option":"2","correct":false},{"id":1419409,"option":"3","correct":false},{"id":1419410,"option":"4","correct":true}]},{"q":"<p>In the C# code snippet given below, what can be used in place of X to appropriately define an indexer that will allow the client-side code to use [] notation?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\nclass Test&lt;T&gt;\n{\n    private T[] arr = new T[100];\n    \n    public T X[int i]\n    {\n        get \n        { \n            return arr[i]; \n            \n        }\n        set \n        { \n            arr[i] = value; \n            \n        }\n        \n    }\n}</code></pre>\n\n<p>Â </p>","a":[{"id":1419377,"option":"this","correct":true},{"id":1419378,"option":"new","correct":false},{"id":1419379,"option":"set","correct":false},{"id":1419380,"option":"super","correct":false}]},{"q":"<p>ConsiderÂ the C# snippet below. Which of the following syntaxes can you use toÂ create an instance of class B?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>class hackA \n{ \n    class hackB \n    { \n        // Add Demo code \n        \n    } \n}</code></pre>\n\n<p>Â </p>\n\n<p>Â </p>\n\n<p><strong>Syntax:</strong><br>\nÂ </p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>A.B myInstance = new A.B()</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>B myInstance = new B()</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>B.myInstance.new()</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>B.myInstance = new B()</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419362,"option":"1","correct":true},{"id":1419363,"option":"2","correct":false},{"id":1419364,"option":"3","correct":false},{"id":1419365,"option":"4","correct":false}]},{"q":"<p>What is the output for the following C# code snippet?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System; \n \nclass Demo\n{ \n    public delegate void demo_delegate(int a, int b); \n    public static void example(int a, int b) \n    { \n        Console.WriteLine(a - b); \n        \n    } \n    static public void Main() \n    { \n        demo_delegate obj = example; \n        obj(10, 20); \n        \n    } \n}</code></pre>\n\n<p>Â </p>","a":[{"id":1419292,"option":"10","correct":false},{"id":1419293,"option":"20","correct":false},{"id":1419294,"option":"-10","correct":true},{"id":1419295,"option":"0","correct":false}]},{"q":"<p>If you have executed the following C# code snippet, then which of the following statements is correct?<br>\n<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System; \nusing System.Text.RegularExpressions; \n \nclass RegExpr\n{ \n    static void Main() \n    { \n        Regex regex = new Regex(@\"[^x-z]\"); \n        Match match = regex.Match(\"xmas\"); \n        if (match.Success) \n        { \n            Console.WriteLine(\"The matching value will be: \" + match.Value); \n            \n        } \n        \n    } \n}</code></pre>\n\n<p><br>\n<br>\n<strong>Statements:</strong></p>\n\n<ol>\n\t<li>Â The code produces the following output-<br>\n\tÂ  Â The matching value will be: xm<br>\n\tÂ </li>\n\t<li>The code produces the following output-<br>\n\tÂ  Â The matching value will be: ma<br>\n\tÂ </li>\n\t<li>The code produces the following output-<br>\n\tÂ  Â The matching value will be: m<br>\n\tÂ </li>\n\t<li>Â The code gives aÂ Compile-Time Error</li>\n</ol>","a":[{"id":1419232,"option":"1","correct":false},{"id":1419233,"option":"2","correct":false},{"id":1419234,"option":"3","correct":true},{"id":1419235,"option":"4","correct":false}]},{"q":"<p>If you have executed the following C# code snippet, then which of the following statements is correct?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System; \nusing System.Text.RegularExpressions; \n \nclass RegExpr\n{ \n    static void Main() \n    {\n        Regex regex = new Regex(@\"c...r\"); \n        Match match = regex.Match(\"There was a chair lying in his house which was 10 acres wide.\"); \n        if (match.Success) \n        { \n            Console.WriteLine(\"The value which matches is: \" + match.Value); \n            \n        } \n        \n    } \n}</code></pre>\n\n<p><br>\n<br>\n<strong>Statements:</strong></p>\n\n<ol>\n\t<li>The code produces the following output -<br>\n\tThe value which matches is: chair<br>\n\tÂ </li>\n\t<li>Â Code givesÂ Compile-Time Error<br>\n\tÂ </li>\n\t<li>The code produces the following output-<br>\n\tThe value which matches is: acres<br>\n\tÂ </li>\n\t<li>Â The code does not print anything</li>\n</ol>\n\n<p>Â </p>\n\n<p>Â </p>","a":[{"id":1419227,"option":"1","correct":true},{"id":1419228,"option":"2","correct":false},{"id":1419229,"option":"3","correct":false},{"id":1419230,"option":"4","correct":false}]},{"q":"<p>Which of the following statements must be correct in order to successfully compile the C#Â code given below?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>var thing = new IndexerDemo \n{\n    name = \"object none\",\n    ['C',4] = \"Middle Note\"\n}</code></pre>\n\n<p>Â </p>\n\n<p><strong>Statements</strong></p>\n\n<ol>\n\t<li>IndexerDemo must have the following member:\n\t<pre class=\"prettyprint\"><code>public string A;</code></pre>\n\t<br>\n\tÂ </li>\n\t<li>IndexerDemo must have the following members:\n\t<pre class=\"prettyprint\"><code>public string name;\npublic string this[char c, int i] { set { ... }; }</code></pre>\n\t<br>\n\tÂ </li>\n\t<li>IndexerDemo must have the following members:\n\t<pre class=\"prettyprint\"><code>public string name;\npublic double Size { set { ... }; }</code></pre>\n\t<br>\n\tÂ </li>\n</ol>","a":[{"id":1419572,"option":"1","correct":false},{"id":1419573,"option":"2","correct":true},{"id":1419574,"option":"3","correct":false},{"id":1419575,"option":"None of these","correct":false}]},{"q":"<p>Which of theÂ C# concepts is being implemented in the code snippet given below?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nnamespace Project\n{\n    public class ParentClass\n    { \n        public virtual void GetFunc()\n        {\n            Console.WriteLine(\"Hello World\"); \n            \n        } \n        \n    }\n    public class ChildClass: ParentClass\n    { \n        public override void GetFunc()\n        { \n            Console.WriteLine(\"Welcome to India\"); \n            \n        } \n        \n    }\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            ChildClass child = new ChildClass();\n            child.GetFunc();\n            ParentClass parent = new ParentClass();\n            parent.GetFunc();\n            \n        } \n        \n    } \n    \n}</code></pre>\n\n<p>Â </p>","a":[{"id":1419222,"option":"Run-Time Polymorphism","correct":true},{"id":1419223,"option":"Data Binding","correct":false},{"id":1419224,"option":"Compile-Time Polymorphism","correct":false},{"id":1419225,"option":"Abstraction","correct":false}]},{"q":"<p>What is the output of the following C# code?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        dynamic emp= new Employee();\n        emp.DisplayEmployeeinfo(101, \"James\");\n        emp.DisplayEmployeeinfo(\"101\");\n        emp.hackster();\n        \n    }\n}\npublic class Employee\n{\n    public void DisplayEmployeeinfo(int id)\n    {\n        Console.WriteLine(\"Employee Dummy data\");\n        \n    }\n    public void hackster()\n    {\n        Console.WriteLine(\"Happy Coding\");\n        \n    }\n}</code></pre>\n\n<p>Â </p>","a":[{"id":1419217,"option":"Code throws Run-time Error","correct":true},{"id":1419218,"option":"Code throws Compile-Time Error","correct":false},{"id":1419219,"option":"Code throws Linker Error","correct":false},{"id":1419220,"option":"None of these","correct":false}]},{"q":"<p>Which of the following code snippets can you use in place of XXX to set the name of the breed when working with C# 7.0?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>public class Breed\n{\n    private string breedName;\n\n    public Breed(string name) =&gt; Name = name;\n\n    public string Name\n    {\n        XXX \n        \n    }\n}</code></pre>\n\n<p>Â </p>\n\n<p><strong>Code Snippets:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>get -&gt; breedName;\nset -&gt; breedName = value;</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>get.breedName();\nset.breedName(value);</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>get =&gt; breedName;\nset =&gt; breedName = value;</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>value = breedName.get();\nbreedName.set(value);</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419662,"option":"1","correct":false},{"id":1419663,"option":"2","correct":false},{"id":1419664,"option":"3","correct":true},{"id":1419665,"option":"4","correct":false}]},{"q":"<p>In C#, which of the following code snippets is a valid way to declare an embedded statement inside a foreach loop?<br>\n<br>\n<strong>Code Snippets:</strong><br>\nÂ </p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>foreach (string s in System.IO.Directory.GetDirectories(\n    System.Environment.CurrentDirectory))\n    {\n        System.Console.WriteLine(s);\n        \n    }</code></pre>\n\n\t<p><br>\n\t<br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>foreach (string s in System.IO.Directory.GetDirectories(\n    System.Environment.CurrentDirectory))\n    System.Console.WriteLine(s);</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419652,"option":"Only 1","correct":true},{"id":1419653,"option":"Only 2","correct":false},{"id":1419654,"option":"Both 1 and 2","correct":false},{"id":1419655,"option":"None of these","correct":false}]},{"q":"<p>Which of the following C# code snippets throws an error when executed?<br>\n<br>\n<strong>Code Snippets:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>using System;\nnamespace DemoClass\n{ \n    abstract class Dog\n    { \n        public void Call() \n        { \n            Console.WriteLine(\"Call Method\"); \n            \n        } \n        \n        abstract void Breed(); \n        \n    } \n    class Program \n    { \n        static void Main(string[] args) \n        { \n            \n        } \n        \n    } \n}</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>using System;\nnamespace DemoClass \n{ \n    abstract class Dog \n    { \n        public void Call() \n        { \n            Console.WriteLine(\"Call Method\"); \n            \n        } \n        \n        public abstract void Breed(); \n        \n    } \n    class Program \n    { \n        static void Main(string[] args) \n        { \n            \n        } \n        \n    } \n}</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419637,"option":"1","correct":true},{"id":1419638,"option":"2","correct":false},{"id":1419639,"option":"Both 1 and 2","correct":false},{"id":1419640,"option":"None of these","correct":false}]},{"q":"<p>In C#, you have an interface named 'Breed' which has a method 'Name'. Which of the following code snippets can you use to implement this interface using an abstract class 'Dog' such that the interface method maps on to the abstract class method?<br>\n<br>\n<br>\n<strong>Code Snippets:</strong></p>\n\n<p>1.Â </p>\n\n<pre class=\"prettyprint\"><code>abstract class Dog : Breed\n{\n    public abstract void Name();\n}</code></pre>\n\n<p>Â </p>\n\n<p>2.Â </p>\n\n<pre class=\"prettyprint\"><code>abstract class Dog.Breed\n{\n    public abstract void Name();\n}</code></pre>\n\n<p>Â </p>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>abstract class Dog : Breed\n{\n\n}</code></pre>\n\n<p>Â </p>","a":[{"id":1419607,"option":"1 and 2","correct":false},{"id":1419608,"option":"2 and 3","correct":false},{"id":1419609,"option":"only 1","correct":true},{"id":1419610,"option":"1 and 3","correct":false}]},{"q":"<p>If you have executed the C# code snippet given below, then which of the following statements is correct?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\npublic class Test\n{\n\tpublic static void Main()\n\t{\n\t    string s = \"Csharp Programming\";\n\t    \n\t    for (int i = 0; i &lt; s.Length; i++)\n\t    {\n\t        System.Console.Write(s[s.Length - i - 1]);\n\t        \n\t    }\n\t}\n}\n</code></pre>\n\n<p>Â </p>\n\n<p><strong>Statements:</strong></p>\n\n<ol>\n\t<li>The code gives a run time error.<br>\n\tÂ </li>\n\t<li>The codeÂ gives a compile-time error.<br>\n\tÂ </li>\n\t<li>The code produces the following output-Â \n\t<pre class=\"prettyprint\"><code>gnimmargorP prahsC</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419487,"option":"1","correct":false},{"id":1419488,"option":"2","correct":false},{"id":1419489,"option":"3","correct":true},{"id":1419490,"option":"None of these","correct":false}]},{"q":"<p>Which of the following statementsÂ is a valid use case of the '<strong>@</strong>' symbol used in the C# code snippet given below?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System; \npublic class Examples_Basic\n{ \n    static public void Main() \n    { \n        string[] @for = {\"Apple\", \"Mango\", \"Grape\", \"Banana\"}; \n        foreach (string @as in @for) \n        { \n            Console.WriteLine(\"Element of Array: {0}\", @as);\n            \n        } \n        \n    }\n}</code></pre>\n\n<p>Â </p>\n\n<p><strong>Statement-</strong></p>\n\n<ol>\n\t<li>Uses line breaks in string literal without making use of any escape sequence<br>\n\tÂ </li>\n\t<li>Prints escape sequences in string literals.</li>\n</ol>","a":[{"id":1419477,"option":"1 and 2","correct":true},{"id":1419478,"option":" Only 1","correct":false},{"id":1419479,"option":" Only 2","correct":false},{"id":1419480,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following C# code snippet?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\nclass Hackster\n{ \n    \n}\nclass hack1 : Hackster\n{ \n    \n}\nclass hack2\n{\n    public void hack_print(hack1 h1)\n    {\n        Console.WriteLine(\"Hi from Hackerearth\");\n        \n    }\n    \n}\nclass hack3 : hack2\n{\n    public void hack_print(Hackster h2)\n    {\n        Console.WriteLine(\"Hello from Hackerearth\");\n        \n    }\n    static void Main(string[] args)\n    {\n        hack3 h_obj = new hack3();\n        h_obj.hack_print(new hack1());\n            \n        hack2 hack_obj = new hack3();\n        hack_obj.hack_print(new hack1());\n    } \n    \n}</code></pre>\n\n<p>Â </p>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hello from Hackerearth\nHello from Hackerearth</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hi from Hackerearth\nHello from Hackerearth</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hello from Hackerearth\nHi from Hackerearth</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hi from Hackerearth\nHi from Hackerearth</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419212,"option":"1","correct":false},{"id":1419213,"option":"2","correct":false},{"id":1419214,"option":"3","correct":true},{"id":1419215,"option":"4","correct":false}]},{"q":"<p>You are given the following C# code. Determine the type of interface used in the given code.<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nusing System.Collections.Generic; \nclass Program_Demo\n{\n    static void Main()\n    {\n        Dictionary&lt;string, string&gt; dictObj = new Dictionary&lt;string, string&gt;();\n        dictObj [\"Raina\"] = \"Robin\";\n        WriteKeyA(dictObj);\n        SortedDictionary&lt;string, string&gt; sort = new SortedDictionary&lt;string, string&gt;();\n        sort[\"Raina\"] = \"Shawn\";\n        WriteKeyA(sort);\n        Console.ReadLine();\n        \n    }\n    static void WriteKeyA(IDictionary&lt;string, string&gt; i)\n    { \n        Console.WriteLine(i[\"Raina\"]); \n        \n    }\n}</code></pre>\n\n<p>Â </p>","a":[{"id":1419132,"option":"Sorted Dictionary","correct":false},{"id":1419133,"option":"IDictionary Interface","correct":true},{"id":1419134,"option":"INumerable Interface","correct":false},{"id":1419135,"option":"IComparable Interface","correct":false}]},{"q":"<p>Which of the following syntaxes can be used in place of XXX and YYY so that the C# code snippet given below executes successfully?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System; \nabstract class absClass \n{ \n    protected int theNumber; \n    public abstract int numbers \n    { \n        XXX\n        YYY\n        \n    } \n} \n\nclass absDerived : absClass \n{ \n    public override int numbers \n    { \n        get\n        { \n            return theNumber; \n            \n        } \n        set\n        { \n            theNumber= value; \n            \n        } \n        \n    } \n    \n} \n \nclass MainClass\n{ \n    public static void Main() \n    { \n        absDerived d = new absDerived(); \n        d.numbers = 5; \n        Console.WriteLine(d.numbers); \n        \n    } \n}</code></pre>\n\n<p>Â </p>\n\n<p>Â </p>\n\n<p><strong>Syntaxes:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>XXX- set.theNumber();Â \nYYY- get.theNumber();\n</code></pre>\n\t<br>\n\tÂ </li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>XXX- get theNumber;Â \nYYY- set theNumber;\n</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>XXX- set;Â \nYYY- get;\n</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>XXX- get() = new theNumber();Â \nYYY- set() = new theNumber();\n</code></pre>\n\tÂ \n\n\t<p>Â </p>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419117,"option":"1 ","correct":false},{"id":1419118,"option":"2 ","correct":false},{"id":1419119,"option":"3","correct":true},{"id":1419120,"option":"4","correct":false}]},{"q":"<p>What is the output of the C# code snippet given below?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nnamespace MyApplication\n{ \n    interface FirstInterface\n    { \n        void FirstMethod(); \n        \n    }\n    interface SecondInterface\n    { \n        void SecondMethod(); \n        \n    }\n    class Demo : FirstInterface, SecondInterface\n    { \n        public void FirstMethod()\n        { \n            Console.WriteLine(\"First piece of code\"); \n            \n        }\n        public void SecondMethod()\n        { \n            Console.WriteLine(\"Second piece of code\"); \n            \n        }\n        \n    }\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Demo myObj = new Demo();\n            myObj.FirstMethod();\n            myObj.SecondMethod(); \n            \n        } \n        \n    } \n    \n}</code></pre>\n\n<p>Â </p>\n\n<p><strong>Output:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Second piece of code\nFirst piece of code\n</code></pre>\n\n\t<p>Â </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>First piece of code\n</code></pre>\n\n\t<p>Â </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>First piece of code\nSecond piece of code\n</code></pre>\n\n\t<p>Â </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Second piece of code</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419102,"option":"1","correct":false},{"id":1419103,"option":"2","correct":false},{"id":1419104,"option":"3","correct":true},{"id":1419105,"option":"4","correct":false}]},{"q":"<p>What is the output of the C# code given below?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nusing System.Collections;\nclass Program\n{\n    static void Main(string[] args)\n    {\n        SortedList sortedList = new SortedList();\n        sortedList.Add(8, \"Eight Roses\");\n        sortedList.Add(7, \"Seven Lilies\");\n        sortedList.Add(4, \"Four Jasmines\");\n        sortedList.Add(9, \"Nine Marigolds\");\n        sortedList.Add(2, \"Two Mogras\");\n        bool key = sortedList.ContainsKey(9);\n        bool val = sortedList.ContainsValue(\"Two Mogras\");\n        bool unKey = sortedList.ContainsKey(10);\n        bool unVal = sortedList.ContainsValue(\"Any uncertain value\");\n        Console.WriteLine(\"The sorted list contains 9 key :\" + key);\n        Console.WriteLine(\"The sorted list contains Two Mogras value :\" + val);\n        Console.WriteLine(\"The sorted list contains 10 key :\" +unKey);\n        Console.WriteLine(\"The sorted list contains Any uncertain value:\" + unVal);  \n        \n    } \n    \n}</code></pre>\n\n<p>Â </p>\n\n<p><strong>Output:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>The sorted list contains 9 key :True\nThe sorted list contains Two Mogras value :True\nThe sorted list contains 10 key :True\nThe sorted list contains Any uncertain value:False</code></pre>\n\t<br>\n\tÂ </li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>The sorted list contains 9 key :True\nThe sorted list contains Two Mogras value :False\nThe sorted list contains 10 key :False\nThe sorted list contains Any uncertain value:True</code></pre>\n\t<br>\n\tÂ </li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>The sorted list contains 9 key :True\nThe sorted list contains Two Mogras value :True\nThe sorted list contains 10 key :False\nThe sorted list contains Any uncertain value:False\n</code></pre>\n\n\t<p>Â </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>The sorted list contains 9 key :True\nThe sorted list contains Two Mogras value :False\nThe sorted list contains 10 key :False\nThe sorted list contains Any uncertain value:False</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419087,"option":"1","correct":false},{"id":1419088,"option":"2","correct":false},{"id":1419089,"option":"3","correct":true},{"id":1419090,"option":"4","correct":false}]},{"q":"<p>What will be the output of the C#Â code given below?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nusing System.Collections;\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Hashtable hash_table = new Hashtable();\n        hash_table .Add(\"Number\",4);\n        hash_table .Add(\"Car\", \"Porsche\");\n        hash_table .Add(11, \"eleven\");\n        int value1 = (int)hash_table [\"Number\"];\n        String value2 = (string)hash_table [\"Car\"];\n        String value3 = (string)hash_table [11];\n        Console.WriteLine(value1);\n        Console.WriteLine(value2);\n        Console.WriteLine(value3);\n        hash_table .Remove(11);\n        String OmittedValue = (string)hash_table [11];\n        Console.WriteLine(\"The value of the given key is :\"+OmittedValue );\n        hash_table .Clear();\n        \n    } \n}</code></pre>\n\n<p>Â </p>\n\n<p><br>\n<strong>Output:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Number\nCar\n11\nThe value of the given key is :</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>11</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>4\nPorsche\neleven\nThe value of the given key is :</code></pre>\n\n\t<p><br>\n\tÂ  Â </p>\n\t</li>\n</ol>","a":[{"id":1419082,"option":"1","correct":false},{"id":1419083,"option":"2","correct":false},{"id":1419084,"option":"3","correct":true},{"id":1419085,"option":"The given code snippet will render the hashtable empty by removing all the elements from it.","correct":false}]},{"q":"<p>Which of the following statements are valid inferences that can be made about the indexer, <strong>he[index] = expression</strong>, in the C# code snippet given below:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System.Collections.Generic;\nusing System;\n\nclass Hacksters\n{\n    \n public static void ReportList&lt;H&gt;(string hack_exp, IList&lt;H&gt; hack_list)\n {\n     Console.WriteLine(hack_exp);\n     foreach(H h in hack_list)\n     Console.Write(\"{0, 3}\", h );\n     Console.WriteLine(); \n     Console.WriteLine(); \n     \n } \n \n public static void Main()\n {\n     IList &lt;char&gt;he = new List&lt;char&gt;{'h', 'a', 'c'};\n     he.Add('k'); \n     he.Add('e'); \n     he[0] = 'r'; \n     he[1]++; \n     he.Insert(0,'t'); \n     he.Insert(he.Count,'h'); \n     he.RemoveAt(0); \n     he.Remove('r'); \n     he.Clear(); \n     \n }\n}</code></pre>\n\n<p><br>\n<strong>Statements:</strong></p>\n\n<ol>\n\t<li>The indexer does not mutate an existing element in the collection, which makes the length of the collection unchanged.<br>\n\tÂ </li>\n\t<li>The indexer mutates an existing element in the collection, altering the length of the collection.<br>\n\tÂ </li>\n\t<li>The indexer does not mutate an existing element in the collection, altering the length of the collection.<br>\n\tÂ </li>\n\t<li>The indexer mutates an existing element in the collection, which makes the length of the collection unchanged.</li>\n</ol>","a":[{"id":1419077,"option":"1","correct":false},{"id":1419078,"option":"2","correct":false},{"id":1419079,"option":"3","correct":false},{"id":1419080,"option":"4","correct":true}]},{"q":"<p>What will be the output of the following C# code?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\npublic class Hack&lt;T&gt; \n{\n\t\n\tprivate T hack_data;\n\t\n\tpublic T hack_value\n\t{\n\t\t\n\t\tget\n\t\t{\n\t\t\treturn this.hack_data;\n\t\t}\n\t\tset\n\t\t{\n\t\t\tthis.hack_data = value;\n\t\t}\n\t}\n}\n\nclass hack \n{\n    static void hack_print(string str) \n\t{ \n\t    Console.WriteLine(str); \n\t    \n\t} \n    static void Main(string[] args)\n    {\n        Hack&lt;float&gt; y = new Hack&lt;float&gt;();\n\t\ty.hack_value = 8.0F;\n\t\t\n\t\tHack&lt;string&gt; x = new Hack&lt;string&gt;();\n\t\tx.hack_value = \"Hello Hackerearth\";\n\t\t\n\t\tConsole.WriteLine(y.hack_value);\n\t\thack_print(\"Hello World\");\n\t\tConsole.WriteLine(x.hack_value);\n\t}\n\t\n}\n</code></pre>\n\n<p>Â </p>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>8.0\nHello World\nHello Hackerearth</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>7.9\nHello Hackerearth\nHello World</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>8\nHello World\nHello Hackerearth</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hello World\n8.00\nHello Hackerearth</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419007,"option":"1","correct":false},{"id":1419008,"option":"2","correct":false},{"id":1419009,"option":"3","correct":true},{"id":1419010,"option":"4","correct":false}]},{"q":"<p>What will be the output of the following C# code?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System; \n \nclass Demo\n{ \n    public delegate void demo_delegate(int a, int b); \n    \n    public static void example(int a, int b) \n    { \n        Console.WriteLine(a - b); \n        \n    }\n    static public void Main() \n    { \n        demo_delegate obj = example; \n        obj(10, 20); \n        \n    }    \n}</code></pre>\n\n<p>Â </p>","a":[{"id":1418962,"option":"10","correct":false},{"id":1418963,"option":"20","correct":false},{"id":1418964,"option":"-10","correct":true},{"id":1418965,"option":"None of these","correct":false}]},{"q":"<p>In C#, you are working on Multithreading. If you have executed the code given below that contains two threads <strong>h1</strong> and <strong>h2,</strong>Â then which of the following statements is correct?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;  \nusing System.Threading;  \npublic class hackerearth \n{  \n    public static void Main()  \n    {  \n        hack_thread h = new hack_thread();  \n        Thread h1 = new Thread(new ThreadStart(h.hackerearth_thread));  \n        Thread h2 = new Thread(new ThreadStart(h.hackerearth_thread));  \n        h1.Start();  \n        h1.Join();  \n        h2.Start();  \n       \n    }  \n}  \npublic class hack_thread  \n{  \n    public void hackerearth_thread()  \n    {  \n        for (int hack = 0; hack &lt; 3; hack++)  \n        {  \n            Console.Write(hack + \" \");  \n            Thread.Sleep(10);  \n        }  \n    }  \n}  </code></pre>\n\n<p>Â </p>\n\n<p><strong>Statements:</strong></p>\n\n<ol>\n\t<li>Thread h2 starts executing after h1 has completed its task.<br>\n\tÂ </li>\n\t<li>The code gives the output-<br>\n\tÂ 0 1 2 0 1 2<br>\n\tÂ </li>\n\t<li>Thread h1 and thread h2 executes simultaneously<br>\n\tÂ </li>\n\t<li>The code gives the output-<br>\n\tÂ 0 0 1 1 2 2</li>\n</ol>","a":[{"id":1419312,"option":"3 and 4","correct":false},{"id":1419313,"option":"1 and 2","correct":true},{"id":1419314,"option":"only 3","correct":false},{"id":1419315,"option":"only 1","correct":false}]},{"q":"<p>What is the output of the following C# code snippet:<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nclass Rectangle : ImplementationInterface, DimensionsShape\n{\n    float x;\n    float y;\n    public Rectangle(float x, float y)\n    {\n        this.x=x;\n        this.y=y;\n        \n    }\n    float ImplementationInterface.X() =&gt; x;\n    float ImplementationInterface.Y() =&gt; y;\n    \n    float DimensionsShape.X() =&gt; x* 2.54f;\n    float DimensionsShape.Y() =&gt; y* 2.54f;\n    \n    static void Main()\n    {\n        Rectangle rect = new Rectangle(30.0f, 20.0f);\n        ImplementationInterface eDimensions = rect;\n        DimensionsShape mDimensions = rect;\n        Console.WriteLine(\"Length(in): {0}\", eDimensions.X());\n        Console.WriteLine(\"Width (in): {0}\", eDimensions.Y());\n        Console.WriteLine(\"Length(cm): {0}\", mDimensions.X());\n        Console.WriteLine(\"Width (cm): {0}\", mDimensions.Y());\n        \n    }\n}\ninterface ImplementationInterface\n{\n    float X();\n    float Y();\n}\ninterface DimensionsShape\n{\n    float X();\n    float Y();\n}\n</code></pre>\n\n<p>Â </p>\n\n<p><strong>Output</strong></p>\n\n<p>Â </p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Length(in): 30\nWidth (in): 20\nLength(cm): 76.2\nWidth (cm): 50.8</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Length(in): 30\nWidth (in): 20\nLength(cm): 76.2</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Length(in): 30\nWidth (in): 30\nLength(cm): 76.2\nWidth (cm): 76.8</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Length(in): 25\nWidth (in): 15\nLength(cm): 53.5\nWidth (cm): 35.3</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419472,"option":"1","correct":true},{"id":1419473,"option":"2","correct":false},{"id":1419474,"option":"3","correct":false},{"id":1419475,"option":"4","correct":false}]},{"q":"<p>What is the output of the following C# code:</p>\n\n<p><strong>CodeÂ </strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\t\nclass Hackerearth \n{   \n    string[] hack = new string[3];\t\n\tpublic string this[int h]\n\t{\n\t\tget\n\t\t{\n\t\t\tstring h1 = hack[h];\n\t\t\treturn h1;\n\t\t}\n\t\tset\n\t\t{\n\t\t\thack[h] = value;\n\t\t}\n\t}\n\t\n\tpublic string this[double h]\n\t{\n\t\tget\n\t\t{\t\n\t\t\treturn \" Hello \";\n\t\t}\n\t\t\n\t}\n\t\n\tpublic string this[string h]\n\t{\n\t\tget\n\t\t{\n\t\t\treturn \" Hi \";\n\t\t}\n\t}\n\t\n\tstatic void Main(string[] args)\n\t{\n\t    Hackerearth hack_object = new Hackerearth();\n\t    hack_object[2] = \" Hackerearth \";\n\t    Console.WriteLine(hack_object[2] + hack_object[\"Hackerearth\"] + hack_object[2.0]);\n\t    \n\t}\n}</code></pre>\n\n<p>Â </p>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>Â \n\t<pre class=\"prettyprint\"><code>Hackerearth Â Hi Â Hello</code></pre>\n\tÂ <br>\n\tÂ </li>\n\t<li>Â \n\t<pre class=\"prettyprint\"><code>Hackerearth Â HiÂ  Hackerearth</code></pre>\n\t<br>\n\tÂ </li>\n\t<li>Â \n\t<pre class=\"prettyprint\"><code>HelloÂ  Hi Â Hello</code></pre>\n\tÂ </li>\n</ol>","a":[{"id":1419442,"option":"2","correct":false},{"id":1419443,"option":"3","correct":false},{"id":1419444,"option":"1","correct":true},{"id":1419445,"option":"The code gives a compilation error","correct":false}]},{"q":"<p>Which of the following code snippets uses type inference to deconstruct the tuple returned by the C# code given below:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>public class Course\n{\n    public static void Main()\n    {\n        var result = QueryCourseData(\"CSE\");\n        var dept = result.Item1;\n        var strength = result.Item2;\n        var hours = result.Item3;\n        \n    }\n    private static (string, int, int) QueryCourseData(string name)\n    {\n        if (name == \"CSE\")\n        return (name, 800,48);\n        \n        return (\"\", 0, 0);\n        \n    }\n}</code></pre>\n\n<p><br>\n<br>\n<strong>Code Snippets</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>public static void Main()\n{\n    (string dept, int strength, int hours) = QueryCourseData(\"CSE\");\n}</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>public static void Main()\n{\n    var (dept, strength, hours) = QueryCourseData(\"CSE\");\n\n}</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>public static void Main()\n{\n    (string dept, var strength, var hours) = QueryCourseData(\"CSE\");\n\n}</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>public static void Main()\n{\n    string dept = \"CCE\";\n    int strength = 450;\n    int hours = 48;\n    (dept, strength, hours) = QueryCourseData(\"CCE\");\n\n}</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419562,"option":"1","correct":false},{"id":1419563,"option":"2","correct":true},{"id":1419564,"option":"3","correct":false},{"id":1419565,"option":"4","correct":false}]},{"q":"<p>In C#, you are working on Data Parallelism.Â Consider the C# code snippet given below which uses thread-local variables to store and retrieve state in each separate task that is created by a For loop. Now, which of the following statements is correct about the given code?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nusing System.Threading.Tasks;\n\nclass Hack\n{\n    static void Main()\n    {\n        object _ = new object();\n        int num = 10000000;\n        double sumTotal = 0.0;\n        double progress = 1.0 / num ; \n        \n        Parallel.For(0, num , () =&gt; 0.0, (i, state, local) =&gt;\n        {\n            double x = (i + 0.5) * progress ;\n            return local + 4.0 / (1.0 + x * x);\n            \n        }, \n        local =&gt; \n        {\n            lock (_)\n            {\n                sumTotal += local;\n                \n            }\n            \n        });\n        Console.WriteLine(sumTotal * progress );\n    }\n}</code></pre>\n\n<p><br>\n<br>\n<strong>Statements</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>The lock section is used only once per thread, instead of once per iteration, increasing the synchronization overhead to a great extent.</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>The lock section is used only once per iteration, instead of once per thread, reducing the synchronization overhead to a great extent.</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Parallel is used only once per iteration, instead of once per thread, reducing the synchronization overhead to a great extent.</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>The lock section is used only once per thread, instead of once per iteration, reducing the synchronization overhead to a great extent.</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419342,"option":"1","correct":false},{"id":1419343,"option":"2","correct":false},{"id":1419344,"option":"3","correct":false},{"id":1419345,"option":"4","correct":true}]},{"q":"<p>You have a C# code to sort an array in descending order. Which of the following syntaxes can be used in place of XXX to complete the code snippet given below?<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System; \nclass ArraySortProgram\n{ \n    public static void Main() \n    { \n        int[] array = new int[] {45, 23, 76, 12, 78}; \n        XXX\n        foreach(int arrayValue in array ) \n        { \n            Console.Write(arrayValue + \" \"); \n            \n        } \n        \n    } \n}</code></pre>\n\n<p>Â </p>\n\n<p><strong>Syntaxes</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Array.Sort&lt;int&gt;(array, new Comparison&lt;int&gt;((i1, i2) =&gt; i2.CompareTo(i1)));</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Array.Sort&lt;int&gt;(arr, new Comparison&lt;int&gt;((i1, i2) =&gt; i1.CompareTo(i2)));</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Array.Sort&lt;int&gt;(array, new Comparison&lt;int&gt;((i1, i2) =&gt; i1.Compare(i2)));</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419322,"option":"1","correct":true},{"id":1419323,"option":"2","correct":false},{"id":1419324,"option":"3","correct":false},{"id":1419325,"option":"None of these","correct":false}]},{"q":"<p>What can be used in place of XXX to complete the C# code snippet given below?</p>\n\n<pre class=\"prettyprint\"><code>using System;\nusing System.Collections.Generic;\nclass Program\n{\n    private static void Main()\n    {\n        List&lt;double&gt; list = new List&lt;double&gt; { 1, 2, 3, 4, 5, 6};\n        double mean = 0;\n        double variance = 0;\n        double standard_deviation = 0;\n        double sum = 0;\n        double temp = 0;\n        int i= 0;\n        for (i = 0; i &lt; list.Count; i++)\n        { \n            sum += list[i]; \n            \n        }\n        mean = sum / (list.Count - 0);\n        for (i = 0; i &lt; list.Count; i++)\n        { \n            XXX \n            \n        }\n        variance=temp / (list.Count - 0);\n        standard_deviation = Math.Sqrt(variance);\n        Console.WriteLine(\"Mean: \" + mean );\n        Console.WriteLine(\"Variance : \" + variance );\n        Console.WriteLine(\"Standard deviation: \" + standard_deviation);\n        \n    }\n}</code></pre>\n\n<p>Â </p>","a":[{"id":1419272,"option":"temp += Math.Pow((list[i] + mean), 2);","correct":false},{"id":1419273,"option":"temp += Math.Pow((list[i] - mean), 2);","correct":true},{"id":1419274,"option":"sum += Math.Pow((list[i] - mean), 2);","correct":false},{"id":1419275,"option":"None of these","correct":false}]},{"q":"<p>What will be the output of the following C# code?</p>\n\n<p><br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nusing System.Collections;\nnamespace Hack_hashtable\n{\n    class Hackerearth\n    {\n        static void Main(string[] args)\n        {\n            Hashtable ht= new Hashtable();\n            ht.Add(\"5\",\"hi\");\n            ht.Add(\"6\",\"hello\");\n            ht.Add(\"7\",\"hackerearth\");\n            \n            ht[\"7\"]=\"hey\";\n            \n            ICollection keys = ht.Keys;\n            \n            foreach (String k in keys)\n            { \n                Console.WriteLine(ht[k]); \n                \n            }\n            Console.ReadKey(); \n            ht.Remove(\"7\");\n            Console.WriteLine(ht.ContainsKey(\"7\"));\n            ht.Clear();\n            Console.WriteLine(keys.Count);\n            \n        } \n        \n    } \n    \n}</code></pre>\n\n<p>Â </p>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hi\nhello\nhey\nFalse\n0</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>5\n6\n7\nFalse\n0</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hi\nhello\nhey\nFalse\n2</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>5\n6\n7\nFalse\n2</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419072,"option":"3","correct":false},{"id":1419073,"option":"4","correct":false},{"id":1419074,"option":"1","correct":true},{"id":1419075,"option":"2","correct":false}]},{"q":"<p>What is the output of the C# code snippet given below?<br>\n<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\npublic class Hack\n{\n    static void Main(string[] args)\n    {\n        int number= 8;\n        NoMethod(number);\n        Console.WriteLine(number);\n        FirstMethod(ref number);\n        Console.WriteLine(number);\n        \n    }\n    static void NoMethod(int value)\n    {\n        value+= 46;\n        Console.WriteLine(value);\n        \n    }\n    static void FirstMethod(ref int value)\n    {\n        value+= 46;\n        Console.WriteLine(value);\n        \n    }\n}\n</code></pre>\n\n<p><br>\n<br>\n<strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>54\n8\n54\n8</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>54\n8\n54\n54</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>8\n46\n46\n46</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>8\n8\n8\n8</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419187,"option":"1","correct":false},{"id":1419188,"option":"2","correct":true},{"id":1419189,"option":"3","correct":false},{"id":1419190,"option":"4","correct":false}]},{"q":"<p>What will be the output of the following C# code snippet?<br>\n<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nusing System.Collections.Generic;\n\nclass Hackerearth \n{\n    static public void Main()\n    {\n        SortedDictionary&lt;int, string&gt; hack_dict = new SortedDictionary&lt;int, string&gt;();\n\n        hack_dict.Add(102, \"Hey\");\n\t\thack_dict.Add(101, \"Hi\");\n\t\thack_dict.Add(103, \"Hello\");\n\t\thack_dict.Add(105, \"Hackerearth Dictionary\");\n\t\thack_dict.Add(104, \"Hackerearth\");\n\t\thack_dict.Add(106, \"Dictionary\");\n\t\thack_dict.Add(107, \"dictionary\");\n\t\t\n\t\thack_dict.Remove(107);\n\n\t\tif (hack_dict.ContainsKey(107) == true)\n\t\t{\n\t\t\tConsole.WriteLine(\"hello Hackerearth\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tConsole.WriteLine(\"no Hackerearth Dictionary Found\");\n\t\t}\n\n\t\tif (hack_dict.ContainsValue(\"dictionary\") == true)\n\t\t{\n\t\t\tConsole.WriteLine(\"hi Hackerearth\");\n\t\t}\n\n\t\telse\n\t\t{\n\t\t\tConsole.WriteLine(\"no Hackerearth Dictionary Found\");\n\t\t}\n\t}\n}\n\n</code></pre>\n\n<p><br>\n<br>\n<strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>no Hackerearth Dictionary Found\nhi Hackerearth\n</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hello Hackerearth\nhi Hackerearth\n</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hello Hackerearth\nno Hackerearth Dictionary Found</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>no Hackerearth Dictionary Found\nno Hackerearth Dictionary Found</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1418942,"option":"1","correct":false},{"id":1418943,"option":"2","correct":false},{"id":1418944,"option":"3","correct":false},{"id":1418945,"option":"4","correct":true}]},{"q":"<p>The C# code given alongside is used to print Floyd's triangle. Which of the following syntaxesÂ canÂ be used in place of XXX to complete the code snippet given below?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nclass Hackerearth\n{\n    static void Main(string[] args)\n    {\n        int h1 = 1;\n        int h2 = 1;\n        int i = 1;\n        int j = 0;\n        Console.Write(\"Enter the number of rows: \");\n        j = int.Parse(Console.ReadLine());\n        \n        for (; h1 &lt;= j; h1 = h1 + 1)\n        {\n            XXX\n            {\n                Console.Write(i + \" \");\n                i = i + 1;\n                \n            }\n            Console.WriteLine();\n            \n        }\n        \n    }\n    \n}</code></pre>\n\n<p>Â </p>\n\n<p><strong>Syntaxes</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>for (h2 = 1; h2 &gt; h1 + 1; h2++)\n</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>for (h2 = 1; h2 &lt; h1 - 1; h2++)\n</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>for (h2 = 1; h2 &gt; h1 - 1; h2++)\n</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>for (h2 = 1; h2 &lt; h1 + 1; h2++)\n</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419157,"option":"1","correct":false},{"id":1419158,"option":"2","correct":false},{"id":1419159,"option":"3","correct":false},{"id":1419160,"option":"4","correct":true}]},{"q":"<p>Which of the following statements is correct aboutÂ the C# code snippet given below?<br>\n<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>delegate void hack_DelA();\ndelegate void hack_DelB();\n\nstatic void hack_method(hack_DelA h1, hack_DelB h2, System.Delegate d)\n{\n    Console.WriteLine(h1 == h2);   // A\n    Console.WriteLine(h1 == d);    // B\n}</code></pre>\n\n<p><br>\n<br>\n<strong>Statements</strong><br>\nÂ </p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>A results in a compile-time error.</code></pre>\n\t<br>\n\tÂ </li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>B will return true at run-time.</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419052,"option":"Only 1","correct":true},{"id":1419053,"option":"Only 2","correct":false},{"id":1419054,"option":"Both 1 and 2","correct":false},{"id":1419055,"option":"None of these","correct":false}]},{"q":"<p>In C# you are working on Events, which of the following lambda expressions given below can you use to specify an Event Handler while programmatically subscribing to Events?<br>\nÂ </p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>public Form1() \n{ \n    InitializeComponent(); \n    this.Click += (s,e) =&gt;\n    {\n        MessageBox.Show(((MouseEventArgs)e).Location.ToString());\n        \n    };\n}</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>public Form1() \n{ \n    this.Click = (s,e) =&gt;\n    {\n        MessageBox.Show(((MouseEventArgs)e).Location.ToString());\n        \n    };\n    InitializeComponent();\n}</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>InitializeComponent(); \npublic Form1() \n{ \n    this.Click (s,e) =&gt;\n    {\n        MessageBox.Show(((MouseEventArgs)e).Location.ToString());\n        \n    };\n}</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419032,"option":"1","correct":true},{"id":1419033,"option":"2","correct":false},{"id":1419034,"option":"3","correct":false},{"id":1419035,"option":"All of these","correct":false}]},{"q":"<p>Which of the following is true about the code snippet given alongside:</p>\n\n<p><strong>Code</strong>:</p>\n\n<pre class=\"prettyprint\"><code>private static void AddStudent() {\n  private static void ChangeStudent() {\n   using (var context = new UniContext()) {\n   var student = (from d in context.Students\n   where d.FirstMidName == \"Ali\" select d).Single();\n   student.LastName = \"Aslam\";\n   context.SaveChanges();\n   }\n }\n}</code></pre>","a":[{"id":1418807,"option":"It is used to add new entities","correct":false},{"id":1418808,"option":"It is used to copy new entities","correct":false},{"id":1418809,"option":"It is used to change existing entities","correct":true},{"id":1418810,"option":"It is used to remove entities","correct":false}]},{"q":"<p>Which line in the <strong>C#</strong> code snippet given below will produce an error?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;  // line 1\n\nclass Sample  // line 2\n{ \n    public static int BinaryEquivalent(int num)  // line 3\n    { \n        if (num== 0)  // line 4\n        { \n            return 0;  // line 5  \n        }\n        else  // line 6\n        { \n            int bit = 0;  // line 7\n            bit = (num / 2) + 10 * BinaryEquivalent(num % 2);  // line 8\n            Console.Write(bit);  // line 9\n            return 0;  // line 10\n        } \n    }\n    public static void Main()  // line 11\n    { \n        int n = 0;  // line 12\n        Console.Write(\"Enter the number: \");  // line 13\n        n = int.Parse(Console.ReadLine());  // line 14\n        BinaryEquivalent(n);  // line 15\n        Console.WriteLine();  // line 16\n    } \n}</code></pre>","a":[{"id":1419252,"option":"Line 7","correct":false},{"id":1419253,"option":"Line 4","correct":false},{"id":1419254,"option":"Line 5","correct":false},{"id":1419255,"option":"Line 8","correct":true}]},{"q":"<p>Mike is required to create two identical data sets. He wants to create two copies by using the <strong>Copy</strong> and <strong>Clone</strong> methods such as <strong>A</strong> and <strong>B</strong> of a <strong>DataSet</strong> object <strong>D</strong>. Which of the following statements is correct about <strong>A</strong> and <strong>B</strong>?</p>","a":[{"id":498272,"option":"A is the copy of data of D where as B is the copy of the structure of D and lacks data.","correct":false},{"id":498273,"option":"B is the copy of only the structure of D where as A is the copy of both structure and data of D.","correct":true},{"id":498274,"option":" A is a Data Set object where as B is a ClonedSet object.","correct":false},{"id":498275,"option":"Comparing DataRows of A and B will return True.","correct":false}]},{"q":"<p>Paul is coding In ASP.NET. He wants to know that when he changes a button control from its default event to a command event, which of the following controls will become unusable?</p>","a":[{"id":498352,"option":"Button ","correct":false},{"id":498353,"option":"Image button","correct":false},{"id":498354,"option":"Link button","correct":false},{"id":498355,"option":"Image map","correct":true}]},{"q":"<p>Which of the following <strong>C#</strong> keyword should you use in the class definitions to allow the given code to compile successfully?</p>\n\n<p>Â </p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>public class Manager\n{\n    public void EvaluateEmployee (Employee emp);\n}\n\npublic class Manager\n{\n    public void Login();\n}</code></pre>\n\n<p>Â </p>","a":[{"id":1419297,"option":"partial","correct":true},{"id":1419298,"option":"abstract","correct":false},{"id":1419299,"option":"virtual","correct":false},{"id":1419300,"option":"interface","correct":false}]},{"q":"<p>Which of the following statements is correct if theÂ C# code given below is executed?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nclass Hackerearth\n{\n    static int hack = hacker;\n    static int hacker = h;\n    static int h=100;\n        \n    static void Main(string[] args)\n    {\n        Console.WriteLine(hacker);\n    }\n        \n}</code></pre>\n\n<p>Â </p>\n\n<p><strong>Statements:</strong><br>\nÂ </p>\n\n<ol>\n\t<li>\n\t<p>â€‹ The code does not give a compilation error â€‹<br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<p>â€‹ The code gives a runtime error â€‹<br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<p>The code prints-</p>\n\n\t<pre class=\"prettyprint\"><code>100</code></pre>\n\n\t<p>Â </p>\n\t</li>\n\t<li>\n\t<p>The code prints-</p>\n\n\t<pre class=\"prettyprint\"><code>0</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1418967,"option":"1 and 2","correct":false},{"id":1418968,"option":"2 and 4","correct":false},{"id":1418969,"option":"4 and 3","correct":false},{"id":1418970,"option":"1 and 4","correct":true}]},{"q":"<p>In C#, you are working on Polymorphism. Which of the followingÂ should be used in place of X and Y in the code snippet given below to produce the output as follows?<br>\n<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\nclass Hack_Base \n{ \n    public X void hack1() \n    { \n        Console.WriteLine(\"Base - Method1\"); \n    } \n    public X void hack2() \n    { \n        Console.WriteLine(\"Base - Method2\"); \n    }\n    \n} \n \nclass Hack_Derived : Hack_Base\n{ \n    public Y void hack1() \n    { \n        Console.WriteLine(\"Derived - Method1\"); \n    } \n    \n    public  new void hack2() \n    { \n        Console.WriteLine(\"Derived - Method2\"); \n    } \n    \n} \nclass Hack \n{ \n    static void Main(string[] args) \n    { \n        Hack_Base h1 = new Hack_Base(); \n        Hack_Derived h2 = new Hack_Derived(); \n        Hack_Base h3 = new Hack_Derived();\n        \n        h1.hack1(); \n        h1.hack2();\n        h2.hack1(); \n        h2.hack2(); \n        h3.hack1(); \n        h3.hack2();\n        \n    } \n}\n</code></pre>\n\n<p><br>\n<br>\n<strong>Output</strong></p>\n\n<pre class=\"prettyprint\"><code>Base - Method1\nBase - Method2\nDerived - Method1\nDerived - Method2\nDerived - Method1\nBase - Method2</code></pre>\n\n<p>Â </p>\n\n<p>Â </p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>X: virtual\nY: override</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>X: override\nY: virtual</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>X: virtual\nY: virtual</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>X: new\nY:override</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419522,"option":"1","correct":true},{"id":1419523,"option":"2","correct":false},{"id":1419524,"option":"3","correct":false},{"id":1419525,"option":"4","correct":false}]},{"q":"<p>In C#, you are working on Dictionary. Which of the following statements is correct about the code snippet given below:<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System.Collections.Generic;\nusing System.Reflection;\nclass Demo_Class\n{\n    static Dictionary&lt;string, ConstructorInfo&gt; specialized;\n    public static HTMLElement CreateElement(string tag)\n    {\n        if (specialized == null)\n        {\n            var subtypes= Assembly.GetCallingAssembly().GetTypes();\n            foreach(var type in subtypes)\n            {\n                if (type.IsDerivedFrom(typeof(HTMLElement)))\n                { \n                    var cnr= type.GetConstructor(Type.Empty);\n                    if (cnr!= null)\n                    {\n                        var element = cnr.Invoke(null) as HTMLElement; \n                        if (element != null)\n                        specialized.Add(element.Tag, cnr); \n                        \n                    } \n                    \n                } \n                \n            } \n            \n        }\n        \n        if (specialized.ContainsKey(tag))\n        return specialized[tag].Invoke(null) as HTMLElement;\n        return new HTMLElement(tag); \n        \n    } \n    \n}</code></pre>\n\n<p>Â </p>\n\n<p><strong>Statements</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>A dictionary building with the addition of classes mapped to the constructor method.</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>A dictionary building mapped to the constructor method with the addition of classes without applying the factory method.</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>A dictionary building used to map some tags to a proper method in the form of the corresponding constructor after which is invoked only once</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>\n\n<p>Â </p>","a":[{"id":1419302,"option":"1","correct":false},{"id":1419303,"option":"2","correct":false},{"id":1419304,"option":"3","correct":true},{"id":1419305,"option":"None of these","correct":false}]},{"q":"<p>In C#, if you are working on Events and you are using the code snippet given below to subscribe to events programmatically, then in which of the following scenarios will the given code snippet represent the method stub?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>void HandleCustomEvent(object sender, CustomEventArgs a) \n{ \n    // your code goes here \n}</code></pre>\n\n<p><br>\nÂ </p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>If the event is based on the EventHandler delegate type</code></pre>\n\n\t<p>Â </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>If the event is subscribed using an anonymous method</code></pre>\n\t</li>\n</ol>","a":[{"id":1419027,"option":"1","correct":true},{"id":1419028,"option":"2","correct":false},{"id":1419029,"option":"1 and 2","correct":false},{"id":1419030,"option":"None of these","correct":false}]},{"q":"<p>How can you rewrite the following delegate using Func&lt;&gt; delegate in C#?<br>\n<strong>Code</strong>:</p>\n\n<pre class=\"prettyprint\"><code>public class Program\n{\npublic delegate string Reverse(string s);\n\nstatic string ReverseString(string s)\n{\nreturn new string(s.Reverse().ToArray());\n}\n\nstatic void Main(string[] args)\n{\nReverse rev = ReverseString;\n\nConsole.WriteLine(rev(\"a string\"));\n}\n}</code></pre>\n\n<p><strong>Options</strong>:</p>\n\n<p>1</p>\n\n<pre class=\"prettyprint\"><code>public class Program\n{\nstatic void Main(string[] args)\n{\nFunc&lt;string, string&gt; rev = string.Reverse().ToArray()\n\nConsole.WriteLine(rev(\"a string\"));\n}\n}</code></pre>\n\n<p>2</p>\n\n<pre class=\"prettyprint\"><code>public class Program\n{\nstatic string ReverseString(string s)\n{\nreturn new string(s.Reverse().ToArray());\n}\n\nstatic void Main(string[] args)\n{\nFunc&lt;string, string&gt; rev = ReverseString;\n\nConsole.WriteLine(rev(\"a string\"));\n}\n}</code></pre>\n\n<p>3</p>\n\n<pre class=\"prettyprint\"><code>public class Program\n{\nstatic string ReverseString(string s)\n{\nreturn new string(s.Reverse());\n}\n\nstatic void Main(string[] args)\n{\nFunc&lt;string, string&gt; rev = ReverseString;\n\nConsole.WriteLine(rev(\"a string\"));\n}\n}</code></pre>","a":[{"id":1418787,"option":"1","correct":false},{"id":1418788,"option":"2","correct":true},{"id":1418789,"option":"3","correct":false},{"id":1418790,"option":"None of these","correct":false}]},{"q":"<p>Determine the output of the C# code snippet given below:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System; \nclass BasicConcepts\n{ \n    public string name; \n    public string dept; \n    public void Employeedetails(string name, string dept) \n    { \n        this.name = name; \n        this.dept = dept; \n        Console.WriteLine(\"My name is: \" + name); \n        Console.WriteLine(\"I belong to the department: \" + dept); \n    } \n} \nclass EmployeeDetails \n{ \n    static void Main(string[] args) \n    { \n        BasicConcepts obj = new BasicConcepts(); \n        obj.Employeedetails(\"Alice\", \"Design\"); \n        obj.Employeedetails(\"Bob\", \"Engineering\"); \n    } \n}</code></pre>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Adam\nDesign\nBob\nEngineering</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>My name is: Alice\nI belong to the department: Design\nMy name is: Bob\nI belong to the department: Engineering</code></pre>\n\t</li>\n</ol>","a":[{"id":1419317,"option":"1","correct":false},{"id":1419318,"option":"2","correct":true},{"id":1419319,"option":"Compile-Time Error","correct":false},{"id":1419320,"option":"No Output","correct":false}]},{"q":"<p>In C#, you are working on Generics. Which of the following statements is correct about the code snippet given below?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>public class CustomList&lt;T&gt;\n{\n    public T this[int index] \n    { \n        get; set; \n        \n    }\n    public void Add(T item)\n    {\n        \n    }\n    public void Remove(T item)\n    {\n\n        \n    }\n}</code></pre>\n\n<p><br>\n<br>\n<strong>Statements:</strong></p>\n\n<ol>\n\t<li>It is a placeholder while creating code and must be replaced with an actual object before you compile your code<br>\n\tÂ </li>\n\t<li>It is a type parameter placeholder for the Generic class type<br>\n\tÂ </li>\n\t<li>It is a type parameter placeholder for specifying a type when instantiating the class</li>\n</ol>","a":[{"id":1419412,"option":"1 and 2","correct":false},{"id":1419413,"option":"2 and 3","correct":false},{"id":1419414,"option":"1 and 3","correct":false},{"id":1419415,"option":"All of these","correct":true}]},{"q":"<p>What getsÂ printed inÂ the console window when the C# code snippet given below is executed?<br>\nÂ </p>\n\n<pre class=\"prettyprint\"><code>using System;\n\npublic class Hackster\n{\n    static void Main(string[] args)\n    {\n        char[,] multiArray = new char[3, 2] { { 'a', 'b' }, { 'c', 'd' }, { 'e', 'f' } };\n        Console.WriteLine(multiArray[2,1]);\n        \n    }\n}\n</code></pre>\n\n<p>Â </p>","a":[{"id":1419357,"option":"c","correct":false},{"id":1419358,"option":"f","correct":true},{"id":1419359,"option":"e","correct":false},{"id":1419360,"option":"d","correct":false}]},{"q":"<p>Which of the following syntaxes can be used in place of XXX in the C# code snippet given below to produce the output as follows?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>class TestArrays\n{\n    static void Main()\n    {\n        int[,] theArray = new int[5, 10];\n        System.Console.WriteLine(\"The array has {0} dimensions.\", XXX);\n        \n    }\n}</code></pre>\n\n<p>Â </p>\n\n<p><strong>Output:</strong></p>\n\n<pre class=\"prettyprint\"><code>The array has 2 dimensions.</code></pre>\n\n<p>Â </p>","a":[{"id":1419647,"option":"theArray.Rank[]","correct":false},{"id":1419648,"option":"theArray.Rank()","correct":false},{"id":1419649,"option":"theArray.Rank","correct":true},{"id":1419650,"option":"Rank.theArray[ ]","correct":false}]},{"q":"<p>Consider theÂ C# code snippet given below. Which of the following methods produces the output as follows?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>class Oven \n{ \n    public void DescribeOven() \n    { \n        System.Console.WriteLine(\"Used to bake cake and confectioneries\"); \n        ShowDetails(); \n        \n    } \n    public virtual void ShowDetails() \n    { \n        System.Console.WriteLine(\"Standard settings and temperature\"); \n        \n    }\n    \n} \n \nclass MicrowaveOven : Oven \n{ \n    public new void ShowDetails() \n    { \n        System.Console.WriteLine(\"Used to reheat food\"); \n        \n    } \n} \n \nclass OtgOven : Oven \n{ \n    public override void ShowDetails() \n    { \n        System.Console.WriteLine(\"Used to bake, toast and grill food\"); \n        \n    } \n}</code></pre>\n\n<p>Â </p>\n\n<p><strong>Output-Â </strong></p>\n\n<pre class=\"prettyprint\"><code>Used to bake cake and confectioneries\nStandard settings and temperature\n----------\nUsed to bake cake and confectioneries\nStandard settings and temperature\n----------\nUsed to bake cake and confectioneries\nUsed to bake, toast and grill food\n----------\n</code></pre>\n\n<p><br>\nÂ </p>\n\n<p><strong>Methods:</strong></p>\n\n<p>1.Â </p>\n\n<pre class=\"prettyprint\"><code>public static void TestOvens() \n{ \nOven oven1 = new Oven(); \noven1.DescribeOven(); \nSystem.Console.WriteLine(\"----------\"); \n\nMicrowaveOven oven2 = new MicrowaveOven(); \noven2.DescribeOven(); \nSystem.Console.WriteLine(\"----------\"); \n\nOtgOven otg3 = new OtgOven(); \notg3.DescribeOven(); \nSystem.Console.WriteLine(\"----------\"); \n}</code></pre>\n\n<p>Â </p>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>public static void TestOvens() \n{ \n\nvar ovens = new List&lt;Oven&gt; \n{ \n    new Oven(), \n    new MicrowaveOven(), \n    new OtgOven() \n    \n}; \n\nforeach(var oven in ovens) \n{ \n    oven.DescribeOven(); \n    System.Console.WriteLine(\"----------\"); \n\n} \n}</code></pre>\n\n<p>Â </p>","a":[{"id":1419537,"option":"1","correct":false},{"id":1419538,"option":"2","correct":false},{"id":1419539,"option":" 1 and 2","correct":true},{"id":1419540,"option":"None of these","correct":false}]},{"q":"<p>The code given alongside is used for Lazy initialization of the Singleton Pattern. What should be used in the place of XXX to complete the code snippet?</p>\n\n<p><strong>Code</strong>:</p>\n\n<pre class=\"prettyprint\"><code>public class Singleton{\nprivate static Singleton i = null;\nprivate Singleton()\n{\n}\nXXX\n{\nget\n{\nif(i == NULL)\ni = new Singleton();\nreturn i;\n}\n}\n}</code></pre>","a":[{"id":1418767,"option":"public static Singleton GetInstance","correct":true},{"id":1418768,"option":"private static Singleton GetInstance","correct":false},{"id":1418769,"option":"private Singleton GetInstance","correct":false},{"id":1418770,"option":"public Singleton GetInstance","correct":false}]},{"q":"<p>In C#, you are working on Object-Oriented Programming. You have a class and one of its instances is being collected by the garbage collector. Now, in order to perform the necessary final clean-up when the class instance is being collected by the garbage collector, you have made a call to the finalizer as shown in the code snippet given below. Now which of the following code snippets represents the implicit translation of call to the finalizer when the&nbsp;finalizer implicitly calls Finalize on the base class of the object?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\npublic class Destroyer\n{\n    public override string ToString() =&gt; GetType().Name;\n    ~Destroyer() =&gt; Console.WriteLine($\"The {ToString()} destructor is executing.\");\n}</code></pre>\n\n<p><strong>Code Snippets</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>protected override void Finalize() \n{ \n    try \n    {   \n    } \n    finally \n    { \n        base.Finalize(); \n    } \n}</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>class Destroyer\n{\n    ~Destroyer() \n    {  \n    }\n}</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>~Destroyer()\n{ \n    try \n    {  \n    } \n    finally \n    { \n        base.Finalize(); \n    } \n}</code></pre>\n\t</li>\n</ol>","a":[{"id":1419547,"option":"1","correct":true},{"id":1419548,"option":"2","correct":false},{"id":1419549,"option":"3","correct":false},{"id":1419550,"option":"Both 2 and 3","correct":false}]},{"q":"<p>Which of the following syntaxes can be used in place of XXX to complete the C# code snippet given below?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\npublic class Hack\n{ \n    public static void hack_oprA(int a) \n    { \n        Console.WriteLine(a + 10); \n        \n    } \n    public static void hack_oprB(int a) \n    { \n        Console.WriteLine(a * a * a); \n        \n    } \n    \n} \nclass Program \n{ \n    delegate void hackerearth(int x); \n    static void Main(string[] args) \n    { \n        hackerearth obj = Hack.hack_oprA; \n        XXX\n        obj(10); \n        obj(5); \n    } \n }</code></pre>\n\n<p><br>\nÂ </p>\n\n<p><strong>Syntax:</strong><br>\nÂ </p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>demo obj = Program.hack_oprB;</code></pre>\n\n\t<p>Â </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>obj += Program.hack_oprB;</code></pre>\n\n\t<p>Â </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>obj += Hack.hack_oprB;</code></pre>\n\n\t<p>Â </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>demo obj = Hack.hack_oprB;</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1418952,"option":"1","correct":false},{"id":1418953,"option":"2","correct":false},{"id":1418954,"option":"3","correct":true},{"id":1418955,"option":"4","correct":false}]},{"q":"<p>What will be theÂ output of the C# code snippet given below?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\ninterface IDumpable\n{\n    string Name \n    { \n        get; \n        set; \n        \n    }\n    void Dump();\n}\n \nclass Student : IDumpable\n{\n    string stud_name;\n    public string stud_city;\n    public int stud_roll_no;\n    public Student(string stud_name, string stud_city, int stud_roll_no)\n    {\n        this.stud_name = stud_name; \n        this.stud_city = stud_city; \n        this.stud_roll_no = stud_roll_no;\n        \n    }\n    public string Name\n    {\n        get \n        { \n            return stud_name; \n            \n        }\n        set \n        { \n            stud_name = value; \n            \n        }\n        \n    }\n    public void Dump()\n    {\n        Console.WriteLine(\"Student Details : {0}, {1}, {2}\", stud_name, stud_city, stud_roll_no);\n        \n    }\n    \n}\n \nclass Student_Test\n{\n    static void Main(string[] arg)\n    {\n        IDumpable[] test = \n        {\n            new Student(\"John\", \"Boston\", 995566777),\n            new Student(\"Mary\", \"Seattle\", 998979899),\n            new Student(\"Bob\", \"Chicago\", 994469549)\n            \n        };\n        foreach (IDumpable h in test)\n        {\n            Console.Write(h.Name + \": \");\n            h.Dump();\n            \n        }\n        \n    }\n    \n}</code></pre>\n\n<p>Â </p>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>John: Student Details : John, Boston, 995566777\nMary: Student Details : Mary, Seattle, 998979899\nBob: Student Details : Bob, Chicago, 994469549\n</code></pre>\n\n\t<p>Â </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>John\nMary\nBob\n</code></pre>\n\n\t<p>Â </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Student Details : John, Boston, 995566777\nStudent Details : Mary, Seattle, 998979899\nStudent Details : Bob, Chicago, 994469549\n</code></pre>\n\n\t<p>Â </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Student Details : John, Boston, 995566777\nMary, Seattle, 998979899\nBob, Chicago, 994469549\n</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419597,"option":"1","correct":true},{"id":1419598,"option":"2","correct":false},{"id":1419599,"option":"3","correct":false},{"id":1419600,"option":"4","correct":false}]},{"q":"<p>What is the output of the following C# code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nclass Hackerearth \n{\n    public Hackerearth(int h1, double h2)\n    {\n\t\tConsole.WriteLine(\"Hello World\");\n\t}\n\t\n\tpublic Hackerearth()\n\t{\n\t   Console.WriteLine(\"Hi\"); \n\t}\n\t\n\tpublic Hackerearth(int h1) : this() \n\t{\n\t    Console.WriteLine(\"Hey\");\n\t}\n\n\n\tpublic Hackerearth(int h1, int h2)\n\t\t: this(6, 2.0)\n\t{\n\t\tConsole.WriteLine(\"Hackerearth\");\n\t}\n}\n\npublic class hack \n{\n\n\tstatic public void Main()\n\t{\n\n\t\tHackerearth he1 = new Hackerearth(1);\n\t\tHackerearth he2 = new Hackerearth(2 , 3);\n\t}\n}\n</code></pre>\n\n<p>Â </p>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hi\nHey\nHello World\nHackerearth</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hey\nHackerearth</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hey\nHi\nHackerearth\nHello World\n</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hello World\nHello World\n</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419422,"option":"3","correct":false},{"id":1419423,"option":"4","correct":false},{"id":1419424,"option":"1","correct":true},{"id":1419425,"option":"2","correct":false}]},{"q":"<p>What is the output of the following C# code?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\nclass hack1\n\n{\n\tvirtual public void h()\n\t{\n\t\tConsole.WriteLine(\"hi\");\n\t}\n}\n\nclass hack2 : hack1\n{\n\t\n\t new public void h()\n\t{\n\t\tConsole.WriteLine(\"hello\");\n\t}\n}\n\nclass Hack {\n\t\n\tpublic static void Main()\n\t{\n\t\ttry\n\t\t{\n\t\t    hack2 h1 = new hack2();\n\t\t    \n\t\t    hack1 h4=h1;\n\t\t    \n\t\t    hack2 h3=(hack2)h4;\n\t\t    \n\t\t    h3.h();\n\t\t    \n\t\t}\n\t\tcatch(Exception e)\n\t\t{\n\t\t    Console.WriteLine(\"happy hacking\");\n\t\t}\n\t\t\n\t\tfinally \n\t\t{\n\t\t    hack1 h2 = new hack2();\n\t\t    h2.h();\n\t\t    \n\t\t}\n\t\t\n\t}\n}</code></pre>\n\n<p><br>\nÂ </p>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hello\nhi\n</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>happy hacking\nhi\n</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hello\nhappy hacking\nhi\n</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hello\nhappy hacking\n</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419437,"option":"2","correct":false},{"id":1419438,"option":"4","correct":false},{"id":1419439,"option":"3","correct":false},{"id":1419440,"option":"1","correct":true}]},{"q":"<p>Which of the following statements is correct if the C# code given below is executed?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\npublic class Hackerearth\n{    \n    public static string hack;\n    \n    public static void Main(string[] args)\n    {\n        Hackerearth h = new Hackerearth();\n        h.hackOpr();\n    }\n        \n\n    public Hackerearth()\n    {\n        if (hack == null)\n        {\n            hack = \"hackerearth\";\n        }\n    }\n        \n    static  Hackerearth()\n    {\n        if (hack == null)\n        {\n            hack = \"hello hackerearth\";\n        }\n            \n    }\n\n    public void hackOpr()\n    {\n        if (String.Equals(hack, \"hackerearth\"))\n        {\n            hack = \"hi hackerearth\";                \n        }\n        Console.WriteLine(hack);\n\n    } \n    \n}</code></pre>\n\n<p>Â </p>\n\n<p><strong>Statements:</strong><br>\nÂ </p>\n\n<ol>\n\t<li>\n\t<p>The code prints-</p>\n\n\t<pre class=\"prettyprint\"><code>hello hackerearth\n</code></pre>\n\n\t<p>Â </p>\n\t</li>\n\t<li>\n\t<p>The code prints-</p>\n\n\t<pre class=\"prettyprint\"><code>hackerearth\n</code></pre>\n\n\t<p>Â </p>\n\t</li>\n\t<li>\n\t<p>The code prints-</p>\n\n\t<pre class=\"prettyprint\"><code>hi hackerearth\n</code></pre>\n\n\t<p>Â </p>\n\t</li>\n\t<li>\n\t<p>â€‹ The code does not print anything â€‹</p>\n\t</li>\n</ol>","a":[{"id":1419617,"option":"2","correct":false},{"id":1419618,"option":"3","correct":false},{"id":1419619,"option":"1","correct":true},{"id":1419620,"option":"4","correct":false}]},{"q":"<p>What is the output of the following C# code?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nclass Hackster\n{\n    public Hackster(Hackster hacker)\n    {\n        Name = hacker.Name;\n        Age = hacker.Age;\n    }\n    public Hackster(string name, int age)\n    {\n        Name = name;\n        Age = age;\n    }\n    public int Age \n    { \n        get; \n        set; \n    }\n    public string Name \n    { \n        get; \n        set; \n    }\n    public string Hackerdetails()\n    {\n        return Name + \" is \" + Age.ToString();\n    }\n}\n\nclass HackTest\n{\n    static void Main()\n    {\n        Hackster h1 = new Hackster(\"John\", 15);\n        Hackster h2 = new Hackster(h1);\n        \n        h1.Age = 20;\n        \n        h2.Age = 14 + h1.Age;\n        \n        h2.Name = \"Mary\";\n        h2.Name += \" Brown\";\n        \n        Console.WriteLine(h1.Hackerdetails());\n        Console.WriteLine(h2.Hackerdetails());\n    }\n}</code></pre>\n\n<p><strong>Output:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>John is 20\nMary is 34</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>John Brown is 20\nMary is 14</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>John is 20\nMary Brown is 34</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>John is 15\nMary Brown is 29</code></pre>\n\t</li>\n</ol>","a":[{"id":1419542,"option":"1","correct":false},{"id":1419543,"option":"2","correct":false},{"id":1419544,"option":"3","correct":true},{"id":1419545,"option":"4","correct":false}]},{"q":"<p>Which of the following C# code snippets can you use to invoke a default implementation with respect to the C# code given below?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>public interface HackI\n{\n    void hack1() =&gt; Console.WriteLine(\"Default Paint method\");\n}\npublic class Hack : HackI\n{\n    // hack1() is inherited from HackI.\n}</code></pre>\n\n<p><br>\n<br>\n<br>\n<strong>Code Snippets:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>var h = new Hack();\nh.hack1();</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>var h = new Hack();\nvar h2 = h as HackI;\nh2.hack1();</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419622,"option":"1","correct":false},{"id":1419623,"option":"2","correct":true},{"id":1419624,"option":"1 and 2","correct":false},{"id":1419625,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the C# code snippet given below?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\npublic class Hack\n{\n    public static void Main() \n    {\n        byte FirstVariable= 100;\n        byte SecondVariable= 110;\n        long answer = FirstVariable | SecondVariable; \n        Console.WriteLine(answer );\n        FirstVariable= 100;\n        SecondVariable= 100;\n        answer = FirstVariable | SecondVariable; \n        Console.WriteLine(answer );\n        \n    }\n}\n</code></pre>\n\n<p><br>\n<br>\n<strong>Output</strong><br>\nÂ </p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>100 \n110</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>100\n100</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>210 \n100</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>110\n100</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419172,"option":"1","correct":false},{"id":1419173,"option":"2","correct":false},{"id":1419174,"option":"3","correct":false},{"id":1419175,"option":"4","correct":true}]},{"q":"<p>Which of the following statements is correctÂ ifÂ the C# code snippet given below is given theÂ input as \"num=260\"?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nclass Program\n{\n    static void Main(string[] args)\n    {\n        int i = 0;\n        int digiCount = 0;\n        int num = 0;\n        int tNum = 0;\n        int []digiArray = new int[10];\n        double sum = 0;\n        tNum = num = int.Parse(Console.ReadLine());\n        while (num &gt; 0)\n        {\n            digiArray[i++] = num%10; \n            num = num / 10;\n            digiCount++;\n            \n        }\n        for(i=0;i&lt;digiCount;i++)\n        {\n            sum += Math.Pow(digiArray[i], digiCount);\n            \n        }\n        if (sum == tNum)\n        Console.WriteLine(\"Given Number is armstrong\");\n        else\n        Console.WriteLine(\"Given Number is not armstrong\");\n        \n    }\n }</code></pre>\n\n<p>Â </p>\n\n<p><strong>Statements:</strong><br>\nÂ </p>\n\n<ol>\n\t<li>The code produces the output-<br>\n\tGiven Number is not armstrong<br>\n\tÂ </li>\n\t<li>Â The code givesÂ Compile Time Error<br>\n\tÂ </li>\n\t<li>Â The code produces the output-<br>\n\tÂ Â Given Number is armstrong<br>\n\tÂ </li>\n\t<li>The code does not print anything</li>\n</ol>","a":[{"id":1419277,"option":"1","correct":true},{"id":1419278,"option":"2","correct":false},{"id":1419279,"option":"3","correct":false},{"id":1419280,"option":"4","correct":false}]},{"q":"<p>In C# you are working on Events and Delegates and you have aÂ code given below which defines an event <strong>hc</strong> and a delegate <strong>EventHandler</strong>. Now, which of the following syntaxes can be usedÂ in place of YYY to complete the code snippet?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System; \nnamespace Delegates \n{ \n    public delegate void EventHandler(string h);\n    \n    class Hackerearth\n    { \n        public static void HackEvent(string hk) \n        { \n            Console.WriteLine(\"hi\"); \n            \n        } \n        static void Main(string[] args) \n        { \n            hack h1= new hack(); \n            h1.Action(\"bye\"); \n            YYY            \n        } \n        \n    }\n    \n    public class hack\n    { \n        public event EventHandler hc; \n        public void Action(string h) \n        { \n            if (hc!= null) \n            { \n                hc(h); \n                Console.WriteLine(h); \n                \n            } \n            else \n            { \n                Console.WriteLine(\"hello\"); \n                \n            } \n            \n        } \n        \n    } \n  \n}</code></pre>\n\n<p>Â </p>\n\n<p>Â </p>\n\n<p><strong>Syntaxes</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>h1.hc = new EventHandler(HackEvent);</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>new EventHandler(HackEvent);</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>h1.hc+= new EventHandler(HackEvent);</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>h1.hc = new CatchEvent;</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1418932,"option":"1","correct":false},{"id":1418933,"option":"2","correct":false},{"id":1418934,"option":"3","correct":true},{"id":1418935,"option":"4","correct":false}]},{"q":"<p>What will be the output of the C# code snippet given below?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nclass Demo\n{\n    static void Main(string[] args)\n    {\n        int abc = 15;\n        int xyz;\n        methodFirst(ref abc );\n        methodSecond(out xyz);\n        Console.WriteLine(abc + \" \" + xyz);\n        \n    }\n    static void methodFirst(ref int mno)\n    { \n        mno = mno + mno;\n        \n    }\n    static void methodSecond(out int mno)\n    {\n        mno = 20;\n        mno = mno * mno;\n        \n    }\n }</code></pre>\n\n<p>Â </p>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>36 5</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>45 400</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>6 25</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>30 400</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419192,"option":"1","correct":false},{"id":1419193,"option":"2","correct":false},{"id":1419194,"option":"3","correct":false},{"id":1419195,"option":"4","correct":true}]},{"q":"<p>John is coding using C# and has written the following code snippet. Then what could be the reason for a predicate to be injected in the code given below.</p>\n\n<p><strong>Code</strong>:</p>\n\n<pre class=\"prettyprint\"><code>public class Program\n{\n public static int GetTotal(int[] numbers, Predicate&lt;int&gt; selector) \n{ \nint total = 0; \nforeach (int n in numbers) \n{ \nif (selector(n)) \n{ \ntotal += n; \n} \n} \nreturn total; \n} \n public static void Main(string[] args) \n { \nConsole.WriteLine(GetTotal(new [] {1, 2, 3, 4, 5, 6}, i =&gt; true)); \nConsole.WriteLine(GetTotal(new[] { 1, 2, 3, 4, 5, 6 }, i =&gt; i % 2 == 0)); \n Console.WriteLine(GetTotal(new[] { 1, 2, 3, 4, 5, 6 }, i =&gt; i % 2 != 0)); \n Console.Read(); \n} }</code></pre>","a":[{"id":1418812,"option":"It is used to execute around lambda expression","correct":false},{"id":1418813,"option":"It is used to observe pluggable behaviour","correct":false},{"id":1418814,"option":"It is used to to internalize the selection criteria.","correct":false},{"id":1418815,"option":"It is used to externalize the selection criteria.","correct":true}]},{"q":"<p>What is the output of the following C# code snippet?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nclass demo\n{\n    public static void top()\n    { \n        Console.WriteLine(\"first execution\"); \n    }\n    public void second()\n    { \n        top();\n        Console.WriteLine(\"second execution\");  \n    }\n    public void bottom(int i)\n    { \n        Console.WriteLine(i);\n        second(); \n    } \n    \n}\nclass program\n{\n    public static void Main()\n    { \n        demo obj = new demo ();\n        demo.top();\n        obj.bottom(25); \n    } \n}</code></pre>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>first execution\n25</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>first execution\n25\nfirst execution\nsecond execution</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>second execution\n25\nfirst execution</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>second execution\n25\nsecond execution\nfirst execution</code></pre>\n\t</li>\n</ol>","a":[{"id":1419267,"option":"1","correct":false},{"id":1419268,"option":"2","correct":true},{"id":1419269,"option":"3","correct":false},{"id":1419270,"option":"4","correct":false}]},{"q":"<p>What is the output of the following C# code snippet?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nusing System.Linq;\n\npublic class Hackster\n{\n    public static void Main()\n    {\n        var source = Enumerable.Range(1, 10000);\n        var hack_opr = from n in source.AsParallel() where n % 2 == 0 select n;\n        Console.WriteLine(hack_opr.Count());\n\t}\n}\n</code></pre>\n\n<p>Â </p>","a":[{"id":1419432,"option":"10000","correct":false},{"id":1419433,"option":"2000","correct":false},{"id":1419434,"option":"5000","correct":true},{"id":1419435,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following C# code snippet?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nusing System.Collections.Generic;\npublic class Hackster\n{\n\tpublic static void Main()\n\t{\n\t    var numbers = new List&lt;int&gt; { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n\t    for (var index = numbers.Count - 1; index &gt;= 0; index--)\n\t    {\n\t        if (numbers[index] % 2 == 1)\n\t        {\n\t            numbers.RemoveAt(index);\n\t            \n\t        }\n\t        \n\t    }\n\t    numbers.ForEach(number =&gt; Console.Write(number + \" \"));\n\t    \n\t}\n}\n</code></pre>\n\n<p>Â </p>\n\n<p><strong>Output</strong>:</p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>2 4 6 8</code></pre>\n\n\t<p>Â </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>0 2 4 6 8</code></pre>\n\n\t<p>Â </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>1 2 3 4 5</code></pre>\n\n\t<p>Â </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>1 3 5 7 9</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419417,"option":"1","correct":false},{"id":1419418,"option":"2","correct":true},{"id":1419419,"option":"3","correct":false},{"id":1419420,"option":"4","correct":false}]},{"q":"<p>Which line in the C# code snippet given below gives an error?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;  // line 1\nabstract class AreaClass   // line 2\n{ \n    abstract public int Area(); // line 3\n    \n} \nclass Circle: AreaClass  // line 4\n{ \n    int radius = 0;   // line 5\n    public Circle(int r)  // line 6\n    { \n        radius = r;   // line 7\n        \n    } \n    public override int Area()   // line 8\n    { \n        return 3.14 * radius * radius;   // line 9\n        \n    } \n    \n} \nclass MainClass  // line 10\n{ \n    public static void Main()   // line 11\n    { \n        Circle c = new Circle(7);   // line 12\n        Console.WriteLine(\"Area = \" + c.Area()); // line 13\n        \n    } \n    \n}</code></pre>\n\n<p>Â </p>","a":[{"id":1419107,"option":"Line 3","correct":false},{"id":1419108,"option":"Line 9","correct":true},{"id":1419109,"option":"Line 2","correct":false},{"id":1419110,"option":"Line 7","correct":false}]},{"q":"<p>What is the output of the C# code snippet given below?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\npublic class DelegateEvent\n{\n    public delegate void HandlerEventDelegate();\n    public static double original_amount= 4533.47;\n    public static void AmountDeposit()\n    { \n        Console.WriteLine(\"Current Bank Balance: \"+original_amount); \n        \n    }\n    public static void RewardBonus()\n    {\n        if(original_amount&gt;= 12000)\n        {\n            double amountBonus = 1200;\n            Console.WriteLine(\"Bonus Applied and now the total Bank Balance: \"+(original_amount+amountBonus ));\n            \n        } \n        else\n        { \n            Console.WriteLine(\"Bonus Inapplicable\"); \n            \n        }\n        \n    }\n    public static event HandlerEventDelegate obj;\n    public static void Main(string[] args)\n    {\n        obj+= new HandlerEventDelegate (AmountDeposit);\n        obj+= new HandlerEventDelegate (RewardBonus);\n        obj.Invoke();\n        \n    }\n }</code></pre>\n\n<p><br>\n<br>\n<strong>Output:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Current Bank Balance: 4533.00\n\nBonus Applied and now the total Bank Balance: 12000\n\n</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Current Bank Balance: 4533.47\n\nBonus Applied and now the total Bank Balance: 12200</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Current Bank Balance: 4533\n\nBonus Applied and now the total Bank Balance: 12200</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Current Bank Balance: 4533.47\n\nBonus Inapplicable</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419567,"option":"1","correct":false},{"id":1419568,"option":"2","correct":false},{"id":1419569,"option":"3","correct":false},{"id":1419570,"option":"4","correct":true}]},{"q":"<p>Which of the following C# code snippets can you use toÂ rewrite the C#Â code given below using String Interpolation?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>string Age = \"&lt;Type your age here&gt;\";\nstring dateString = DateTime.Today.ToShortDateString();\n\nstring s = \"Hello. You are \" + Age + \" + \"years old\". Today is \" + dateString + \".\";\nSystem.Console.WriteLine(s);\n\ns += \" How do you feel?\";\nSystem.Console.WriteLine(s);</code></pre>\n\n<p>Â </p>\n\n<p>Â </p>\n\n<p><strong>Code Snippets</strong></p>\n\n<p>1.Â </p>\n\n<pre class=\"prettyprint\"><code>string Age = \"&lt;Type your age here&gt;\";\nstring dateString = DateTime.Today.ToShortDateString();\n\nstring s = $\"Hello. You are {Age} years old. Today is {dateString}.\";\nSystem.Console.WriteLine(s);\n\ns = $\"{s} How do you feel?\";\nSystem.Console.WriteLine(s);</code></pre>\n\n<p>Â </p>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>string Age = \"&lt;Type your age here&gt;\";\nstring dateString = DateTime.Today.ToShortDateString();\n\nstring s = \"Hello. You are\" ${Age} \"years old. Today is\" ${dateString}.;\nSystem.Console.WriteLine(s);\n\ns = ${s} \"How do you feel?\";\nSystem.Console.WriteLine(s);</code></pre>\n\n<p>Â </p>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>string Age = \"&lt;Type your age here&gt;\";\nstring dateString = DateTime.Today.ToShortDateString();\n\nstring s = \"Hello. You are\" ${Age}$ \"years old. Today is\" ${dateString}$.;\nSystem.Console.WriteLine(s);\n\ns = ${s}$ \"How do you feel?\";\nSystem.Console.WriteLine(s);</code></pre>\n\n<p>Â </p>","a":[{"id":1419497,"option":"1","correct":true},{"id":1419498,"option":"2","correct":false},{"id":1419499,"option":"3","correct":false},{"id":1419500,"option":"None of these","correct":false}]},{"q":"<p>Which of the following LINQ queries can be used to produce the output 555?</p>\n\n<p><strong>Options:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>foreach (int i in Enumerable.Range (5, 5))\nConsole.Write (i + \" \");</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>foreach (int i in Enumerable.Repeat (5, 3))\nConsole.Write (i + \" \");</code></pre>\n\t</li>\n</ol>","a":[{"id":1418717,"option":"1","correct":false},{"id":1418718,"option":"2","correct":true},{"id":1418719,"option":"Either 1 or 2","correct":false},{"id":1418720,"option":"Neither 1 or 2","correct":false}]},{"q":"<p>Which of the following statements is correct,Â if the following C# code snippet is executed?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\npublic class Foo\n{\n    public int NumberOfBars= 2;\n    public static void bar1() \n    { \n        Console.WriteLine(\"Welcome to bar1!\"); \n    }\n    public void bar2() \n    {\n        Console.WriteLine(\"Welcome to bar2!\");\n        \n    }\n}\n\npublic class Foo2\n{\n    public static void initiation()\n    {\n        Foo hack= new Foo();\n        int i = hack.NumberOfBars; \n        hack.bar2();\n        Foo.bar1();\n        \n    }\n    public static void Main() \n    {\n        initiation();\n        \n    }\n\n}</code></pre>\n\n<p><br>\n<br>\n<strong>Statements:</strong></p>\n\n<ol>\n\t<li>Â The code gives the following output -\n\t<pre class=\"prettyprint\"><code>Welcome to bar2!\nWelcome to bar1!</code></pre>\n\t<br>\n\tÂ </li>\n\t<li>The code gives the following output -Â Â \n\t<pre class=\"prettyprint\"><code>Welcome to bar1!\nWelcome to bar2!\n</code></pre>\n\n\t<p>Â </p>\n\t</li>\n\t<li>The code gives a compile-time error<br>\n\tÂ </li>\n\t<li>The code gives a runtime error</li>\n</ol>","a":[{"id":1419397,"option":"1 and 4","correct":false},{"id":1419398,"option":"2 and 4","correct":false},{"id":1419399,"option":"3","correct":false},{"id":1419400,"option":"1","correct":true}]},{"q":"<p>Which of the following C# code snippets will run successfully for the indexer given below?</p>\n\n<p><strong>Indexer</strong></p>\n\n<pre class=\"prettyprint\"><code>Employee emp = new Employee();\nemp[5,6]=35</code></pre>\n\n<p>Â </p>\n\n<p><strong>Code Snippets</strong></p>\n\n<p>1.Â </p>\n\n<pre class=\"prettyprint\"><code>class Employee \n{\nint[,] emp = new int[10, 10];\npublic int property WriteOnly\n{\n    set\n    {\n        emp[a, b] = value;\n        \n    }\n    \n} \n}</code></pre>\n\n<p>Â </p>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>class Employee \n{\nint[,] emp = new int[10, 10];\npublic property WriteOnly int this[int a, int b]\n{\n    set\n    {\n        emp[a, b] = value;\n        \n    }\n    \n}\n}</code></pre>\n\n<p>Â </p>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>class Employee {\nint[,] emp = new int[10, 10];\npublic int this[int a, int b]\n{\n    set\n    {\n        emp[a, b] = value;\n        \n    }\n    \n}\n    \n}</code></pre>\n\n<p>Â </p>","a":[{"id":1419182,"option":"1","correct":false},{"id":1419183,"option":"2","correct":false},{"id":1419184,"option":"3","correct":true},{"id":1419185,"option":"None of these","correct":false}]},{"q":"<p>Which of the following collection class type implementation is being demonstrated in the <strong>C#</strong> code snippet below?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nusing System.Collections;\n\nclass Hack\n{\n    public static void Main()\n    { \n        Hashtable openWith = new Hashtable();\n        openWith.Add(\"txt\", \"notepad.exe\");\n        openWith.Add(\"bmp\", \"paint.exe\");\n        openWith.Add(\"dib\", \"paint.exe\");\n        openWith.Add(\"rtf\", \"wordpad.exe\");\n        try\n        { \n            openWith.Add(\"txt\", \"winword.exe\"); \n            \n        }\n        catch\n        { \n            Console.WriteLine(\"An element with Key = \\\"txt\\\" already exists.\"); \n            \n        }\n        Console.WriteLine(\"For key = \\\"rtf\\\", value = {0}.\", openWith[\"rtf\"]);\n        openWith[\"rtf\"] = \"winword.exe\";\n        Console.WriteLine(\"For key = \\\"rtf\\\", value = {0}.\", openWith[\"rtf\"]);\n        openWith[\"doc\"] = \"winword.exe\";\n        if (!openWith.ContainsKey(\"ht\"))\n        {\n            openWith.Add(\"ht\", \"hypertrm.exe\");\n            Console.WriteLine(\"Value added for key = \\\"ht\\\": {0}\", openWith[\"ht\"]);\n            \n        }\n        Console.WriteLine();\n        foreach( DictionaryEntry de in openWith )\n        { \n            Console.WriteLine(\"Key = {0}, Value = {1}\", de.Key, de.Value); \n            \n        }\n        ICollection valueColl = openWith.Values;\n        Console.WriteLine();\n        foreach( string s in valueColl )\n        { \n            Console.WriteLine(\"Value = {0}\", s); \n            \n        }\n        ICollection keyColl = openWith.Keys;\n        Console.WriteLine();\n        foreach( string s in keyColl )\n        { \n            Console.WriteLine(\"Key = {0}\", s); \n            \n        }\n        Console.WriteLine(\"\\nRemove(\\\"doc\\\")\");\n        openWith.Remove(\"doc\");\n        if (!openWith.ContainsKey(\"doc\"))\n        { \n            Console.WriteLine(\"Key \\\"doc\\\" is not found.\"); \n            \n        } \n        \n    } \n    \n}</code></pre>","a":[{"id":1419447,"option":"List Class","correct":false},{"id":1419448,"option":"Dictionary Class","correct":false},{"id":1419449,"option":"Hashtable Class","correct":true},{"id":1419450,"option":"SortedList Class","correct":false}]},{"q":"<p>What is the output of the following C# code snippet?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System; \nusing System.Text.RegularExpressions; \n \nclass Hackerearth\n{ \n    public static void Main(string[] args)  \n    {\n        Regex h = new Regex(@\"p*q\"); \n        Match hack = h.Match(\"pqqqqrst\"); \n        if (hack.Success) \n        { \n            Console.WriteLine(hack.Value); \n            \n        } \n    } \n}</code></pre>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>qqqp</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>pq</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>qqqqp</code></pre>\n\t</li>\n</ol>","a":[{"id":1419237,"option":"1","correct":false},{"id":1419238,"option":"2","correct":true},{"id":1419239,"option":"3","correct":false},{"id":1419240,"option":"None of these","correct":false}]},{"q":"<p>In C#, you are working on Objects and Collections and the objects are implemented using the IEnumerable Interface. Now, which of the given syntaxes can be used in place of XXX in the C# code snippet given below to produce output as follows?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System.Collections.Generic;\nusing System;\npublic class Hack\n{\n    class hack1 : IEnumerable&lt;string&gt;\n    {\n        public static void Main()\n        {\n            hack1 h1 = new hack1()\n            {\n                {\n                    \"Alice\", \n                    \"Smith\", \n                    \"123 Street\", \n                    \"Menlo Park\", \n                    \"CA\", \n                    \"44002\" \n                    \n                },\n                {\n                    \"Tara\", \n                    \"Green\",\n                    \"456 Street\",\n                    \"Sunnyvale\",\n                    \"CA\", \"44003\" \n                    \n                }\n                \n            };\n            \n            Console.WriteLine(\"Details:\");\n            \n            foreach (string h in h1)\n            {\n                Console.WriteLine(\"\\r\\n\" + h);\n            }\n            \n        }\n        \n        private List&lt;string&gt; hackList = new List&lt;string&gt;();\n        public IEnumerator&lt;string&gt; GetEnumerator() =&gt; hackList.GetEnumerator();\n\n        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() =&gt; hackList.GetEnumerator();\n\n        public void Add(string fn, string ln, string st, string c, string s, string z) =&gt; hackList.Add(XXX);\n        \n    }\n    \n}</code></pre>\n\n<p>Â </p>\n\n<p>Â </p>\n\n<p><strong>Output</strong></p>\n\n<pre class=\"prettyprint\"><code>Details:\n\nAlice Smith\n123 Street\nMenlo Park, CA 44002\n\nTara Green\n456 Street\nSunnyvale, CA 44003</code></pre>\n\n<p>Â </p>\n\n<p><strong>Syntaxes:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>$@\"{fn} {ln}\n{st}\n{c}, {s} {z}\"\n        </code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>$\"{fn} {ln}\n{st}\n{c}, {s} {z}\"\n        </code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>@\"{fn} {ln}\n{st}\n{c}, {s} {z}\"\n        </code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>\"{fn} {ln}\n{st}\n{c}, {s} {z}\"\n        </code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>\n\n<p>Â </p>","a":[{"id":1419587,"option":"1","correct":true},{"id":1419588,"option":"2","correct":false},{"id":1419589,"option":"3","correct":false},{"id":1419590,"option":"4","correct":false}]},{"q":"<p>Which of the following C# code snippets can you use to get the result from the Task given below:<br>\n<br>\nÂ </p>\n\n<pre class=\"prettyprint\"><code>Task &lt; string &gt; task1 = Task.Run &lt; string &gt; (() =&gt; DateTime.Now.DayOfWeek.ToString() );</code></pre>\n\n<p>Â </p>\n\n<p><strong>Code Snippets</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Console.WriteLine(task1.Result);</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Console.WriteLine(task1.Result &lt; String &gt;);</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Console.WriteLine(String(task1.Result));</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Console.WriteLine(task1.Result, String);</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419402,"option":"1","correct":true},{"id":1419403,"option":"2","correct":false},{"id":1419404,"option":"3","correct":false},{"id":1419405,"option":"4","correct":false}]},{"q":"<p>What is the output of the following C# code snippet?<br>\n<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\nclass Hackster\n{\n    static void Main(string[] args)\n    {\n        hack3 h3 = new hack3(); \n        Hack h4 = h3;\n        h4.hack1();\n        h3.hack1();  \n        h3.hack2(); \n        \n    }\n} \n\nabstract class Hack\n{\n    public virtual void hack1() \n    {\n        Console.WriteLine(\"Hi\");\n    }\n \n    public void hack2()\n    {\n        Console.WriteLine(\"Hi from Hackerearth\");\n    }\n}\n\nclass hack3 : Hack\n{\n    public override void hack1()\n    {\n        Console.WriteLine(\"Hello from Hackerearth\");\n        \n    }\n}\n</code></pre>\n\n<p><br>\n<strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hi\nHello from Hackerearth\nHi from Hackerearth\n</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hello from Hackerearth\nHi\nHi from Hackerearth\n</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hello from Hackerearth\nHello from Hackerearth\nHi from Hackerearth\n</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hello from Hackerearth\nHi\nHello from Hackerearth\n</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419352,"option":"1","correct":false},{"id":1419353,"option":"2","correct":false},{"id":1419354,"option":"3","correct":true},{"id":1419355,"option":"4","correct":false}]},{"q":"<p>Which of the following method implementation rules should you keep in mind while implementing the interface in the C#Â code given below?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>public interface WriterInterface\n{ \n    void FileWriting(); \n    \n}\n\npublic class XmlWritter: WriterInterface\n{\n    public void FileWriting()\n    {\n        Console.WriteLine(\"File is written in the XmlWriter class.\"); \n        \n    }\n}\npublic class JsonWriter: WriterInterface\n{\n    public void FileWriting()\n    {\n        Console.WriteLine(\"File is written in the JsonWritter class.\"); \n        \n    }\n}</code></pre>\n\n<p>Â </p>\n\n<p><strong>Rules:</strong></p>\n\n<ol>\n\t<li>The parameters must match exactly.<br>\n\tÂ </li>\n\t<li>All the methods must be protected during implementation.<br>\n\tÂ </li>\n\t<li>The method names and return types should be different.</li>\n</ol>","a":[{"id":1419147,"option":"Only 1","correct":true},{"id":1419148,"option":"Only 2","correct":false},{"id":1419149,"option":"Both 1 and 3","correct":false},{"id":1419150,"option":"Both 2 and 3","correct":false}]},{"q":"<p>Which of the following lines in the C# code snippet given belowÂ throws an error?<br>\n<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>public interface hack_Interface\n{\n    int hack_variable\n    {\n        \n        protected get; // L1\n        \n    }\n}\n\npublic class Hack : hack_Interface\n{\n    public int hack_variable\n    {\n        \n        protected get // L2\n        { \n            return 10; \n            \n        }\n        \n        protected set // L3\n        { \n            \n        }\n        \n    }\n}</code></pre>\n\n<p>Â </p>","a":[{"id":1419532,"option":"Only L1","correct":false},{"id":1419533,"option":"Only L2","correct":false},{"id":1419534,"option":"Only L3","correct":false},{"id":1419535,"option":"Both L1 and L2","correct":true}]},{"q":"<p>You are using the C# code snippet given belowÂ to display particular information only until <em>6:00</em>Â PM. If anyone tries to access the information after <em>6:00</em>Â PM, you want to display an \"Access denied\" error message.<br>\nWhich of the following code snippets can be used in place of XXX to perform the action?<br>\nÂ </p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\ndelegate void InformDelegate();\nclass Hack\n{\n    static void Main(string[] args)\n    {\n        InformDelegate info = null;\n        Display disp =new Display();\n        //XXX \n        \n    }\n}\nclass Display\n{ \n    public void dawn()\n    { \n        Console.WriteLine(\"display\"); \n        \n    }\n    public void dusk()\n    { \n        Console.WriteLine(\"Access denied\"); \n        \n    }\n    \n}</code></pre>\n\n<p><br>\n<br>\n<strong>Code Snippet:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>if (DateTime.Now.Hour &lt; 18) \n{ \n    info = new InformDelegate(disp.dawn); \n    \n} \nelse \n{ \n    info = null; \n    \n}</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>if (DateTime.Now.Hour &lt; 8) \n{ \n    info = new InformDelegate(disp.dusk); \n    \n} \nelse \n{ \n    info = null; \n    \n}</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>if (DateTime.Now.Hour &lt; 8) \n{ \n    info = new InformDelegate(disp.dawn); \n    \n} \nelse \n{ \n    info = null; \n    \n}</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>if (Hour &lt; 18) \n{ \n    info = new InformDelegate(disp.dawn); \n    \n} \nelse \n{ \n    info = null; \n    \n}</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1418957,"option":"1","correct":true},{"id":1418958,"option":"2","correct":false},{"id":1418959,"option":"3","correct":false},{"id":1418960,"option":"4","correct":false}]},{"q":"<p>What will be the output of the following C#Â  code?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;         \n\ndelegate void hack_delegate();\n\nclass Hackerearth \n{    \n    public static void Main() \n    {    \n        hack_delegate h1 = new hack_delegate(Hack.hack_opr1);    \n        hack_delegate h2 = new hack_delegate(Hack.hack_opr2);    \n        hack_delegate h3 = h1 + h2;    \n        hack_delegate h4 = h2 + h1 - h3;    \n        \n        h3();    \n        h4();    \n        \n    }    \n}  \n\nclass Hack \n{    \n    static public void hack_opr1() \n    {    \n        Console.WriteLine(\"hi\");    \n    }    \n    static public void hack_opr2() \n    {    \n        Console.WriteLine(\"hello\");    \n    }    \n}    \n</code></pre>\n\n<p>Â </p>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hi\nhello\nhello\nhi</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hi\nhello\n</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hi\nhello\nhi\nhello\n</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hello\nhi</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419067,"option":"1","correct":true},{"id":1419068,"option":"2","correct":false},{"id":1419069,"option":"3","correct":false},{"id":1419070,"option":"4","correct":false}]},{"q":"<p>What will be the output of the following C# code?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\ndelegate void function2(ref string obj);\nclass delegates_events\n{\n    public static void function_inner( ref string xyz)\n    {\n        xyz = xyz.Substring( 12, xyz.Length - 12);\n    }\n}\n\nclass Main_Demo\n{\n    static void Main(string[] args)\n    {\n        function2 obj2;\n        string obj = \"Welcome to the world of peace\";\n        obj2= delegates_events.function_inner;\n        obj2(ref obj);\n        Console.WriteLine(obj);\n    }\n}</code></pre>\n\n<p><strong>Output:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>the world of peace</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Welcome to</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Welcome to th</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>he world of peace</code></pre>\n\t</li>\n</ol>","a":[{"id":1418972,"option":"1","correct":false},{"id":1418973,"option":"2","correct":false},{"id":1418974,"option":"3","correct":false},{"id":1418975,"option":"4","correct":true}]},{"q":"<p>In the C# code snippet given below, which of the following syntaxes can be used in place of XXX to produce output as follows?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\npublic class Hack\n{\n\tpublic static void Main()\n\t{\n\t    System.Text.StringBuilder s = new System.Text.StringBuilder(\"Rats: they like fish\");\n\t    XXX\n        System.Console.WriteLine(s.ToString());\n\t    \n\t}\n}\n</code></pre>\n\n<p><br>\n<br>\n<strong>Output</strong></p>\n\n<pre class=\"prettyprint\"><code>Cats: they like fish</code></pre>\n\n<p><br>\n<br>\n<br>\n<strong>Syntaxes:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>s[0] = 'C';</code></pre>\n\n\t<p>Â </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>s[0].replace = 'C';</code></pre>\n\n\t<p>Â </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>s.Replace(s[0]) = 'C';</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419492,"option":"1","correct":true},{"id":1419493,"option":"2","correct":false},{"id":1419494,"option":"3","correct":false},{"id":1419495,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the C# code snippet given below?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System; \n \nnamespace AbstractClassDemo \n{ \n    abstract class Dog \n    { \n        \n    } \n    class Program \n    { \n        static void Main(string[] args) \n        { \n            Dog dog = new Dog(); \n            \n        } \n        \n    } \n}</code></pre>\n\n<p>Â </p>","a":[{"id":1419612,"option":"It will throw an error","correct":true},{"id":1419613,"option":"It will create an instance of the class Dog","correct":false},{"id":1419614,"option":"It will create a non abstract object of class Dog","correct":false},{"id":1419615,"option":"None of these","correct":false}]},{"q":"<p>In C#, if you are working on Events and you subscribe to an event that is published by another class when you want to write custom code that is called when that event is raised and you have aÂ <em>Form1.Designer.cs</em> file in your project, then which of the following statements is correct about the code snippet given below?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>private void Form1_Load(object sender, System.EventArgs e)\n{\n    this.Load += new System.EventHandler(this.Form1_Load); \n}</code></pre>\n\n<p><br>\n<br>\n<strong>Statements:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>The declared event handler method will be called when the form class raises the load event.</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>The line of code required to subscribe to the event is also automatically generated in the InitializeComponent method in the Form1.Designer.cs file.</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>\n\n<p>Â </p>","a":[{"id":1419022,"option":"Only 1","correct":false},{"id":1419023,"option":"Only 2","correct":false},{"id":1419024,"option":"1 and 2","correct":true},{"id":1419025,"option":"None of these","correct":false}]},{"q":"<p>Which of the following statementsÂ is correct about line number <strong>6</strong>Â in the C# code snippet given below:</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>class Program  // line 1\n{\n    static void Main(string[] args)   // line 2\n    {\n        int A = 250;   // line 3\n        double B = 25.0;    // line 4\n        double C = A;   // line 5\n        int D = (int) B;   // line 6\n        \n    }\n}</code></pre>\n\n<p>Â </p>\n\n<p><strong>Statements:</strong></p>\n\n<ol>\n\t<li>(int) should not be included in the parenthesis<br>\n\tÂ </li>\n\t<li>The data type 'int' is not required for D because of the (int) cast<br>\n\tÂ </li>\n\t<li>The conversion will result in a loss of data</li>\n</ol>","a":[{"id":1419392,"option":"1","correct":false},{"id":1419393,"option":"2","correct":false},{"id":1419394,"option":"3","correct":true},{"id":1419395,"option":"None of these","correct":false}]},{"q":"<p>John is coding using C# and has written the following code snippet. Then which of the following are valid inferences that can be made with respect to the given code snippet?</p>\n\n<p><strong>Code</strong>:</p>\n\n<pre class=\"prettyprint\"><code>class Test\n{\n static void Main()\n {\n int[] nums = Enumerable.Range(0, 1000000).ToArray();\n long total = 0;\n Parallel.For&lt;long&gt;(0, nums.Length, () =&gt; 0, (j, loop, subtotal) =&gt;\n {\n subtotal += nums[j];\n return subtotal;\n },\n (x) =&gt; Interlocked.Add(ref total, x)\n );\n\n Console.WriteLine(\"The total is {0:N0}\", total);\n Console.WriteLine(\"Press any key to exit\");\n Console.ReadKey();\n }\n}</code></pre>","a":[{"id":1418772,"option":"The thread-local variable is initialized to zero","correct":true},{"id":1418773,"option":"The generic type argument is a reference type","correct":false},{"id":1418774,"option":"The generic type argument is a user-defined value type.","correct":false},{"id":1418775,"option":"None of these","correct":false}]},{"q":"<p>In C#, if you are required to implement the following code, then which of these statements about this code is correct?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>public class DelegateOperation\n{\n    public delegate void CompleteOperationCallback(bool answer);\n    public void OperationExecution(CompleteOperationCallback, methodToBeCalledOperationTerminated)\n    {\n        bool answer=false;\n        methodToBeCalledOperationTerminated.Invoke(answer); \n    } \n}\n\npublic class Program_Client\n{\n    DelegateOperation operationObject;\n    public Client()\n    {\n        operationObject=new DelegateOperation();\n        operationObject.OperationExecution(OperationTerminated);\n    }\n    public void OperationTerminated(bool ReceivedAnswer)\n    { // Log operation answer \n    \n    }\n}</code></pre>\n\n<p><strong>Statements:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>There is no tight coupling between the DelegateOperation class and the Program_Client class</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>There is a tight coupling between the DelegateOperation class and the Program_Client class</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>If any other class needs to use the DelegateOperation class functionality, there is no change in theÂ DelegateOperation class, and we need not rebuild it.</code></pre>\n\t</li>\n</ol>","a":[{"id":1419012,"option":"Both 1 and 2","correct":false},{"id":1419013,"option":"Both 2 and 3","correct":false},{"id":1419014,"option":"Both 1 and 3","correct":true},{"id":1419015,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following C# code?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\nclass hack1\n\n{\n\tvirtual public void h()\n\t{\n\t\tConsole.WriteLine(\"hi\");\n\t}\n}\n\nclass hack2 : hack1\n{\n\t\n\t new public void h()\n\t{\n\t\tConsole.WriteLine(\"hello\");\n\t}\n}\n\nclass Hack {\n\t\n\tpublic static void Main()\n\t{\n\t\t\n\t\thack2 h1 = new hack2();\n\t\t\n\t\th1.h();\n\t\t\n\t\thack1 h2 = new hack2();\n\t\t\n\t\th2.h();\n\t\t\n\t}\n}</code></pre>\n\n<p><br>\n<br>\n<strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hello\nhi\n</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hello\nhello\n</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hi\nhi</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419347,"option":"2","correct":false},{"id":1419348,"option":"3","correct":false},{"id":1419349,"option":"1","correct":true},{"id":1419350,"option":"The code does not produce any output","correct":false}]},{"q":"<p>In the C# code snippet given below, which of the following syntaxes can be used in place of XXX to remove \"Zoey\" from the collection?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nusing System.Collections.ObjectModel;\npublic class Demo\n{\n    public static void Main()\n    {\n        Collection&lt;string&gt; dog = new Collection&lt;string&gt;();\n        dog.Add(\"Zoey\");\n        dog.Add(\"Jake\");\n        dog.Add(\"Maya\");\n        dog.Add(\"Tucker\");\n        XXX\n        Display(dog);\n        \n    }\n    private static void Display(Collection&lt;string&gt; cs)\n    {\n        Console.WriteLine();\n        foreach( string item in cs )\n        {\n            Console.WriteLine(item);\n            \n        }\n        \n    }\n}</code></pre>\n\n<p>Â </p>\n\n<p><strong>Syntaxes:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>dog.RemoveAt(0);</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>dog.ClearAt(0);</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>dog.Remove(\"Zoey\");</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419592,"option":"1 and 2","correct":false},{"id":1419593,"option":"2 and 3","correct":false},{"id":1419594,"option":"1 and 3","correct":true},{"id":1419595,"option":"All of these","correct":false}]},{"q":"<p>Which line in the C# code snippet given below will produce an error?<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;  // line 1\npublic class SealedClass  // line 2\n{\n    public int a;  // line 3\n    public int b;  // line 4\n}\nclass SealedTest  // line 5\n{\n    static void Main()  // line 6\n    { \n        SealedClass obj = new SealedClass();  // line 7\n        obj.a = 40;  // line 8\n        obj.b = 80;  // line 9\n        Console.WriteLine(\"x = {0}, y = {1}\", obj .a, obj .b);  // line 10\n        Console.ReadLine();  // line 11\n    }\n}</code></pre>","a":[{"id":1419152,"option":"Line 7","correct":false},{"id":1419153,"option":"Line 10","correct":false},{"id":1419154,"option":"Line 2","correct":false},{"id":1419155,"option":"The code doesn't contain any error","correct":true}]},{"q":"<p>Which of the following statementsÂ is incorrect about the class <strong>Fun</strong> in the C# code snippet given below?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>public static class Fun\n{\n    public static void fun2()\n    {\n        Console.WriteLine(\"Welcome to Hogwarts!\");\n        \n    }\n}</code></pre>\n\n<p><br>\n<br>\n<strong>Statements</strong>:</p>\n\n<ol>\n\t<li>\n\t<p>The class Fun can only have static members.Â </p>\n\t</li>\n\t<li>\n\t<p>The class Fun cannot be instantiated.</p>\n\t</li>\n\t<li>\n\t<p>The class Fun can contain instance constructors.</p>\n\t</li>\n\t<li>\n\t<p>Only 1 copy of the class Fun exists in the memory.</p>\n\t</li>\n</ol>","a":[{"id":1419387,"option":"1","correct":false},{"id":1419388,"option":"2","correct":false},{"id":1419389,"option":"3","correct":true},{"id":1419390,"option":"4","correct":false}]},{"q":"<p>What is the output of the following C# code snippet?<br>\n<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\nclass hack1\n{\n    public hack1()\n    {\n        Console.WriteLine(\"Hi from Hackerearth\");\n        \n    }\n    public void hack_print()\n    {\n        Console.WriteLine(\"Hi\");\n        \n    }\n    \n}\nclass hack2 : hack1\n{\n    public hack2()\n    {\n        Console.WriteLine(\"Hello from Hackerearth\");\n        \n    }\n    public new void hack_print()\n    {\n        Console.WriteLine(\"Hello\");\n        \n    }\n    \n}\nclass Hackster\n{\n    public static void Main(string[] args)\n    {\n        hack2 h2 = new hack2();\n        hack1 h1 = h2;\n        h1.hack_print();\n    }\n    \n}\n</code></pre>\n\n<p><br>\n<strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hi from Hackerearth\nHi\nHello from Hackerearth\n</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hello from Hackerearth\nHi from Hackerearth\nHi</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hi from Hackerearth\nHello from Hackerearth\nHi</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hello from Hackerearth\nHello\nHi from Hackerearth</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419332,"option":"1","correct":false},{"id":1419333,"option":"2","correct":false},{"id":1419334,"option":"3","correct":true},{"id":1419335,"option":"4","correct":false}]},{"q":"<p>What will be the output of the C# code snippet given below.</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\npublic class TopClass \n{ \n    public TopClass() \n    { \n        Console.WriteLine(\"First Constructor.\"); \n        \n    } \n    public void print() \n    { \n        Console.WriteLine(\"Top Class.\"); \n        \n    } \n} \npublic class DownClass: TopClass \n{ \n    public DownClass() \n    { \n        Console.WriteLine(\"Second Constructor.\"); \n        \n    } \n    public static void Main() \n    { \n        DownClass obj= new DownClass(); \n        obj.print(); \n        \n    } \n}</code></pre>\n\n<p>&nbsp;</p>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>First Constructor.\nTop Class.\nSecond Constructor.</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Top Class.\nFirst Constructor.\nSecond Constructor.</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>First Constructor.\nSecond Constructor.\nTop Class.</code></pre>\n\t</li>\n</ol>","a":[{"id":1419287,"option":"1","correct":false},{"id":1419288,"option":"2","correct":false},{"id":1419289,"option":"3","correct":true},{"id":1419290,"option":"The code gives Compile-Time Error","correct":false}]},{"q":"<p>You are writing a Parallel.ForEach loop with partition-local variables using C# (.NET) on your computer system. Then what can you use in place of XXX in code given below to successfully complete the action in the above context?</p>\n\n<p><strong>Code</strong>:</p>\n\n<pre class=\"prettyprint\"><code>using System;\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nclass Test\n{\nstatic void Main()\n{\nint[] nums = Enumerable.Range(0, 1000000).ToArray();\nlong total = 0;\nParallel.ForEach&lt;int, long&gt;(nums, \n() =&gt; 0,\n(j, loop, subtotal) =&gt; \n{\nsubtotal += j;\nreturn subtotal; \n},\nXXX\nConsole.WriteLine(\"The total from Parallel.ForEach is {0:N0}\", total);\n}\n}</code></pre>\n\n<p><strong>Options</strong>:</p>\n\n<p>1</p>\n\n<pre class=\"prettyprint\"><code>(finalResult) =&gt; Interlocked.Add(ref total, finalResult)\n);</code></pre>\n\n<p>2</p>\n\n<pre class=\"prettyprint\"><code>(finalResult) =&gt; Interlock.Add(ref total, finalResult)\n);</code></pre>\n\n<p>3</p>\n\n<pre class=\"prettyprint\"><code>(finalResult) =&gt; Interlocked.Add(ref total, finalresult)\n);</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1418802,"option":"1","correct":true},{"id":1418803,"option":"2","correct":false},{"id":1418804,"option":"3","correct":false},{"id":1418805,"option":"None of these","correct":false}]},{"q":"<p>What will be the output of the given code snippet?</p>\n\n<p><strong>Code</strong>:</p>\n\n<pre class=\"prettyprint\"><code>var source = Enumerable.Range(1, 10000);\n\nvar evenNums = from num in source.AsParallel()\nwhere num % 2 == 0\nselect num;\nConsole.WriteLine(\"{0} even numbers out of {1} total\", evenNums.Count(), source.Count());</code></pre>","a":[{"id":1418782,"option":"5000 even numbers out of 10000 total","correct":false},{"id":1418783,"option":"1000 even numbers out of 10000 total","correct":false},{"id":1418784,"option":"Runtime error","correct":false},{"id":1418785,"option":"Compilation error","correct":true}]},{"q":"<p>What is the output of the following C# code?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\nclass Hack\n{\n    static void Main(string[] args)\n    {\n        try\n        {\n            Console.WriteLine(\"Hi\");\n            \n        }\n        catch (IndexOutOfRangeException)\n        {\n            Console.WriteLine(\"hackerearth\");\n        } \n        catch (ArgumentNullException)\n        {\n            Console.WriteLine(\"hello\");\n        }\n        finally\n        {\n            Console.WriteLine(\"bye\");\n        }\n    }\n}\n</code></pre>\n\n<p>Â </p>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hi\nbye\n</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hi\nhello\nbye\n</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hi\nhackerearth\nbye\n</code></pre>\n\n\t<p><br>\n\tÂ </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hi\nhackerearth\nhello\nbye\n</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419642,"option":"4","correct":false},{"id":1419643,"option":"2","correct":false},{"id":1419644,"option":"1","correct":true},{"id":1419645,"option":"3","correct":false}]},{"q":"<p>You need to declare a class 'A' in your C# implementation such that it cannot be used as a base class. Then which of the given declarations of '<em>A</em>' is the most appropriate to achieve your objective?</p>","a":[{"id":1418762,"option":"public sealed class A { }","correct":true},{"id":1418763,"option":"public abstract class B { }","correct":false},{"id":1418764,"option":"public virtual class A { }","correct":false},{"id":1418765,"option":"private abstract class A { }","correct":false}]},{"q":"<p>What will be the output of the following <strong>C#</strong> code?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\nclass Hackerearth\n{\n    static void Main()\n    {\n        unsafe\n        {\n            Hacker h1;\n            Hacker h2;\n                \n            Hacker* hr1 = &amp;h1;\n            Hacker* hr2 = &amp;h2;\n\n\t\t\t(*hr1).Hacks = 55;\n\t\t\t(*hr1).Hacker_name = \"Alice\";\n\t\t\t\n\t\t\t(*hr2).Hacks = (*hr1).Hacks;\n\t\t\t(*hr2).Hacker_name = \"alice\";\n\t\t\t\n\t\t\tConsole.WriteLine((*hr1).Hacks == (*hr2).Hacks);\n\t\t\tConsole.WriteLine((*hr1).Hacker_name == (*hr2).Hacker_name);  \n        }    \n    }    \n} \n    \n\nstruct Hacker\n{\n    public int Hacks\n    {\t\n        get;\n\t    set;\n\t}\n\tpublic string Hacker_name\n\t{\n\t    get;\n\t    set; \n\t}\n}; </code></pre>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>True\nFalse</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>True\nTrue</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>False\nFalse</code></pre>\n\t</li>\n</ol>","a":[{"id":1418982,"option":"1","correct":false},{"id":1418983,"option":"2","correct":false},{"id":1418984,"option":"3","correct":false},{"id":1418985,"option":"Compilation error","correct":true}]},{"q":"<p>Which of these lines of code produces a compiler error when the code snippet given below is executed:</p>\n\n<pre class=\"prettyprint\"><code>public class SampleClass : IControl, ISurface //L1\n{\n void IControl.Paint()\n {\n System.Console.WriteLine(\"IControl.Paint\");\n }\n void ISurface.Paint()\n {\n System.Console.WriteLine(\"ISurface.Paint\");\n }\n}\nSampleClass obj = new SampleClass();\nobj.Paint(); //L2\nIControl c = obj;\nc.Paint(); //L3\nISurface s = obj;\ns.Paint(); //L4</code></pre>\n\n<p>Â </p>","a":[{"id":1419627,"option":"L1","correct":false},{"id":1419628,"option":"L2","correct":true},{"id":1419629,"option":"L3","correct":false},{"id":1419630,"option":"L4","correct":false}]},{"q":"<p>Determine the output of the C# code snippet given below:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\nclass Hackerearth\n{\n    static void hack_func(ref int[] h)\n    {\n        for (int hack_itr = 0; hack_itr &lt; h.Length; hack_itr=hack_itr+2)\n        {\n            h[hack_itr] = h[hack_itr] + 15;\n        }\n        Console.WriteLine(string.Join(\",\", h));\n    }\n    \n    static void Main(string[] args)\n    { \n        int[] hack = new int[] {5,8,4,7,9 };\n        hack_func(ref hack );\n    }\n}</code></pre>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>20,23,19,22,24</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>5,8,4,7,9</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>20,8,19,7,24</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>5,23,4,22,9</code></pre>\n\t</li>\n</ol>","a":[{"id":1419257,"option":"1","correct":false},{"id":1419258,"option":"2","correct":false},{"id":1419259,"option":"3","correct":true},{"id":1419260,"option":"4","correct":false}]},{"q":"<p>John is making an application in ASP.NET. He wants to know which request from the following options is sent from a client to a server from the same page that the user is working on?</p>","a":[{"id":498228,"option":"Postback","correct":true},{"id":498229,"option":"Callback","correct":false},{"id":498230,"option":"Payload","correct":false},{"id":498231,"option":"Bundling","correct":false}]},{"q":"<p>What will be theÂ output of the following C# code?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\nclass Hackerearth \n{\n    static public void Main()\n\t{\n\t\tvar hack = \"23\";\n\t\t\n\t\tswitch (hack) {\n\n\t\tcase \"14\":\n\t\t\tConsole.WriteLine(\"hi\");\n\t\t\tbreak;\n\t\t\t\n\t\tcase \"15\":\n\t\t\tConsole.WriteLine(\"hello\");\n\t\t\tbreak;\n\t\t\t\n\t\tcase \"20\":\n\t\t    Console.WriteLine(\"hack\");\n\t\t\tbreak;\n\t\t\t\n\t\tcase \"23\":\n\t\t\tConsole.WriteLine(\"Hackerearth\");\n\n\t\t\tgoto case \"15\" ;\n\n\t\tdefault:\n\t\t\tConsole.WriteLine(\"hello world\");\n\t\t\tbreak;\n\t\t}\n\t}\n}\n</code></pre>\n\n<p><br>\n<strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hackerearth\nhello\n</code></pre>\n\t<br>\n\tÂ </li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hackerearth\n</code></pre>\n\t<br>\n\tÂ </li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hackerearth\nhello world</code></pre>\n\n\t<p>Â </p>\n\t</li>\n</ol>","a":[{"id":1419122,"option":"2","correct":false},{"id":1419123,"option":"3","correct":false},{"id":1419124,"option":"1","correct":true},{"id":1419125,"option":"The code gives a compilation error","correct":false}]},{"q":"<p>In ASP.NET, the output caching is performed using the parameters Duration and VaryByParam.You have visited an online grocery store page ProductID=Groceries and groceries products are returned. When the VaryByParam property is set to \"NONE\" and you visit ProductID=\"fruits\", what is going to be the return value?&nbsp;&nbsp;</p>","a":[{"id":498320,"option":"Fruit products","correct":false},{"id":498321,"option":"Grocery products","correct":true},{"id":498322,"option":"All the products","correct":false},{"id":498323,"option":"None of these","correct":false}]}]
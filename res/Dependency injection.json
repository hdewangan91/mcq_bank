[{"q":"<p>John is working with ASP.NET templates to configure pipelines. He wants to use the configure method to specify how an&nbsp;application responds to HTTP requests then which of these can be used for configuration in this scenario?</p>\n\n<ol>\n\t<li>Developer Exception Page</li>\n\t<li>Exception handler</li>\n\t<li>Static files</li>\n</ol>","a":[{"id":738157,"option":"Only 1 and 2","correct":false},{"id":738158,"option":"Only 1 and 3","correct":false},{"id":738159,"option":"Only 2 and 3","correct":false},{"id":738160,"option":"All of these","correct":true}]},{"q":"<p>During development, you often perform dependency injection as it makes our code loosely coupled and easier for testing. Which of the following statements would you say is false about Dependency Injection?</p>\n\n<p><strong>Statements</strong></p>\n\n<ol>\n\t<li>With Dependency Injection, objects are expected to acquire their dependencies on their own.</li>\n\t<li>Dependency Injection decreases system maintainability because logic changes in the domain affect the modules.</li>\n\t<li>Dependency Injection helps in decoupling application objects from each other.</li>\n\t<li>With Dependency Injection, objects are given their dependency by some third party that coordinates each object in the system.</li>\n</ol>","a":[{"id":1655549,"option":"1","correct":false},{"id":1655550,"option":"2","correct":true},{"id":1655551,"option":"3","correct":false},{"id":1655552,"option":"4","correct":false}]},{"q":"<p>Ben's team wants to DI (Dependency Injection) using the <em>Spring</em> framework. How will they implement this?</p>","a":[{"id":1655545,"option":"By Abstract factory pattern","correct":false},{"id":1655546,"option":"By  Service locator pattern","correct":true},{"id":1655547,"option":"By Singleton pattern","correct":false},{"id":1655548,"option":"By Factory pattern","correct":false}]},{"q":"<p>You need to use the <em>Spring</em> module that provides the capability of Dependency Injection. Which one of these would you go for?</p>","a":[{"id":1655541,"option":"Spring Web","correct":false},{"id":1655542,"option":"Data Access","correct":false},{"id":1655543,"option":"Core Container","correct":true},{"id":1655544,"option":"AOP","correct":false}]},{"q":"<p>Ben works as an SDE for ABC Pvt. Ltd. His company recently received a contract for the development of a real-time collaborative text editor that syncs across multiple connected devices. Users can join a room by scanning the QR code on the page and collectively make and share notes in real-time. In <em>Spring,</em> Dependency Injection is a design pattern that removes the dependency from the programming code. Which of these is NOT a feature of Spring Dependency Injection that makes it so useful?</p>","a":[{"id":1655537,"option":"It stores object states in file system.","correct":true},{"id":1655538,"option":"It makes the programming code loosely coupled","correct":false},{"id":1655539,"option":"It makes the code easier to test","correct":false},{"id":1655540,"option":"It helps in decoupling application objects from each other.","correct":false}]},{"q":"<p>In Angular, you are working on Dependency injection. You are trying to create an injectable service. You are required to generate a class named <strong>MymoduleService</strong> in the folder<strong> src/app/module1</strong> and you have implemented the following Angular CLI command:</p>\n\n<p><strong>Angular CLI command</strong></p>\n\n<pre class=\"prettyprint\"><code>ng generate service module1/mymodule</code></pre>\n\n<p>Now, you have observed that this command creates the following default <strong>MyModuleService</strong></p>\n\n<p><strong>src/app/module1/mymodule.service.ts</strong></p>\n\n<pre class=\"prettyprint\"><code>import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MymoduleService {\n  constructor() { }\n}</code></pre>\n\n<p>Which of the following specifies that Angular can use this class in the DI system in this scenario?</p>","a":[{"id":1582646,"option":"Constructor(mymoduleservice:MymoduleService)","correct":false},{"id":1582647,"option":"root","correct":false},{"id":1582648,"option":"@Injectable decorator","correct":true},{"id":1582649,"option":"MymoduleService","correct":false}]},{"q":"<p>In Java EE7, you are working on Context and Dependency Injection (CDI) which allows you to manage the lifecycle of stateful components via domain-specific lifecycle contexts and inject components (services) into client objects in a type-safe way. Now to define a bean you are supposed to give the bean a scope. Which of the following statements is correct regarding scopes used by CDI?<br>\n<br>\n<br>\n<strong>Statements:</strong></p>\n\n<ol>\n\t<li>Beans of contextual scope lie in the context having life-cycle determined by JEE specifications<br>\n\t </li>\n\t<li>The @Dependent is a contextual scope<br>\n\t </li>\n\t<li>Beans using scopes always need to be serialized.</li>\n</ol>","a":[{"id":1487374,"option":"1 and 2","correct":false},{"id":1487375,"option":"2 and 3","correct":false},{"id":1487376,"option":"1 and 3","correct":false},{"id":1487377,"option":"only 1","correct":true}]},{"q":"<p>Dependency Injection is a principle that makes the code cleaner and also decoupling becomes more effective when objects are provided with their dependencies. Consider you are working on a Spring Boot application. Now if you are required to use the principle of dependency injection, then which of the following statements is correct?</p>\n\n<p> </p>\n\n<p><strong>Statements:</strong></p>\n\n<ol>\n\t<li>Constructor-based dependency injection is implemented by the container invoking a constructor with a number of arguments, each representing a dependency.<br>\n\t </li>\n\t<li>Generally the constructor-based dependency injection is used for mandatory dependencies.<br>\n\t </li>\n\t<li>Generally the setter-based dependency injection is used for optional dependencies.</li>\n</ol>","a":[{"id":1557864,"option":"1 and 2","correct":false},{"id":1557865,"option":"2 and 3","correct":false},{"id":1557866,"option":"1 and 3","correct":false},{"id":1557867,"option":"All of these","correct":true}]},{"q":"<p>In Angular 4, which of the following properties is used by an alias provider to map one token to another to ensure dependency injection?</p>","a":[{"id":643698,"option":"useFactory","correct":false},{"id":643699,"option":"useClass","correct":false},{"id":643700,"option":"useValue","correct":false},{"id":643701,"option":"useExisting","correct":true}]},{"q":"<p>In Angular 2, which of the following basic steps of the <strong>dependency injection </strong>are correct:</p>\n\n<pre class=\"prettyprint\"><code>1. A class with @Injectable () should send the data that it is to be injected in “UserService”.\n2. A class with @Injectable () should send the data that it is to be injected in “User_Service”.\n3. A class with a constructor that accepts a type to be injected.\n4. A class with a destructor that accepts a type to be injected.\n</code></pre>","a":[{"id":388686,"option":"1 and 2","correct":false},{"id":388687,"option":"1, 2, 3, and 4","correct":false},{"id":388688,"option":"1 and 3","correct":true},{"id":388689,"option":"2 and 4","correct":false}]},{"q":"<p>In Angular 2, which of the following is used to create instances of dependencies?</p>","a":[{"id":388674,"option":"Injector","correct":true},{"id":388675,"option":"Provider","correct":false},{"id":388676,"option":"Dependency","correct":false},{"id":388677,"option":"Pipes","correct":false}]},{"q":"<p>In the Angular-Dependency Injection mechanism, which of the following components cannot be injected into each other as dependencies?</p>","a":[{"id":611943,"option":"Value","correct":true},{"id":611944,"option":"Service","correct":false},{"id":611945,"option":"Provider","correct":false},{"id":611946,"option":"None of these","correct":false}]}]
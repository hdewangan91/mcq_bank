[{"q":"<p>Mark is working on Components in VueJS. He wants to create 2 basic components for his web application. Which of the following steps are correct&nbsp;to create his required 2 components.&nbsp;<br>\n<strong>Steps</strong></p>\n\n<ol>\n\t<li>Two Vue instances are created with two different div ids in .js file.</li>\n\t<li>Once a component is created, the name of the component becomes the custom element.</li>\n\t<li>Common components can&nbsp;be used with both view instances.</li>\n\t<li>Adding a template to the code will register as a global component.</li>\n</ol>","a":[{"id":1711281,"option":"1, 2 and 3","correct":false},{"id":1711282,"option":"2, 3 and 4","correct":false},{"id":1711283,"option":"1, 3 and 4 ","correct":false},{"id":1711284,"option":"All the above","correct":true}]},{"q":"<p>Lisa is using VueJS Mixins. She is using app.config.optionMergeStrategies,&nbsp;then the merge strategy receives the value of that option defined. Then what will be their first and second arguments?</p>","a":[{"id":1729269,"option":"Child and Parent Instances","correct":false},{"id":1729270,"option":"Parent and Child Instances","correct":true},{"id":1729271,"option":"Child instance and callback function","correct":false},{"id":1729272,"option":"Parent instance and callback function","correct":false}]},{"q":"<p>John is working on Mixins in VueJS. He wrote the following snippet where a mixin and the component itself contain overlapping options. There he used&nbsp;object merging concept. Then what will be the outcome of this mixin?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>var DataMixin = {\n  data: function () {\n    return {\n      message: 'Received',\n      foo: 'John'\n    }\n  }\n}\n\nnew Vue({\n  mixins: [DataMixin],\n  data: function () {\n    return {\n      message: 'Task Completed',\n      bar: 'def'\n    }\n  },\n  created: function () {\n    console.log(this.$data)\n  }\n})</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1729265,"option":"{ message: \"Task Completed\", foo: \"John\", bar: \"def\" }","correct":true},{"id":1729266,"option":"{ message: \"Received\", foo: \"John\", bar: \"def\" }","correct":false},{"id":1729267,"option":"{ message: \"Task Completed\", foo: \"John\", bar: \"indef\" }","correct":false},{"id":1729268,"option":"No Output","correct":false}]},{"q":"<p>John is working on Mixins in VueJS. Currently, he faced a situation where both mixins and components are overlapping. Then what will happen?</p>","a":[{"id":1727856,"option":"merging","correct":true},{"id":1727857,"option":"error","correct":false},{"id":1727858,"option":"priority to last","correct":false},{"id":1727859,"option":"priority to first","correct":false}]},{"q":"<p>Mark is working on VueJS on Routing. He is registering globals before guards using&nbsp;<code>router.beforeEach&nbsp;</code>to guard navigations either by redirecting it whenever navigation is triggered. Now he wants to&nbsp;abort the current navigation. He wants to change action&nbsp;if the browser URL was changed and it will be reset to that of the&nbsp;<code>from</code>&nbsp;route. Whichl of the arguments can he use?</p>","a":[{"id":1727840,"option":"next(false)","correct":true},{"id":1727841,"option":"next(error)","correct":false},{"id":1727842,"option":"next('/')","correct":false},{"id":1727843,"option":"next({ path: '/' })","correct":false}]},{"q":"<p>John is using routing in VueJS. Currently, he is using&nbsp;<code>$route</code>&nbsp;in his component to create&nbsp;a tight coupling with the route. This does&nbsp;limits the flexibility of the component as it can only be used on certain URLs. What is the alternate best way can John use?</p>","a":[{"id":1727679,"option":"mixins","correct":false},{"id":1727680,"option":"3rd party router","correct":false},{"id":1727681,"option":"props","correct":true},{"id":1727682,"option":"All the above","correct":false}]},{"q":"<p>Mark is exploring Routing in VueJS. Which of these options can he use to install a router library which can&nbsp;be used with VueJS?</p>","a":[{"id":1727671,"option":"Vue CLI","correct":false},{"id":1727672,"option":"CDN Link","correct":false},{"id":1727673,"option":"using npm","correct":false},{"id":1727674,"option":"All the above","correct":true}]},{"q":"<p>Mark is exploring Routing in VueJS. Which of these routers can't be used with VueJS?</p>","a":[{"id":1727667,"option":"Page.JS  ","correct":false},{"id":1727668,"option":"Director","correct":false},{"id":1727669,"option":"BrowserRouter","correct":true},{"id":1727670,"option":"Both 1 and 2","correct":false}]},{"q":"<p>Mark is working on VueJS directives. He wants to use the v-bind directive. Then which of the following is the v-bind directive can he use in his single page application?</p>","a":[{"id":1725789,"option":".camel","correct":false},{"id":1725790,"option":".prop","correct":false},{"id":1725791,"option":".attr","correct":false},{"id":1725792,"option":"All the above","correct":true}]},{"q":"<p>Lisa is working on VueJS directives. She wants to use a directive that can&nbsp;attach an event listener to the element. And this event type should be&nbsp;denoted by its argument. Then which of the directive she can use?</p>","a":[{"id":1725785,"option":"v-html","correct":false},{"id":1725786,"option":"v-for","correct":true},{"id":1725787,"option":"v-class","correct":false},{"id":1725788,"option":"v-show","correct":false}]},{"q":"<p>John is working on VueJS directives. He is building a dynamic menu list. For that, he has a requirement to conditionally render that element based on the truthy-ness of the expression value. Also, the element and its contained directives should be destroyed when toggled. When clicked on it should be re-constructed. Then what can John use for this requirement?</p>","a":[{"id":1725781,"option":"v-if and v-show","correct":false},{"id":1725782,"option":"v-if and v-else","correct":false},{"id":1725783,"option":"v-modal and v-show","correct":false},{"id":1725784,"option":"v-if","correct":true}]},{"q":"<p>Mark is working on VueJS directives, he is using v-show to toggles the element's&nbsp;<code>display</code>&nbsp;CSS property. What does this directive expect?</p>","a":[{"id":1724513,"option":"String","correct":false},{"id":1724514,"option":"Number","correct":false},{"id":1724515,"option":"null","correct":false},{"id":1724516,"option":"All the above","correct":true}]},{"q":"<p>John is working on VueJS Directives. He is building single-file components. He tried to use&nbsp;scoped styles but it wouldn't&nbsp;apply to any content inside the v-html directive he used.&nbsp;This is because HTML is not processed by Vue's template compiler. So John&nbsp;wants to target v-html content with scoped CSS, then what can John do to force it?&nbsp;&nbsp;</p>","a":[{"id":1724509,"option":"using CSS modules","correct":false},{"id":1724510,"option":"making global <style> element ","correct":false},{"id":1724511,"option":"Using manual scoping strategy","correct":false},{"id":1724512,"option":"All the above","correct":true}]},{"q":"<p>Mark is working on VueJS directives. He is currently updating the element's innerHTML using components. He wants to update content using directives. Which of the options can Mark use to modify the innerHTML of an element?&nbsp;</p>","a":[{"id":1724477,"option":"v-class:html","correct":false},{"id":1724478,"option":"v-html","correct":true},{"id":1724479,"option":"v-if and v-else","correct":false},{"id":1724480,"option":"v-model","correct":false}]},{"q":"<p>John is working on VueJS Directives. What&nbsp;contents when inserted will not be compiled as Vue templates?</p>","a":[{"id":1724304,"option":"Custom Components","correct":false},{"id":1724305,"option":"Vue HTML","correct":false},{"id":1724306,"option":"Plain HTML","correct":true},{"id":1724307,"option":"Both 1 and 2","correct":false}]},{"q":"<p>Mark is working on Directives using VueJS. He wants to use a directive that can toggle&nbsp;the selected&nbsp;element's display CSS property based on the truthy-ness of the expression value. Which directive can he use to trigger the transitions when its condition is applied?</p>","a":[{"id":1723925,"option":"v-on","correct":false},{"id":1723926,"option":"v-show","correct":true},{"id":1723927,"option":"v-if and v-else","correct":false},{"id":1723928,"option":"v-toggle","correct":false}]},{"q":"<p>John is working on Directives in VueJS. He wants to conditionally render a custom element he built based on the truthy-ness of given the expression value. Also, he&nbsp;wants his elements and their components to be destroyed and re-constructed as it toggles. Therefore the element is similar to&nbsp;a &lt;template&gt; element and&nbsp;its content can be extracted through&nbsp;the conditional block and the last requirement is that the directive should trigger&nbsp;transitions when its condition changes. Then which of the directives given can John choose according to the given requirements?</p>","a":[{"id":1723181,"option":"v-if","correct":true},{"id":1723182,"option":"v-model","correct":false},{"id":1723183,"option":"v-on","correct":false},{"id":1723184,"option":"v-class:classname","correct":false}]},{"q":"<p>Mark is working on VueJS on events. He wants to emit an event from the custom component to the parent which he created. He decided to use&nbsp;the&nbsp;<code>$emit</code>&nbsp;function. What are the arguments this emit function accepts?</p>","a":[{"id":1722977,"option":"action name and a value ","correct":true},{"id":1722978,"option":"callback function and a value","correct":false},{"id":1722979,"option":"component name and action name","correct":false},{"id":1722980,"option":"callback function and component name","correct":false}]},{"q":"<p>John is working on Events in VueJS. He is using v-on modifier for an element. He has a requirement where action&nbsp;should happen when the user clicks and triggers the handler, only if the&nbsp;<code>event.target</code>&nbsp;is the element itself. Which options can he use?</p>","a":[{"id":1722973,"option":"capture","correct":false},{"id":1722974,"option":"self","correct":true},{"id":1722975,"option":"prevent","correct":false},{"id":1722976,"option":"reload","correct":false}]},{"q":"<p>Ben is working on Events in vueJS. He has a requirement where on clicking an element he wants the&nbsp;default behavior of that element to happen immediately instead of waiting for the event.&nbsp;Also, he wants the optimize the&nbsp;performance for the scroll on mobile devices using the same property. Which of the options can he select?</p>","a":[{"id":1722969,"option":".passive","correct":true},{"id":1722970,"option":".mobile","correct":false},{"id":1722971,"option":".once","correct":false},{"id":1722972,"option":".prevent","correct":false}]},{"q":"<p>John is working on Events in VueJS. Now, he wants to implement a concept that requires event identifiers. Which of the following are event identifiers?</p>\n\n<p>&nbsp;</p>","a":[{"id":1722227,"option":".stop","correct":false},{"id":1722228,"option":".capture","correct":false},{"id":1722229,"option":".once","correct":false},{"id":1722230,"option":"All the above","correct":true}]},{"q":"<p>Mark is working on VueJS and he wants to make use of the concept where he can&nbsp;re-use&nbsp;a code that has to execute based on a event and also&nbsp;that any developer can use it afterward&nbsp;to manipulate the DOM?</p>","a":[{"id":1722223,"option":"v-on ","correct":true},{"id":1722224,"option":"v-model","correct":false},{"id":1722225,"option":"components","correct":false},{"id":1722226,"option":"mixins","correct":false}]},{"q":"<p>Ben is working on events in VueJS. Earlier, Ben used to create&nbsp;<em>event listeners</em>&nbsp;in JS, which used to wait for that event to occur and then execute a block of code. Now he wants to achieve the same task in&nbsp;Vue.js, but not by&nbsp;listening to an event. Then what can Ben do to get the specified task?</p>","a":[{"id":1722219,"option":"using v-on","correct":true},{"id":1722220,"option":"adding event listener","correct":false},{"id":1722221,"option":"creating separate method","correct":false},{"id":1722222,"option":"using mixins","correct":false}]},{"q":"<p>Mark is using Events in VueJS. He wants to listen directly to a native event on the root element of a custom&nbsp;component he created. Now in this&nbsp;case, which directive can he use?</p>","a":[{"id":1721479,"option":"v-on","correct":true},{"id":1721480,"option":"v-model","correct":false},{"id":1721481,"option":"v-class","correct":false},{"id":1721482,"option":"None of these","correct":false}]},{"q":"<p>John is working on Events in VueJS. He is developing a single-page application where he used the&nbsp;<code>v-model</code>&nbsp;on a component. As v-model uses&nbsp;<code>value</code>&nbsp;as the prop and&nbsp;<code>input</code>&nbsp;as the event. Here is the code snippet.</p>\n\n<pre class=\"prettyprint\"><code>Vue.component('hacker-checkbox', {\n  props: {\n    checked: Boolean\n  },\n  template: `\n    &lt;input\n      type=\"checkbox\"\n      v-bind:checked=\"checked\"\n      v-on:change=\"$emit('change', $event.target.checked)\"\n    &gt;\n  `\n})</code></pre>\n\n<p>But for some input types such as checkboxes and radio buttons he wants to use the&nbsp;<code>value</code>&nbsp;attribute for a&nbsp;different purpose in the backend. What should John do to avoid this conflict?</p>","a":[{"id":1721475,"option":" Using the model option","correct":true},{"id":1721476,"option":"Replacing v-model with v-bind","correct":false},{"id":1721477,"option":"Sub-divding the component into further components","correct":false},{"id":1721478,"option":"Using mixins","correct":false}]},{"q":"<p>Mark is working on Events using VueJS.&nbsp;He wrote a code logic&nbsp;that contains many event handlers. Since this&nbsp;will make the process&nbsp;complex as keeping the value of the&nbsp;<code>v-on</code>&nbsp;attribute isn’t feasible. So what should Ben do&nbsp;to overcome the drawback?</p>","a":[{"id":1720666,"option":"adding name of a method as input","correct":true},{"id":1720667,"option":"adding class to v-on directive","correct":false},{"id":1720668,"option":"using recursive input ","correct":false},{"id":1720669,"option":"changing from v-on to v-for","correct":false}]},{"q":"<p>Lisa is working with Events in VueJS. She wants to add a dynamic counter button and she wrote the following html code.</p>\n\n<pre class=\"prettyprint\"><code>&lt;div id=\"hacker\"&gt;\n  &lt;h1&gt;+1 this post&lt;/h1&gt;\n  &lt;button v-on:click=\"counter += 1\"&gt;+1&lt;/button&gt;\n  &lt;p&gt;You have +1 the post {{ counter }} times.&lt;/p&gt;\n&lt;/div&gt;</code></pre>\n\n<p>&nbsp;What should Lisa add for the v-on directive Vue code to make the given code work?</p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>var hacker = Vue.Create({\n  el: '#hacker',\n  data: {\n    counter: 0\n  }\n})</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>var hacker = new Vue({\n  el: '#hacker',\n  data: {\n    counter: 0\n  }\n})</code></pre>\n\n<p>&nbsp;</p>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>var hacker = Vue.Create({\n  el: '#hacker',\n  data: {\n    counter: 0\n  }\n  onclick: {\n    counter++\n  }\n})</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>var hacker = new Vue({\n  el: '#hacker',\n  data: {\n    counter: 0\n  }\n  onclick: {\n    counter++\n  }\n})</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1720658,"option":"1","correct":false},{"id":1720659,"option":"2","correct":true},{"id":1720660,"option":"3","correct":false},{"id":1720661,"option":"4","correct":false}]},{"q":"<p>Mark is working on Binding using VueJS. He wrote a code snippet&nbsp;to display a message using Data binding and wants to add inline styling to it.</p>\n\n<pre class=\"prettyprint\"><code>&lt;div v-bind:style = \"CODE\"&gt;{{title}}&lt;/div&gt;\ndata: {\n   title : \"Hackerearth\",\n   activeColor: 'blue',\n   fontSize :'30'\n}</code></pre>\n\n<p>The following code does change the message whenever the data object’s&nbsp;<code>msg</code>&nbsp;property gets modified. So what should John do to prevent the message from getting changed?</p>","a":[{"id":1720025,"option":"color: activeColor, fontSize: fontSize + 'px'","correct":true},{"id":1720026,"option":"color: data[1], fontSize: data[2] + 'px'","correct":false},{"id":1720027,"option":"color: data[2], fontSize: data[3] + 'px'","correct":false},{"id":1720028,"option":"color: data.activeColor, fontSize: data.fontSize + 'px'","correct":false}]},{"q":"<p>John is working on Binding using VueJS. He wants to display a message dynamic status message pulled from the database using Data binding, so he wrote the following code to display that status code in span.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>&lt;span v-bind:class&gt;Status: {{ msg }}&lt;/span&gt;</code></pre>\n\n<p>But the following code does change the message whenever the data object’s&nbsp;<code>msg</code>&nbsp;property gets modified i.e. status is not updating but still causes a refresh of the page. So what should John do to prevent this behavior in Vue?</p>","a":[{"id":1720021,"option":"By replacing with {{* msg }}","correct":true},{"id":1720022,"option":"By replacing with {{ msg:static }}","correct":false},{"id":1720023,"option":"By replacing with {v-bind:static{msg }}","correct":false},{"id":1720024,"option":"By replacing with {v-bind {msg }}","correct":false}]},{"q":"<p>Lisa is working on Binding using VueJS. After exploring v-bind directive, she found that v-bind works with custom components with some exceptions. Then if she uses the&nbsp;<code>class</code>&nbsp;attribute on a custom component, those classes will be added to which element?</p>","a":[{"id":1719267,"option":"component's root element","correct":true},{"id":1719268,"option":"component's parent element","correct":false},{"id":1719269,"option":"to document object","correct":false},{"id":1719270,"option":"none of the above","correct":false}]},{"q":"<p>Mark is working on Binding using VueJS. After exploring v-bind, he found that multiple classes can be toggled by having more fields in the object. Then in&nbsp;addition to the above statement, the&nbsp;<code>v-bind:class</code>&nbsp;directive can also co-exist with which of the given attributes?</p>","a":[{"id":1719263,"option":"class","correct":true},{"id":1719264,"option":"object","correct":false},{"id":1719265,"option":"parent element","correct":false},{"id":1719266,"option":"Both class and object","correct":false}]},{"q":"<p>John is working on Binding using VueJS. He wrote a&nbsp;method for a button that toggles based on the input. Now, he wants to&nbsp;toggle a class dynamically using v-bind. Now, what needs to be passed to the&nbsp;<code>v-bind:class</code>&nbsp;in order to toggle a class dynamically?</p>","a":[{"id":1719219,"option":"object","correct":true},{"id":1719220,"option":"class","correct":false},{"id":1719221,"option":"method","correct":false},{"id":1719222,"option":"data attribute","correct":false}]},{"q":"<p>Mark is working on Binding using VueJS. He wrote a small toggler CSS method for a class. Now, he wants to&nbsp;toggle a class in the list conditionally, then what will be the&nbsp;syntax using&nbsp;<code>v-bind:class</code>&nbsp;?</p>","a":[{"id":1719215,"option":"<div v-bind:class=\"[isActive ? activeClass : '', errorClass]\"></div>\r\n","correct":true},{"id":1719216,"option":"<div v-bind:class v-ifi:Active = activeClass></div>\r\n","correct":false},{"id":1719217,"option":"<div v-bind:class v-if:Active = activeClass v-else = errorClass></div>\r\n","correct":false},{"id":1719218,"option":"None of the above","correct":false}]},{"q":"<p>Mark is working on Binding using VueJS. He wants to&nbsp;apply multiple style objects to the same element array, then what will be the&nbsp;syntax for&nbsp;<code>v-bind:style</code>&nbsp;which will allow Mark&nbsp;to achieve this?</p>","a":[{"id":1719211,"option":"<div v-bind:style=\"[baseStyles, overridingStyles]\"></div>\r\n","correct":true},{"id":1719212,"option":"<div v-bind:style=\"[overridingStyles, baseStyles]\"></div>\r\n","correct":false},{"id":1719213,"option":"<div v-bind:style=\"[baseStyles]\"></div>\r\n","correct":false},{"id":1719214,"option":"Not possible to apply","correct":false}]},{"q":"<p>Ben is working on Binding using VueJS. He wants to use&nbsp;<code>v-bind</code>&nbsp;with inline styling as&nbsp;it’s a JavaScript object. Then to use inline CSS what style should Ben follow?</p>","a":[{"id":1719195,"option":"camel case","correct":true},{"id":1719196,"option":"regular css","correct":false},{"id":1719197,"option":"pascal case","correct":false},{"id":1719198,"option":"snake case","correct":false}]},{"q":"<p>Mark is working on Binding in VueJS. In his application, he has implemented data binding through which he can&nbsp;manipulate an element’s class list and its styles by&nbsp;calculating&nbsp;a final string with a custom expression that is error-prone. Then what can Ben use to overcome the mentioned drawback?</p>","a":[{"id":1715355,"option":"using v-bind directive  ","correct":true},{"id":1715356,"option":"implementing the eventListener interface to bind the element","correct":false},{"id":1715357,"option":"using element.dataBind() method","correct":false},{"id":1715358,"option":"using data attributes of the element","correct":false}]},{"q":"<p>Ben is working on Binding in VueJS. He is building a single-page application. He&nbsp;wants to implement data binding through which he wants to&nbsp;manipulate an element’s class list and its inline styles. As they are both attributes, then what can Ben use to handle them?</p>","a":[{"id":1715351,"option":" v-bind ","correct":true},{"id":1715352,"option":"v-model","correct":false},{"id":1715353,"option":"v-for","correct":false},{"id":1715354,"option":"v-class","correct":false}]},{"q":"<p>Lisa is working on Components in VueJS. She has created ButtonCounter Component.&nbsp;Now, she wants to use this component as a custom element under which&nbsp;Vue instance created with&nbsp;<code>new Vue?</code></p>","a":[{"id":1714350,"option":"root","correct":true},{"id":1714351,"option":"parent","correct":false},{"id":1714352,"option":"child","correct":false},{"id":1714353,"option":"self","correct":false}]},{"q":"<p>John is working on Componets in Vuejs. He wants to build a single-file component with a&nbsp;<code>.vue</code>&nbsp;extension file. Then what build tools can John use?&nbsp;</p>","a":[{"id":1714346,"option":"Webpack ","correct":false},{"id":1714347,"option":"Browserify","correct":false},{"id":1714348,"option":"Webpack and Browserify","correct":true},{"id":1714349,"option":"Babel","correct":false}]},{"q":"<p>Ben is working on Components in VueJs. He wants his&nbsp;component to be the starting point for rendering. Ben wants to configure his root element. Then the&nbsp;options need to pass to which method to configure the root component?</p>\n\n<p>&nbsp;</p>","a":[{"id":1714342,"option":"createApp()","correct":true},{"id":1714343,"option":"mountApp()","correct":false},{"id":1714344,"option":"directive()","correct":false},{"id":1714345,"option":"component()","correct":false}]},{"q":"<p>Lisa is working on Components in VueJS. She used <code>createApp</code>&nbsp;to configure the&nbsp;root component which is&nbsp;is used as the starting point for rendering when we&nbsp;mount&nbsp;a Vue application.&nbsp;He wrote the following snippet and wants to mount the root component, then what should she replace in the comment?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>const HackerComponent = {\n  /* options */\n}\nconst myapp = Vue.createApp(HackerComponent )\n//Comment</code></pre>","a":[{"id":1714338,"option":"myapp.exec('#myapp');","correct":false},{"id":1714339,"option":"myapp.exec('#HackerComponent');","correct":false},{"id":1714340,"option":"myapp.mount('#myapp');","correct":true},{"id":1714341,"option":"myapp.mount('#HackerComponent');","correct":false}]},{"q":"<p>Ben is working on Components in VueJS. He wants to register 'globals' of the application instance so&nbsp;that they can be used by components within that Vue app. He wrote the following snippet and wants to add a <em>FeatureComponent</em>, then what should he replace in the comment?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>const myapp = Vue.createApp({})\n//Comment\nmyapp.directive('focus', FocusDirective)\nmyapp.use(LocalePlugin)</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1714334,"option":"myapp.createomponent('Feature', FeatureComponent)","correct":false},{"id":1714335,"option":"myapp.component('Feature', FeatureComponent)","correct":true},{"id":1714336,"option":"FeatureComponent.component('myapp')","correct":false},{"id":1714337,"option":"FeatureComponent.createcomponent('myapp')","correct":false}]},{"q":"<p>Lisa is working on components in VueJS. She has already created a few components. She wants&nbsp;to register a new Vue component inside another component given below. From the given options, select the option through which she can achieve the result.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>export default {\n  el: '#oldelement'\n  //Code here\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1712793,"option":"components: {\r\n      'component-name'\r\n  }","correct":true},{"id":1712794,"option":"component : 'component-name' = fun();","correct":false},{"id":1712795,"option":"addComponent: {\r\n      'component-name'; }","correct":false},{"id":1712796,"option":"None of these","correct":false}]},{"q":"<p>Ben is working on Components using VueJS. He built&nbsp;a component, for which location in the application is not defined at build time and he wants the component to be instantiated and placed&nbsp;at runtime. Then which type of options&nbsp;Ben should go choose?</p>","a":[{"id":1711655,"option":"Basic Component","correct":false},{"id":1711656,"option":"Static Component","correct":false},{"id":1711657,"option":"Dynamic Component","correct":true},{"id":1711658,"option":"Runtime Component","correct":false}]},{"q":"<p>Lisa is working on Components in VueJS. She wants to develop single-page applications using various components. Then which of the following statements are true?&nbsp;<br>\n<strong>Statements</strong></p>\n\n<ol>\n\t<li>Components&nbsp;are reusable Vue instances with custom HTML elements.</li>\n\t<li>Components can be reused only&nbsp;2 times.</li>\n\t<li>Components can be used in another component, making it a child&nbsp;component.</li>\n\t<li>Methods, data, computed and watch can be used in components.</li>\n\t<li>Vue components can be defined only globally.</li>\n</ol>","a":[{"id":1711404,"option":"1, 3, 4 and 5","correct":false},{"id":1711405,"option":"2, 4 and 5","correct":false},{"id":1711406,"option":"1, 3 and 4 ","correct":true},{"id":1711407,"option":"All the above ","correct":false}]},{"q":"<p>What is the output of the given VueJS code snippet without any mouse interaction?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>&lt;html&gt;\n\n&lt;head&gt;\n    &lt;title&gt;VueJs Components&lt;/title&gt;\n    &lt;script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.3/vue.min.js\"&gt;\n    &lt;/script&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;div id=\"ct2\"&gt;\n        &lt;hackercomponent&gt;&lt;/hackercomponent&gt;\n    &lt;/div&gt;\n    &lt;div id=\"ct1\"&gt;\n        &lt;hackercomponent&gt;&lt;/hackercomponent&gt;\n    &lt;/div&gt;\n    &lt;script&gt;\n        Vue.component('hackercomponent', {\n            template: '&lt;div v-on:mouseover = \"changename()\" v-on:mouseout = \"originalname();\"&gt;&lt;h1&gt;Custom Component created by &lt;span id = \"name\"&gt;{{name}}&lt;/span&gt;&lt;/h1&gt;&lt;/div&gt;',\n            data: function () {\n                return {\n                    name: \"Mark\"\n                }\n            },\n            methods: {\n                changename: function () {\n                    this.name = \"Ben\";\n                },\n                originalname: function () {\n                    this.name = \"Mark\";\n                }\n            }\n        });\n        var vm = new Vue({\n            el: '#ct2'\n        });\n        var vm1 = new Vue({\n            el: '#ct1'\n        });\n    &lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<p><img alt=\"\" height=\"145\" src=\"https://he-s3.s3.ap-southeast-1.amazonaws.com/media/uploads/a8acf246-3590-4ab7-a6b1-356618755d0f.png\" width=\"661\"></p>\n\n<p><strong>2.</strong></p>\n\n<p><img alt=\"\" height=\"139\" src=\"https://he-s3.s3.ap-southeast-1.amazonaws.com/media/uploads/8cf22ac0-c4e0-4277-8a77-5fa60e1c2c42.png\" width=\"663\"></p>\n\n<p><strong>3.</strong></p>\n\n<p><img alt=\"\" height=\"145\" src=\"https://he-s3.s3.ap-southeast-1.amazonaws.com/media/uploads/184f949a-2586-4644-8524-ce8d100fc6cc.png\" width=\"655\"></p>\n\n<p><strong>4.</strong></p>\n\n<p><img alt=\"\" height=\"138\" src=\"https://he-s3.s3.ap-southeast-1.amazonaws.com/media/uploads/ebe4b381-6953-4ce3-ab73-7ae9388adacf.png\" width=\"661\"></p>","a":[{"id":1711285,"option":"1","correct":true},{"id":1711286,"option":"2","correct":false},{"id":1711287,"option":"3","correct":false},{"id":1711288,"option":"4","correct":false}]},{"q":"<p>Ben is using <em>VueJS</em> to build a web application for his organization. He observed that Vue is unable to detect any object property deletion or addition. He found that this issue is due to a JavaScript limitation. So what method should Ben use to add new root-level reactive properties in his web application?</p>","a":[{"id":1678441,"option":"Vue.set","correct":true},{"id":1678442,"option":"Vue Loader","correct":false},{"id":1678443,"option":"Vue.delete","correct":false},{"id":1678444,"option":"V-model","correct":false}]},{"q":"<p>Mary is using <em>VueJS</em> for her web application. She observed that there are memory leaks in her applications. After many checks, she found that this issue occurred due to using third-party libraries which she imported and they have created their own instances to manipulate the DOM. Now, what options can she use to solve the memory leak issue?</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>v-if</li>\n\t<li>destroy()</li>\n\t<li>Vue Router</li>\n\t<li>hide()</li>\n</ol>","a":[{"id":1678437,"option":"1 and 2","correct":false},{"id":1678438,"option":"2 and 3","correct":false},{"id":1678439,"option":"1 and 3","correct":false},{"id":1678440,"option":"2 and 4","correct":true}]},{"q":"<p>Lisa is using <em>VueJS</em> for her project. She wants to structure her logic as standalone functions and wants to be used across multiple components as configurations. Then which of the options can she use to achieve the mentioned requirement.</p>","a":[{"id":1670796,"option":"Options API","correct":false},{"id":1670797,"option":"Composition API","correct":true},{"id":1670798,"option":"Mixins","correct":false},{"id":1670799,"option":"Filters","correct":false}]},{"q":"<p>Ben is working on a web development project using VueJS. He is facing an issue in sending event states to components. Now, he wants to perform the following requirements:</p>\n\n<p><strong>Requirements</strong>:</p>\n\n<ol>\n\t<li>To replace the existing props </li>\n\t<li>Need a component that can declare the events and can receive the parent component.</li>\n</ol>\n\n<p>Which of the options can he use to achieve the requirements?</p>","a":[{"id":1670792,"option":"Using Mixins","correct":false},{"id":1670793,"option":"Using Emits","correct":true},{"id":1670794,"option":"Implementing V-model","correct":false},{"id":1670795,"option":"Both 1 and 2","correct":false}]},{"q":"<p>Mary is working in Organization X, where they use Vue 2 for their homepage. Therefore she was given a Vue 2 source code of the organization's homepage. She was given the task of converting/migrating the current Vue 2 page to Vue 3. Then which of these options are newly introduced in Vue 3 which has to completely new syntax or functionality, that she has to refer, so that the migration to Vue 3 happens successfully.</p>\n\n<p> </p>","a":[{"id":1670788,"option":"Only single root node for components rule","correct":false},{"id":1670789,"option":"Composition API","correct":true},{"id":1670790,"option":"New Props syntax","correct":false},{"id":1670791,"option":"All the above","correct":false}]},{"q":"<p>Ben is currently working on developing a website in VueJS. He wants to filter the data at DOM level as per his requirement. He wants that the provided data should be intact in the storage but it should be represented in the custom specified manner by him. Then which of the following options should he choose to achieve the desired result.</p>","a":[{"id":1669939,"option":"Mixins","correct":false},{"id":1669940,"option":"Filters","correct":true},{"id":1669941,"option":"V-model and V-for","correct":false},{"id":1669942,"option":"Vue-loader","correct":false}]},{"q":"<p>John has recently started his journey in Vue.js. He was given the task of converting an existing web page to VueJS. Then which of the following statements are true to install VueJS in his project.</p>\n\n<p><strong>Statements</strong></p>\n\n<ol>\n\t<li>In HTML file, we can import CDN by using &lt;link&gt; tag.</li>\n\t<li>Installing Vue.js using Node Package Manager.</li>\n\t<li>Installing VueJS to setup using Bower.</li>\n\t<li>Installing Vue-cli to setup your project.</li>\n</ol>","a":[{"id":1669935,"option":"1, 2 and 3","correct":false},{"id":1669936,"option":"1, 2 and 4","correct":false},{"id":1669937,"option":"2, 3 and 4","correct":true},{"id":1669938,"option":"All the statements","correct":false}]},{"q":"<p>Alice is working on implementing Mixins in <em>VueJS</em>. She is using Mixins to so it is possible to repeatedly add functionality to created Vue instances and components, then which of the following statement is/are true about Mixins:</p>\n\n<p><strong>Statements</strong></p>\n\n<ol>\n\t<li>Mixins facilitate the DRY principle.</li>\n\t<li>Mixins provide great rigidity.</li>\n\t<li>It provides options for Vue plugins.</li>\n\t<li>Mixins can be used in Vue.js safely and they do not affect changes outside their scope.</li>\n</ol>","a":[{"id":1668655,"option":"2, 3 and 4","correct":false},{"id":1668656,"option":"1, 2 and 4","correct":false},{"id":1668657,"option":"1, 3 and 4","correct":true},{"id":1668658,"option":"All the statements","correct":false}]},{"q":"<p>Anita is developing a web app in <em>VueJS</em>. She wants to implement two-way data binding. So that the UI view part is rendered automatically and updated when the data Model is changed. Then in this scenario what can she use to achieve the desired outcome. </p>","a":[{"id":1668643,"option":"v-bind","correct":false},{"id":1668644,"option":"v-model","correct":true},{"id":1668645,"option":"vue-loader","correct":false},{"id":1668646,"option":"Both 1 and 2","correct":false}]},{"q":"<p>Mary is building a large scale single page app in VueJS. She wants all the components in one place of the application so that she can set with rules ensuring that the state can only be mutated in a predictable way. Then which of the following options can Mary use to achieve her requirements.</p>","a":[{"id":1668063,"option":"V-model","correct":false},{"id":1668064,"option":"Vue-loader","correct":false},{"id":1668065,"option":"VueX ","correct":true},{"id":1668066,"option":"Mixins","correct":false}]},{"q":"<p>Ben is developing a simple website in Vue.js. He wants to make web requests and handle responses. He wants to use XHMLHttpRequests or JSONP for his application. Which of the following options can Ben use in this scenario?</p>","a":[{"id":1668055,"option":"Using Vue-resource","correct":true},{"id":1668056,"option":"Using Vue-router","correct":false},{"id":1668057,"option":"Using Bower","correct":false},{"id":1668058,"option":"All the above","correct":false}]},{"q":"<p>Ben has developed a web app using VueJS. He is using v-show directive since it has a performance advantage if most of the elements are switched on and off frequently. But he has noticed that v-show has higher initial render costs and wants to use an alternative. Then which of the following options can Ben use to overcome the issue.</p>","a":[{"id":1665930,"option":"v-if","correct":true},{"id":1665931,"option":"vue-loader","correct":false},{"id":1665932,"option":"v-for","correct":false},{"id":1665933,"option":"v-else-if","correct":false}]},{"q":"<p>John is developing a Full stack web app for his client using <em>Vue 2</em>. He wants to add Firebase specific methods and binding to the entire application. Thereafter firebase functions are available using ‘this’ context from anywhere. Then what can John use for his requirement?</p>","a":[{"id":1665614,"option":"Firebase CDN","correct":false},{"id":1665615,"option":"VueFire","correct":true},{"id":1665616,"option":"Vue-loader","correct":false},{"id":1665617,"option":"All the above","correct":false}]},{"q":"<p>Lisa is developing a web app in VueJS. She wants to reuse the set of component options across multiple components. Also, she wants to have the execution precedence over the component’s own hooks. In this scenario, what option she can use to achieve the mentioned requirements.</p>","a":[{"id":1664617,"option":"Vue-loader","correct":false},{"id":1664618,"option":"Mixin","correct":true},{"id":1664619,"option":"V-model","correct":false},{"id":1664620,"option":"Hooks","correct":false}]},{"q":"<p>Paul has written the following code block for login authentication in VueJS. He wants to reuse the elements instead of building them from scratch. But this is causing to render the same input element in both v-if and v-else blocks then it holds the previous value. Then in which of the following options can Paul use to solve the mentioned problem.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>&lt;template v-if=\"loginType === 'Admin'\"&gt;  \n  &lt;label&gt;Admin Code&lt;/label&gt;  \n  &lt;input placeholder=\"Enter your Admin ID Code\"&gt;  \n&lt;/template&gt;  \n&lt;template v-else&gt;  \n  &lt;label&gt;Customer&lt;/label&gt;  \n  &lt;input placeholder=\"Enter your Password\"&gt;  \n&lt;/template&gt;  </code></pre>\n\n<p> </p>","a":[{"id":1664593,"option":"Using classes","correct":false},{"id":1664594,"option":"Applying key attributes","correct":true},{"id":1664595,"option":"Using v-model directive","correct":false},{"id":1664596,"option":"All the above","correct":false}]},{"q":"<p>Mary is working on developing a website using VueJS. She has created three files namely template, script, and style. Now, she wants to make all the <em>3</em> sections into one file and wants the static assets to be treated as module dependencies. Then which of the following options can Mary use?</p>","a":[{"id":1663204,"option":"Vue-loader","correct":true},{"id":1663205,"option":"Mixin","correct":false},{"id":1663206,"option":"Module Manager","correct":false},{"id":1663207,"option":"Vue-pack","correct":false}]},{"q":"<p>John is working on developing his company homepage using VueJS. He created an input component with a v-model and wants the user input to be automatically typecast as a number. Currently, the value of HTML input elements returns a string. Then in which of the following is the correct directive to achieve the desired condition?</p>","a":[{"id":1663196,"option":"v-model.lazy","correct":false},{"id":1663197,"option":"v-model.number","correct":true},{"id":1663198,"option":"v-model.trim","correct":false},{"id":1663199,"option":"v-model.input","correct":false}]},{"q":"<p>Lisa is working on developing his company homepage using VueJS. She created a simple input component and used the v-model directive. She encountered a problem where it syncs the input with the data after each input event. Instead, Lisa wants to sync after changing events. Then in which of the following is the correct modifier that can be used to achieve the desired condition.</p>","a":[{"id":1662046,"option":"v-model.event","correct":false},{"id":1662047,"option":"v-model.lazy","correct":true},{"id":1662048,"option":"v-model.store","correct":false},{"id":1662049,"option":"v-model.trim","correct":false}]},{"q":"<p>Ben is working on developing his company homepage using VueJS. He created a button component and wants to add or remove that DOM element based on the current condition. He wants the admin button to be hidden if the condition isAdminLoggedIn is set to false. Then which of the following is the correct directive to achieve the desired condition.</p>","a":[{"id":1662030,"option":"v-if","correct":true},{"id":1662031,"option":"v-show","correct":false},{"id":1662032,"option":"v-hide","correct":false},{"id":1662033,"option":"v-else","correct":false}]},{"q":"<p>You are working on building the components using VueJS. Then in which of the following Lifecycle stage of VueJS, runs right before the DOM is patched and is re-rendered. It also allows you to update the cycle and run after data changes are made on your component.</p>","a":[{"id":1661251,"option":"beforeUpdate","correct":true},{"id":1661252,"option":"beforeMount","correct":false},{"id":1661253,"option":"beforeDestroy","correct":false},{"id":1661254,"option":"updated","correct":false}]},{"q":"<p>Ben has coded few components in VueJS 2.0. He wants to distribute the reusable functionalities for components he created. Then in this scenario, what of the options can Ben use to achieve his requirement.</p>","a":[{"id":1659893,"option":"Export as Modules","correct":false},{"id":1659894,"option":"Convert into Global Functions","correct":false},{"id":1659895,"option":"Using Mixins","correct":true},{"id":1659896,"option":"Using HOCs","correct":false}]},{"q":"<p>John is developing a web app in VueJS. He wants the render UI view part of the application to not update automatically. So John wants to write custom code to make the UI get updated every time a data model is changed. Then in this scenario what can John use to achieve the desired outcome?</p>","a":[{"id":1659889,"option":"v-model","correct":false},{"id":1659890,"option":"v-bind","correct":true},{"id":1659891,"option":"v-on","correct":false},{"id":1659892,"option":"v-show","correct":false}]},{"q":"<p>Mary has written the following code to print the list of users in VueJS. She wants to use VueJS inbuilt directives to loop through items in an array<strong>. </strong>Then in this scenario what Javascript code should she use to get desired output by replacing it on <em>Line 2.</em></p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>&lt;ul id=\"ren\"&gt;\n  //Line2\n&lt;/ul&gt;\n\nvar data = new Vue({\n  el: '#ren',\n  data: {\n    items: [\n      { user: 'Alice' },\n      { user: 'John' },\n      { user: 'Lisa' },\n      { user: 'Ben' }\n    ]\n  }\n})\n</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>&lt;li v-if=\"(item, index) in items\"&gt;\n    {{ index }} - {{ item.user}}\n&lt;/li&gt;</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>&lt;li v.filter=\"(item, index) in items\"&gt;\n    {{ index }} - {{ item.user}}\n&lt;/li&gt;</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>&lt;li v-for=\"(item, index) in items\"&gt;\n    {{ index }} - {{ item.user}}\n&lt;/li&gt;</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>&lt;li for=\"(item, index) in items\"&gt;\n    {{ index }} - {{ item.user}}\n&lt;/li&gt;</code></pre>\n\n<p> </p>","a":[{"id":1659022,"option":"1","correct":false},{"id":1659023,"option":"2","correct":false},{"id":1659024,"option":"3","correct":true},{"id":1659025,"option":"4","correct":false}]},{"q":"<p>Lisa has written the following code to greet users to the community homepage in VueJS. She wants to show the name of the username of the user in real time from the <em>Input Box</em> on <em>Line 6</em><strong> </strong>to<em> H3</em><strong> </strong>in <em>Line 5</em><strong> </strong>using v-model<strong>. </strong>Then in this scenario what Javascript code should she use to get desired output.<br>\n<strong>HTML Code</strong></p>\n\n<pre class=\"prettyprint\"><code>&lt;div id=\"greet\"&gt;\n  &lt;h1&gt;Welcome to Hackerearth Community!!&lt;/h1&gt;\n  &lt;p&gt;Prepare for interviews or compete in coding challenges along with 5 million developers.&lt;/p&gt;\n  &lt;br&gt;\n  &lt;h3&gt;Currently Logged in as {{username}}&lt;/h3&gt;  //Line 5\n  &lt;input v-model=\"username\"&gt;  //Line 6\n&lt;/div&gt;</code></pre>\n\n<p><strong>Example</strong></p>\n\n<p><strong>Input in Input Box</strong>: Lisa</p>\n\n<p><strong>Expected Output</strong></p>\n\n<pre class=\"prettyprint\"><code>Welcome to Hackerearth Community!!\nPrepare for interviews or compete in coding challenges along with 5 million developers.\n\nCurrently Logged in as Lisa</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>new Vue({\n el: '#greet',\n data: {\n username: 'Lisa'\n }\n})</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>new Vue({\n el: '#greet',\n data: {\n username: ' '\n }\n})</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>new Vue({\n el: '#greet',\n data: {\n username: 'currentuser'\n }\n})</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>new Vue({\n el: '#greet',\n data: {\n username: '{{input}}'\n }\n})</code></pre>\n\n<p> </p>","a":[{"id":1659006,"option":"1","correct":false},{"id":1659007,"option":"2","correct":true},{"id":1659008,"option":"3","correct":false},{"id":1659009,"option":"4","correct":false}]},{"q":"<p>John wants to render the following code of VueJS using JSX. But he has found that JSX is not meant to be interpreted directly and needs to be first converted into standard Javascript. If John has to install a plugin, then which code is correct for the given scenario?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>import HackerComponent from './HackerComponent.vue'\n\nconst h = this.$createElement\n\nnew Vue({\n  el: '#hackerid',\n  render: function (h) {\n    return (\n      &lt;HackerComponent level={1}&gt;\n        &lt;span&gt;Hello&lt;/span&gt; Hacker!\n      &lt;/HackerComponent&gt;\n    )\n  }\n})</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>yarn add @babel/plugin-transform-vue-jsx --dev</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>yarn add @babel/plugin-syntax-jsx --dev\n</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>npm install babel-plugin-syntax-jsx babel-plugin-transform-vue-jsx --save-dev</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>npm install @vue/babel-plugin-jsx -D</code></pre>\n\n<p> </p>","a":[{"id":1657394,"option":"1","correct":false},{"id":1657395,"option":"2","correct":false},{"id":1657396,"option":"3","correct":true},{"id":1657397,"option":"4","correct":false}]},{"q":"<p>Ben has written the following markup for his template in VueJS. He wants the compiled down or explicit render function for the given markup. Then which code is correct for the given scenario?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>&lt;template&gt;\n  &lt;div :class=\"{'is-loggedin': isLoggedIn}\"&gt;\n    &lt;p&gt;Welcome to Hackerearth !!&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/template&gt;</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>render: function (createElement) {\n  return createElement('div', {\n    className: {\n      'is-loggedin': this.isLoggedIn\n     }\n  }, [\n    createElement('p', 'Welcome to Hackerearth !!', null)\n  ]);\n}</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>render: function (createElement) {\n  return createElement('div', {\n    class: this.isLoggedIn\n  }, [\n    createElement('div', 'Welcome to Hackerearth !!')\n  ]);\n}</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>render: function (createElement) {\n  return createElement('div', {\n    className: this.isLoggedIn\n  }, [\n    createElement('div', 'Welcome to Hackerearth !!')\n  ]);\n}</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>render: function (createElement) {\n  return createElement('div', {\n    class: {\n      'is-loggedin': this.isLoggedIn\n     }\n  }, [\n    createElement('p', 'Welcome to Hackerearth !!')\n  ]);\n}</code></pre>\n\n<p> </p>","a":[{"id":1657942,"option":"1","correct":false},{"id":1657943,"option":"2","correct":false},{"id":1657944,"option":"3","correct":false},{"id":1657945,"option":"4","correct":true}]},{"q":"<p>You are working on building the components using VueJS. Then which of the following Lifecycle stage of VueJS, allows you to access your component immediately before and after the first render.</p>","a":[{"id":1661243,"option":"beforeUpdate","correct":false},{"id":1661244,"option":"beforeMount","correct":true},{"id":1661245,"option":"mounted","correct":false},{"id":1661246,"option":"created","correct":false}]}]
[{"q":"<p>Bob is developing a full-stack web application using Spring Boot. When Bob integrates the frontend with the backend and sends some HTTP requests from the frontend to fetch data from the backend API he gets a forbidden error. Which of the following can be the possibilities of causing this error in this scenario:</p>\n\n<ol>\n\t<li>Check for CORS if @CrossOrigin annotation to his controller.</li>\n\t<li>By disabling csrf Protection</li>\n\t<li>Invalid token</li>\n</ol>","a":[{"id":1473866,"option":"1 and 2","correct":false},{"id":1473867,"option":"2 and 3","correct":false},{"id":1473868,"option":"1 and 3","correct":true},{"id":1473869,"option":"All of these","correct":false}]},{"q":"<p>Suppose you are working on developing a spring boot application. You are working with AOP which you know is one of the key components of Spring Framework. You have a task that requires you to <em>share the state before and after a method is executed.</em> Which advice would you use for that keeping in mind it is best to use the least powerful form of advice that meets your requirements.</p>","a":[{"id":1655701,"option":"after-returning","correct":false},{"id":1655702,"option":"around","correct":true},{"id":1655703,"option":"after","correct":false},{"id":1655704,"option":"before","correct":false}]},{"q":"<p>You are working on developing a spring boot application. You are working with AOP which you know is one of the key components of Spring Framework. You have a <em>Pointcut signature and a Pointcut Expression</em>. Determine the correct option.</p>\n\n<p><em>A - @Pointcut(\"execution(* name(..))\")</em></p>\n\n<p><em>B - private void anymethod() {}</em></p>","a":[{"id":1655697,"option":"A - Expression\r\nB - Signature","correct":true},{"id":1655698,"option":"There is no such thing as Pointer Expression and/or Signature","correct":false},{"id":1655699,"option":"These are neither Pointers nor signatures","correct":false},{"id":1655700,"option":"A - Signature\r\nB - Expression","correct":false}]},{"q":"<p>You are working on developing a spring boot application. You are working with AOP which you know is one of the key components of Spring Framework. How would you go about <em>declaring an aspect</em>?</p>","a":[{"id":1655693,"option":"@AspectJ","correct":false},{"id":1655694,"option":"@Annotation.Aspect","correct":false},{"id":1655695,"option":"@Declare","correct":false},{"id":1655696,"option":"@Aspect","correct":true}]},{"q":"<p>Suppose you are working on developing a spring boot application. You are working with AOP which you know is one of the key components of Spring Framework. You know AOP can work with <em>5</em> types of advices, so when you see <em>6</em> types of advices, you know something is wrong. Determine the faulty type.</p>\n\n<ol>\n\t<li><em>before </em></li>\n\t<li><em>after </em></li>\n\t<li><em>during </em></li>\n\t<li><em>after-returning </em></li>\n\t<li><em>after-throwing </em></li>\n\t<li><em>around</em></li>\n</ol>","a":[{"id":1655689,"option":"3","correct":true},{"id":1655690,"option":"4","correct":false},{"id":1655691,"option":"5","correct":false},{"id":1655692,"option":"6","correct":false}]},{"q":"<p>Suppose you are working on developing a spring boot application. You want to use Spring Cloud bus as it links nodes of a distributed system. You and your colleague know that as long as Spring Cloud <em>Bus AMQP and RabbitMQ</em> are on the classpath any Spring Boot application will try to contact a RabbitMQ server on the default value of<em> spring.rabbitmq.addresses</em>. There is a however a small hitch in execution. Your colleague seems to have forgotten the address. What is the default value of spring.rabbitmq.address?</p>","a":[{"id":1655685,"option":"localhost:3448","correct":false},{"id":1655686,"option":"localhost:6572","correct":false},{"id":1655687,"option":"localhost:5672","correct":true},{"id":1655688,"option":"localhost:8000","correct":false}]},{"q":"<p>Suppose you are working on developing a spring boot application. While using Spring Cloud you come across a library called <em>Hystrix</em> which implements <em>circuit breakers pattern.</em> The circuit breakers decide when to open/close circuits. Which of these states allows all calls to pass through to supplier microservices and respond without any latency?</p>","a":[{"id":1655681,"option":"Open State","correct":false},{"id":1655682,"option":"Closed State","correct":true},{"id":1655683,"option":"Half Open State","correct":false},{"id":1655684,"option":"Half Close State","correct":false}]},{"q":"<p>Suppose you are working on developing a spring boot application. To provide security to the application, you decide to use Spring Security which provides its own tags for jsp pages. To secure the view layer of the application you use the <em>CsrfInput Tag</em>. Which is the best location to place CsrfInput Tag?</p>","a":[{"id":1655677,"option":"Inside the form tag","correct":true},{"id":1655678,"option":"Inside the footer tag","correct":false},{"id":1655679,"option":"Outside the form tag","correct":false},{"id":1655680,"option":"Inside the header tag","correct":false}]},{"q":"<p>Suppose you are working on developing a spring boot application. To provide security to the application, you decide to use Spring Security. It can be used to add security context to our test functions. Which of the following are <em>valid annotations</em>?</p>\n\n<p><em>1. @WithMockCandidate </em></p>\n\n<p><em>2. @WithMockDetails </em></p>\n\n<p><em>3. @WithSecurityContext</em></p>","a":[{"id":1655673,"option":"1,2,3","correct":false},{"id":1655674,"option":"2,3","correct":false},{"id":1655675,"option":"1,2","correct":false},{"id":1655676,"option":"Only 3","correct":true}]},{"q":"<p>Suppose you are working on developing a spring boot application. To provide security to the application you decide to use Spring Security, a framework that was started in 2003. You decide to use <em>JWT for authentication</em>. Where in the JWT header will you find information about the type of algorithm used?</p>","a":[{"id":1655669,"option":"algo","correct":false},{"id":1655670,"option":"alg","correct":true},{"id":1655671,"option":"typ","correct":false},{"id":1655672,"option":"type","correct":false}]},{"q":"<p>You have successfully finished building an application. You now decide that you want your class in a form to be executed from any location on the system. You have the following options to choose from to create such an executable form:</p>\n\n<ol>\n\t<li><em>./gradlew bootRun</em></li>\n\t<li><em>./mvnw build package</em></li>\n\t<li><em>./gradlew build</em></li>\n\t<li><em>./mvnw spring-boot:run</em></li>\n</ol>\n\n<p>Choose one to accomplish the mention task?</p>","a":[{"id":1655665,"option":"1","correct":false},{"id":1655666,"option":"2","correct":false},{"id":1655667,"option":"3","correct":true},{"id":1655668,"option":"4","correct":false}]},{"q":"<p>Suppose you have developed a Spring Boot application and it is now time to push it to production. You decide to take advantage of the Spring Boot Actuator which comes with a number of ready features. Since some endpoints may contain confidential information you want to manually make some changes. You have to expose everything over HTTP. For that, you have the following options to choose from.</p>\n\n<ol>\n\t<li><em>management.endpoints.web.exposure.include=all</em></li>\n\t<li><em>management.endpoints.http.exposure.include=*</em></li>\n\t<li><em>management.endpoints.http.exposure.exclude=*</em></li>\n\t<li><em>management.endpoints.web.exposure.include=*</em></li>\n</ol>\n\n<p>Choose the correct option to Accomplish the mentioned task?</p>","a":[{"id":1655661,"option":"1","correct":false},{"id":1655662,"option":"2","correct":false},{"id":1655663,"option":"3","correct":false},{"id":1655664,"option":"4","correct":true}]},{"q":"<p>Suppose you are working on developing spring boot applications. You want to use<em><strong> </strong>spring cloud framework</em>. But the application needs to handle heavy traffic. For this, you have to implement <em>load balancing</em>. From the above info, which method is used to implement it in the spring cloud?</p>","a":[{"id":1655657,"option":"Cloudload","correct":false},{"id":1655658,"option":"Netflix ribbon","correct":true},{"id":1655659,"option":"RR balancer","correct":false},{"id":1655660,"option":"Can't implement","correct":false}]},{"q":"<p>Suppose you are working on developing spring boot applications. The important part is to secure the application. Spring security does the work for us by customizing the authentication process with customized authentication filters and providers. Assume you have built a login page using spring boot and you want to <em>add security feature</em> to it. Which of the following features are provided by spring security?</p>\n\n<p><em>1. HTTP authorization </em></p>\n\n<p><em>2. Remember me </em></p>\n\n<p><em>3. Resource based authorization </em></p>\n\n<p><em>4. Web form authentication</em></p>","a":[{"id":1655653,"option":"1, 2, and 3","correct":false},{"id":1655654,"option":"1, 3, and 4","correct":false},{"id":1655655,"option":"1, 2, and 4","correct":true},{"id":1655656,"option":"All","correct":false}]},{"q":"<p>Suppose you are working on Spring data applications.<strong> </strong>In “Mydb” database, there are two tables. Let it be X and Y. In X, there are <em>4</em> columns i.e.;<strong> </strong>xid, xname, date, place. In<strong> </strong>Y, there are <em>5</em> columns i.e.; yid, name, date, place, xid. Here, xid and yid are primary keys and xid in Y is the foreign key of xid in X. So, for each xid in X, there can be any number of rows in Y. Based on this understanding, answer the following questions.</p>\n\n<ol>\n\t<li>Does the xid in Y table allow only unique values?</li>\n\t<li>Does the xid in X table allow null values?</li>\n</ol>","a":[{"id":1655649,"option":"1.False \r\n2.True","correct":false},{"id":1655650,"option":"1.False \r\n2.False","correct":false},{"id":1655651,"option":"1.True \r\n2.False","correct":true},{"id":1655652,"option":"1.True \r\n2.True","correct":false}]},{"q":"<p>Suppose you are new to Spring data applications. You want to start it with basics. First, you started understanding <em>JPQL methods</em> and how to write queries. Based on the understanding, answer the methods whose functions are mentioned below and tell if the statements are true or false.</p>\n\n<ol>\n\t<li><em>The method that helps to execute JPQL queries with the name. </em></li>\n\t<li><em>The method that helps to perform update or delete operations. </em></li>\n\t<li><em>JPQL is a platform-dependent language</em></li>\n</ol>\n\n<p> </p>\n\n<p> </p>","a":[{"id":1655645,"option":"1.createQuery() \r\n2.executeQuery() \r\n3.True","correct":false},{"id":1655646,"option":"1.createNamedQuery()\r\n2. executeUpdate() \r\n3.True","correct":false},{"id":1655647,"option":"1.createNamedQuery() \r\n2.executeQuery() \r\n3.False","correct":false},{"id":1655648,"option":"1.createNamedQuery() \r\n2.executeUpdate()\r\n3. False","correct":true}]},{"q":"<p>You were given a task to work on JPQL and provided a relational database. You have to work on<strong> </strong><em>“Student” table</em> which has <em>4</em> columns. The names of columns are<em><strong> studid, name, branch, address.</strong></em> From the above info, answer the below questions by picking up the correct answer.</p>\n\n<p><em>(i). Write a JPQL query using query annotation to get the names of all the students whose studid is in between 20 to 40 from the table “Student”. </em></p>\n\n<p><em>(ii). Which method is used in spring boot application to run this query?</em></p>\n\n<p><em>Select one of the following options:</em></p>\n\n<p><em>1. (i) SELECT name FROM Student where studid BETWEEN 20 and 40 </em></p>\n\n<p><em>    (ii) createQuery()</em></p>\n\n<p><em>2. (i) @Query(\"SELECT name FROM Student where studid BETWEEN 20 and 40”) </em></p>\n\n<p><em>    (ii) createQuery()</em></p>\n\n<p><em>3. (i) @Query(\"SELECT name FROM Student where studid BETWEEN 20 and 40”)</em></p>\n\n<p><em>    (ii) Query()</em></p>\n\n<p><em>4. (i) SELECT name FROM Student where studid BETWEEN 20 and 40 </em></p>\n\n<p><em>    (ii) Query()</em></p>","a":[{"id":1655641,"option":"1","correct":false},{"id":1655642,"option":"2","correct":true},{"id":1655643,"option":"3","correct":false},{"id":1655644,"option":"4","correct":false}]},{"q":"<p>Suppose you are working on spring data applications. You were asked to work on getting data from the storage. For this, you need to use <em>JPQL</em> (Java Persistence Query Language). There is a table called<strong> </strong><em>“Project”</em>. Columns available in that table are<em><strong> projectname, projectno, duration</strong></em>. From the above info, your task is to write a query to get the <em>project name</em> of all the projects from the table “Project”. Choose the correct query from the below options.</p>\n\n<p><em>1. @Query(\"SELECT projectname FROM Project”)</em></p>\n\n<p><em>2. @Query(\"SELECT projectno FROM Project”)</em></p>\n\n<p><em>3. @Query(\"SELECT duration FROM Project”)</em></p>\n\n<p><em>4. @Query(\"SELECT project FROM Project”)</em></p>","a":[{"id":1655637,"option":"1","correct":true},{"id":1655638,"option":"2","correct":false},{"id":1655639,"option":"3","correct":false},{"id":1655640,"option":"4","correct":false}]},{"q":"<p>Suppose you are working on building spring boot applications. Testing is an important step to find how the application is working. In your application, there is one package namely <em>“MyPackage”</em>. It has many classes and functions. Among them,<strong> </strong><em>“MainPage”</em> controller is the key class. From this page, everything is interconnected. Database testing is already done based on the logic. From the above info, your task is to only <em>test the “MainPage” controller</em> separately. You shouldn't have to call each and every class but only “MainPage”. For this, you might need to instantiate the class first. Choose the function from the below options to do this task.</p>\n\n<p>1. @SpringBootTest(MainPage.class)</p>\n\n<p>2. @ContextConfiguration(MainPage.class)</p>\n\n<p>3. @SpringBootStarterTest(MainPage.class)</p>\n\n<p>4. @WebMvcTest(MainPage.class)</p>","a":[{"id":1655633,"option":"1","correct":false},{"id":1655634,"option":"2","correct":false},{"id":1655635,"option":"3","correct":false},{"id":1655636,"option":"4","correct":true}]},{"q":"<p>Suppose you are working on building spring boot applications. As the last step, you need to<em><strong> </strong>test that application</em>. This application consists of various packages. In each package, there are a few classes written. The <em>methods present in each class is interlinked </em>and maybe called by a different class of the same package or any other package in the system. Based on the structure of the application, you need to test the application by each method or each class. You have to perform independently. What kind of testing do you want to use to do this process?</p>","a":[{"id":1655629,"option":"API testing","correct":false},{"id":1655630,"option":"Layer integration testing","correct":false},{"id":1655631,"option":"Unit testing","correct":true},{"id":1655632,"option":"No such type of testing","correct":false}]},{"q":"<p>Suppose you are working on testing spring boot applications. You have to test your application using a dependency called <strong>“</strong><em>Spring boot starter test</em><strong>”</strong> which will hold all the required elements for testing. Now, from the above info, you have to choose the correct statements from below.</p>\n\n<p>1. It is the primary dependency</p>\n\n<p>2. It has AssertJ as an inbuilt library</p>\n\n<p>3. Mockito framework is not supported</p>","a":[{"id":1655625,"option":"1, 2, and 3","correct":false},{"id":1655626,"option":"1, 2","correct":true},{"id":1655627,"option":"2, 3","correct":false},{"id":1655628,"option":"All are wrong","correct":false}]},{"q":"<p>Suppose you are working on testing spring boot applications. You have written code for <em>building application</em>. The built application has <em>many layers</em> in it.<em> Which testing method is useful to do in this case</em>?</p>","a":[{"id":1655621,"option":"SpringBootTest","correct":true},{"id":1655622,"option":"API testing","correct":false},{"id":1655623,"option":"Application testing","correct":false},{"id":1655624,"option":"JUnit test","correct":false}]},{"q":"<p>In Spring, a multi-module project is built from a parent pom that manages a group of submodules. Splitting the project into multiple modules is useful and easy to maintain. You are given <em>4</em> Statements about the usage of modules in Spring projects. According to you, which of those statements are true?</p>\n\n<p><strong>Statement 1</strong>: Core and beans modules provide the fundamental parts of the framework, including the Dependency injection feature.</p>\n\n<p><strong>Statement 2</strong>: The ORM module provides integration layers for popular object-relational mapping APIs, including JPA, JDO, Hibernate, and iBatis.</p>\n\n<p><strong>Statement 3</strong>: The Java Messaging Service JMS module contains features for producing and consuming messages.</p>\n\n<p><strong>Statement 4</strong>: The JDBC module provides a JDBC-abstraction layer that removes the need to do tedious JDBC-related coding.</p>","a":[{"id":1655617,"option":"Correct Statements are 1 & 2","correct":false},{"id":1655618,"option":"Correct Statements are 1 & 3","correct":false},{"id":1655619,"option":"Correct Statements are 1, 2, 3 & 4","correct":true},{"id":1655620,"option":"Correct Statements are 2, 3 & 4.","correct":false}]},{"q":"<p>During the development process, Mr. X wants to use <em>DispatcherServlet</em><strong> </strong>to handle all the <em>HTTP requests and responses </em>in the Spring Boot project. In which of the following files, must he define the DispatcherServlet?</p>","a":[{"id":1655613,"option":"Meta-inf/dispatcher.xml","correct":false},{"id":1655614,"option":"In Beans configuration file.","correct":false},{"id":1655615,"option":"Web-inf/ dispatcher.xml","correct":false},{"id":1655616,"option":"Web.xml file","correct":true}]},{"q":"<p>You work as an SDE in Z Studios. Your team has been assigned the task to develop a web app to upload and compress video files. Collectively, you decide to use the <em>Spring boot</em> framework to reduce development, unit test, and integration test time. While starting, you need to generate the structure of the Spring Boot Project. What web-based tool would you use to do so?</p>","a":[{"id":1655609,"option":"Spring Initializr","correct":true},{"id":1655610,"option":"Spring Initiator","correct":false},{"id":1655611,"option":"Spring Initializer","correct":false},{"id":1655612,"option":"Spring Acutator","correct":false}]},{"q":"<p>In <em>Spring</em>, while writing a program, you defined beans by annotating your class with the stereotype @Component annotation. According to you, what is the prototype scope with regards to beans?</p>","a":[{"id":1655605,"option":"This scopes the bean definition to a single instance per HTTP Application/ Global session.","correct":false},{"id":1655606,"option":"This scopes the bean definition to a single instance per Spring IoC container.","correct":false},{"id":1655607,"option":"This scopes a single bean definition to have any number of object instances","correct":true},{"id":1655608,"option":"This scopes a bean definition to an HTTP session.","correct":false}]},{"q":"<p>You are a freelancing web developer. You receive a contract to build a web-application for a company that facilitates the services of a payment portal. While writing the program, you want to use a method to register BeanPostProcessor. Which of the following is the correct method to do so?</p>","a":[{"id":1655601,"option":"registerBeanProcessors","correct":false},{"id":1655602,"option":"registerBeanPostProcessors","correct":false},{"id":1655603,"option":"addBeanProcessors","correct":false},{"id":1655604,"option":"addBeanPostProcessors","correct":true}]},{"q":"<p>You work as an SDE in Z Studios. Your team has been assigned the task to develop a web app to upload and compress video files. In <em>Spring</em>, beans are created with the configuration metadata that you supply to the container. According to you, which of the following is right about the scope of a stateful bean?</p>","a":[{"id":1655597,"option":"Singleton scope","correct":true},{"id":1655598,"option":"Multi-Scope","correct":false},{"id":1655599,"option":"Prototype scope","correct":false},{"id":1655600,"option":"Singleton and prototype scope","correct":false}]},{"q":"<p>Ben works as an SDE for ABC Pvt. Ltd. His company recently received a contract for the development of a real-time collaborative text editor that syncs across multiple connected devices. Users can join a room by scanning the QR code on the page and collectively make and share notes in real-time. Collectively, his team decided to use <em>Spring Boot</em> framework for the development of this web app as it provides an Opinionated Development approach. In Spring, beans are created with the configuration metadata that you supply to the container. According to you, what is the scope of bean in portlet context?</p>","a":[{"id":1655593,"option":"request","correct":false},{"id":1655594,"option":"prototype","correct":false},{"id":1655595,"option":"global-session","correct":true},{"id":1655596,"option":"session","correct":false}]},{"q":"<p>You work as an SDE in Z Studios. Your team has been assigned the task to develop a web app to upload and compress video files. Collectively, you decide to use the <em>Spring boot</em> framework to reduce development, unit test, and integration test time. During the development of the web app, you want to enable the specific class to autoconfigure with the existing application. Which annotation would you use to do so?</p>","a":[{"id":1655589,"option":"@EnableAutoConfiguration","correct":false},{"id":1655590,"option":"@ConditionalOnClass","correct":true},{"id":1655591,"option":"@Configure","correct":false},{"id":1655592,"option":"@ConfigureScan","correct":false}]},{"q":"<p>You are required to exclude a specific class from the database using <em>Spring Boot</em>. Which of these code snippets would he use to achieve this?</p>\n\n<p><strong>Code</strong></p>\n\n<p>1. </p>\n\n<pre class=\"prettyprint\"><code>@SpringBootApplication(exclude =={Address. class}) Public class Student{}</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>@SpringBootApplication(include !={Address. class})</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>@SpringBootApplication(!include ={Address. class})</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>@SpringBootApplication(exclude ={Address. class}) Public class Student{}</code></pre>\n\n<p> </p>","a":[{"id":1655585,"option":"1","correct":false},{"id":1655586,"option":"2","correct":false},{"id":1655587,"option":"3","correct":false},{"id":1655588,"option":"4","correct":true}]},{"q":"<p>Your team was given the task to develop a web application for a client in <em>Spring</em>. The functionalities and the schema has been specified by the client. You want to configure logging or debugging of errors in your application. How would you do so?</p>\n\n<p><strong>Option</strong></p>\n\n<p>1. By applying the following settings in application.yml file.  </p>\n\n<pre class=\"prettyprint\"><code>logging.level.org.springframework.web: DEBUG logging.level.org.hibernate: ERROR</code></pre>\n\n<p>2. By applying the following settings in application.properties file.  </p>\n\n<pre class=\"prettyprint\"><code>logging.level.org.springframework.web: ERROR logging.level.org.hibernate: DEBUG</code></pre>\n\n<p>3. By applying the following settings in application.properties file.</p>\n\n<pre class=\"prettyprint\"><code>logging.level.org.springframework.web: LOG logging.level.org.hibernate: DEBUG\n</code></pre>\n\n<p>4. By applying the following settings in application.properties file.  </p>\n\n<pre class=\"prettyprint\"><code>logging.level.org.springframework.web: ERROR logging.level.org.hibernate: LOG</code></pre>\n\n<p> </p>","a":[{"id":1655581,"option":"1","correct":true},{"id":1655582,"option":"2","correct":false},{"id":1655583,"option":"3","correct":false},{"id":1655584,"option":"4","correct":false}]},{"q":"<p>While writing the code for a web application using <em>Spring Boot</em>, John wanted to disable a particular auto-configuration class. How would he do so?</p>","a":[{"id":1655577,"option":"Using exclude attribute of @EnableAutoConfiguration","correct":true},{"id":1655578,"option":"Using include attribute of @DisableAutoconfiguration","correct":false},{"id":1655579,"option":"Using not exclude attribute of @DisabaleAutoConfiguration","correct":false},{"id":1655580,"option":"Using not include attribute of @EnableAutoConfiguration","correct":false}]},{"q":"<p>Ben is a developer who in order to enable auto configuration in <em>Spring Boot</em>, wants to use all the three annotations of <strong>@SpringBootApplication</strong> separately. Which one of the following would he NOT use?</p>","a":[{"id":1655573,"option":"@ComponentScan","correct":false},{"id":1655574,"option":"@EnableAutoConfiguration","correct":false},{"id":1655575,"option":"@PathVariable","correct":true},{"id":1655576,"option":"@Configuration","correct":false}]},{"q":"<p>Alice wants to implement IoC in his program to configure the object. She knows that the IoC container is responsible to instantiate, configure and assemble the objects. Which of the following statements is NOT true about IoC in <em>Spring</em>?</p>\n\n<p><strong>Statements</strong></p>\n\n<p>1. If we have spring bean configuration xml file in a standalone application, then we can use AnnotationConfigApplicationContext to load the file and get the container object.</p>\n\n<p>2. Spring IoC is the mechanism to achieve loose-coupling between Objects dependencies.</p>\n\n<p>3. Spring IoC container is the program that injects dependencies into an object and makes it ready for our use.</p>\n\n<p>4. If we are using Spring in standalone Java applications and using annotations for Configuration, then we can use AnnotationConfigApplicationContext to initialize the container and get the bean objects.</p>","a":[{"id":1655569,"option":"1","correct":true},{"id":1655570,"option":"2","correct":false},{"id":1655571,"option":"3","correct":false},{"id":1655572,"option":"4","correct":false}]},{"q":"<p>Ben wants to use the ApplicationContext<strong> </strong><em>IoC Container</em> in one of his programs during development. What classes would can he use for the implementation of ApplicationContext?</p>\n\n<p> </p>","a":[{"id":1655565,"option":"AdvancedApplicationContext, FileApplicationContext","correct":false},{"id":1655566,"option":"FileSystemXmlApplicationContext, ClassPathXmlApplicationContext, WebXmlApplicationContext","correct":true},{"id":1655567,"option":"FileSystemApplicationContext, ClassPathApplicationContext","correct":false},{"id":1655568,"option":"FileSystemApplicationContext, ClassPathApplicationContext, WebApplicationContext","correct":false}]},{"q":"<p>Alice wanted to use IoC containers to assemble the dependencies between the objects. Which of the following are correct IoC containers that she can use in <em>Spring</em>?</p>","a":[{"id":1655561,"option":"BeanFactory, ApplicationContext, IocContextFactory","correct":false},{"id":1655562,"option":"BeanFactory, BeanContext, IocContextFactory","correct":false},{"id":1655563,"option":"BeanFactory, ApplicationContext","correct":true},{"id":1655564,"option":"BeanFactory, ApplicationContext, BeanContext","correct":false}]},{"q":"<p>Your team decided to use the<em><strong> </strong>Spring Boot</em> framework for the development of the web app because of its advantageous features. You want to implement inversion of control in your program. Which of these techniques would you not use to do so?</p>","a":[{"id":1655557,"option":"an interface injection","correct":false},{"id":1655558,"option":"using a service locator pattern","correct":false},{"id":1655559,"option":"a constructor injection","correct":false},{"id":1655560,"option":"using a function locator pattern","correct":true}]},{"q":"<p>During the development of a <em>Spring Boot</em> application, Bob wants to declare a JNDI Object reference. Which of these will he use?</p>","a":[{"id":1655553,"option":"JndiObject","correct":false},{"id":1655554,"option":"JndiObjectFactory","correct":false},{"id":1655555,"option":"JndiObjectFactoryBean","correct":true},{"id":1655556,"option":"JndiFactoryBean","correct":false}]},{"q":"<p>During development, you often perform dependency injection as it makes our code loosely coupled and easier for testing. Which of the following statements would you say is false about Dependency Injection?</p>\n\n<p><strong>Statements</strong></p>\n\n<ol>\n\t<li>With Dependency Injection, objects are expected to acquire their dependencies on their own.</li>\n\t<li>Dependency Injection decreases system maintainability because logic changes in the domain affect the modules.</li>\n\t<li>Dependency Injection helps in decoupling application objects from each other.</li>\n\t<li>With Dependency Injection, objects are given their dependency by some third party that coordinates each object in the system.</li>\n</ol>","a":[{"id":1655549,"option":"1","correct":false},{"id":1655550,"option":"2","correct":true},{"id":1655551,"option":"3","correct":false},{"id":1655552,"option":"4","correct":false}]},{"q":"<p>Ben's team wants to DI (Dependency Injection) using the <em>Spring</em> framework. How will they implement this?</p>","a":[{"id":1655545,"option":"By Abstract factory pattern","correct":false},{"id":1655546,"option":"By  Service locator pattern","correct":true},{"id":1655547,"option":"By Singleton pattern","correct":false},{"id":1655548,"option":"By Factory pattern","correct":false}]},{"q":"<p>You need to use the <em>Spring</em> module that provides the capability of Dependency Injection. Which one of these would you go for?</p>","a":[{"id":1655541,"option":"Spring Web","correct":false},{"id":1655542,"option":"Data Access","correct":false},{"id":1655543,"option":"Core Container","correct":true},{"id":1655544,"option":"AOP","correct":false}]},{"q":"<p>Ben works as an SDE for ABC Pvt. Ltd. His company recently received a contract for the development of a real-time collaborative text editor that syncs across multiple connected devices. Users can join a room by scanning the QR code on the page and collectively make and share notes in real-time. In <em>Spring,</em> Dependency Injection is a design pattern that removes the dependency from the programming code. Which of these is NOT a feature of Spring Dependency Injection that makes it so useful?</p>","a":[{"id":1655537,"option":"It stores object states in file system.","correct":true},{"id":1655538,"option":"It makes the programming code loosely coupled","correct":false},{"id":1655539,"option":"It makes the code easier to test","correct":false},{"id":1655540,"option":"It helps in decoupling application objects from each other.","correct":false}]},{"q":"<p>During development of a web-app using Spring Boot framework, Alice comes across the following code written by his colleague. Which of the following is true about this code?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>@RestController \n@RequestMapping(\"/home\")\npublic class InCon \n{ \n   @RequestMapping(value = \"/fetch/{id}\", method = RequestMethod.GET) \n   String getDynamicUriValue(@PathVariable String id) \n   { \n      System.out.println(\"The ID is \" + id); \n      return \"The Dynamic URI parameter was fetched\"; \n   } \n   @RequestMapping(value = \"/fetch/{id:[a-z]+}/{name}\", method = RequestMethod.GET) \n   String getDynamicUriValueRegex(@PathVariable(\"name\") String name) \n   {\n      System.out.println(\"The Name is \" + name);\n      return \"Dynamic URI parameter fetched using regex\";\n   } \n}</code></pre>\n\n<p> </p>","a":[{"id":1655533,"option":"A request to /home will be handled by the default() method as the annotation does not specify any value.","correct":false},{"id":1655534,"option":"A request to /home will be handled by the @RequestMapping method as the annotation does not specify any value.","correct":false},{"id":1655535,"option":"A request to /home will be handled by the @RequestMapping method as the annotation does specify a specific value.","correct":false},{"id":1655536,"option":"The method getDynamicUriValue() will execute for a request to localhost:8080/home/fetch/10.","correct":true}]},{"q":"<p>While working on a Spring Boot application, you are required to use annotations to provide supplemental information about a program. Which of these statements is true about @Autowired annotation?</p>\n\n<p><strong>Statements</strong></p>\n\n<ol>\n\t<li>The @Autowired annotation can be used to autowire bean on the setter method.</li>\n\t<li>This annotation provides more fine-grained control over where and how autowiring should be accomplished.</li>\n\t<li>This annotation indicates that bean property is required while saving the bean data to database.</li>\n\t<li>This annotation indicates that bean property is required while serializing the bean.</li>\n</ol>","a":[{"id":1655529,"option":"1","correct":false},{"id":1655530,"option":"2","correct":true},{"id":1655531,"option":"3","correct":false},{"id":1655532,"option":"4","correct":false}]},{"q":"<p>You are given the task to develop a Spring boot based web application for a client. The functionalities and the schema has been specified by the client. How can you achieve annotation-based auto-wiring in the application?</p>","a":[{"id":1655525,"option":"By providing @Autowired annotation","correct":true},{"id":1655526,"option":"By providing @Selfwired annotation","correct":false},{"id":1655527,"option":"By providing @Wired-auto annotation","correct":false},{"id":1655528,"option":"By providing @Automaticwired annotation","correct":false}]},{"q":"<p>You want to transparently expose your services using a lightweight binary HTTP-based protocol. Which of these Spring remoting technologies can be used to achieve this?</p>","a":[{"id":1655989,"option":"Burlap","correct":false},{"id":1655990,"option":"Hessian","correct":true},{"id":1655991,"option":"Ribbon","correct":false},{"id":1655992,"option":"Caucho","correct":false}]},{"q":"<p>You want to manually create a client from your service interface while working with CXF in your spring implementation.<br>\nWhich of these beans can be utilized to do so?</p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>JaxWsProxyFactory bean</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>JaxRsProxyFactory bean</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>JaxProxyFactory bean</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>JaxRsProxy bean</code></pre>\n\n<p> </p>","a":[{"id":1655981,"option":"1","correct":true},{"id":1655982,"option":"2","correct":false},{"id":1655983,"option":"3","correct":false},{"id":1655984,"option":"4","correct":false}]},{"q":"<p>You are using the @AspectJ annotations in your Spring configuration to declare aspects.<br>\n<br>\nIn the given scenario, which of these annotations should you use to enable @AspectJ support with the Java @Configuration annotation?</p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>@EnableAspectJ</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>@EnableAspectJAutoProxy</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>@EnableAspectJAutoProxyAgent</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>@EnableAspectJAutoProxyConfig</code></pre>\n\n<p> </p>","a":[{"id":1655969,"option":"1","correct":false},{"id":1655970,"option":"2","correct":true},{"id":1655971,"option":"3","correct":false},{"id":1655972,"option":"4","correct":false}]},{"q":"<p>You want to be able to omit the transaction-manager attribute in the transactional advice in Spring.<br>\n<br>\nIn order to be able to do so, what should the bean name of the PlatformTransactionManager be?</p>","a":[{"id":1655965,"option":"AopManager","correct":false},{"id":1655966,"option":"transactionManager","correct":true},{"id":1655967,"option":"iocManager","correct":false},{"id":1655968,"option":"platformManager","correct":false}]},{"q":"<p>You want to use a pointcut expression such that it matches if a method execution join point represents the execution of any public method.<br>\n<br>\nWhich of these expression will you use in the given scenario?</p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>@Pointcut(\"execution(public * (*))\")</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>@Pointcut(\"execution(public *(..))\")</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>@Pointcut(\"execution(public * *(..))\")</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>@Pointcut(\"execution(* public (..))\")</code></pre>\n\n<p> </p>","a":[{"id":1655961,"option":"1","correct":false},{"id":1655962,"option":"2","correct":false},{"id":1655963,"option":"3","correct":true},{"id":1655964,"option":"4","correct":false}]},{"q":"<p>Which of the following AOP framework objects can be used to execute aspect contracts in the Spring framework?<br>\n<br>\n1. JDK dynamic proxy<br>\n2. CGLIB proxy</p>","a":[{"id":1655957,"option":"Only 1","correct":false},{"id":1655958,"option":"Only 2","correct":false},{"id":1655959,"option":"Both 1,2","correct":true},{"id":1655960,"option":"Neither 1 nor 2","correct":false}]},{"q":"<p>In which of the below given cases would you expect the @Transactional annotation applied on an interface to work as expected?<br>\n<strong>Options</strong><br>\n1. The interface is declared as abstract<br>\n2. You are using interface-based proxies</p>","a":[{"id":1655949,"option":"Only 1","correct":false},{"id":1655950,"option":"Only 2","correct":true},{"id":1655951,"option":"Both 1,2","correct":false},{"id":1655952,"option":"None of these","correct":false}]},{"q":"<p>You want to add awareness of Spring-managed transactions to a datasource. Which of the following classes would you use to wrap the datasource in this scenario?</p>","a":[{"id":1655945,"option":"TransactionAwareDataSourceProxy","correct":true},{"id":1655946,"option":"DataSourceProxy","correct":false},{"id":1655947,"option":"TransactionProxy","correct":false},{"id":1655948,"option":"TransactionAwareSource","correct":false}]},{"q":"<p>Which of the following can be used to trigger transaction synchronization while working in Spring?</p>","a":[{"id":1655941,"option":"PlatformTransactionManager","correct":true},{"id":1655942,"option":"STSTransactionManager.","correct":false},{"id":1655943,"option":"RoleAcessManager","correct":false},{"id":1655944,"option":"DaoManager","correct":false}]},{"q":"<p>You want to define a bean for RmiProxyFactoryBean in the xml file given below.<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; \n&lt;beans xmlns=\" \" \n xmlns:xsi=\" \" \n xsi:schemaLocation=\"\"&gt; \n \n&lt;bean&gt; \n&lt;property&gt;&lt;/property&gt; \n\n&lt;/bean&gt; \n&lt;/beans&gt; </code></pre>\n\n<p><br>\nWhich of the properties given alongside will you need to define in order to achieve this?</p>\n\n<p><strong>Options</strong></p>\n\n<p>(I) serviceUrl</p>\n\n<p>(II) registryPort</p>\n\n<p>(III) serviceName</p>\n\n<p>(IV) serviceInterface</p>\n\n<p>(V) replaceExistingBinding</p>","a":[{"id":1655937,"option":"Both I and III","correct":false},{"id":1655938,"option":"Both I and IV","correct":true},{"id":1655939,"option":"Both II and V","correct":false},{"id":1655940,"option":"Both I, III and IV","correct":false}]},{"q":"<p>Analyze the snippet given alongside and determine the mapping facilities that will be utilized to expose DemoService.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>&lt;bean name=\"/Demo\" class=\"org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter\"&gt;\n &lt;property name=\"service\" ref=\"DemoService\"/&gt;\n &lt;property name=\"serviceInterface\" value=\"example.DemoService\"/&gt;\n&lt;/bean&gt;</code></pre>\n\n<p> </p>","a":[{"id":1655933,"option":"ServiceExporter","correct":false},{"id":1655934,"option":"DemoExporter","correct":false},{"id":1655935,"option":"DispatcherServlet","correct":true},{"id":1655936,"option":"None of these","correct":false}]},{"q":"<p>You want to protect all methods on beans declared in the application context whose classes are in the com.mycompany package and whose class names end in \"Test\".<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>&lt;global-method-security&gt;\n &lt;X expression=\"execution(* com.mycompany.*Test.*(..))\"\n access=\"ROLE_USER\"/&gt;\n &lt;/global-method-security&gt;</code></pre>\n\n<p><br>\nIn the given context, which of the following would be valid values of X?</p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>protect-pointcut</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>protect-aspect</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>protect-advice</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>AspectJ-Protect</code></pre>\n\n<p> </p>","a":[{"id":1655929,"option":"1","correct":true},{"id":1655930,"option":"2","correct":false},{"id":1655931,"option":"3","correct":false},{"id":1655932,"option":"4","correct":false}]},{"q":"<p>You want to enable AspectJ support in your Spring application.<br>\nWhich of the following code snippets should you use to achieve this?</p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>Include &lt;aop:aspectj-alpha-proxy&gt; in the Spring configuration.</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>Include &lt;aop:aspectj-autoproxy&gt; in the Spring configuration.</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>Import cg-aspectjlib module while writing the program.</code></pre>\n\n<p><strong>4.</strong></p>","a":[{"id":1655925,"option":"1","correct":false},{"id":1655926,"option":"2","correct":true},{"id":1655927,"option":"3","correct":false},{"id":1655928,"option":"Both 1 and 3","correct":false}]},{"q":"<p>What should you do to instantiate beans using XML-based configuration metadata?</p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<p>Specify the name of object that is to be instantiated in the class attribute of the bean element</p>\n\n<p><strong>2.</strong></p>\n\n<p>Specify the id of object that is to be instantiated in the class attribute of the bean element</p>\n\n<p><strong>3.</strong></p>\n\n<p>Specify the type of object that is to be instantiated in the class attribute of the bean element</p>\n\n<p><strong>4.</strong></p>\n\n<p>Specify the class containing the static factory method</p>","a":[{"id":1655885,"option":"1","correct":false},{"id":1655886,"option":"2","correct":false},{"id":1655887,"option":"3","correct":true},{"id":1655888,"option":"4","correct":false}]},{"q":"<p>You have a class 'A' that requires an instance of class 'B' through constructor injection. Also, class 'B' requires an instance of class 'A' through constructor injection.<br>\nWhat will the Spring IoC container do if you configure beans for classes 'A' and 'B' to be injected into each other?</p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<p>It will throw a BeanCurrentlyInCreationException.</p>\n\n<p><strong>2.</strong></p>\n\n<p>It will start using setter injection instead for both classes</p>\n\n<p><strong>3.</strong></p>\n\n<p>It will start using setter injection instead for one of the classes</p>\n\n<p><strong>4.</strong></p>\n\n<p>None of these</p>","a":[{"id":1655881,"option":"1","correct":true},{"id":1655882,"option":"2","correct":false},{"id":1655883,"option":"3","correct":false},{"id":1655884,"option":"4","correct":false}]},{"q":"<p>You want to create new instances every time a particular bean is requested. Which of these Spring bean scopes should be used in order to achieve this?</p>\n\n<p> </p>","a":[{"id":1655877,"option":"Singleton","correct":false},{"id":1655878,"option":"Session","correct":false},{"id":1655879,"option":"Prototype","correct":true},{"id":1655880,"option":"Request","correct":false}]},{"q":"<p>You want to disable some unnecessary auto-configuration classes applied to a SpringBoot application that are not present on the classpath.<br>\n<br>\nWhat should you do to achieve this?</p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<p>Exclude the attribute of @EnableAutoConfiguration annotation</p>\n\n<p><strong>2.</strong></p>\n\n<p>Autoconfigure the exclude property of @EnableAutoConfiguration annotation</p>\n\n<p><strong>3.</strong></p>\n\n<p>Autoconfigure the excludeClass attribute of the @EnableAutoConfiguration annotation</p>\n\n<p><strong>4.</strong></p>\n\n<p>Enable the excludeName attribute of the @EnableAutoConfiguration annotation</p>","a":[{"id":1655873,"option":"1","correct":false},{"id":1655874,"option":"2","correct":true},{"id":1655875,"option":"3","correct":false},{"id":1655876,"option":"4","correct":false}]},{"q":"<p>In Spring Boot, if you have implemented the following code then which of the following statements is correct?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>@Component\npublic class Hackerearth \n{\n\n     private Hack hack;\n\n     @Autowired\n     public Hackerearth(Hack hack) \n     {\n         this.hack = hack;\n     }\n}\n\n@Component\npublic class hack1 extends hack \n{\n\n     public hack1(DataSource hack_data) \n     {\n         // some code\n     }\n}\n\n@Primary\n@Component\npublic class hack2 extends hack \n{\n\n     public hack2(SessionFactory hack_session) \n     {\n         // some code\n     }\n    \n}</code></pre>\n\n<p><br>\n<strong>Statements:</strong></p>\n\n<ol>\n\t<li>The <strong>@Primary</strong> annotation lies in the <strong>org.springframework.context.annotation</strong> package.<br>\n\t </li>\n\t<li>During component scanning, the hack2 bean will be injected preferentially over the hack1 bean.<br>\n\t </li>\n\t<li>In XML based configuration the <strong>@Primary</strong> annnotation can be configured using the following syntax-\n\t<pre class=\"prettyprint\"><code>&lt;bean primary=\"true\"/&gt; </code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1558226,"option":"1 and 2","correct":false},{"id":1558227,"option":"2 and 3","correct":false},{"id":1558228,"option":"1 and 3","correct":false},{"id":1558229,"option":"All of these","correct":true}]},{"q":"<p>In Spring Boot, if you have implemented the following code then which of the following statements is correct?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>public class Hackerearth  \n{  \n    private int hack_id;  \n    \n    @Required  \n    public void setHack_id(int hack_id)   \n    {  \n        this.hack_id = hack_id;  \n    }  \n    \n    public int getHack_id()    \n    {  \n        return id;  \n    }     \n}  </code></pre>\n\n<p> </p>\n\n<p><strong>Statements:</strong></p>\n\n<ol>\n\t<li>The <strong>@Required</strong> annotation lies in the <strong>org.springframework.beans.factory.annotation</strong> package.<br>\n\t </li>\n\t<li>The <strong>@Required</strong> annotation indicates that the <strong><em>setHack_id</em></strong> setter method must be configured to be dependency-injected with a value.<br>\n\t </li>\n\t<li>An exception BeanInitializationException is thrown if the <em><strong>hack_id</strong> </em>property is not set at the configuration time.</li>\n</ol>","a":[{"id":1558472,"option":"1 and 2","correct":false},{"id":1558473,"option":"2 and 3","correct":false},{"id":1558474,"option":"1 and 3","correct":false},{"id":1558475,"option":"All of these","correct":true}]},{"q":"<p>Bob was working on Spring Boot. In Spring Boot he was working on the  ApplicationContext interface that lies in the <strong>org.springframework.context</strong> package. To get the unique id of this application context Bob was using the the <strong>getId() </strong>method. And to get the parent context he used the <strong>getParent()</strong> method. Comparing these methods to the other methods of the ApplicationContext there is unique point these 2 methods possess. In this scenario if you are required to suggest Bob then which of the following methods would you suggest Bob?</p>\n\n<p><strong>Statements:</strong></p>\n\n<ol>\n\t<li>The <strong>getParent()</strong> method of ApplicationContext can return a null value.</li>\n\t<li>The <strong>getParent()</strong> method of ApplicationContext cannot return a null value.</li>\n\t<li>The <strong>getId()</strong> method of ApplicationContext can return a null value.</li>\n\t<li>The <strong>getId()</strong> method of ApplicationContext cannot return a null value.</li>\n</ol>\n\n<p> </p>\n\n<p> </p>\n\n<p> </p>","a":[{"id":1558480,"option":"1 and 3","correct":true},{"id":1558481,"option":"2 and 3","correct":false},{"id":1558482,"option":"1 and 4","correct":false},{"id":1558483,"option":"2 and 4","correct":false}]},{"q":"<p>Alice was working on Spring Boot. In Spring Boot she was working on the Lifecycle interface that lies in the <strong>org.springframework.context</strong> package. To control the Lifecycle interface <strong>start()</strong> and <strong>stop() </strong>methods are used. But Alice wasn't aware of it. In this scenario if you are required to help Alice then which of the following statements would suggest Alice to be aware of?</p>\n\n<p><strong>Statement:</strong></p>\n\n<ol>\n\t<li>The <strong>start()</strong> method of the Lifecycle interface should throw an exception if the component is already running.</li>\n\t<li>The <strong>start()</strong> method of the Lifecycle interface should not throw an exception if the component is already running.</li>\n\t<li>The <strong>stop()</strong> method of the Lifecycle interface should throw an exception if the component is not started yet.</li>\n\t<li>The <strong>stop()</strong> method of the Lifecycle interface should not throw an exception if the component is not started yet.</li>\n</ol>\n\n<p> </p>\n\n<p> </p>\n\n<p> </p>","a":[{"id":1558508,"option":"1 and 3","correct":false},{"id":1558509,"option":"2 and 3","correct":false},{"id":1558510,"option":"1 and 4","correct":false},{"id":1558511,"option":"2 and 4","correct":true}]},{"q":"<p>You are working on a student portal using Spring Boot, and you have a SQL database named <em><strong>student_data</strong> </em> that contains information about the students. In order to initialize the <strong><em>student_data</em></strong> database so that it can be used with the web application, you are using Spring Data JPA and have created a repository file named <strong><em>StudentRepository</em></strong> to access the data. Now if you have imported the <em><strong>spring.jpa.hibernate.ddl-auto </strong></em>dependency then which of the following statements is correct?<br>\n<br>\n<strong>Statements:</strong></p>\n\n<ol>\n\t<li>Possible property values of <em><strong>spring.jpa.hibernate.ddl-auto</strong> </em>dependency can be none, validate, update, and create-drop.<br>\n\t </li>\n\t<li>Using the following code in the <strong><em>StudentRepository</em></strong> file we can use the generic CRUD methods-\n\t<pre class=\"prettyprint\"><code>public interface StudentRepository extends JpaRepository&lt; &gt; { … }</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<p>Using the following code in the <strong><em>StudentRepository</em></strong> file we can use the generic CRUD methods-</p>\n\n\t<pre class=\"prettyprint\"><code>public class StudentRepository extends JpaRepository&lt; &gt; { … }</code></pre>\n\t</li>\n</ol>\n\n<p> </p>","a":[{"id":1558238,"option":"1 and 3","correct":false},{"id":1558239,"option":"1 and 2","correct":true},{"id":1558240,"option":"only 1","correct":false},{"id":1558241,"option":"All of these","correct":false}]},{"q":"<p>John is working on an in-memory database named <strong>H2 database</strong> for his Spring Boot application. Now, he has configured the H2 database to utilize in his application by adding the following dependency to the <strong>pom.xml</strong> file. Now, assume that he has configured the data source URL<strong>, </strong>driver class name<strong>, </strong>username<strong>,</strong> and password of the H2 database. He is required to persist the data in the H2 database. Alice has asked him to store the data in a file named <strong>hackmyh2db</strong> to perform this action. In order to store the data in that file, which of the following actions John must perform in this scenario:</p>\n\n<p><strong>Dependency in pom.xml file</strong></p>\n\n<pre class=\"prettyprint\"><code>&lt;dependency&gt;  \n&lt;groupId&gt;com.h2database&lt;/groupId&gt;  \n&lt;artifactId&gt;h2&lt;/artifactId&gt;  \n&lt;scope&gt;runtime&lt;/scope&gt;  \n&lt;/dependency&gt;  </code></pre>\n\n<p> </p>","a":[{"id":1582554,"option":"Change the datasource URL property","correct":true},{"id":1582555,"option":"Change the driver class name property","correct":false},{"id":1582556,"option":"Change the destination on configuration file","correct":false},{"id":1582557,"option":"Change the username and the password properties","correct":false}]},{"q":"<p>You are building a web application using Spring Boot to display details of a Student. To access the database containing the details of students you use Spring Data. There are various fields associated with the Student object i.e. roll number, class, section, date of birth. Now, which of the following annotations of Spring Data JPA can you use to mark the \"<strong>section</strong>\" field to be transient for the mapping framework?<br>\n<strong>Annotations:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>@Skip</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>@Ignore</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>@JsonIgnore</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>@Transient</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1499359,"option":"1","correct":false},{"id":1499360,"option":"2","correct":false},{"id":1499361,"option":"3","correct":false},{"id":1499362,"option":"4","correct":true}]},{"q":"<p>Alice was working on Spring Boot. While performing some operations he wanted to store data in a Java collection. But he was confused about which type of Java collection types he can use. In this scenario which of the following type of Java collection types can Alice use?</p>\n\n<p><strong>Collection Types:</strong></p>\n\n<ol>\n\t<li>List<br>\n\t </li>\n\t<li>Set<br>\n\t </li>\n\t<li>Map</li>\n</ol>","a":[{"id":1558536,"option":"1 and 2","correct":false},{"id":1558537,"option":"2 and 3","correct":false},{"id":1558538,"option":"1 and 3","correct":false},{"id":1558539,"option":"All of these","correct":true}]},{"q":"<p>Bob was working on Spring Boot. He wanted to fetch some data from the DataBase. In the process, he wanted to map a class to the database table. But he forgot which annotation is used to map that class to the DataBase. Which annotation should Bob use to map?</p>\n\n<p> </p>\n\n<p> </p>","a":[{"id":1558532,"option":"@Repository","correct":false},{"id":1558533,"option":"@Map","correct":false},{"id":1558534,"option":"@Entity","correct":true},{"id":1558535,"option":"@Table","correct":false}]},{"q":"<p>Ben wanted to build a REST API service in Spring Boot. So to exchange data between client and server he doesn't know what message format he can use. Which of the following message exchange formats can Ben use? </p>\n\n<p><strong>Formats:</strong></p>\n\n<ol>\n\t<li>JSON<br>\n\t </li>\n\t<li>XML</li>\n</ol>","a":[{"id":1558524,"option":"only 1","correct":false},{"id":1558525,"option":"only 2","correct":false},{"id":1558526,"option":"Both 1 and 2","correct":true},{"id":1558527,"option":"None of these","correct":false}]},{"q":"<p>Mike was working on Spring Boot. He wanted to create BeanInfo instances for Spring beans using the BeanInfoFactory interface that lies in the org.springframework.beans. But in the process, he confused about the <strong>getBeanInfo()</strong> method. If you are required to help Mike in this scenario then which of the following statements would you suggest Mike?</p>\n\n<p><strong>Statements:</strong></p>\n\n<ol>\n\t<li>The <strong>getBeanInfo()</strong> method of the BeanInfoFactory interface can return a null value.</li>\n\t<li>The <strong>getBeanInfo()</strong> method of the BeanInfoFactory interface cannot return a null value.</li>\n\t<li>In case of exceptions, the <strong>getBeanInfo()</strong> method throws an <strong>IntrospectionException</strong> exception.</li>\n\t<li>The <strong>getBeanInfo()</strong> method doesn't throw any exception.</li>\n</ol>","a":[{"id":1558520,"option":"1 and 4","correct":false},{"id":1558521,"option":"2 and 3","correct":false},{"id":1558522,"option":"1 and 3","correct":true},{"id":1558523,"option":"2 and 4","correct":false}]},{"q":"<p>Lisa was trying to access Relational Data using JDBC with Spring. Lisa has some issues and doesn't know how to handle them. But Lisa made a little research and realised the Spring provides a template class called <strong>JdbcTemplate. </strong>This template makes it easier to work with SQL relational databases and JDBC. But Lisa doesn't whether all of her issues can be handled by <strong>JdbcTemplate </strong>or not. So if you are required to help Lisa then which of the following issues of Lisa will be automatically taken care of <strong>JdbcTemplate.</strong></p>\n\n<p><strong>Issues</strong></p>\n\n<ol>\n\t<li>Connection management</li>\n\t<li>Exception handling</li>\n</ol>\n\n<p> </p>\n\n<p> </p>","a":[{"id":1580971,"option":"1","correct":false},{"id":1580972,"option":"2","correct":false},{"id":1580973,"option":"Both 1 and 2","correct":true},{"id":1580974,"option":"None of these","correct":false}]},{"q":"<p>Tara was working on SpringBoot. She wants to establish a connection to the H2 dataBase. She wanted to connect to the MySQL database and interact with the in-memory DB. What are the things she should be aware of while doing these tasks?</p>\n\n<p><strong>Statements</strong></p>\n\n<ol>\n\t<li>If you connect to the MySQL database, SpringBoot automatically set up the database and tables.</li>\n\t<li>If you connect to the MySQL database, we should manually set up the database and tables.</li>\n\t<li>While interacting with an in-memory DB, it automatically checks the entities and then creates the database and tables.</li>\n\t<li>While interacting with an in-memory DB, we should manually create a database and tables.</li>\n</ol>\n\n<p> </p>\n\n<p> </p>","a":[{"id":1580967,"option":"1 and 3","correct":false},{"id":1580968,"option":"2 and 3","correct":true},{"id":1580969,"option":"1 and 4","correct":false},{"id":1580970,"option":"2 and 4","correct":false}]},{"q":"<p>Anita was working on Spring Boot annotations. She made a list of annotations.</p>\n\n<p><strong>Annotations</strong></p>\n\n<ol>\n\t<li><strong>@Controller</strong></li>\n\t<li><strong>@RequestMapping</strong></li>\n\t<li><strong>@Request</strong></li>\n</ol>\n\n<p> </p>\n\n<p>Anita gave these annotations to her friend and asked him to send the definitions of them. But Anita friend sent these as statements without mapping them to the required annotations.</p>\n\n<p><strong>Statements</strong></p>\n\n<p><strong>A.</strong> It maps HTTP request with a path to a controller method.<br>\n<strong>B.</strong> It marks the class as a web controller, capable of handling the requests.<br>\n<strong>C.</strong> This annotation does not exist</p>\n\n<p>Which of the following options map the annotations with the correct statements?</p>\n\n<p> </p>\n\n<p> </p>\n\n<p> </p>\n\n<p> </p>","a":[{"id":1580975,"option":"1 - A, 2 - B, 3 - C","correct":false},{"id":1580976,"option":"1 - B, 2 - A, 3 - C","correct":true},{"id":1580977,"option":"1 - A, 2 - C, 3 - B","correct":false},{"id":1580978,"option":"1 - B, 2 - C, 3 - A","correct":false}]},{"q":"<p>In Spring Boot, you are working on Spring Data JPA. Now, if you are required to create JPA repositories then which of the following statements is correct?<br>\n<br>\n<br>\n<strong>Statements:</strong></p>\n\n<ol>\n\t<li>The Spring Data JPA repositories support can be activated using an annotation through JavaConfig<br>\n\t </li>\n\t<li>Spring Data JPA repositories can be configured using an XML namespace<br>\n\t </li>\n\t<li>The <em>entity-manager-factory-ref </em>JPA-specific attribute is usually used if multiple <strong>EntityManagerFactory</strong> beans are used within the application</li>\n</ol>","a":[{"id":1557872,"option":"1 and 2","correct":false},{"id":1557873,"option":"2 and 3","correct":false},{"id":1557874,"option":"1 and 3","correct":false},{"id":1557875,"option":"All of these","correct":true}]},{"q":"<p>Alice is working on her Spring Boot application that uses various annotations to configure the dependency injection. If she has implemented the following two Java code snippets that have  <strong>@Bean</strong> annotation and <strong>@Component</strong> annotation respectively, then which of the following statements about these annotations in this scenario are correct?<br>\n </p>\n\n<p><strong>Code I</strong></p>\n\n<pre class=\"prettyprint\"><code>package spring.hackerearth;\nimport org.springframework.context.annotation.*;\n\n@Configuration\npublic class hackerearth_configuration \n{\n    @Bean \n    public Hack hackerearth()\n    {\n      return new Hack();\n        \n    }\n}</code></pre>\n\n<p> </p>\n\n<p><strong>Code II</strong></p>\n\n<pre class=\"prettyprint\"><code>package spring.hackerearth;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class Hack_Component \n{\n    // your code goes here\n}</code></pre>\n\n<p><br>\n<br>\n<strong>Statements</strong></p>\n\n<ol>\n\t<li>A method annotated with <strong>@Bean</strong> annotation indicates that the method produces a bean to be managed by the Spring container.</li>\n\t<li>A class annotated with <strong>@Component</strong> annotation indicates that the class is a \"component\" and it can be considered as a candidate for auto-detection when using annotation-based configuration and classpath scanning.</li>\n\t<li>The <strong>@Bean</strong> annotation is preferred over <strong>@Component</strong> annotation if you are using a third-party class or Java ARchive (JAR) file.<br>\n\t </li>\n\t<li><strong>@Component</strong> annotation is a method-level annotation</li>\n</ol>","a":[{"id":1499355,"option":"1, 2, and 4","correct":false},{"id":1499356,"option":"2, 3, and 4","correct":false},{"id":1499357,"option":"1, 2, and 3","correct":true},{"id":1499358,"option":"All of these","correct":false}]},{"q":"<p>You are working on a Spring Boot application that has an Auto - Configuration feature that automatically configures the application based on the jar dependencies added. Now, if you are required to disable auto-configuration for the class <strong>DataSourceAutoConfiguration.class</strong>, then which of the following syntaxes can you use to perform this action?</p>\n\n<p> </p>\n\n<p><strong>Syntaxes</strong></p>\n\n<p> </p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>@Configuration\n@EnableAutoConfiguration(exclude={DataSourceAutoConfiguration.class})\npublic class Hackerearth {\n}</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>@Configuration\n@DisableAutoConfiguration(skip={DataSourceAutoConfiguration.class})\npublic class Hackerearth {\n}</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>@Configuration\n@EnableAutoConfiguration(ignore={DataSourceAutoConfiguration.class})\npublic class Hackerearth {\n}</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>@Configuration\n@DisableAutoConfiguration(exclude={DataSourceAutoConfiguration.class})\npublic class Hackerearth {\n}</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1498943,"option":"1","correct":true},{"id":1498944,"option":"2","correct":false},{"id":1498945,"option":"3","correct":false},{"id":1498946,"option":"4","correct":false}]},{"q":"<p>While working on Spring Boot,  Alice comes across a situation where she wants to push Spring Boot Integration Test to roll back updates to the data source upon completion. Which of the following ways can she use to perform this action?</p>\n\n<p> </p>\n\n<ol>\n\t<li>Injecting the EntityManager into the Test Class and call rollback.<br>\n\t </li>\n\t<li>Manually deleting the entities before the end of the test. <br>\n\t </li>\n\t<li>Annotating the Test Class with @Transactional which will automatically roll back each test's transaction.</li>\n</ol>","a":[{"id":1473970,"option":"1 and 3","correct":false},{"id":1473971,"option":"2 and 3","correct":false},{"id":1473972,"option":"only 3","correct":true},{"id":1473973,"option":"None of these","correct":false}]},{"q":"<p>Alice is working on Spring, when building a service abstraction which of the following ways can she use to make the bean available for Spring Dependency Injection?</p>\n\n<p> </p>\n\n<ol>\n\t<li>annotating the class<br>\n\t </li>\n\t<li>Maven Configuration<br>\n\t </li>\n\t<li>Java Config</li>\n</ol>","a":[{"id":1473962,"option":"1 and 3","correct":true},{"id":1473963,"option":"2 and 3","correct":false},{"id":1473964,"option":"1 and 2","correct":false},{"id":1473965,"option":"All of these","correct":false}]},{"q":"<p>Alice is learning Spring Data and is confused with the behavior of Spring Data Repositories at runtime. Which of the following defines the process through which the behavior of Spring Data Repositories is added to the runtime based on the interface defined in the runtime?</p>\n\n<p> </p>\n\n<ol>\n\t<li>Aspecting<br>\n\t </li>\n\t<li>Maven Packaging<br>\n\t </li>\n\t<li>Introspection</li>\n</ol>","a":[{"id":1473874,"option":"1 and 2","correct":false},{"id":1473875,"option":"2 and 3","correct":false},{"id":1473876,"option":"only 1","correct":true},{"id":1473877,"option":"All of these","correct":false}]},{"q":"<p>Bob is working on Spring Data and he wants to define a remote database. Which of the following is/are required from the configuration perspective? </p>\n\n<p> </p>\n\n<ol>\n\t<li>Database IOPS<br>\n\t </li>\n\t<li>Database Type<br>\n\t </li>\n\t<li>Database URL<br>\n\t </li>\n\t<li>Database Username</li>\n</ol>","a":[{"id":1473870,"option":"1, 2, and 3","correct":false},{"id":1473871,"option":"2, 3, and 4","correct":true},{"id":1473872,"option":"1, 3, and 4","correct":false},{"id":1473873,"option":"1, 2, and 4","correct":false}]},{"q":"<p>You are working on a Spring Boot project. The <strong>application.properties</strong> file has two custom properties as given. Now if you have implemented the following code, then which of the following statements is correct?</p>\n\n<p><strong>application.properties</strong></p>\n\n<pre class=\"prettyprint\"><code>hack.hack_name=\"Bob\"\nhack.hack_id=\"101\"</code></pre>\n\n<p><br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>package hackerearth;\n\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\n@ConfigurationProperties(prefix = \"hack\")\npublic class Hackerearth \n{\n\n    private final String hack_name;\n    private final int hack_id;\n    \n    public Hackerearth(String hack_name, int hack_id) \n    {\n        this.hack_name = hack_name;\n        this.hack_id = hack_id;\n    }\n\n    public String getHack_name() \n    {\n        return hack_name;\n    }\n\n    public String getHack_id() \n    {\n        return hack_id;\n    }\n\n}</code></pre>\n\n<p> </p>\n\n<p> </p>\n\n<p><strong>Statements:</strong></p>\n\n<ol>\n\t<li>The @ConfigurationProperties annotation can be used in a @Configuration class to bind and validate some external properties.<br>\n\t </li>\n\t<li> Adding <strong>@ConstructorBinding </strong>annotation in the given code will make the <em>Hackerearth</em> class as immutable.</li>\n</ol>","a":[{"id":1558028,"option":"only 1","correct":false},{"id":1558029,"option":"only 2","correct":false},{"id":1558030,"option":"1 and 2","correct":true},{"id":1558031,"option":"None of these","correct":false}]},{"q":"<p>You are working on a Spring Boot application. Now if you want to analyze the operational information about your application that is currently running, then which of the following Spring Boot starters can you use to perform this action?</p>\n\n<p><br>\n </p>","a":[{"id":1558230,"option":"Spring Boot Starter Test","correct":false},{"id":1558231,"option":"Spring Boot Starter Undertow","correct":false},{"id":1558232,"option":"Spring Boot Starter Actuator","correct":true},{"id":1558233,"option":"Spring Boot Starter Logging","correct":false}]},{"q":"<p>Which of the following statements is correct about the BeanFactory interface in Spring Boot?</p>\n\n<p> </p>\n\n<p><strong>Statements:</strong></p>\n\n<ol>\n\t<li>The BeanFactory interface lies in the org.springframework.beans.factory package.<br>\n\t </li>\n\t<li>The BeanFactory interface is the root interface for accessing a Spring bean container.<br>\n\t </li>\n\t<li>The BeanFactory interface is implemented by objects that hold a number of bean definitions, each uniquely identified by a String name.</li>\n</ol>","a":[{"id":1558104,"option":"1 and 2","correct":false},{"id":1558105,"option":"2 and 3","correct":false},{"id":1558106,"option":"1 and 3","correct":false},{"id":1558107,"option":"All of these","correct":true}]},{"q":"<p>In Spring Boot, if you have implemented the following code then which of the following statements is correct?<br>\n </p>\n\n<p><strong>Code:</strong><br>\n </p>\n\n<pre class=\"prettyprint\"><code>@RestController\n@RequestMapping(\"/hack_user\")\npublic class Hackerearth_User \n{\n\n    @CrossOrigin(origins = \"http://hack.com\")\n    @RequestMapping(method = RequestMethod.GET, path = \"/{id}\")\n    public User get_user(@PathVariable Long hack_id) \n    {\n        // some code\n    }\n\n    @RequestMapping(method = RequestMethod.DELETE, path = \"/{id}\")\n    public void del_user(@PathVariable Long hack_id) \n    {\n        // some code\n    }\n}</code></pre>\n\n<p><br>\n<br>\n<strong>Statements:</strong></p>\n\n<ol>\n\t<li>The @CrossOrigin annotation is used to allow cross-origin requests on specific handler classes and/or handler methods.<br>\n\t </li>\n\t<li>The <em>del_user </em>allows all origins to send cross-origin requests.<br>\n\t </li>\n\t<li>The <em>get_user</em>  method allows only http://hack.com to send cross-origin requests.</li>\n</ol>","a":[{"id":1558100,"option":"1 and 2","correct":false},{"id":1558101,"option":"2 and 3","correct":false},{"id":1558102,"option":"1 and 3","correct":false},{"id":1558103,"option":"All of these","correct":true}]},{"q":"<p>In Spring Boot, if you have implemented the following code then which of the following statements is correct?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>@Component\n@Qualifier(\"hack1\")\npublic class hacker implements Hackerearth \n{\n    public String hack_method() \n    {\n        return \"hack1\";\n    }\n}\n\n@Component\n@Qualifier(\"hack2\")\npublic class hacks implements Hackerearth \n{\n    public String hack_method() \n    {\n        return \"hack2\";\n    }\n}\n\npublic class hack_class \n{\n    \n    @Autowired\n    @Qualifier(\"hack1\")\n    private Hackerearth hackerearth;\n}</code></pre>\n\n<p><br>\n<br>\n<strong>Statements:</strong></p>\n\n<ol>\n\t<li>The @Qualifier annotation helps to resolve the issue of which bean needs to be injected when there is an ambiguity.<br>\n\t </li>\n\t<li>The @Qualifier annotation defines a preference when there are many beans of the same type and it is ambiguous to decide which bean to inject.</li>\n</ol>","a":[{"id":1558032,"option":"only 1","correct":true},{"id":1558033,"option":"only 2","correct":false},{"id":1558034,"option":"Both 1 and 2","correct":false},{"id":1558035,"option":"None of these","correct":false}]},{"q":"<p>In Spring Boot, if you have used the <strong>@ConfigurationPropertiesScan</strong> annotation then which of the following statements is correct?<br>\n </p>\n\n<p><strong>Statements:</strong></p>\n\n<ol>\n\t<li>The <strong>@ConfigurationPropertiesScan</strong> annotation lies in the org.springframework.beans package.<br>\n\t </li>\n\t<li>A class annotated with @Component is not scanned by the <strong>@ConfigurationPropertiesScan</strong> annotation.<br>\n\t </li>\n\t<li>The <strong>@ConfigurationPropertiesScan</strong> annotation configures the base packages while scanning configuration property classes.</li>\n</ol>","a":[{"id":1557984,"option":"1 and 2","correct":false},{"id":1557985,"option":"2 and 3","correct":true},{"id":1557986,"option":"1 and 3","correct":false},{"id":1557987,"option":"None of these","correct":false}]},{"q":"<p>Dependency Injection is a principle that makes the code cleaner and also decoupling becomes more effective when objects are provided with their dependencies. Consider you are working on a Spring Boot application. Now if you are required to use the principle of dependency injection, then which of the following statements is correct?</p>\n\n<p> </p>\n\n<p><strong>Statements:</strong></p>\n\n<ol>\n\t<li>Constructor-based dependency injection is implemented by the container invoking a constructor with a number of arguments, each representing a dependency.<br>\n\t </li>\n\t<li>Generally the constructor-based dependency injection is used for mandatory dependencies.<br>\n\t </li>\n\t<li>Generally the setter-based dependency injection is used for optional dependencies.</li>\n</ol>","a":[{"id":1557864,"option":"1 and 2","correct":false},{"id":1557865,"option":"2 and 3","correct":false},{"id":1557866,"option":"1 and 3","correct":false},{"id":1557867,"option":"All of these","correct":true}]},{"q":"<p>Spring Boot uses the concept of autowiring which helps to reduce the need to specify properties or constructor arguments. Now, if you are working on a Spring Boot application and you have implemented the concept of autowiring then which of the following statements is correct?<br>\n<br>\n </p>\n\n<p><strong>Statements:</strong></p>\n\n<ol>\n\t<li>Properties such as primitives, Strings, and Classes can be autowired. <br>\n\t </li>\n\t<li>When using XML-based configuration, with <em>byType</em> or <em>constructor</em> autowiring modes you can wire arrays and typed collections.<br>\n\t </li>\n\t<li>The <em>byType </em>autowiring mode in XML-based configuration throws an exception if more than one bean of the property type exists in the container.</li>\n</ol>","a":[{"id":1557800,"option":"1 and 2","correct":false},{"id":1557801,"option":"2 and 3","correct":true},{"id":1557802,"option":"1 and 3","correct":false},{"id":1557803,"option":"All of these","correct":false}]},{"q":"<p>You are working on Spring Boot. Now, which of the following statements is correct about bean scopes that are supported by Spring Boot?</p>\n\n<p> </p>\n\n<p><strong>Statements:</strong></p>\n\n<ol>\n\t<li>The <em>singleton </em>bean scope scopes a single bean definition to a single object instance.<br>\n\t </li>\n\t<li>If the bean scope is not specified then the <em>prototype </em>bean scope is used by default.<br>\n\t </li>\n\t<li>The <em>session</em> bean scope can be used only in web-based applications<code>.</code></li>\n</ol>","a":[{"id":1557560,"option":"1 and 2","correct":false},{"id":1557561,"option":"2 and 3","correct":false},{"id":1557562,"option":"1 and 3","correct":true},{"id":1557563,"option":"All of these","correct":false}]},{"q":"<p>In Spring Boot, if you have used the <strong>@Component</strong> annotation, then which of the following statements is correct?</p>\n\n<p> </p>\n\n<p><strong>Statements:</strong></p>\n\n<ol>\n\t<li>The <strong>@Component</strong> annotation lies in the org.springframework.stereotype package.<br>\n\t </li>\n\t<li>A class annotated with <strong>@Component </strong>annotation is considered as a candidate for auto-detection during classpath scanning.<br>\n\t </li>\n\t<li>The <strong>@Component </strong>annotation is a class-level annotation<strong>.</strong></li>\n</ol>\n\n<p> </p>","a":[{"id":1557556,"option":"1  and 2","correct":false},{"id":1557557,"option":"2 and 3","correct":false},{"id":1557558,"option":"1 and 3","correct":false},{"id":1557559,"option":"All of these","correct":true}]},{"q":"<p>You are building a web application using Spring Boot that creates a One-To-Many relationship between a Customer and an Order such that one customer can make more than one order. You are given the following two Java code snippets named <strong>Code I</strong> and <strong>Code II</strong> that performs the following actions:<br>\n<br>\n<strong>Actions</strong></p>\n\n<ol>\n\t<li>Code I indicates a One-To-Many association by using Generics.</li>\n</ol>\n\n<p>       2. Code II indicates a unidirectional One-To-Many association by using a foreign key mapping.</p>\n\n<p>Now, which of the following statements about these code snippets are correct:<br>\n </p>\n\n<p><strong>Code I</strong></p>\n\n<pre class=\"prettyprint\"><code>@OneToMany(cascade={CascadeType.REFRESH, CascadeType.MERGE}, mappedBy=\"customer\") \npublic Set&lt;Order&gt; getOrders() \n{ \n    return orders; \n    \n}</code></pre>\n\n<p> </p>\n\n<p><strong>Code II</strong></p>\n\n<pre class=\"prettyprint\"><code>@OneToMany(orphanRemoval=true)\n@JoinColumn(name=\"Customer_ID\") \npublic Set&lt;Order&gt; getOrders() \n{\n    return orders;\n    \n}</code></pre>\n\n<p> </p>\n\n<p> </p>\n\n<p><strong>Statements</strong></p>\n\n<ol>\n\t<li> In <strong>CascadeType.REFRESH</strong> operation, if the parent entity is refreshed in the current persistence context, the related entity will also be refreshed.<br>\n\t </li>\n\t<li> In <strong>CascadeType.MERGE</strong> operation, if the parent entity is merged into the persistence context, the related entity will also be merged.<br>\n\t </li>\n\t<li> The <strong>mappedBy</strong> element is not required in a Unidirectional relationship.<br>\n\t </li>\n\t<li> The <strong>orphanRemoval</strong> element is a boolean type that specifies whether to apply the CascadeType.REFRESH operation to   the entities that have been removed from the relationship and to cascade the remove operation to those entities<br>\n\t </li>\n</ol>","a":[{"id":1499483,"option":"1, 2, and 4","correct":false},{"id":1499484,"option":"2, 3, and 4","correct":false},{"id":1499485,"option":"1, 2, and 3","correct":true},{"id":1499486,"option":"All of these","correct":false}]},{"q":"<p>Which of the following commands is used to shut down a Spring Boot application?</p>","a":[{"id":655784,"option":"curl -X GET localhost:port/actuator/shutdown","correct":false},{"id":655785,"option":"curl -X GET localhost:port/actuator/kill","correct":false},{"id":655786,"option":"curl -X POST localhost:port/actuator/terminate","correct":false},{"id":655787,"option":"curl -X POST localhost:port/actuator/shutdown","correct":true}]},{"q":"<p>In Spring Boot, which of the following open-source projects is used to publish and subscribe to the messages based on the fault-tolerant messaging system?</p>","a":[{"id":655780,"option":"Twilio","correct":false},{"id":655781,"option":"Apache Kafka","correct":true},{"id":655782,"option":"Hystrix","correct":false},{"id":655783,"option":"Rabbit MQ","correct":false}]},{"q":"<p>Which of these is the correct order to create a deployable war file in Spring Boot?</p>\n\n<p>1. Mark the embedded servlet container dependency as provided.<br>\n2. Extend SpringBootServletInitializer and override its configuration method.<br>\n3. Change the packing type to war in pom.xml or in build.gradle.</p>","a":[{"id":655768,"option":"1 -> 2 -> 3","correct":false},{"id":655769,"option":"1 -> 3 -> 2","correct":false},{"id":655770,"option":"2 -> 3 -> 1","correct":true},{"id":655771,"option":"2 -> 1 -> 3","correct":false}]},{"q":"<p>In Spring Boot, which of the following is a special starter that makes Maven or Gradle dependency-management easier by adding jars to the classpath?</p>","a":[{"id":655796,"option":"spring-boot-starter-data-jpa","correct":false},{"id":655797,"option":"spring-boot-starter-parent","correct":true},{"id":655798,"option":"spring-boot-starter-web","correct":false},{"id":655799,"option":"spring-boot-starter-dependency","correct":false}]},{"q":"<p>While working with interceptors in Spring Boot, which of the following methods is used to perform operations before sending the response to the client?</p>","a":[{"id":655776,"option":"preHandle()","correct":false},{"id":655777,"option":"postHandle()","correct":true},{"id":655778,"option":"afterCompletion()","correct":false},{"id":655779,"option":"None of these","correct":false}]},{"q":"<p>In Spring Boot, what are the steps followed to connect to an external database like My SQL?</p>\n\n<ol>\n\t<li>Remove H2 dependency from pom.xml</li>\n\t<li>Add dependency for MySQL connector to pom.xml</li>\n\t<li>Configure your connection to MySQL Database</li>\n\t<li>Setup MySQL Database</li>\n</ol>","a":[{"id":655792,"option":"1->2->3->4","correct":false},{"id":655793,"option":"2->1->4->3","correct":true},{"id":655794,"option":"2->1->3->4","correct":false},{"id":655795,"option":"1->2->4->3","correct":false}]},{"q":"<p>Which of the following codes is a dependency for Spring Boot starter web?</p>","a":[{"id":656520,"option":"<bean>\r\n    <dependency>org.springframework.boot</dependency>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</bean>","correct":false},{"id":656521,"option":"<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>","correct":true},{"id":656522,"option":"<bean>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <dependency>spring-boot-starter-web</dependency>\r\n</bean>","correct":false},{"id":656523,"option":"<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <bean>spring-boot-starter-web</bean>\r\n</dependency>","correct":false}]},{"q":"<p>In Spring Boot, which of the following codes is used to disable specific auto-configuration classes?</p>","a":[{"id":656528,"option":"@Configuration\r\n@EnableAutoConfiguration(exclude={DataSourceAutoConfiguration.class})\r\npublic class CustomConfiguration {\r\n}","correct":true},{"id":656529,"option":"@Configuration\r\n@DisableAutoConfiguration(exclude={DataSourceAutoConfiguration.class})\r\npublic class CustomConfiguration {\r\n}","correct":false},{"id":656530,"option":"@Config\r\n@EnableConfiguration(exclude={DataSourceAutoConfiguration.class})\r\npublic class CustomConfiguration {\r\n}","correct":false},{"id":656531,"option":"@Config\r\n@AutoConfiguration(exclude={DataSourceAutoConfiguration.class})\r\npublic class CustomConfiguration {\r\n}","correct":false}]}]
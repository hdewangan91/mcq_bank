[{"q":"<p>You are using the following code snippet in your application when working with Lists in Java.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>List list = Arrays.asList(1, 2, 3, 4;\nlist.forEach(i -&gt; {i *= 2; System.out.print(i)});</code></pre>\n\n<p>What will be the result of executing the code snippet?</p>","a":[{"id":1656033,"option":"Compilation fails","correct":true},{"id":1656034,"option":"An exception will be thrown at runtime","correct":false},{"id":1656035,"option":"It print out \"1.2.3.4\"","correct":false},{"id":1656036,"option":"It print out \"2.4,6,8\"","correct":false}]},{"q":"<p>In Spark Streaming integrated with Kafka, which of these statements about the following code are correct:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>def function(): StreamingContext = {\n  val hack_ssc = new StreamingContext(...)   \n  val h_lines = hack_ssc.socketTextStream(...) \n  ...\n  hack_ssc.checkpoint(checkpointDirectory)   \n  hack_ssc\n}\nval hack_context = StreamingContext.getOrCreate(checkpointDirectory, function _)\nhack_context. ...\nhack_context.start()\nhack_context.awaitTermination()</code></pre>\n\n<p><strong>Statements </strong></p>\n\n<ol>\n\t<li>If the program starts for the first time, the <strong>StreamingContext.getOrCreate()</strong> function allows you to create a new StreamingContext class, set up all the streams, and then call <strong>stop()</strong>.</li>\n\t<li>If the program restarts after failure, then the <strong>StreamingContext.getOrCreate()</strong> function allows you to replace a StreamingContext from the checkpoint data in the checkpoint directory.</li>\n\t<li>If the checkpointDirectory exists, then the context is replaced from the checkpoint data.</li>\n\t<li>If the checkpoint directory does not exist, that is, running for the first time, then the <strong>functionToCreateContext </strong>function is called to create a new context and disable the DStreams.</li>\n</ol>","a":[{"id":1167886,"option":"1, 2, 3","correct":false},{"id":1167887,"option":"2, 3, 4","correct":false},{"id":1167888,"option":"1, 3, 4","correct":false},{"id":1167889,"option":"None of these","correct":true}]},{"q":"<p>What is the output of the following Java 8 code:</p>\n\n<pre class=\"prettyprint\"><code>import java.util.stream.IntStream;\nimport java.util.stream.Stream;\n\npublic class HackerEarth\n {\n  public static void main(String args[])\n  {\n    Stream&lt;double[]&gt; HackValue = IntStream.rangeClosed(1, 100)\n    .boxed().flatMap(a -&gt;IntStream.rangeClosed(a, 10)\n    .mapToObj(\n    b -&gt; new double[] {a,b, Math.sqrt(a * a + b * b)})\n    .filter (t -&gt; t[2] % 1 == 0));\n \nHackValue.limit(5)\n    .forEach(t-&gt; System.out.println(t[0] + \", \" + t[1] + \", \" + t[2]));\n   }\n}</code></pre>\n\n<p><strong>Output</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>3.0, 4.0, 5.0             \n6.0, 8.0, 10.0</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>3.0, 4.0, 5.0             \n6.0, 8.0, 10.0         \n5.0, 12.0, 13.0</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>3.0, 4.0, 5.0</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>6.0, 8.0, 10.0         \n5.0, 12.0, 13.0</code></pre>","a":[{"id":552948,"option":"1","correct":true},{"id":552949,"option":"2","correct":false},{"id":552950,"option":"3","correct":false},{"id":552951,"option":"4","correct":false}]}]
[{"q":"<p>To increase the responsiveness of your application, you are using Redis&nbsp;as a cache to store frequently accessed data in memory. You want to provide a check-and-set (CAS) behavior to <em>Redis transactions</em> for optimistic locking.&nbsp;If multiple clients try to increment the key at about the same time there will be a race condition. Which of the following code provides the form of locking:</p>\n\n<ul>\n\t<li>So that&nbsp;multiple clients can&nbsp;access&nbsp;different keys, and</li>\n\t<li>So that the collisions are unlikely,&nbsp;and&nbsp;</li>\n\t<li>So that there's no need to repeat the operation</li>\n</ul>\n\n<p><strong>Code</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>LOCK key1\nval = GET key1\nval = val + 2\nSET key1 $val\nUNLOCK</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>LOCK key1\nval = SET key1\nval = val + 2\nNEXT\nGET key1 $val\nUNLOCK</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>WATCH key1\nval = SET key1\nval = val + 10\nNEXT\nGET key1 $val\nEXEC</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>WATCH key1\nval = GET key1\nval = val + 10\nMULTI\nSET key1 $val\nEXEC</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1722183,"option":"1","correct":false},{"id":1722184,"option":"2","correct":false},{"id":1722185,"option":"3","correct":false},{"id":1722186,"option":"4","correct":true}]},{"q":"<p>To increase the responsiveness of your application, you are using Redis&nbsp;as a cache to store frequently accessed data in memory. You want to provide a check-and-set (CAS) behavior to <em>Redis transactions</em> for optimistic locking.</p>\n\n<p>Which of the following statements describe the best way to implement locking in Redis Transactions?</p>\n\n<p><strong>Statements</strong></p>\n\n<ol>\n\t<li>LOCK and UNLOCK are used&nbsp;to provide a check-and-set (CAS) behavior to Redis transactions for strict optimal locking.</li>\n\t<li>To avoid Race conditions and provide atomicity LOCK command avoid updating the same key by multiple clients and UNLOCK when the shared key gets out of the critical section.</li>\n\t<li>If the shared key is unlocked multiple clients can access the key if it wants to perform some operation.</li>\n\t<li>WATCH&nbsp;is used to provide a check-and-set (CAS) behavior to Redis transactions.</li>\n\t<li><code>WATCH</code>ed keys are monitored in order to detect changes against them. If at least one watched key is modified before the EXEC command, the whole transaction aborts and EXEC returns a NULL reply to notify that the transaction failed.</li>\n</ol>","a":[{"id":1722179,"option":"1 and 2","correct":false},{"id":1722180,"option":"1, 2 and 3","correct":false},{"id":1722181,"option":"Only 4","correct":false},{"id":1722182,"option":"4 and 5","correct":true}]},{"q":"<p>To increase the responsiveness of your application, you are using Redis&nbsp;as a cache to store frequently accessed data in memory.&nbsp;You have run&nbsp;the following commands in <em>redis-cli</em>.&nbsp;</p>\n\n<pre class=\"prettyprint\"><code>&gt; MULTI \n&gt; SET tutorial redis \n&gt; GET tutorial \n&gt; INCR visitors \n</code></pre>\n\n<p>What is the output of<em> EXEC </em>command in redis cli after running the given commands?&nbsp;</p>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>1) ERR \n2) \"OK\" \n3) (integer) 1</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>1) ERR \n2) OK \n3) (integer) 0 </code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>1) OK \n2) redis \n3) (integer) 0 </code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>1) OK \n2) \"redis\" \n3) (integer) 1 </code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1721459,"option":"1","correct":false},{"id":1721460,"option":"2","correct":false},{"id":1721461,"option":"3","correct":false},{"id":1721462,"option":"4","correct":true}]},{"q":"<p>To increase the responsiveness of your application, you are using <em>Redis</em>&nbsp;as a cache to store frequently accessed data in memory. How is a Redis transaction initialized and started?</p>","a":[{"id":1721455,"option":"Using a EXEC command","correct":false},{"id":1721456,"option":"Using a START command","correct":false},{"id":1721457,"option":"Using a MULTI command","correct":true},{"id":1721458,"option":"Using a START TRANSACTION command","correct":false}]},{"q":"<p>To increase the responsiveness of your application, you are using <em>Redis</em>&nbsp;as a cache to store frequently accessed data in memory. Which of the following statements are true for&nbsp;Transactions in Redis?</p>\n\n<p><strong>Statements</strong></p>\n\n<ol>\n\t<li>They allow the execution of a group of commands in multiple&nbsp;steps.</li>\n\t<li>It can&nbsp;never happen that a request issued by another client is served&nbsp;in the middle&nbsp;of the execution of a Redis transaction.&nbsp;</li>\n\t<li>Either all of the commands or none are processed, so a Redis transaction is also atomic.</li>\n</ol>\n\n<p>&nbsp;</p>","a":[{"id":1720626,"option":"1,2 ","correct":false},{"id":1720627,"option":"2, 3","correct":true},{"id":1720628,"option":"1, 3","correct":false},{"id":1720629,"option":"All of these","correct":false}]}]
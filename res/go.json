[{"q":"In Go, which of the following is used for documentation?","a":[{"id":600194,"option":"godoc","correct":true},{"id":600195,"option":"docgo","correct":false},{"id":600196,"option":"go.doc","correct":false},{"id":600197,"option":"gotodoc","correct":false}]},{"q":"In Go, which of the following is a predefined architecture-independent integer \ntype?","a":[{"id":600174,"option":"uint32 - Unsigned 32-bit integers (0 to 4294967295).","correct":false},{"id":600175,"option":"int8 - Signed 8-bit integers (128 to 127).","correct":false},{"id":600176,"option":"int16 - Signed 16-bit integers (32768 to 32767).","correct":false},{"id":600177,"option":"All of these","correct":true}]},{"q":"<p>In Go, which of the following is an extensive library that is used to implement garbage collections, concurrency, and other critical features?</p>","a":[{"id":600210,"option":"Core dumps","correct":false},{"id":600211,"option":"Linker","correct":false},{"id":600212,"option":"Runtime","correct":true},{"id":600213,"option":"None of these","correct":false}]},{"q":"In Go, the _______________ method of passing arguments to a function copies the actual value of the argument into a formal parameter of the function.","a":[{"id":600106,"option":"Call by value","correct":true},{"id":600107,"option":"Call by reference","correct":false},{"id":600108,"option":"Both of these","correct":false},{"id":600109,"option":"None of these","correct":false}]},{"q":"In Go, which of the following syntaxes is used to retrieve and install remote packages?\n\n","a":[{"id":600126,"option":"go build","correct":false},{"id":600127,"option":"go generate","correct":false},{"id":600128,"option":"go vet","correct":false},{"id":600129,"option":"go get","correct":true}]},{"q":"The Go programming language is constructed using _________________ to manage dependencies effectively.","a":[{"id":600154,"option":"Syntax","correct":false},{"id":600155,"option":"Statements","correct":false},{"id":600156,"option":"Packages","correct":true},{"id":600157,"option":"Tool","correct":false}]},{"q":"In Go, which of the following statements is used to force the next iteration of the loop to occur by skipping any code in between and the test condition of the loop?","a":[{"id":600102,"option":"for","correct":false},{"id":600103,"option":"continue","correct":true},{"id":600104,"option":"goto","correct":false},{"id":600105,"option":"break","correct":false}]},{"q":"<p>In Go, which of the following statements is correct about the delete() function:</p>\n\n<ol>\n\t<li>It is used to delete an entry from the map.</li>\n\t<li>The arguments of the delete function are the map and key to be deleted.</li>\n</ol>","a":[{"id":600094,"option":"Statement 1 is incorrect\r\nStatement 2 is correct","correct":false},{"id":600095,"option":"Statement 1 is correct\r\nStatement 2 is incorrect","correct":false},{"id":600096,"option":"Both of these","correct":true},{"id":600097,"option":"None of these","correct":false}]},{"q":"In Go, the _______________ method of passing arguments to a function copies the address of the argument into a formal parameter.","a":[{"id":600122,"option":"Call by reference","correct":true},{"id":600123,"option":"Call by value","correct":false},{"id":600124,"option":"Both of these","correct":false},{"id":600125,"option":"None of these","correct":false}]},{"q":"In Go, which of the following statements are necessary to define a structure?","a":[{"id":600078,"option":"goto and else","correct":false},{"id":600079,"option":"type and else","correct":false},{"id":600080,"option":"struct and goto","correct":false},{"id":600081,"option":"struct and type","correct":true}]},{"q":"In Go, changes made to a parameter inside a function have an effect on an argument when the ___________________ method of passing arguments is used.","a":[{"id":600114,"option":"Call by value","correct":false},{"id":600115,"option":"Call by reference","correct":true},{"id":600116,"option":"Both of these","correct":false},{"id":600117,"option":"None of these","correct":false}]},{"q":"In Go, changes made to a parameter inside a function have no effect on an argument when the ___________________ method of passing arguments is used.","a":[{"id":600110,"option":"Call by reference","correct":false},{"id":600111,"option":"Call by value","correct":true},{"id":600112,"option":"Both these","correct":false},{"id":600113,"option":"None of these","correct":false}]},{"q":"Which of the following terminates a for loop or switch statement and transfers the execution to the statement that immediately follows it:","a":[{"id":600086,"option":"goto","correct":false},{"id":600087,"option":"continue","correct":false},{"id":600088,"option":"break","correct":true},{"id":600089,"option":"None of these","correct":false}]},{"q":"In Go, which of the following keywords is used to perform an unconditional branching?","a":[{"id":600038,"option":"if","correct":false},{"id":600039,"option":"goto","correct":true},{"id":600040,"option":"else","correct":false},{"id":600041,"option":"for","correct":false}]},{"q":"Which of the following control statements is available in Go?","a":[{"id":600050,"option":"for","correct":false},{"id":600051,"option":"break statement","correct":false},{"id":600052,"option":"else","correct":false},{"id":600053,"option":"All of these","correct":true}]},{"q":"<p>In Go, which of the following statements about a pointer is correct:</p>\n\n<ol>\n\t<li>It is used to define a variable.</li>\n\t<li>It is used to assign an address to a variable.</li>\n\t<li>It is used to access the value that is stored in the address of a variable</li>\n</ol>","a":[{"id":600002,"option":"1 and 2","correct":false},{"id":600003,"option":"1 and 3","correct":false},{"id":600004,"option":"All of these","correct":true},{"id":600005,"option":"None of these","correct":false}]},{"q":"Which of the following functions increases the capacity of a slice in Go?","a":[{"id":600058,"option":"copy()","correct":false},{"id":600059,"option":"Â resize()","correct":false},{"id":600060,"option":"append()","correct":true},{"id":600061,"option":"None of these","correct":false}]},{"q":"In Go, which of the following operators checks if the value of two operators is equal?","a":[{"id":600022,"option":"!=","correct":false},{"id":600023,"option":"<>","correct":false},{"id":600024,"option":"eq","correct":false},{"id":600025,"option":"None of these","correct":true}]},{"q":"What is the default value of a local variable in Go?","a":[{"id":600054,"option":"Not fixed","correct":false},{"id":600055,"option":"Undefined","correct":false},{"id":600056,"option":"0 or nil","correct":true},{"id":600057,"option":"None of these","correct":false}]},{"q":"In Go, which of the following is a derived type?","a":[{"id":600014,"option":"Interface types","correct":false},{"id":600015,"option":"Map types","correct":false},{"id":600016,"option":"Channel types","correct":false},{"id":600017,"option":"All of these","correct":true}]},{"q":"In Go, which of the following operators leaves a remainder after an integer is divided?","a":[{"id":600030,"option":"#","correct":false},{"id":600031,"option":"^","correct":false},{"id":600032,"option":"$","correct":false},{"id":600033,"option":"%","correct":true}]},{"q":"Which of the following language operators is used to return the address of a variable in Go?","a":[{"id":599914,"option":"&","correct":true},{"id":599915,"option":"*","correct":false},{"id":599916,"option":"%","correct":false},{"id":599917,"option":"&&","correct":false}]},{"q":"In Go, which of the following libraries is used to manipulate strings?","a":[{"id":599918,"option":"unicode","correct":false},{"id":599919,"option":"regexp","correct":false},{"id":599920,"option":"strings","correct":false},{"id":599921,"option":"All of these","correct":true}]},{"q":"<p>Which of the following statements about the lvalue and rvalue expressions in Go are correct:</p>\n\n<ol>\n\t<li>The Ivalue expression refers to a memory location.</li>\n\t<li>The Ivalue expression can appear on the right side of an assignment.</li>\n\t<li>The rvalue expression refers to a data value that is stored at some address in the memory.</li>\n\t<li>The rvalue expression can only appear on the left side of an assignment.</li>\n</ol>","a":[{"id":599978,"option":"1 and 2","correct":false},{"id":599979,"option":"1 and 3","correct":true},{"id":599980,"option":"3 and 4","correct":false},{"id":599981,"option":"None of these","correct":false}]},{"q":"Which of the following Go codes is correct?","a":[{"id":599970,"option":"fmt.Println(\"Hello, World!\") ;","correct":false},{"id":599971,"option":"func main(); \n{\n// prints hackerearth\nfmt.Println(\"Hello, hackerearth\") ;\n}","correct":false},{"id":599972,"option":"fmt.Println(\"I am in Go Programming World!\")","correct":true},{"id":599973,"option":"All of these","correct":false}]},{"q":"Which of the following tools is used to automatically format the source code of a Go program?","a":[{"id":599958,"option":"Gofmt","correct":true},{"id":599959,"option":"Go func","correct":false},{"id":599960,"option":"Go built","correct":false},{"id":599961,"option":"None of these","correct":false}]},{"q":"Which of the following syntaxes is correct for the for loop in Go?","a":[{"id":599926,"option":"```\n\nfor (init; condition; increment );\n{\nstatement (s);\n}\n\n```","correct":false},{"id":599927,"option":"```\n\nfor ( init; condition; increment ) \n{\nstatement (s);\n}\n\n```","correct":false},{"id":599928,"option":"```\n\nfor ( initialization condition; testing condition; increment/decrement) \n{\nstatement (s)\n}\n\n```","correct":false},{"id":599929,"option":"```\n\nfor [condition| (init; condition; increment ) | Range]\n{\nstatement (s);\n}\n\n```","correct":true}]},{"q":"Which of the following applications have been developed using the Go programming language?","a":[{"id":599962,"option":"Kubernetes, Functions, Traffic Manager, and Dropbox","correct":false},{"id":599963,"option":"Hugo, Load Balancer, Databricks, and Docker","correct":false},{"id":599964,"option":"Kubernetes, Docker, InfluxDB, and OpenShift","correct":true},{"id":599965,"option":"All of these","correct":false}]},{"q":"In Go, which of the following language operators is used to increase an integer value by one?","a":[{"id":600138,"option":"+","correct":false},{"id":600139,"option":"++","correct":true},{"id":600140,"option":"*","correct":false},{"id":600141,"option":"All of these","correct":false}]},{"q":"In Go, if a program calls a function inside the same function, then it is called as:","a":[{"id":600206,"option":"Type casting","correct":false},{"id":600207,"option":"Interfaces","correct":false},{"id":600208,"option":"Recursion","correct":true},{"id":600209,"option":"Channel types","correct":false}]},{"q":"Which of the following data types are available in Go?","a":[{"id":599974,"option":"Boolean and numeric","correct":false},{"id":599975,"option":"Numeric and string","correct":false},{"id":599976,"option":"String and derived","correct":false},{"id":599977,"option":"All of these","correct":true}]},{"q":"Which of the following control statements is available in the Go programming language?","a":[{"id":599998,"option":"Goto","correct":false},{"id":599999,"option":"Break","correct":false},{"id":600000,"option":"Continuous","correct":false},{"id":600001,"option":"All of these","correct":true}]},{"q":"In Go, which of the following entities represent the parts of a function?","a":[{"id":599982,"option":"Function and function name","correct":false},{"id":599983,"option":"Parameters","correct":false},{"id":599984,"option":"Function body and return type","correct":false},{"id":599985,"option":"All of these","correct":true}]},{"q":"Which of the following text editors is used in Go?","a":[{"id":599930,"option":"Emacs","correct":false},{"id":599931,"option":"Pico","correct":false},{"id":599932,"option":"vi","correct":true},{"id":599933,"option":"jed","correct":false}]},{"q":"Which of the following operating systems is supported by the Go programming language? \n","a":[{"id":600158,"option":"Linux","correct":false},{"id":600159,"option":"Unix","correct":false},{"id":600160,"option":"Windows","correct":false},{"id":600161,"option":"All of these","correct":true}]},{"q":"<p>In Go, which of the following indicates the correct usage of the slice function:</p>\n\n<ol>\n\t<li>The len() function returns the element present in a slice.</li>\n\t<li>The cap() function returns the capacity of a slice.</li>\n\t<li>The append() function decreases the capacity of a slice.</li>\n\t<li>The copy() function copies the contents of the destination slice to source slice.</li>\n</ol>","a":[{"id":600006,"option":"Statements 1, 2, and 4 are incorrect \r\nStatement 3 is correct","correct":false},{"id":600007,"option":"Statements 1 and 2 are incorrect \r\nStatements 3 and 4 are correct","correct":false},{"id":600008,"option":"Statements 1 and 3 are incorrect \r\nStatements 2 and 4 are correct","correct":false},{"id":600009,"option":"Statements 3 and 4 are incorrect \r\nStatements 1 and 2 are correct","correct":true}]},{"q":"In Go, which of the following terms will you use to convert a long value into an integer and store it?","a":[{"id":600010,"option":"Recursion","correct":false},{"id":600011,"option":"Interfaces","correct":false},{"id":600012,"option":"Type casting","correct":true},{"id":600013,"option":"None of these","correct":false}]},{"q":"<p>In Go, which of the following statements about a global variable is correct:</p>\n\n<ol>\n\t<li>Global variables are defined outside the function usually at the beginning of the code.</li>\n\t<li>These variables will hold their value throughout the lifetime of the program.</li>\n\t<li>After declaring a global variable, you can use it throughout the program.</li>\n</ol>","a":[{"id":600034,"option":"Statement 3 is incorrect\r\nStatements 1 and 2 are correct","correct":false},{"id":600035,"option":"Statements 1 and 2 are incorrect \r\nStatement 3 is correct","correct":false},{"id":600036,"option":"Statement 1 is correct \r\nStatements 2 and 3\r\nare incorrect","correct":false},{"id":600037,"option":"All of these","correct":true}]},{"q":"<p>Which of the following statements about structures in the Go programming language is correct:</p>\n\n<ol>\n\t<li>It is a user-defined data type which allows you to combine data items of different types.</li>\n\t<li>It is used to represent a record.</li>\n\t<li>It cannot be used to track books in a library.</li>\n</ol>","a":[{"id":600074,"option":"Statements 1 and 2 are correct \r\nStatement 3 is incorrect","correct":true},{"id":600075,"option":"Statements 1 and 3 are correct \r\nStatement 2 is incorrect","correct":false},{"id":600076,"option":"All of these","correct":false},{"id":600077,"option":"None of these","correct":false}]},{"q":"<p>In Go, which of the following statements about mutexes is correct:</p>\n\n<ol>\n\t<li>It is used to lock a section of the code into a single thread at a time.</li>\n\t<li>It is used to protect shared resources from non-atomic operations.</li>\n</ol>","a":[{"id":599942,"option":"I","correct":true},{"id":599943,"option":"II","correct":false},{"id":599944,"option":"Both of these","correct":false},{"id":599945,"option":"None of these","correct":false}]},{"q":"In Go, which of the following functions is used to create a map?","a":[{"id":600018,"option":"len()","correct":false},{"id":600019,"option":"cap()","correct":false},{"id":600020,"option":"make()","correct":true},{"id":600021,"option":"append()","correct":false}]},{"q":"<p style=\"text-align: justify;\">In Go, which of the following statements about the declaration of a variable is correct:</p>\n\n<ol>\n\t<li style=\"text-align: justify;\">The static type variable declaration provides assurance to the compiler that only one variable exists with the given type and name.</li>\n\t<li style=\"text-align: justify;\">While a variable declaration has its meaning during compilation only, the compiler needs the actual variable declaration while linking the program.</li>\n</ol>","a":[{"id":600134,"option":"Statement 1 is incorrect\r\nStatement 2 is correct","correct":false},{"id":600135,"option":"Statement 1 is correct \r\nStatement 2 is incorrect","correct":false},{"id":600136,"option":"Both of these","correct":true},{"id":600137,"option":"None of these","correct":false}]},{"q":"<p>What is the initial value(zero value) ofÂ interfaces, slice, pointers, maps, channels, and functions in Go?</p>","a":[{"id":579489,"option":"nil","correct":true},{"id":579490,"option":"\" \"","correct":false},{"id":579491,"option":"0","correct":false},{"id":579492,"option":"None of these","correct":false}]},{"q":"<p>Is variable name <strong>iCount </strong>same as <strong>icount</strong><strong> </strong>in <strong>'go' </strong>programming?</p>\n\n<p style=\"margin-left: 40px;\">I: Â Yes, since both<strong> iCount </strong>and <strong>icount</strong> are same as go is not a case-sensitive programming language.</p>\n\n<p style=\"margin-left: 40px;\">II: No, since both <strong>iCount </strong>and<strong> </strong><strong>icount</strong><strong> </strong>are differentÂ as go is case-sensitive programming language.</p>","a":[{"id":579493,"option":"Statement I is correct","correct":false},{"id":579494,"option":"Statement II is correct","correct":true},{"id":579495,"option":"Both I and II are correct.","correct":false},{"id":579496,"option":"None of these are correct.","correct":false}]},{"q":"<p>Which of the following statements about string literals is correct:</p>\n\n<ol>\n\t<li><strong>Raw string literals</strong>: The value of a string literal is the string that is composed of an uninterrupted character sequence within backquotes.</li>\n\t<li><strong>Interpreted string literals</strong>: The value of a stringÂ literal is the text which does not have newlines and which is enclosed within the double quotes.</li>\n</ol>","a":[{"id":579403,"option":"1","correct":false},{"id":579404,"option":"2","correct":false},{"id":579405,"option":"Both of these","correct":true},{"id":579406,"option":"None of these","correct":false}]},{"q":"<p>Go<strong> </strong>cloud stacks maps to enable garbage collection inÂ __________________ languages.</p>","a":[{"id":579469,"option":"Modula-3","correct":false},{"id":579470,"option":"Java","correct":false},{"id":579471,"option":"C#","correct":false},{"id":579472,"option":"All of these","correct":true}]},{"q":"<p>Which of the following statements about constants is correct in Go?</p>\n\n<ol>\n\t<li>Constants are evaluated(determined) at compilation time.</li>\n\t<li>Constants are never evaluated at runtime.</li>\n</ol>","a":[{"id":579473,"option":"1","correct":false},{"id":579474,"option":"2","correct":false},{"id":579475,"option":"Both of these","correct":true},{"id":579476,"option":"None of these","correct":false}]},{"q":"<p>Which of the following symbols is used to represent a pointer in Go?</p>","a":[{"id":579481,"option":"#","correct":false},{"id":579482,"option":"*","correct":true},{"id":579483,"option":"!","correct":false},{"id":579484,"option":"None of these","correct":false}]},{"q":"<p>In Go, which of the following is a predefined, architecture-independent, IEEE-754 float type?Â </p>","a":[{"id":579477,"option":"float32","correct":true},{"id":579478,"option":"float65 ","correct":false},{"id":579479,"option":"complex128","correct":false},{"id":579480,"option":"complex32","correct":false}]},{"q":"<p>Which of the following will you use to access command line arguments that are passed to a Go<strong>Â </strong>program?</p>","a":[{"id":579461,"option":"Crypto/md5","correct":false},{"id":579462,"option":"os.Args variables","correct":true},{"id":579463,"option":"database/sql","correct":false},{"id":579464,"option":"None of these","correct":false}]},{"q":"<p>If x=0 and y=1<strong>,</strong>Â then what is the value of the following expression in Go:</p>\n\n<ol>\n\t<li>x &amp; y = ?</li>\n\t<li>x | y = ?Â </li>\n\t<li>x^y = ?</li>\n</ol>","a":[{"id":579453,"option":"x & y = 1\r\nx | y = 1\r\nx^y = 1","correct":false},{"id":579454,"option":"x & y = 0\r\nx | y = 1\r\nx^y = 0","correct":false},{"id":579455,"option":"x & y = 0\r\nx | y  = 1\r\nx^y = 1","correct":true},{"id":579456,"option":"None of these","correct":false}]},{"q":"<p>Which of the following cloud platforms supports the <strong>Go Cloud</strong>?</p>","a":[{"id":579391,"option":"Amazon Web Services","correct":true},{"id":579392,"option":"Microsoft Azure","correct":false},{"id":579393,"option":"IBM Cloud ","correct":false},{"id":579394,"option":"All of these","correct":false}]},{"q":"<p>Which of the following will you use to link a Go program with aÂ C or C++ program?</p>","a":[{"id":579387,"option":"gcb","correct":false},{"id":579388,"option":"cgo","correct":false},{"id":579389,"option":"gccgo","correct":false},{"id":579390,"option":"gc","correct":true}]},{"q":"<p>How many looping constructs are there in <strong>'go'</strong> programming language?</p>","a":[{"id":579383,"option":"One","correct":true},{"id":579384,"option":"Two ","correct":false},{"id":579385,"option":"Three","correct":false},{"id":579386,"option":" None of the above.","correct":false}]},{"q":"In Go, which of the following is used to dispatch methods dynamically?","a":[{"id":600166,"option":"Channel types","correct":false},{"id":600167,"option":"Interface","correct":true},{"id":600168,"option":"Map types","correct":false},{"id":600169,"option":"None of these","correct":false}]},{"q":"In Go, which of the following characters is not allowed within identifiers?","a":[{"id":600162,"option":"@","correct":false},{"id":600163,"option":"$","correct":false},{"id":600164,"option":"%","correct":false},{"id":600165,"option":"All of these","correct":true}]},{"q":"In Go, which of the following syntaxes is used to return the error as the last value?","a":[{"id":600190,"option":"errorsNew","correct":false},{"id":600191,"option":"errors.newerrors","correct":false},{"id":600192,"option":"New.errors","correct":false},{"id":600193,"option":"errors.New","correct":true}]},{"q":"In Go, which of the following functions is used to read from a string to make the buffer more efficient?","a":[{"id":599938,"option":"buf.Bytes()","correct":false},{"id":599939,"option":"strings.NewReader","correct":true},{"id":599940,"option":"[]byte","correct":false},{"id":599941,"option":"bytes.strings","correct":false}]},{"q":"In Go, ___________ is the default method of parameter \npassing.","a":[{"id":600118,"option":"Call by reference","correct":false},{"id":600119,"option":"Call by value","correct":true},{"id":600120,"option":"Both of these","correct":false},{"id":600121,"option":"None of these","correct":false}]},{"q":"<p>Which of the following is the built-in-support in Go?</p>","a":[{"id":579407,"option":"Container: container/list ","correct":false},{"id":579408,"option":"Database: database/sql","correct":false},{"id":579409,"option":"Web Server: net/http","correct":false},{"id":579410,"option":"All of these","correct":true}]},{"q":"<p>How to access command line arguments passed to a <strong>'Go'</strong> program?</p>","a":[{"id":579395,"option":"You can acces the command line argument  by using Crypto/md5.","correct":false},{"id":579396,"option":"You can acces the command line argument  by using the os.Args variables.","correct":true},{"id":579397,"option":"You can acces the command line argument  by using database/sql..","correct":false},{"id":579398,"option":"None of these are correct.","correct":false}]},{"q":"<p>What is recommended to use Global Variables in a program that implements Â <strong>'go' </strong>routines?</p>\n\n<ol>\n\t<li>Global variables are not recommended as they may get accessed by multiple go routines (threads).</li>\n\t<li>Concurrently, that can easily lead to an unexpected behavior causing arbitrary results.Â </li>\n</ol>","a":[{"id":579465,"option":"1","correct":false},{"id":579466,"option":"2","correct":false},{"id":579467,"option":"Both of these","correct":true},{"id":579468,"option":"None of these","correct":false}]},{"q":"<p>Using logical operators, answer the following: If A = 0 and B =1 then:</p>\n\n<ol>\n\t<li>A || B = 1</li>\n\t<li>A &amp;&amp; B = 1</li>\n\t<li>!(A ||B) = 1</li>\n\t<li>!(A &amp;&amp; B) = 1</li>\n</ol>","a":[{"id":599954,"option":"Statements 1 and 4 are incorrect\r\nStatements 2 and 3 are correct","correct":false},{"id":599955,"option":"Statements 3 and 4 are correct\r\nStatements 1 and 2 are incorrect","correct":false},{"id":599956,"option":"Statements 3 and 4 are incorrect\r\nStatements 1 and 2 are correct","correct":false},{"id":599957,"option":"Statements 1 and 4 are correct\r\nStatements 2 and 3 are incorrect","correct":true}]},{"q":"<p>In Go, which of the following statements about a slice is correct:</p>\n\n<ol>\n\t<li style=\"text-align: justify;\">A slice is an abstraction over an array.</li>\n\t<li style=\"text-align: justify;\">An array allows you to define variables that can hold several data items of the same type.</li>\n\t<li style=\"text-align: justify;\">An array does not provide any inbuilt method to increase its size dynamically or get a sub array of its own.</li>\n\t<li style=\"text-align: justify;\">It provides many utility functions required for an array and is widely used in Go programming.</li>\n</ol>","a":[{"id":600070,"option":"Statements 1, 2, and 4 are incorrect \r\nStatement 3 is correct","correct":false},{"id":600071,"option":"Statements 1 and 2 are incorrect \r\nStatements 3 and 4 are correct","correct":false},{"id":600072,"option":"Statements 1 and 3 are incorrect \r\nStatements 2 and 4 are correct","correct":false},{"id":600073,"option":"All of these","correct":true}]},{"q":"<p>InÂ Go, which of the following statements about the cloud-specific setup code is correct?</p>","a":[{"id":579497,"option":"The code is created manually.","correct":false},{"id":579498,"option":"Go cloud automates the code with a tool known as Wire.","correct":true},{"id":579499,"option":"There is no cloud-setup configuration.","correct":false},{"id":579500,"option":"None of these","correct":false}]},{"q":"<p>What does a Go program comprise?<br>\nÂ </p>","a":[{"id":579411,"option":"Package declaration","correct":false},{"id":579412,"option":"Expressions","correct":true},{"id":579413,"option":" Arrays","correct":false},{"id":579414,"option":"All of these","correct":false}]},{"q":"<p>In Go, which of the following statements about the continue statement is correct</p>\n\n<ol>\n\t<li>It skips any code that is between and forces the next iteration of the loop to take place.</li>\n\t<li>It is used in the for loop statement.</li>\n</ol>","a":[{"id":600182,"option":"Statement 1 is incorrect \r\nStatement 2 is correct","correct":false},{"id":600183,"option":"Statement 1 is correct \r\nStatement 2 is incorrect","correct":false},{"id":600184,"option":"Both of these","correct":true},{"id":600185,"option":"None of these","correct":false}]},{"q":"In Go, which of the following functions is used to copy a slice to\nanother?","a":[{"id":600130,"option":"append()","correct":false},{"id":600131,"option":"resize()","correct":false},{"id":600132,"option":"copy()","correct":true},{"id":600133,"option":"None of these","correct":false}]},{"q":"In Go, which of the following statements transfers control to the labeled statements?","a":[{"id":600146,"option":"break","correct":false},{"id":600147,"option":"continue","correct":false},{"id":600148,"option":"goto","correct":true},{"id":600149,"option":"None of these","correct":false}]},{"q":"<p>Which of the following decision-making statements is available in the Go programming language:</p>\n\n<ol>\n\t<li>Switch</li>\n\t<li>Select</li>\n\t<li>Nested if</li>\n</ol>","a":[{"id":599990,"option":"1 and 2","correct":false},{"id":599991,"option":"1 and 3","correct":false},{"id":599992,"option":"All of these","correct":true},{"id":599993,"option":"None of these","correct":false}]},{"q":"<p>In Go, which of the following methods is used to access a function?</p>\n\n<ol>\n\t<li>Function as value</li>\n\t<li>Function closures</li>\n\t<li>Method</li>\n</ol>","a":[{"id":599994,"option":"1 and 2","correct":false},{"id":599995,"option":"1 and 3","correct":false},{"id":599996,"option":"All of these","correct":true},{"id":599997,"option":"None of these","correct":false}]},{"q":"<p>Which of the following statements indicates the difference between a new pointer, make in pointers, and slice:</p>\n\n<ol>\n\t<li>The new keyword allocates memory and make initializes a slice, map, and channel types.</li>\n\t<li>The new keyword initializes a slice, map, and channel types whereas make allocates memory.</li>\n</ol>","a":[{"id":600218,"option":"Statement 1","correct":false},{"id":600219,"option":"Statement 2","correct":false},{"id":600220,"option":"Both of these","correct":true},{"id":600221,"option":"None of these","correct":false}]},{"q":"<p>Which of the following features are not present in Go:</p>\n\n<ol>\n\t<li>Support for the method or operator overloading</li>\n\t<li>Support for pointer arithmetic</li>\n\t<li>Support for generic programming</li>\n\t<li>Support for type inheritance</li>\n</ol>","a":[{"id":599950,"option":"Statements 1, 2, and 4 are incorrect\r\nStatement 3 is correct","correct":false},{"id":599951,"option":"Statements 1 and 2 are incorrect\r\nStatements 3 and 4 are correct","correct":false},{"id":599952,"option":"Statements 1, 3, and 4 are correct\r\nStatement 2 is incorrect","correct":false},{"id":599953,"option":"All of these","correct":true}]},{"q":"In Go, which of the following are the main interfaces for the I/O package?","a":[{"id":599934,"option":"Reader and compiler","correct":false},{"id":599935,"option":"Writer and executer","correct":false},{"id":599936,"option":"Reader and interpreter","correct":false},{"id":599937,"option":"None of these","correct":true}]},{"q":"<p>In Go, which of the following statements about interfaces is correct:</p>\n\n<ol>\n\t<li>It represents a set of method signatures.</li>\n\t<li>The struct data type implements interfaces to have method definitions.</li>\n</ol>","a":[{"id":600098,"option":"Statement 1 is incorrect\r\nStatement 2 is correct","correct":false},{"id":600099,"option":"Statement 1 is correct\r\nStatement 2 is incorrect","correct":false},{"id":600100,"option":"Both of these","correct":true},{"id":600101,"option":"None of these","correct":false}]},{"q":"<p>Which of the following statements about arrays and structs is correct in Go:</p>\n\n<ol>\n\t<li>Arrays are homogeneous (their elements are of the same type).</li>\n\t<li>Structs are heterogeneous.</li>\n\t<li>Arrays are heterogeneous whereas structs are homogeneous.</li>\n</ol>","a":[{"id":579415,"option":"All of these","correct":false},{"id":579416,"option":"Statements 1 and 2 are correct \r\nStatement 3 is incorrect","correct":true},{"id":579417,"option":"Statements 1 and 3 are correct \r\nStatement 2 is incorrect","correct":false},{"id":579418,"option":"None of these","correct":false}]},{"q":"In Go, which of the following frameworks will help you to build projects?","a":[{"id":600186,"option":"Revel","correct":false},{"id":600187,"option":"Beego","correct":false},{"id":600188,"option":"Buffalo","correct":false},{"id":600189,"option":"All of these","correct":true}]},{"q":"<p>In the Go programming language, which of the following is a set of numeric types with a specific size?</p>","a":[{"id":600198,"option":"Byte","correct":true},{"id":600199,"option":"Bits","correct":false},{"id":600200,"option":"Nibble","correct":false},{"id":600201,"option":"None of these","correct":false}]},{"q":"<p>In Go, which of the following methods is used to pass the arguments in a function:</p>\n\n<ol>\n\t<li>Call by Value</li>\n\t<li>Call by Function</li>\n\t<li>Call by Reference</li>\n</ol>","a":[{"id":599986,"option":"1 and 2","correct":false},{"id":599987,"option":"1 and 3","correct":true},{"id":599988,"option":"All of these","correct":false},{"id":599989,"option":"None of these","correct":false}]},{"q":"<p style=\"text-align: justify;\">Which of the following statements about parameters in Go is correct:</p>\n\n<ol>\n\t<li style=\"text-align: justify;\">The parameters that are sent to a function at the calling end of a function definition are known as actual parameters.</li>\n\t<li style=\"text-align: justify;\">The parameters that are received at the receiving end of a function definition are known as formal parameters.</li>\n</ol>","a":[{"id":600042,"option":"Statement 1 is correct \r\nStatement 2 is incorrect","correct":false},{"id":600043,"option":"Statement 1 is incorrect\r\nStatement 2 is correct","correct":false},{"id":600044,"option":"Both of these","correct":false},{"id":600045,"option":"None of these","correct":true}]},{"q":"Which of the following acts as a constant in Go?","a":[{"id":599910,"option":"Character constant","correct":false},{"id":599911,"option":"Integer constant","correct":false},{"id":599912,"option":"String literal","correct":false},{"id":599913,"option":"All of these","correct":true}]},{"q":"In Go, which of the following entities are used to declare variables?","a":[{"id":599966,"option":"Local variable, hybrid variable, and function parameters","correct":false},{"id":599967,"option":"Global variable, arrays, and informal parameters","correct":false},{"id":599968,"option":"Local variable, global variable, and formal parameters","correct":true},{"id":599969,"option":"None of these","correct":false}]},{"q":"<p>In Go, which of the following statements is correct:</p>\n\n<ol>\n\t<li>A for loop executes a sequence of statements multiple times and abbreviates the code that manages the loop variable.</li>\n\t<li>A nested loop is one or multiple loops inside any one of the loops.</li>\n</ol>","a":[{"id":600046,"option":"Statement 1 is correct \r\nStatement 2 is incorrect","correct":false},{"id":600047,"option":"Statement 1 is incorrect\r\nStatement 2 is correct","correct":false},{"id":600048,"option":"Both of these","correct":true},{"id":600049,"option":"None of these","correct":false}]},{"q":"<p>Which of the following statements about an identifier is correct:</p>\n\n<ol>\n\t<li>It can be a letter from A to Z.</li>\n\t<li>It can be a letter from a to z.</li>\n\t<li>It can be an underscore followed by 0 or more letters and digits from (0 to 9).</li>\n</ol>","a":[{"id":600170,"option":"Statement 1 is correct \r\nStatements 2 and 3\r\nare incorrect","correct":false},{"id":600171,"option":"Statement 3 is incorrect \r\nStatements 1 and 2\r\nare correct","correct":false},{"id":600172,"option":"Statements 1 and 2 are incorrect \r\nStatement 3 is correct","correct":false},{"id":600173,"option":"All of these","correct":true}]},{"q":"In Go, ________________ are the constants that refer to fixed values that the program may not alter during its execution.","a":[{"id":600202,"option":"StructÂ ","correct":false},{"id":600203,"option":"Escape sequence","correct":false},{"id":600204,"option":"Literals","correct":true},{"id":600205,"option":"None of these","correct":false}]},{"q":"In Go, which of the following statements about typecasting is correct:\n\n1. It is a method to convert a variable from one data type to another.\n2. If you want to convert a value of the data type long to a simple integer, then you can typecast long to int.\n","a":[{"id":600142,"option":"Statement 1 is incorrect \nStatement 2 is correct","correct":false},{"id":600143,"option":"Statement 1 is correct \nStatement 2 is incorrect","correct":false},{"id":600144,"option":"Both of these","correct":true},{"id":600145,"option":"None of these","correct":false}]},{"q":"<p>In Go, which of the following statements about the range keyword is correct:</p>\n\n<ol>\n\t<li>It is used in a for loop to iterate over the items of an array, a slice, a channel, or a map.</li>\n\t<li>With respect to arrays and slices, it returns the index of the item as a string.</li>\n\t<li>With respect to maps, it returns the key of the next key-value pair.</li>\n</ol>","a":[{"id":600082,"option":"Statements 1 and 3 are correct \r\nStatement 2 is incorrect","correct":true},{"id":600083,"option":"Statements 1 and 2 are correct \r\nStatement 3 is incorrect","correct":false},{"id":600084,"option":"All of these","correct":false},{"id":600085,"option":"None of these","correct":false}]},{"q":"<p>Which of the following is not a valid identifier in Go?</p>","a":[{"id":579457,"option":"2018_Score","correct":true},{"id":579458,"option":"_score2018","correct":false},{"id":579459,"option":"_score_/_2018","correct":false},{"id":579460,"option":"All of these","correct":false}]},{"q":"<p>Which of the following import paths is used by a package in a Go program?</p>","a":[{"id":579399,"option":"rand","correct":false},{"id":579400,"option":"math","correct":false},{"id":579401,"option":"fmt","correct":false},{"id":579402,"option":"All of these","correct":true}]},{"q":"<p>In Go, which of the following statements about maps is correct:</p>\n\n<ol>\n\t<li>It is an important data type that maps unique keys.</li>\n\t<li>A key is an object that is used to retrieve a value later.</li>\n</ol>","a":[{"id":600090,"option":"Statement 1 is correct \r\nStatement 2 is incorrect","correct":true},{"id":600091,"option":"Statement 1 is incorrect \r\nStatement 2 is correct","correct":false},{"id":600092,"option":"Both of these","correct":false},{"id":600093,"option":"None of these","correct":false}]},{"q":"<p>Which of the following statements about the Go programming language is correct:</p>\n\n<ol>\n\t<li>It is strongly and statically typed that provides an extrinsic support for the garbage collection.</li>\n\t<li>It does not support concurrent programming.</li>\n</ol>","a":[{"id":600150,"option":"Statement 1 is incorrect \r\nStatement 2 is correct","correct":true},{"id":600151,"option":"Statement 1 is correct \r\nStatement 2 is incorrect","correct":false},{"id":600152,"option":"Both of these","correct":false},{"id":600153,"option":"None of these","correct":false}]},{"q":"<p>Which of the following statements about a nil pointer in Go is correct:</p>\n\n<ol>\n\t<li style=\"text-align: justify;\">A nil value is assigned during variable declaration.</li>\n\t<li style=\"text-align: justify;\">The Go compiler assigns a nil value to a pointer variable if there is no exact address to be assigned.</li>\n\t<li style=\"text-align: justify;\">A pointer that is assigned to nil is called a nil pointer.</li>\n</ol>","a":[{"id":600062,"option":"Statements 1 and 2 are correct \r\nStatement 3 is incorrect","correct":false},{"id":600063,"option":"Statements 1 and 3 are correct \r\nStatement 2 is incorrect","correct":false},{"id":600064,"option":"All of these","correct":false},{"id":600065,"option":"None of these","correct":true}]},{"q":"In Go, which of the following identifiers are not used as a constant or as names of variables?","a":[{"id":599946,"option":"Break, for, type, and switch","correct":true},{"id":599947,"option":"Import, run, and type","correct":false},{"id":599948,"option":"Else, byte, and compile","correct":false},{"id":599949,"option":"Reader and declaration","correct":false}]},{"q":"<p>Which of the following statements about a slice in Go is correct:</p>\n\n<ol>\n\t<li style=\"text-align: justify;\">By default, if a slice is declared with no inputs, then it is initialized to nil.</li>\n\t<li style=\"text-align: justify;\">The length of a slice is zero.</li>\n\t<li style=\"text-align: justify;\">The capacity of a slice is zero.</li>\n</ol>","a":[{"id":600066,"option":"Statement 1 and 2 are correct \r\nStatement 3 is incorrect","correct":false},{"id":600067,"option":"Statements 1 and 3 are correct \r\nStatement 2 is incorrect","correct":false},{"id":600068,"option":"All of these","correct":true},{"id":600069,"option":"None of these","correct":false}]},{"q":"<p>Which of the following statements indicates that arrays workÂ differently in C and Go:</p>\n\n<ol>\n\t<li>Arrays are values. When you assignÂ one array to another, it copies all the elements.</li>\n\t<li>When you pass an array to a function, it will receive a copy of the array notÂ a pointer to it.</li>\n\t<li>The size of an array is the part of its type. For example, the types [10] int and [20] int are distinct.</li>\n</ol>","a":[{"id":579485,"option":"Statement 3 is incorrect \r\nStatements 1 and 2 are correct","correct":false},{"id":579486,"option":"Statement 1 is correct\r\nStatements 2 and 3 are incorrect","correct":false},{"id":579487,"option":"Statements 1 and 2 are incorrect \r\nStatement 3 is correct","correct":false},{"id":579488,"option":"All of these","correct":true}]},{"q":"In Go, which of the following will you use to declare variables?","a":[{"id":600178,"option":"Enumeration and union","correct":false},{"id":600179,"option":"Structure, pointer, and array","correct":false},{"id":600180,"option":"Enumeration, structure, pointer, array, and union","correct":true},{"id":600181,"option":"None of these","correct":false}]},{"q":"Which of the following predefined architectures is not a floating type in Go?","a":[{"id":600026,"option":"float128","correct":false},{"id":600027,"option":"complex64","correct":false},{"id":600028,"option":"complex128","correct":false},{"id":600029,"option":"All of these","correct":true}]},{"q":"In Go, which of the following syntaxes is used to automatically format the code?\n\n\n\n","a":[{"id":600214,"option":"go get","correct":false},{"id":600215,"option":"godoc","correct":false},{"id":600216,"option":"go generate","correct":true},{"id":600217,"option":"go fmt","correct":false}]},{"q":"<p>In Go, which of the following built-in operators are mainly populated:</p>\n\n<ol>\n\t<li>Conditional operators</li>\n\t<li>Increment or decrement operators</li>\n\t<li>Arithmetic operators</li>\n\t<li>Bitwise operators</li>\n</ol>","a":[{"id":599922,"option":"Statements 1, 2, and 4 are incorrect\r\nStatement 3 is correct","correct":false},{"id":599923,"option":"Statements 1, 3, and 4 are correct\r\nStatement 2 is incorrect","correct":false},{"id":599924,"option":"Statements 1 and 2 are incorrect\r\nStatements 3 and 4 are correct","correct":true},{"id":599925,"option":"All of these","correct":false}]}]
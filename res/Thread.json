[{"q":"<p>You want to make your response and request object thread-safe when creating a servlet application. What should you do to ensure thread safety if the objects are accessed using multiple threads?<br>\nA. In a thread you can use a local output stream for the response object<br>\nB. You can synchronize calling of access methods<br>\nC. Access should be done through a wrapper</p>","a":[{"id":1655773,"option":"A","correct":false},{"id":1655774,"option":"A, B","correct":false},{"id":1655775,"option":"B, C","correct":false},{"id":1655776,"option":"A, B, C","correct":true}]},{"q":"<p>In RTOS, which of the following statements justifies the reason for not using dynamic priority scheduling algorithms?</p>","a":[{"id":839244,"option":"High utilization of the processor","correct":false},{"id":839245,"option":"Low utilization of the processor","correct":false},{"id":839246,"option":"Low throughput","correct":false},{"id":839247,"option":"Instability during overloads","correct":true}]},{"q":"<p>In a FreeRTOS project, if the total size of a heap is determined by using the linker configuration, then which of the following statements is correct?</p>","a":[{"id":839240,"option":"heap_1.c is included in the project","correct":false},{"id":839241,"option":"heap_2.c is included in the project","correct":false},{"id":839242,"option":"heap_3.c is included in the project","correct":true},{"id":839243,"option":"heap_4.c is included in the project","correct":false}]},{"q":"<p>In RTOS, you are using the <em>MemoryPool</em> class to define fixed-size memory pools. You are required to allocate memory blocks of the fixed size from this pool. If there is no space available in the pool and you have used the <em>alloc</em> method for the allocation, then which of the following statements is correct?</p>","a":[{"id":839072,"option":"Error is returned","correct":false},{"id":839073,"option":"A pointer to the block of memory is returned","correct":false},{"id":839074,"option":"NULL is returned","correct":true},{"id":839075,"option":"0 is returned","correct":false}]},{"q":"<p>You are using the real-time executive architecture in an RTOS-based application. Which of the following is the restriction that you must consider:</p>\n\n<ol>\n\t<li>Pointer errors</li>\n\t<li>System can crash and fail to offer any diagnostic information</li>\n</ol>","a":[{"id":839056,"option":"1","correct":false},{"id":839057,"option":"2","correct":false},{"id":839058,"option":"Both of these","correct":true},{"id":839059,"option":"None of these","correct":false}]},{"q":"<p>In Operating Systems, which of the following factors must be considered in a '<em>Hurry Up and Wait</em>' condition while processing interrupts in an RTOS?</p>","a":[{"id":839031,"option":"Low-level ISR responses are transmitted to hardware","correct":false},{"id":839032,"option":"Tasks perform the operations that are required for processing","correct":false},{"id":839033,"option":"High-level tasks call OS services","correct":false},{"id":839034,"option":"All of these","correct":true}]},{"q":"<p>Which of the following factors are used to determine the performance of an RTOS-based application:</p>\n\n<ol>\n\t<li>Clock speed</li>\n\t<li>Processor</li>\n\t<li>Compiler</li>\n</ol>","a":[{"id":839027,"option":"1 and 2","correct":false},{"id":839028,"option":"2 and 3","correct":false},{"id":839029,"option":"1 and 3","correct":false},{"id":839030,"option":"All of these","correct":true}]},{"q":"<p>In FreeRTOS v90, your task is to determine the amount of free heap memory that is remaining before allocating memory to a task. You are using the <em>heap_1.c, heap_2.c</em>, and <em>heap_4.c</em> source files in this project. Which of the following functions API functions will you use to perform this task?</p>","a":[{"id":839023,"option":"xPortGetFreeHeapSize()","correct":true},{"id":839024,"option":"GetFreeHeapSize()","correct":false},{"id":839025,"option":"FindFreeHeapSize()","correct":false},{"id":839026,"option":"FreeHeapSize()","correct":false}]},{"q":"<p>If you are using the <em>xTaskCreateRestricted()</em> function to create a task in FreeRTOSv9.0, then which of the following values gets returned when the task is created successfully?</p>\n\n<p> </p>","a":[{"id":839019,"option":"0","correct":false},{"id":839020,"option":"1","correct":false},{"id":839021,"option":"-1","correct":false},{"id":839022,"option":"pdPASS","correct":true}]},{"q":"<p>In an <em>RTOS</em>-based application, which among the following operations are performed during a context switch:</p>\n\n<ol>\n\t<li>Switch to the system stack pointer</li>\n\t<li>Return to the scheduler</li>\n\t<li>Switch to the new thread's stack</li>\n</ol>","a":[{"id":839011,"option":"1 and 2","correct":false},{"id":839012,"option":"2 and 3","correct":false},{"id":839013,"option":"1 and 3","correct":false},{"id":839014,"option":"All of these","correct":true}]},{"q":"<p>A task is being created by using the <em>xTaskCreateStatic()</em> function in FreeRTOS v 9.0. The value of the <em>configMAX_PRIORITIES</em><strong> </strong>constant is <em>10</em>. Your task is to silently limit the priority of an assigned task to a maximum valid value. Which of the following values of the uxPriority parameter allows you to perform this task?</p>","a":[{"id":839007,"option":"5","correct":false},{"id":839008,"option":"7","correct":false},{"id":839009,"option":"8","correct":false},{"id":839010,"option":"11","correct":true}]},{"q":"<p>In <em>RTOS</em> implementation, which of the following problems can occur if you are using binary resource semaphores in your:</p>\n\n<ol>\n\t<li>It cannot perform unbounded priority inversions among tasks.</li>\n\t<li>If a task tests a semaphore that it already owns, then it gets permanently blocked.</li>\n</ol>","a":[{"id":838484,"option":"1","correct":false},{"id":838485,"option":"2","correct":false},{"id":838486,"option":"Both of these","correct":true},{"id":838487,"option":"None of these","correct":false}]},{"q":"<p>You are working with the <em>xTaskCreate()</em> function in FreeRTOS v9.0. Which of the following callback functions allows you to detect memory allocation failures?</p>\n\n<p> </p>","a":[{"id":838480,"option":"vApplicationMallocFailedHook() ","correct":true},{"id":838481,"option":"vApplicationCallocFailedHook() ","correct":false},{"id":838482,"option":"xallocFailedHook() ","correct":false},{"id":838483,"option":"allocFailedHook() ","correct":false}]},{"q":"<p>In <em>RTOS</em>, which of the following specifications is used to define the timing of system calls:</p>\n\n<ol>\n\t<li>Task switching latency</li>\n\t<li>Interrupt latency</li>\n</ol>","a":[{"id":838476,"option":"1","correct":false},{"id":838477,"option":"2","correct":false},{"id":838478,"option":"Both of these","correct":true},{"id":838479,"option":"None of these","correct":false}]},{"q":"<p>In FreeRTOS v9.0, which of the following values of the <em>configSUPPORT_DYNAMIC_ALLOCATION </em>constant allows you to work on a project by using the <em>xTaskCreate() </em>function?</p>","a":[{"id":838472,"option":"0","correct":false},{"id":838473,"option":"1","correct":true},{"id":838474,"option":"-1","correct":false},{"id":838475,"option":"2","correct":false}]},{"q":"<p>In an RTOS-based application, if you are working on a <em>TI-RTOS</em> semaphore and you are required to guarantee the safety of threads, then which of the following functions must be used to remove elements from a linked list in an atomic manner:</p>\n\n<ol>\n\t<li>Queue_put()</li>\n\t<li>Queue_get() </li>\n\t<li>Queue_Elem()</li>\n</ol>","a":[{"id":838460,"option":"1","correct":false},{"id":838461,"option":"2","correct":false},{"id":838462,"option":"3","correct":false},{"id":838463,"option":"1 and 2","correct":true}]},{"q":"<p>For which of these devices, a <em>TI-RTOS</em> kernel is included in the processors SDK?<br>\n </p>","a":[{"id":838432,"option":"Keystone","correct":false},{"id":838433,"option":"Sitara","correct":false},{"id":838434,"option":"Meteor","correct":false},{"id":838435,"option":"Only 1,2","correct":true}]},{"q":"<p>In an RTOS-based application, which of the following problems occurs  that has a mutex-based design:</p>\n\n<ol>\n\t<li>Priority inversion</li>\n\t<li>Deadlock</li>\n\t<li>Diamond problem</li>\n</ol>","a":[{"id":838428,"option":"1 and 2","correct":true},{"id":838429,"option":"1 and 3","correct":false},{"id":838430,"option":"2 and 3","correct":false},{"id":838431,"option":"All of these","correct":false}]},{"q":"<p>You are working on the <em>vTaskAllocateMPURegions()</em> function that is defined in FreeRTOS v9.0. You are required to define the <em>xRegions</em> parameter. Which of the following constants is an important factor to determine the size of the array that is defined by the mentioned parameter?</p>","a":[{"id":838424,"option":"portNUM_CONFIGURABLE_REGIONS","correct":true},{"id":838425,"option":"MPU_CONFIGURABLE_REGIONS","correct":false},{"id":838426,"option":"portNUM_CONFIGURABLE_Array","correct":false},{"id":838427,"option":"portNUM_CONFIGURABLE_MPU","correct":false}]},{"q":"<p>In FreeRTOS v9.0, which of the following functions can be used along with FreeRTOS API to create an MPU-restricted task? </p>","a":[{"id":838420,"option":"xTaskCreateRestricted()","correct":true},{"id":838421,"option":"MPUTaskCreate()","correct":false},{"id":838422,"option":"RestrictMPUTask()","correct":false},{"id":838423,"option":"CreateMPUTask()","correct":false}]},{"q":"<p>In <em>RTOS</em>, if you are working with FreeRtos API and FreeRTOS 9.0, then which of the following restrictions is valid:</p>\n\n<ol>\n\t<li>API functions that can cause a context switch must not be called when a scheduler is suspended</li>\n\t<li>API functions that can cause a context switch must not be called from within a critical section</li>\n</ol>","a":[{"id":838416,"option":"1","correct":false},{"id":838417,"option":"2","correct":false},{"id":838418,"option":"Both of these","correct":true},{"id":838419,"option":"None of these","correct":false}]},{"q":"<p>In an <em>RTOS</em>-based application, you are required to use the Percepio Tracealyzer tool to analyze mutex events. Which of the following objects must be used to view interactions between tasks and interrupts?</p>","a":[{"id":838412,"option":"Kernel","correct":true},{"id":838413,"option":"Trace","correct":false},{"id":838414,"option":"View","correct":false},{"id":838415,"option":"Pipe","correct":false}]},{"q":"<p>In an <em>RTOS</em>-based application, you are using the <em>Thread</em> class to define and control parallel tasks. While using this class, the thread stack gets allocated on the heap. Which of the following methods is used to allocate the memory at run time?</p>","a":[{"id":838404,"option":"start","correct":true},{"id":838405,"option":"run","correct":false},{"id":838406,"option":"wait","correct":false},{"id":838407,"option":"preempt","correct":false}]},{"q":"<p>In an <em>RTOS</em>-based application, you are using semaphores for resource management. If a task is blocked because of the unavailability of a resource, then which of the following methods must be called?</p>","a":[{"id":838396,"option":"sem_post()","correct":true},{"id":838397,"option":"sem_wait()","correct":false},{"id":838398,"option":"sem_release()","correct":false},{"id":838399,"option":"sem_put()","correct":false}]},{"q":"<p>In an <em>RTOS</em>-based application, which of the following scheduling mechanisms will you use to ensure each thread, that is being used in the application, is allotted a slot for execution?</p>","a":[{"id":838392,"option":"Preemptive","correct":false},{"id":838393,"option":"Non-preemptive ","correct":false},{"id":838394,"option":"Time-slice ","correct":true},{"id":838395,"option":"Thread-safe ","correct":false}]},{"q":"<p>In RTOS, which of the following statements about the <em>VxWorks</em> core kernel is correct:</p>\n\n<ol>\n\t<li>It enables the upgrades to be installed faster</li>\n\t<li>New feature additions are accomplished with minimal retesting of the entire system</li>\n\t<li>The core kernel is separate from protocols and applications</li>\n</ol>","a":[{"id":838384,"option":"1","correct":false},{"id":838385,"option":"2","correct":false},{"id":838386,"option":"3","correct":false},{"id":838387,"option":"All of these","correct":true}]},{"q":"<p>In RTOS, which of the following task schedulers is an example of the <em>preemptive</em> multitasking?</p>","a":[{"id":838376,"option":"Time Slice Scheduler","correct":true},{"id":838377,"option":"Round Robin Scheduler","correct":false},{"id":838378,"option":"Run to Completion Scheduler","correct":false},{"id":838379,"option":"Priority Scheduler","correct":false}]},{"q":"<p>In RTOS, which of the following statements about semaphores is correct:</p>\n\n<ol>\n\t<li>Semaphores cannot solve multiple identical resource problem on their own</li>\n\t<li>Semaphores can perform either <em>signal</em><strong> </strong>or <em>wait</em> operations but not both</li>\n\t<li>Signaling a semaphore is not ISR safe</li>\n</ol>\n\n<p> </p>","a":[{"id":838372,"option":"1","correct":false},{"id":838373,"option":"2","correct":false},{"id":838374,"option":"3","correct":true},{"id":838375,"option":"1 and 2","correct":false}]},{"q":"<p>In C, you are working on Multithreading in the Ubuntu environment. You have created three threads and you use a mutex to control access to the shared resource by the threads as shown in the code given below. The code is saved in a file named <strong>thread.c</strong>. Now if the given code is executed using the Linux command given below then which of the following statements is correct?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>#include&lt;stdio.h&gt;\n#include&lt;pthread.h&gt;\n\n\nint hack;\npthread_mutex_t hack_lock;\npthread_t hack_id[3];\n\nvoid* hack_method(void *arg)\n{\n    pthread_mutex_lock(&amp;hack_lock);\n\n    hack = hack + 1;\n    \n    printf(\"hello %d \\n\", hack);\n    \n    printf(\"hackerearth %d \\n\", hack);\n\n    pthread_mutex_unlock(&amp;hack_lock);\n\n    return NULL;\n}\n\nint main()\n{\n    int h = 0;\n    int hack_error;\n\n    if (pthread_mutex_init(&amp;hack_lock, NULL) != 0)\n    {\n        return 1;\n    }\n\n    while(h &lt; 3)\n    {\n        hack_error = pthread_create(&amp;(hack_id[h]), NULL, &amp;hack_method, NULL);\n        if (hack_error != 0)\n            printf(\"hack_error occurred\");\n      \n        h++;\n    }\n\n    pthread_join(hack_id[0], NULL);\n    pthread_join(hack_id[1], NULL);\n    pthread_join(hack_id[2], NULL);\n    pthread_mutex_destroy(&amp;hack_lock);\n    \n    \n    return 0;\n\n}</code></pre>\n\n<p><br>\n<br>\n<strong>Command:</strong></p>\n\n<pre class=\"prettyprint\"><code>hackerearth@ubuntu:~/$ gcc thread.c -lpthread\n</code></pre>\n\n<p><br>\n<br>\n<strong>Statements:</strong></p>\n\n<ol>\n\t<li> The code performs thread synchronization with the use of mutex.<br>\n\t </li>\n\t<li> The mutex is destroyed after all the three threads have completed their tasks.<br>\n\t </li>\n\t<li> The code gives the following output-\n\t<pre class=\"prettyprint\"><code>hello 1 \nhackerearth 1 \nhello 2 \nhackerearth 2 \nhello 3 \nhackerearth 3 \n</code></pre>\n\t<br>\n\t </li>\n\t<li> The code gives the following output-\n\t<pre class=\"prettyprint\"><code>hello 1 \nhello 2  \nhello 3 \nhackerearth 3\nhackerearth 3\nhackerearth 3 \n</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1564198,"option":"1, 2 and 4","correct":false},{"id":1564199,"option":"1 and 2","correct":false},{"id":1564200,"option":"1, 2 and 3","correct":true},{"id":1564201,"option":"only 2","correct":false}]},{"q":"<p>You have executed the following shared C code to count 1000 numbers by using two threads that are provided in the code. Both the threads can access the code simultaneously such that the output is a different value at each execution. If you are required to lock the Critical section of the shared code such that only one thread can access the section till the section is executed and gets unlocked for another thread, then which of these following lines of code must be used to replace the commented lines in the code?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#include &lt;stdio.h&gt;\n#include &lt;pthread.h&gt;\n#include &lt;stdlib.h&gt;\n#define count 1000\n#define mythreads 2\n\nstatic pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;\nint i = 0;\nvoid *my_counting_func(void *arg)\n{\n    for(;;)\n    {\n        //comment 1 \n        if(i&gt;=count)\n        {\n            //comment 2\n            return NULL;\n        }\n        i++;   \n        //comment 3\n    }\n}\nint main(void)\n{\n    int i = 0;\n    pthread_t *thread_group = malloc(sizeof(pthread_t) *mythreads);\n    for(i=0;i&lt;mythreads; ++i)\n    {\n        pthread_create(&amp;thread_group[i], NULL, my_counting_func, NULL);\n    }\n    for(i=0;i&lt;mythreads;++i)\n    {\n        pthread_join(thread_group[i], NULL);\n    }\n}\n</code></pre>\n\n<p><strong>Line 1</strong></p>\n\n<pre class=\"prettyprint\"><code>pthread_mutex_lock(&amp;mutex);</code></pre>\n\n<p><strong>Line 2</strong></p>\n\n<pre class=\"prettyprint\"><code>pthread_mutex_unlock(&amp;mutex);</code></pre>\n\n<p><strong>Replacement patterns</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>Comment 1: Line 1\nComment 2: Line 2\nComment 3: Line 1</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>Comment 1: Line 1\nComment 2: Line 2\nComment 3: Line 2</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>Comment 1: Line 2\nComment 2: Line 2\nComment 3: Line 1</code></pre>\n\n<p> </p>","a":[{"id":1248977,"option":"1","correct":true},{"id":1248978,"option":"2","correct":false},{"id":1248979,"option":"3","correct":false},{"id":1248980,"option":"Mutex technique is already applied to this program","correct":false}]},{"q":"<p>In C#, you are working on Multithreading. If you have executed the code given below that contains two threads <strong>h1</strong> and <strong>h2,</strong> then which of the following statements is correct?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;  \nusing System.Threading;  \npublic class hackerearth \n{  \n    public static void Main()  \n    {  \n        hack_thread h = new hack_thread();  \n        Thread h1 = new Thread(new ThreadStart(h.hackerearth_thread));  \n        Thread h2 = new Thread(new ThreadStart(h.hackerearth_thread));  \n        h1.Start();  \n        h1.Join();  \n        h2.Start();  \n       \n    }  \n}  \npublic class hack_thread  \n{  \n    public void hackerearth_thread()  \n    {  \n        for (int hack = 0; hack &lt; 3; hack++)  \n        {  \n            Console.Write(hack + \" \");  \n            Thread.Sleep(10);  \n        }  \n    }  \n}  </code></pre>\n\n<p> </p>\n\n<p><strong>Statements:</strong></p>\n\n<ol>\n\t<li>Thread h2 starts executing after h1 has completed its task.<br>\n\t </li>\n\t<li>The code gives the output-<br>\n\t 0 1 2 0 1 2<br>\n\t </li>\n\t<li>Thread h1 and thread h2 executes simultaneously<br>\n\t </li>\n\t<li>The code gives the output-<br>\n\t 0 0 1 1 2 2</li>\n</ol>","a":[{"id":1419312,"option":"3 and 4","correct":false},{"id":1419313,"option":"1 and 2","correct":true},{"id":1419314,"option":"only 3","correct":false},{"id":1419315,"option":"only 1","correct":false}]},{"q":"<p>In C#, you are working on Data Parallelism. Consider the C# code snippet given below which uses thread-local variables to store and retrieve state in each separate task that is created by a For loop. Now, which of the following statements is correct about the given code?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nusing System.Threading.Tasks;\n\nclass Hack\n{\n    static void Main()\n    {\n        object _ = new object();\n        int num = 10000000;\n        double sumTotal = 0.0;\n        double progress = 1.0 / num ; \n        \n        Parallel.For(0, num , () =&gt; 0.0, (i, state, local) =&gt;\n        {\n            double x = (i + 0.5) * progress ;\n            return local + 4.0 / (1.0 + x * x);\n            \n        }, \n        local =&gt; \n        {\n            lock (_)\n            {\n                sumTotal += local;\n                \n            }\n            \n        });\n        Console.WriteLine(sumTotal * progress );\n    }\n}</code></pre>\n\n<p><br>\n<br>\n<strong>Statements</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>The lock section is used only once per thread, instead of once per iteration, increasing the synchronization overhead to a great extent.</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>The lock section is used only once per iteration, instead of once per thread, reducing the synchronization overhead to a great extent.</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Parallel is used only once per iteration, instead of once per thread, reducing the synchronization overhead to a great extent.</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>The lock section is used only once per thread, instead of once per iteration, reducing the synchronization overhead to a great extent.</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1419342,"option":"1","correct":false},{"id":1419343,"option":"2","correct":false},{"id":1419344,"option":"3","correct":false},{"id":1419345,"option":"4","correct":true}]},{"q":"<p>In FreeRTOS v4.0, which of the following configuration parameters allows the application to share the priority of an idle task?</p>","a":[{"id":839214,"option":"configIDLE_SHOULD_YIELD","correct":true},{"id":839215,"option":"vIDLEHook","correct":false},{"id":839216,"option":"vApplicationIdleHook","correct":false},{"id":839217,"option":"IDleTask","correct":false}]},{"q":"<p>In FreeRTOS v4.0, you are using coroutines instead of tasks. Which of the following are the valid disadvantages of coroutines in this condition:</p>\n\n<ol>\n\t<li>Each task maintains its own stack</li>\n\t<li>Restrictions on where API calls can be made</li>\n\t<li>Co-operative operations only coroutines themselves</li>\n</ol>","a":[{"id":839076,"option":"Only 1,2","correct":false},{"id":839077,"option":"Only 3","correct":false},{"id":839078,"option":"Only 1,3","correct":false},{"id":839079,"option":"Only 2,3","correct":true}]},{"q":"<p>In an RTOS-based application, you are using multiple threads that are available in different states. If the thread that is currently in the running state gets terminated, then which of the following threads now becomes the running thread?</p>","a":[{"id":839068,"option":"Ready thread that contains the highest priority","correct":true},{"id":839069,"option":"Any waiting threads","correct":false},{"id":839070,"option":"Inactive threads","correct":false},{"id":839071,"option":"Waiting threads that contains the highest priority","correct":false}]},{"q":"<p>In FreeRTOS, which of the following conditions allows you to use the deferred interrupt handling process:</p>\n\n<ol>\n\t<li>To perform lengthy operations</li>\n\t<li>To gain the benefit of using the full RTOS API</li>\n\t<li>To perform an action that is not deterministic, within reasonable bounds</li>\n</ol>","a":[{"id":839064,"option":"1 and 2","correct":false},{"id":839065,"option":"1 and 3","correct":false},{"id":839066,"option":"2 and 3","correct":false},{"id":839067,"option":"All of these","correct":true}]},{"q":"<p>Which of the following RTOS architectures allows you to optimize the dependability of the system?</p>","a":[{"id":839060,"option":"Monolithic","correct":false},{"id":839061,"option":"Microkernel","correct":true},{"id":839062,"option":"Real-time executive","correct":false},{"id":839063,"option":"Preempted executive","correct":false}]},{"q":"<p>In an RTOS-based application, which of the following mechanisms provides system metadata that allows the system to boost the performance of the application and fulfill real-time constraints?</p>","a":[{"id":839052,"option":"Reflection","correct":true},{"id":839053,"option":"Coherence","correct":false},{"id":839054,"option":"Determinism","correct":false},{"id":839055,"option":"Transparency","correct":false}]},{"q":"<p>In RTOS, you are using a shared library while working with LynxOS. Which of the following factors determines the amount of memory that can be saved during the usage of a shared library:</p>\n\n<ol>\n\t<li>Content of the shared library</li>\n\t<li>Sets of programs that typically run on the system</li>\n\t<li>Load on the system</li>\n</ol>","a":[{"id":839048,"option":"1 and 2","correct":false},{"id":839049,"option":"2 and 3","correct":false},{"id":839050,"option":"1 and 3","correct":false},{"id":839051,"option":"All of these","correct":true}]},{"q":"<p>In RTOS, if you are working with LynxOS, then which of the following attributes gets affected by the usage of a shared library?</p>","a":[{"id":839044,"option":"System memory usage","correct":false},{"id":839045,"option":"Disk space usage","correct":false},{"id":839046,"option":"Code maintenance","correct":false},{"id":839047,"option":"All of these","correct":true}]},{"q":"<p>Which of the following factors must be considered while testing the interrupt handling of an RTOS-based application:</p>\n\n<ol>\n\t<li>Interrupt latency</li>\n\t<li>Task activation overhead</li>\n</ol>","a":[{"id":839035,"option":"Only 1","correct":false},{"id":839036,"option":"Only 2","correct":false},{"id":839037,"option":"Both 1,2","correct":true},{"id":839038,"option":"None of these","correct":false}]},{"q":"<p>Which of the following statements depict the valid difference between a Real-time OS and a time-sharing OS:</p>\n\n<ol>\n\t<li>Computation tasks are emphasized before its nominative point in RTOS</li>\n\t<li>Switching method or function is not available in RTOS</li>\n\t<li>Responses are provided to users within time constraint in an RTOS</li>\n</ol>","a":[{"id":838488,"option":"1 and 2","correct":false},{"id":838489,"option":"2 and 3","correct":false},{"id":838490,"option":"1 and 3","correct":false},{"id":838491,"option":"All of these","correct":true}]},{"q":"<p>In FreeRTOS v9.0, which of the following values of the bitwise OR operator cannot be used to define a UI parameter?</p>","a":[{"id":838464,"option":"portMPU_REGION_READ_WRITE ","correct":false},{"id":838465,"option":"portMPU_REGION_PRIVILEGED_READ_ONLY ","correct":false},{"id":838466,"option":"portMPU_REGION_CACHEABLE_BUFFERABLE ","correct":false},{"id":838467,"option":"None of these","correct":true}]},{"q":"<p>The threads that you are using while working on an RTOS-based application communicate with each other by sending or receiving messages. If you are required to centralize a specific functionality into a single task so that the threads can send messages for processing this task, then which of the following mechanisms will you use to perform this operation?</p>","a":[{"id":838400,"option":"Scheduler","correct":false},{"id":838401,"option":"Message queue","correct":true},{"id":838402,"option":"Semaphore","correct":false},{"id":838403,"option":"Mutexes","correct":false}]},{"q":"<p>In an RTOS-based application, which of the following threads runs only when no other thread is ready to execute?</p>","a":[{"id":838388,"option":"Interrupt Service Routine","correct":false},{"id":838389,"option":"Idle","correct":true},{"id":838390,"option":"Tasks","correct":false},{"id":838391,"option":"Preemptive Tasks initializer","correct":false}]},{"q":"<p>In RTOS, if two tasks operate at different priorities and coordinate by using a mutex, then they create an opportunity for priority inversion. Which of the following operations must be performed to solve this issue:</p>\n\n<ol>\n\t<li>Change the operating system's internal implementation of mutexes</li>\n\t<li>Use semaphores instead</li>\n</ol>","a":[{"id":838380,"option":"1","correct":true},{"id":838381,"option":"2","correct":false},{"id":838382,"option":"Both of these","correct":false},{"id":838383,"option":"None of these","correct":false}]},{"q":"<p>You want to be able to statically allocate RAM at compile time while creating a task in FreeRTOS v9.0. In the given context which of these functions are you likely to use to do so?</p>","a":[{"id":838468,"option":" xTaskCreate() ","correct":true},{"id":838469,"option":"xTaskCreateStatic()","correct":false},{"id":838470,"option":"xTaskCreateRestricted()","correct":false},{"id":838471,"option":"xTaskCreateMultiple()","correct":false}]},{"q":"<p>In JSP, which of the following actions is implemented to secure a thread?</p>","a":[{"id":40616,"option":"<%@ page isThreadSafe=”false” %> \r\n","correct":true},{"id":40617,"option":"<%@ page isThreadSafe=”true” %> \r\n","correct":false},{"id":40618,"option":"<%@ page isThread=”false” %>\r\n","correct":false},{"id":40619,"option":"<%@ page isThread=”true” %>  \r\n","correct":false}]},{"q":"<p>In <em>RTOS</em>, if you have assigned the same priority to multiple threads, then which of the following operations can be implemented?</p>","a":[{"id":839015,"option":"Priority inheritance","correct":false},{"id":839016,"option":"Round-robin scheduling","correct":false},{"id":839017,"option":"Time-slicing","correct":false},{"id":839018,"option":"All of these","correct":true}]},{"q":"<p>In an <em>RTOS</em>-based application, which of the following methods will you use to implement a thread-safe critical section</p>\n\n<ol>\n\t<li>Disable interrupts</li>\n\t<li>Use special instructions for the atomic <em>test-and-set</em> instruction</li>\n</ol>","a":[{"id":838408,"option":"1","correct":false},{"id":838409,"option":"2","correct":false},{"id":838410,"option":"Both of these","correct":true},{"id":838411,"option":"None of these","correct":false}]},{"q":"<p>In Kafka, the <strong>num.network.threads</strong> thread represents the number of network threads that the server uses for handling network requests. What is the default value of this thread?</p>","a":[{"id":1166767,"option":"1","correct":false},{"id":1166768,"option":"5","correct":false},{"id":1166769,"option":"7","correct":false},{"id":1166770,"option":"3","correct":true}]},{"q":"<p>Which of the following statements about <strong>user-level</strong> threads is true?</p>","a":[{"id":255584,"option":"User-level threads can be implemented on an operating system that does not support threads.","correct":true},{"id":255585,"option":"Switching and synchronization between threads can be done without the intervention of a kernel.","correct":false},{"id":255586,"option":"Thread-switching is not more expensive than a procedure call.","correct":false},{"id":255587,"option":"All of these","correct":false}]},{"q":"<p>In an RTOS-based application, there are two tasks, <em>t1</em> and <em>t2</em>. Both tasks require access to a shared resource but <em>t1</em> has already acquired a semaphore. The<em><strong> </strong>t1</em> task has not released the semaphore. The <em>t2</em><strong> </strong>task has a higher priority than the <em>t1</em> task. Which of the following statements about accessing the shared resource is correct:</p>\n\n<ol>\n\t<li><em>t2</em> can access the shared resource because of higher priority</li>\n\t<li><em>t2</em> can access the shared resource until <em>t1</em> has released the semaphore</li>\n\t<li><em>t2</em> is in a wait state until the semaphore is released by <em>t1</em></li>\n</ol>","a":[{"id":839232,"option":"1","correct":false},{"id":839233,"option":"1 and 2","correct":false},{"id":839234,"option":"1 and 3","correct":false},{"id":839235,"option":"2 and 3","correct":true}]},{"q":"<p>Which of the following statements regarding the difference between threads and processes is true:</p>\n\n<ol>\n\t<li>Threads take more time for termination whereas the processes take less time for termination.</li>\n\t<li>Threads take less time in context switching whereas the processes take more time in context switching.</li>\n\t<li>Thread switching does not require to call an operating system and cause an interrupt to the kernel whereas process switching uses an interface in the operating system.</li>\n\t<li>Threads consume more resources whereas the processes consume lesser resources.</li>\n</ol>\n\n<p> </p>","a":[{"id":255581,"option":"1 and 2","correct":false},{"id":255582,"option":"2 and 3","correct":true},{"id":255583,"option":"3 and 4","correct":false},{"id":264095,"option":"All of these","correct":false}]},{"q":"<p>In Spark Streaming integrated with Kafka, your application uses the consumer group ID <strong>terran </strong>to read from the <strong>zerg.hydra </strong>Kafka topic, which contains 10 partitions. You have configured your application such that it can consume the topic with only one thread. However, during runtime, you increase the number of threads from 1 to 14.</p>\n\n<p>Which of the following statements about the consumption of the threads in this scenario is correct:</p>\n\n<ol>\n\t<li>All the 14 threads are consumed from a single partition—each consumed in two rebalancing events.</li>\n\t<li>Once the rebalancing is complete, 10 of the 14 threads are consumed—each from a single partition—and the remaining 4 threads stay idle.</li>\n\t<li>Once the rebalancing is complete, 10 of the 14 threads are consumed—each from a single partition—and the remaining 4 threads are consumed in the next rebalancing event.</li>\n\t<li>Once the rebalancing is complete, 7 of the 14 threads are consumed—each from a single partition—and the remaining 7 threads stay idle.</li>\n</ol>","a":[{"id":1167798,"option":"1","correct":false},{"id":1167799,"option":"2","correct":true},{"id":1167800,"option":"3","correct":false},{"id":1167801,"option":"4","correct":false}]},{"q":"<p>Which of the following does a thread, not share with the other threads?</p>","a":[{"id":255577,"option":"Code section","correct":true},{"id":255578,"option":"Data section","correct":false},{"id":255579,"option":"Open files and signals","correct":false},{"id":255580,"option":"Program counter","correct":false}]},{"q":"<p>In FreeRTOS, which of the following depicts the reasons for not using mutexes in an application:</p>\n\n<ol>\n\t<li>Mutex includes a priority inheritance mechanism</li>\n\t<li>Resource that is guarded by a mutex cannot be blocked to wait by an interrupt</li>\n</ol>","a":[{"id":839210,"option":"1","correct":false},{"id":839211,"option":"2","correct":false},{"id":839212,"option":"Both of these","correct":true},{"id":839213,"option":"None of these","correct":false}]},{"q":"<p>In an RTOS-based application, there are three tasks, t1, t2, and t3. The tasks are scheduled in the following manner:</p>\n\n<ul>\n\t<li>t1 task gets terminated after completing its task, t2 task gets terminated after completing its task, and so on</li>\n</ul>\n\n<p>What is the advantage of scheduling tasks in this manner?<br>\n </p>","a":[{"id":839223,"option":"Each task's allocation time is totally affected by all the other tasks","correct":false},{"id":839224,"option":"One or more tasks can be excluded from the execution sequence until they are required again","correct":true},{"id":839225,"option":"System becomes very deterministic","correct":false},{"id":839226,"option":"None of these","correct":false}]},{"q":"<p>You observe that additional context switches cause RTOS overhead because of the usage of unique priorities. Which of the following events' clock count differences must be determined to assess the impact of the overhead?</p>","a":[{"id":839252,"option":"Cycle boundary relinquish","correct":true},{"id":839253,"option":"Priority escalation","correct":false},{"id":839254,"option":"Semaphore assignment","correct":false},{"id":839255,"option":"Request timing","correct":false}]},{"q":"<p>In an RTOS-based application, which of the following conditions allows you to assign unique priorities for threads?</p>","a":[{"id":839248,"option":"Number of context switches must be minimal","correct":false},{"id":839249,"option":"Latency is more important than throughput for the system","correct":true},{"id":839250,"option":"Throughput is more important than latency","correct":false},{"id":839251,"option":"None of these","correct":false}]},{"q":"<p>There are three RTOS-based tasks that are operating at different priorities and coordinating through a mutex. If the third task does not require that mutex but its priority to get implemented is between the two tasks, then which of the following statements is correct?</p>","a":[{"id":839236,"option":"Third task can interfere in the proper execution of the high-priority task","correct":true},{"id":839237,"option":"Third task cannot interfere in the proper execution of the high-priority task","correct":false},{"id":839238,"option":"Third task can interfere in the proper execution of the low-priority task","correct":false},{"id":839239,"option":"Third task can interfere in the proper execution of all the tasks","correct":false}]}]
[{"q":"<p>Suppose you are working on developing a spring boot application. You are working with AOP which you know is one of the key components of Spring Framework. You have a task that requires you to <em>share the state before and after a method is executed.</em> Which advice would you use for that keeping in mind it is best to use the least powerful form of advice that meets your requirements.</p>","a":[{"id":1655701,"option":"after-returning","correct":false},{"id":1655702,"option":"around","correct":true},{"id":1655703,"option":"after","correct":false},{"id":1655704,"option":"before","correct":false}]},{"q":"<p>You are working on developing a spring boot application. You are working with AOP which you know is one of the key components of Spring Framework. You have a <em>Pointcut signature and a Pointcut Expression</em>. Determine the correct option.</p>\n\n<p><em>A - @Pointcut(\"execution(* name(..))\")</em></p>\n\n<p><em>B - private void anymethod() {}</em></p>","a":[{"id":1655697,"option":"A - Expression\r\nB - Signature","correct":true},{"id":1655698,"option":"There is no such thing as Pointer Expression and/or Signature","correct":false},{"id":1655699,"option":"These are neither Pointers nor signatures","correct":false},{"id":1655700,"option":"A - Signature\r\nB - Expression","correct":false}]},{"q":"<p>You are working on developing a spring boot application. You are working with AOP which you know is one of the key components of Spring Framework. How would you go about <em>declaring an aspect</em>?</p>","a":[{"id":1655693,"option":"@AspectJ","correct":false},{"id":1655694,"option":"@Annotation.Aspect","correct":false},{"id":1655695,"option":"@Declare","correct":false},{"id":1655696,"option":"@Aspect","correct":true}]},{"q":"<p>Suppose you are working on developing a spring boot application. You are working with AOP which you know is one of the key components of Spring Framework. You know AOP can work with <em>5</em> types of advices, so when you see <em>6</em> types of advices, you know something is wrong. Determine the faulty type.</p>\n\n<ol>\n\t<li><em>before </em></li>\n\t<li><em>after </em></li>\n\t<li><em>during </em></li>\n\t<li><em>after-returning </em></li>\n\t<li><em>after-throwing </em></li>\n\t<li><em>around</em></li>\n</ol>","a":[{"id":1655689,"option":"3","correct":true},{"id":1655690,"option":"4","correct":false},{"id":1655691,"option":"5","correct":false},{"id":1655692,"option":"6","correct":false}]},{"q":"<p>You are using the @AspectJ annotations in your Spring configuration to declare aspects.<br>\n<br>\nIn the given scenario, which of these annotations should you use to enable @AspectJ support with the Java @Configuration annotation?</p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>@EnableAspectJ</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>@EnableAspectJAutoProxy</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>@EnableAspectJAutoProxyAgent</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>@EnableAspectJAutoProxyConfig</code></pre>\n\n<p> </p>","a":[{"id":1655969,"option":"1","correct":false},{"id":1655970,"option":"2","correct":true},{"id":1655971,"option":"3","correct":false},{"id":1655972,"option":"4","correct":false}]},{"q":"<p>You want to use a pointcut expression such that it matches if a method execution join point represents the execution of any public method.<br>\n<br>\nWhich of these expression will you use in the given scenario?</p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>@Pointcut(\"execution(public * (*))\")</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>@Pointcut(\"execution(public *(..))\")</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>@Pointcut(\"execution(public * *(..))\")</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>@Pointcut(\"execution(* public (..))\")</code></pre>\n\n<p> </p>","a":[{"id":1655961,"option":"1","correct":false},{"id":1655962,"option":"2","correct":false},{"id":1655963,"option":"3","correct":true},{"id":1655964,"option":"4","correct":false}]},{"q":"<p>Which of the following AOP framework objects can be used to execute aspect contracts in the Spring framework?<br>\n<br>\n1. JDK dynamic proxy<br>\n2. CGLIB proxy</p>","a":[{"id":1655957,"option":"Only 1","correct":false},{"id":1655958,"option":"Only 2","correct":false},{"id":1655959,"option":"Both 1,2","correct":true},{"id":1655960,"option":"Neither 1 nor 2","correct":false}]},{"q":"<p>You want to enable AspectJ support in your Spring application.<br>\nWhich of the following code snippets should you use to achieve this?</p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>Include &lt;aop:aspectj-alpha-proxy&gt; in the Spring configuration.</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>Include &lt;aop:aspectj-autoproxy&gt; in the Spring configuration.</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>Import cg-aspectjlib module while writing the program.</code></pre>\n\n<p><strong>4.</strong></p>","a":[{"id":1655925,"option":"1","correct":false},{"id":1655926,"option":"2","correct":true},{"id":1655927,"option":"3","correct":false},{"id":1655928,"option":"Both 1 and 3","correct":false}]},{"q":"<p>Which of the following <em>AspectJ pointcut designators</em> are supported in <em>Spring AOP</em>?</p>\n\n<p>i. @args</p>\n\n<p>ii. execution()</p>\n\n<p>iii. @within</p>\n\n<p>iv. within</p>","a":[{"id":732221,"option":"i, and iii","correct":false},{"id":732222,"option":"ii, and iv","correct":false},{"id":732223,"option":"i, ii, and iv","correct":false},{"id":732224,"option":"All of these","correct":true}]},{"q":"<p>Identify the valid statements about the concept of <em>Weaving </em>in <em>Spring AOP</em>?</p>\n\n<p>i. Weaving is the process of applying aspects to a target object to create a new proxied object.</p>\n\n<p>ii. Weaving can be done at compile time, load time or at runtime.</p>\n\n<p>iii. Runtime weaving is done using the AspectJ compiler.</p>\n\n<p>iv. During load time weaving, aspects are woven in when the target class is loaded into the JVM.</p>","a":[{"id":732217,"option":"i, ii, and iii","correct":false},{"id":732218,"option":"i, ii and iv","correct":true},{"id":732219,"option":"i, iii, and iv","correct":false},{"id":732220,"option":"All of these","correct":false}]},{"q":"<p>What is <em>Weaving </em>in Spring AOP ?</p>","a":[{"id":730636,"option":" Weaving is the process of linking an aspect with other application types or objects to create an advised object","correct":true},{"id":730637,"option":"It is an expression that is matched with join points to determine whether advice needs to be executed or not","correct":false},{"id":730638,"option":"It is the process of creating an object after applying advice to the target object.","correct":false},{"id":730639,"option":"None of these","correct":false}]},{"q":"<p>Which of the following statements are true about <em>Pointcuts </em>in <em>Spring AOP </em>?</p>\n\n<p>i. Pointcuts help narrow down the join points advised by an aspect.</p>\n\n<p>ii. A pointcut definition matches one or more join points at which advice should be woven.</p>\n\n<p>iii. Pointcuts can be specified through regular expressions that define matching class and method name patterns.</p>\n\n<p>iv. AOP frameworks do not allow for the creation of dynamic pointcuts.</p>","a":[{"id":732137,"option":"i, ii, and iv","correct":false},{"id":732138,"option":"i, ii, and iii","correct":true},{"id":732139,"option":"i, iii, and iv","correct":false},{"id":732140,"option":"Al of these","correct":false}]},{"q":"<p>Which of the following can be considered as a <em>Join Point </em>in <em>Spring AOP </em>?</p>","a":[{"id":732097,"option":"A method being called","correct":false},{"id":732098,"option":"An exception being thrown","correct":false},{"id":732099,"option":"None of these","correct":false},{"id":732100,"option":"Both of these","correct":true}]},{"q":"<p>Which of the following statements are valid about <em>DispatcherServlet</em>?</p>\n\n<p>i. Used to handle all incoming requests and route them through Spring.</p>\n\n<p>ii. Uses customizable logic to determine which controllers should handle which requests.</p>\n\n<p>iii. Forwards all responses to through view handlers to determine the correct views to route responses to.</p>\n\n<p>iv. Exposes all beans defined in Spring to controllers for dependency injection.</p>","a":[{"id":730676,"option":"i, ii, and iii","correct":false},{"id":730677,"option":"i, ii, and iv","correct":false},{"id":730678,"option":"i, iii, and iv","correct":false},{"id":730679,"option":"i, ii, iii, and iv","correct":true}]},{"q":"<p>Which exception is thrown if an attempt is made to use a AspectJ designator which is not supported in Spring AOP?</p>","a":[{"id":732225,"option":"IllegalArgumentException","correct":true},{"id":732226,"option":"ClassNotFoundException","correct":false},{"id":732227,"option":"NullException","correct":false},{"id":732228,"option":"None of these","correct":false}]},{"q":"<p>Select the statement that defines the concept of <em>Pointcut </em>in Spring AOP?</p>","a":[{"id":730644,"option":"This is a set of one or more join points where an advice should be executed.","correct":true},{"id":730645,"option":"It is the process of linking aspects with other application types or objects to create an advised object","correct":false},{"id":730646,"option":"It is the code to execute at a join point","correct":false},{"id":730647,"option":"None of these","correct":false}]},{"q":"<p>What is an <em>After Throwing Advice</em>?</p>","a":[{"id":729526,"option":"Advice that could throw an exception","correct":false},{"id":729527,"option":"Advice to be executed if a method exits by throwing an exception","correct":true},{"id":729528,"option":"Advice that executes before a join point","correct":false},{"id":729529,"option":"Spring does not provide this type of advice","correct":false}]},{"q":"<p>Using the Spring AOP framework, what are the join point methods of the following pointcut expressions?<br>\n<em><strong>execution(public * *(..))</strong></em></p>","a":[{"id":735612,"option":"The execution of all public method","correct":true},{"id":735613,"option":"The execution of all public method returning a value","correct":false},{"id":735614,"option":"The execution of all public method having at least one parameter","correct":false},{"id":735615,"option":"The execution of all public method in class belonging to the default java package","correct":false}]},{"q":"<p>Which of the following are valid <em>Spring's AOP configuration</em> elements?</p>\n\n<p>i. &lt;aop:advisor&gt;</p>\n\n<p>ii. &lt;aop:around&gt;</p>\n\n<p>iii. &lt;aop:aspect&gt;</p>\n\n<p>iv. &lt;aop:after-returning&gt;</p>","a":[{"id":729452,"option":"i, ii, and iii","correct":false},{"id":729453,"option":"i, ii, and iv","correct":false},{"id":729454,"option":"i, iii, and iv","correct":false},{"id":729455,"option":"All of these","correct":true}]}]
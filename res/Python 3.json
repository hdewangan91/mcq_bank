[{"q":"<p>In Machine Learning, you are working on a project using natural language processing. What is the output of&nbsp;the following code:</p>\n\n<pre class=\"prettyprint\"><code>text_a = \"Bob and Mike are friends\"\ntext_b = \"Alice is hacker\"\nbag_a = text_a.split(' ')\nbag_b = text_b.split(' ')\nresult = set(bag_a).union(bag_b)\nprint(result)</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1723689,"option":"{'friends', 'are', 'hacker', 'Mike', 'is', 'Alice', 'and', 'Bob'}\r\n","correct":true},{"id":1723690,"option":"{'friends', 'hacker', 'Mike', 'is', 'Alice', 'and', 'Bob'}\r\n","correct":false},{"id":1723691,"option":"{'friends', 'are', 'hacker', 'Mike', 'Alice', 'and', 'Bob'}\r\n","correct":false},{"id":1723692,"option":"None of these","correct":false}]},{"q":"<p>In Machine Learning, you are working on a project using natural language processing. What is the output of&nbsp;the following code:</p>\n\n<pre class=\"prettyprint\"><code>text_a = \"Bob and Mike went out for a walk\"\ntext_b = \"Alice went out in the woods\"\nbag_a = text_a.split(' ')\nbag_b = text_b.split(' ')\nresult = set(bag_a).intersection(bag_b)\nprint(result)</code></pre>","a":[{"id":1723685,"option":"{'out', 'in', 'the'}\r\n","correct":false},{"id":1723686,"option":"{'out', 'went'}\r\n","correct":true},{"id":1723687,"option":"{'went', 'in', 'the'}\r\n","correct":false},{"id":1723688,"option":"None of these","correct":false}]},{"q":"<p>Consider you are working on Python dictionaries. You have defined the following dictionaries <strong>d1</strong> and <strong>d2. </strong>You need to compare whether 2 dictionaries are equal or not. So which of the following Python codes are the correct way to perform this action in this scenario:</p>\n\n<p><strong>Dictionaries</strong></p>\n\n<pre class=\"prettyprint\"><code>d1 = {'Name': 'Alice', 'Age': 5}\nd2 = {'Name': 'Alice', 'Age': 5}</code></pre>\n\n<p><strong>Python Codes</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>if d1==d2:\n\tprint('Equal')\nelse:\n\tprint('Not Equal')</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>equal=True\nfor i in d1:\n    if d1[i]!=d2[i]:\n        equal=False\n\nif equal==True:\n\tprint('Equal')\nelse:\n\tprint('Not Equal')</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>if d1.keys()==d2.keys() and d1.values()==d2.values():\n\tprint('Equal')\nelse:\n\tprint('Not Equal')</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1583137,"option":"1","correct":false},{"id":1583138,"option":"2","correct":false},{"id":1583139,"option":"1 and 2","correct":true},{"id":1583140,"option":"1, 2 and 3","correct":false}]},{"q":"<p>In <strong>Python</strong>, you are working on <strong>Dictionaries</strong>. Consider you are given the following Python codes.</p>\n\n<p><strong>Python Codes</strong></p>\n\n<p><strong>1. </strong></p>\n\n<pre class=\"prettyprint\"><code>d={ 1:2, 'c':4, 4:'w', 7:['1'], ['a']:1 }</code></pre>\n\n<p><strong>2. </strong></p>\n\n<pre class=\"prettyprint\"><code>d={9:3, 'w':4, 7:'q', 1:['3'], 'a':[1], (2,3):'qsd'}</code></pre>\n\n<p><strong>3. </strong></p>\n\n<pre class=\"prettyprint\"><code>d={ 'e':3, 'q':'sdf', ['2']:('q','d'), ('q','e'):(1,2), ['a']:[1] }</code></pre>\n\n<p>Which of the above codes will raise an error when executing the following Python syntax along with them individually:</p>\n\n<pre class=\"prettyprint\"><code>print(d)</code></pre>\n\n<p> </p>","a":[{"id":1558600,"option":"1 and 2","correct":false},{"id":1558601,"option":"2 and 3","correct":false},{"id":1558602,"option":"1 and 3","correct":true},{"id":1558603,"option":"1, 2 and 3","correct":false}]},{"q":"<p>What is the output of the below Python code?</p>\n\n<p><strong>Python Code</strong></p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth:\n    def __init__(self,HackNew = 1):\n        self.HackNew = HackNew\n    \n    def set(self,HackNew):\n        self.HackNew = HackNew\n        return HackNew\n\n\nHack = HackerEarth()\nprint(Hack.set(Hack.HackNew + 1))</code></pre>\n\n<p> </p>\n\n<p> </p>\n\n<p> </p>","a":[{"id":1590432,"option":"0","correct":false},{"id":1590433,"option":"1","correct":false},{"id":1590434,"option":"2","correct":true},{"id":1590435,"option":"3","correct":false}]},{"q":"<p>What is the output of the below Python code?</p>\n\n<p><strong>Python Code</strong></p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth:\n    def __init__(self):\n        pass\n\nHack = HackerEarth(1)\nprint(hasattr(Hack,'HackerEarth'))</code></pre>\n\n<p> </p>\n\n<p> </p>","a":[{"id":1590344,"option":"1","correct":false},{"id":1590345,"option":"True","correct":false},{"id":1590346,"option":"False","correct":false},{"id":1590347,"option":"It will raise an error","correct":true}]},{"q":"<p>What is the output of the below Python code?</p>\n\n<p><strong>Python Code</strong></p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth:\n    def __init__(self,HackNew):\n        self.__Hack = HackNew + 1\n\nHackObject = HackerEarth(0)\nprint(HackObject.__Hack)</code></pre>\n\n<p> </p>","a":[{"id":1590340,"option":"0","correct":false},{"id":1590341,"option":"1","correct":false},{"id":1590342,"option":"2","correct":false},{"id":1590343,"option":"it will raise an AttributeError exception","correct":true}]},{"q":"<p>What is the output of the below Python code?</p>\n\n<p><strong>Python Code</strong></p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth1:\n    def __str__(self):\n        return 'Hack1'\n\nclass HackerEarth2(HackerEarth1):\n    def __str__(self):\n        return 'Hack2'\n\nclass HackerEarth3(HackerEarth2):\n    pass\n\n\nHack = HackerEarth3()\nprint(Hack)</code></pre>\n\n<p> </p>\n\n<p> </p>","a":[{"id":1590468,"option":"Hack1","correct":false},{"id":1590469,"option":"Hack2","correct":true},{"id":1590470,"option":"Hack3","correct":false},{"id":1590471,"option":"It will raise an exception","correct":false}]},{"q":"<p>Consider you are working on <strong>Python</strong>. You have implemented the following code.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>lst = [2, 4, 1, 3]\n\nnew = lst\nlst[0] = 9\nprint(new)</code></pre>\n\n<p> </p>\n\n<p>What will be the output of the above code?</p>","a":[{"id":1574973,"option":"[2, 4, 1, 3]","correct":false},{"id":1574974,"option":"[9, 4, 1, 3]","correct":true},{"id":1574975,"option":"None","correct":false},{"id":1574976,"option":"This program will give an Error","correct":false}]},{"q":"<p>Consider you are working on <strong>Python</strong>. </p>\n\n<p>Which of the following syntaxes in <strong>python</strong> will return the following output:</p>\n\n<p><strong>Output</strong></p>\n\n<pre class=\"prettyprint\"><code>[3, 2, 1]</code></pre>\n\n<p> </p>\n\n<p><strong>Syntaxes</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>print([1, 2, 3][2::-1])</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>print([1, 2, 3][::-1])</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1574418,"option":"only 1","correct":false},{"id":1574419,"option":"only 2","correct":false},{"id":1574420,"option":"Both 1 and 2","correct":true},{"id":1574421,"option":"None of these","correct":false}]},{"q":"<p>Consider you are working on <strong>Python</strong>. You have implemented the following code.</p>\n\n<p> </p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>lst = [2, 4, 1, 3]\n\nsorted(lst)\nprint(lst)</code></pre>\n\n<p> </p>\n\n<p>What will be the output of the above code?</p>","a":[{"id":1574426,"option":"[2, 4, 1, 3]","correct":true},{"id":1574427,"option":"[1, 2, 3, 4]","correct":false},{"id":1574428,"option":"None","correct":false},{"id":1574429,"option":"This program will give an Error","correct":false}]},{"q":"<p>Consider you are working on <strong>Python</strong>. You have implemented the following code.</p>\n\n<p> </p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>lst = [2, 4, 1, 3]\nnew = lst.sort()\nprint(new)</code></pre>\n\n<p> </p>\n\n<p>What will be the output of the above code?</p>","a":[{"id":1574434,"option":"[2, 4, 1, 3]","correct":false},{"id":1574435,"option":"[1, 2, 3, 4]","correct":false},{"id":1574436,"option":"None","correct":true},{"id":1574437,"option":"This program will give an Error","correct":false}]},{"q":"<p>What is the output of the below Python code?</p>\n\n<p><strong>Python Code</strong></p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth:\n    Hacker1 = 0\n    def __init__(self,HackNew = 0):\n        self.Hacker2 = HackNew\n        HackerEarth.Hacker1 += HackNew\n\nHack1 = HackerEarth()\nHack2 = HackerEarth(1)\nHack3 = HackerEarth(2)\nprint(Hack3.Hacker1)</code></pre>\n\n<p> </p>\n\n<p> </p>","a":[{"id":1590456,"option":"0","correct":false},{"id":1590457,"option":"1","correct":false},{"id":1590458,"option":"2","correct":false},{"id":1590459,"option":"3","correct":true}]},{"q":"<p>Consider you are working on Python dictionaries. You are given a dictionary d and you need to swap the key and value for each pair. </p>\n\n<p>Example :</p>\n\n<p>If d={1:2, 3:4}<br>\nafter swapping d={2:1, 4:3}</p>\n\n<p>Now, which of the following Python code snippets will perform the above task successfully?</p>\n\n<p><strong>Python Code snippets</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>d=dict(zip(d.values(),d.keys()))</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>d={value:key for (key,value) in d}</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>d={d[i]:i for i in d}</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>\n\n<p> </p>\n\n<p> </p>","a":[{"id":1583145,"option":"1 and 2","correct":false},{"id":1583146,"option":"2 and 3","correct":false},{"id":1583147,"option":"1 and 3","correct":true},{"id":1583148,"option":"1, 2 and 3","correct":false}]},{"q":"<p>Consider you are working on <strong>Python</strong>. You have implemented the following code.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>lst = [2, 4, 1, 3]\n\nnew = lst\nprint(new is lst)\n\nnew = list(lst)\nprint(new is lst)\n\nnew = lst[:]\nprint(new is lst)\n\nnew = lst.copy()\nprint(new is lst)</code></pre>\n\n<p> </p>\n\n<p>Which of the following is the correct output of the above code?</p>\n\n<p> </p>\n\n<p><strong>Outputs</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>True\nFalse\nFalse\nFalse</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>True\nTrue\nFalse\nFalse</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>True\nTrue\nTrue\nFalse</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>True\nTrue\nTrue\nTrue</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>\n\n<p> </p>","a":[{"id":1574981,"option":"1","correct":true},{"id":1574982,"option":"2","correct":false},{"id":1574983,"option":"3","correct":false},{"id":1574984,"option":"4","correct":false}]},{"q":"<p>What is the output of the following Python Code:</p>\n\n<p><strong>Python Code</strong></p>\n\n<pre class=\"prettyprint\"><code>d1 = {}\nexr, gqn, czh = 164, 936, 728\nd1[exr, gqn, czh] = exr + gqn - czh;\nprint(d1)\n\nd2={}\nkdq, hya, wcl = 482, 925, 859\nd2[kdq, hya, wcl] = hya , wcl, kdq;\nprint(d2)</code></pre>\n\n<p><strong>Outputs</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>{(164, 936, 728): 372}\n{(482, 925, 859): (925, 859, 482)}</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>{(164, 936, 728): 372}\n{482:925, 925:859, 859:482}</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>{164:372, 936:372, 728:372}\n{(482, 925, 859): (925, 859, 482)}</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>{164:372, 936:372, 728:372}\n{482:925, 925:859, 859:482}</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>\n\n<p> </p>\n\n<p> </p>","a":[{"id":1586174,"option":"1","correct":true},{"id":1586175,"option":"2","correct":false},{"id":1586176,"option":"3","correct":false},{"id":1586177,"option":"4","correct":false}]},{"q":"<p>In <strong>Python</strong>, you are working on <strong>Dictionaries</strong>. Consider you are given the following Python code.</p>\n\n<p><strong>Python Code</strong></p>\n\n<pre class=\"prettyprint\"><code>d={'ab':91, 'bwe':'247', 34:3, 68:'as', '485':'sdb'}\n</code></pre>\n\n<p>Which of the following syntaxes will delete the <strong>key 'ab' </strong>from the dictionary?</p>\n\n<p><strong>Syntaxes</strong></p>\n\n<p><strong>1. </strong></p>\n\n<pre class=\"prettyprint\"><code>d.discard('ab')</code></pre>\n\n<p><strong>2. </strong></p>\n\n<pre class=\"prettyprint\"><code>d.popitem('ab')</code></pre>\n\n<p><strong>3. </strong></p>\n\n<pre class=\"prettyprint\"><code>d.pop('ab')</code></pre>\n\n<p><strong>4. </strong></p>\n\n<pre class=\"prettyprint\"><code>del d['ab']</code></pre>\n\n<p> </p>\n\n<p> </p>","a":[{"id":1558552,"option":"1 and 2","correct":false},{"id":1558553,"option":"2 and 3","correct":false},{"id":1558554,"option":"3 and 4","correct":true},{"id":1558555,"option":"1 and 4","correct":false}]},{"q":"<p>#--Replace</p>\n\n<p>In <strong>Python</strong>, you are working on <strong>Dictionaries</strong>. Consider you are given the following Python code.</p>\n\n<p><strong>Python Code</strong></p>\n\n<pre class=\"prettyprint\"><code>d={'a':1, 'b':2, 'c':3}</code></pre>\n\n<p>Which of the following syntaxes are useful to search whether a certain key exists in a dictionary or not?</p>\n\n<p><strong>Syntaxes</strong></p>\n\n<p><strong>1. </strong></p>\n\n<pre class=\"prettyprint\"><code>d.key('a')</code></pre>\n\n<p> </p>\n\n<p><strong>2. </strong></p>\n\n<pre class=\"prettyprint\"><code>'a' in d.key()</code></pre>\n\n<p> </p>\n\n<p><strong>3. </strong></p>\n\n<pre class=\"prettyprint\"><code>'a' in d.keys()</code></pre>\n\n<p> </p>\n\n<p><strong>4. </strong></p>\n\n<pre class=\"prettyprint\"><code>'a' in d</code></pre>\n\n<p> </p>","a":[{"id":1558548,"option":"1 and 2","correct":false},{"id":1558549,"option":"1 and 3","correct":false},{"id":1558550,"option":"2 and 4","correct":false},{"id":1558551,"option":"3 and 4","correct":true}]},{"q":"<p>In <strong>Python</strong>, you are working on <strong>Dictionaries</strong>. Consider you are given the following Python code.</p>\n\n<p><strong>Python Code</strong></p>\n\n<pre class=\"prettyprint\"><code>d={'qyd':903, 'lyr':'481', 'qyd':4999, 274:'dyj', 'lyr':560}\nprint(d)</code></pre>\n\n<p>Which of the following outputs will be the correct output if the above code is executed?</p>\n\n<p><strong>Outputs</strong></p>\n\n<p><strong>1. </strong></p>\n\n<pre class=\"prettyprint\"><code>{'qyd':4999, 'lyr':560, 274:'dyj'}</code></pre>\n\n<p><strong>2. </strong></p>\n\n<pre class=\"prettyprint\"><code>{'qyd':903, 'lyr':481, 274:'dyj'}</code></pre>\n\n<p><strong>3. </strong></p>\n\n<pre class=\"prettyprint\"><code>{'qyd':903, 'lyr':'481', 'qyd':4999, 274:'dyj', 'lyr':560}</code></pre>\n\n<p> </p>","a":[{"id":1558540,"option":"1","correct":true},{"id":1558541,"option":"2","correct":false},{"id":1558542,"option":"3","correct":false},{"id":1558543,"option":"It Raises an error at Line 1","correct":false}]},{"q":"<p>In <strong>Python</strong>, you are working on <strong>Dictionaries</strong>. Consider we have the following dictionary.</p>\n\n<pre class=\"prettyprint\"><code>d={'a':1,'b':2,'c':3}</code></pre>\n\n<p>Which of the following syntaxes will add a new pair ( <strong>key = f, value = 4</strong> ) to the existing dictionary <strong>d</strong>?</p>\n\n<p><strong>Syntaxes</strong></p>\n\n<p><strong>1. </strong></p>\n\n<pre class=\"prettyprint\"><code>d['f']=4\n</code></pre>\n\n<p><strong>2. </strong></p>\n\n<pre class=\"prettyprint\"><code>d.add('f',4)</code></pre>\n\n<p><strong>3. </strong></p>\n\n<pre class=\"prettyprint\"><code>d.update({'f':4})</code></pre>\n\n<p> </p>","a":[{"id":1558512,"option":"1 and 2","correct":false},{"id":1558513,"option":"2 and 3","correct":false},{"id":1558514,"option":"1 and 3","correct":true},{"id":1558515,"option":"All of these","correct":false}]},{"q":"<p>In <strong>Python</strong>, you are working on <strong>Dictionaries</strong>. Consider you are given the following Python code.</p>\n\n<p><strong>Python Code</strong></p>\n\n<pre class=\"prettyprint\"><code>a = dict()\nprint( type(a) ) \nb = {}\nprint( type(b) )\n</code></pre>\n\n<p>Which of the following outputs will be the correct output if the above code is executed?</p>\n\n<p><strong>Outputs</strong></p>\n\n<p><strong>1. </strong></p>\n\n<pre class=\"prettyprint\"><code>&lt;class 'dict'&gt;\n&lt;class 'set'&gt;</code></pre>\n\n<p><strong>2. </strong></p>\n\n<pre class=\"prettyprint\"><code>&lt;class 'dict'&gt;\n&lt;class 'dict'&gt;</code></pre>\n\n<p><strong>3. </strong></p>\n\n<pre class=\"prettyprint\"><code>&lt;class 'dict'&gt;\nNone</code></pre>\n\n<p> </p>","a":[{"id":1558234,"option":"1","correct":false},{"id":1558235,"option":"2","correct":true},{"id":1558236,"option":"3","correct":false},{"id":1558237,"option":"It raises the following error : NameError: name 'dict' is not defined","correct":false}]},{"q":"<p>#--replace</p>\n\n<p>In <strong>Python</strong>, you are working on <strong>Dictionaries</strong>. Consider you are given the following Python code.</p>\n\n<p> </p>\n\n<p><strong>Python Code</strong></p>\n\n<pre class=\"prettyprint\"><code>d={'a':1, 'b':2, 'c':3}</code></pre>\n\n<p> </p>\n\n<p>Which of the following syntaxes are useful to search whether a certain value exists in a dictionary or not?</p>\n\n<p> </p>\n\n<p><strong>Syntaxes</strong></p>\n\n<p><strong>1. </strong></p>\n\n<pre class=\"prettyprint\"><code>d.value(3)</code></pre>\n\n<p> </p>\n\n<p><strong>2. </strong></p>\n\n<pre class=\"prettyprint\"><code>3 in d.value()</code></pre>\n\n<p> </p>\n\n<p><strong>3. </strong></p>\n\n<pre class=\"prettyprint\"><code>3 in d.values()</code></pre>\n\n<p> </p>\n\n<p><strong>4. </strong></p>\n\n<pre class=\"prettyprint\"><code>3 in d</code></pre>","a":[{"id":1558596,"option":"1","correct":false},{"id":1558597,"option":"2","correct":false},{"id":1558598,"option":"3","correct":true},{"id":1558599,"option":"4","correct":false}]},{"q":"<p>In <strong>Python</strong>, you are working on <strong>Dictionaries</strong>. Consider you are given the following Python code.</p>\n\n<p><strong>Python Code</strong></p>\n\n<pre class=\"prettyprint\"><code>d={'fwa':81, 269:'729', 'wds':'392', '629':957}\nprint(d.get('926'))</code></pre>\n\n<p>Which of the following outputs will be the correct output if the above code is executed?</p>\n\n<p><strong>Outputs</strong></p>\n\n<p><strong>1. </strong></p>\n\n<pre class=\"prettyprint\"><code>None</code></pre>\n\n<p><strong>2. </strong></p>\n\n<pre class=\"prettyprint\"><code>It raises the following error\nNameError: name '926' is not defined</code></pre>\n\n<p><strong>3. </strong></p>\n\n<pre class=\"prettyprint\"><code>It raises the following error\nKeyError: '926'</code></pre>\n\n<p><strong>4. </strong></p>\n\n<pre class=\"prettyprint\"><code>It raises the following error\nAttributeError: 'dict' object has no attribute 'get'</code></pre>\n\n<p> </p>\n\n<p> </p>","a":[{"id":1558504,"option":"1","correct":true},{"id":1558505,"option":"2","correct":false},{"id":1558506,"option":"3","correct":false},{"id":1558507,"option":"4","correct":false}]},{"q":"<p>Consider you are working on <strong>Python</strong>. You have implemented the following code.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>def modify(lst):\n    lst.append(9)\n\nlst = [2, 4, 1, 3]\nmodify(lst)\nprint(lst)</code></pre>\n\n<p> </p>\n\n<p>What will be the output of the above code?</p>","a":[{"id":1576210,"option":"[ 2, 4, 1, 3 ]","correct":false},{"id":1576211,"option":"[ 2, 4, 1, 3, 9 ]","correct":true},{"id":1576212,"option":"[ 9 ]","correct":false},{"id":1576213,"option":"This program will give an Error","correct":false}]},{"q":"<p>Consider you are working on <strong>Python</strong>. You have implemented the following code.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>def modify(lst):\n    lst = [8, 9]\n\nlst = [2, 4, 1, 3]\nmodify(lst)\nprint(lst)</code></pre>\n\n<p> </p>\n\n<p>What will be the output of the above code?</p>","a":[{"id":1576214,"option":"[ 2, 4, 1, 3 ]","correct":false},{"id":1576215,"option":"[ 8, 9 ]","correct":true},{"id":1576216,"option":"[ ]","correct":false},{"id":1576217,"option":"This program will give an Error","correct":false}]},{"q":"<p>Consider you are working on <strong>Python</strong>. You have implemented the following code.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>lst = [2,]*3\n\nprint(lst)</code></pre>\n\n<p> </p>\n\n<p>What will be the output of the above code?</p>","a":[{"id":1575602,"option":"[ 6 ]","correct":false},{"id":1575603,"option":"[ 2 ] [ 2 ] [ 2 ]","correct":false},{"id":1575604,"option":"[ 2, 2, 2 ]","correct":true},{"id":1575605,"option":"This program will give an Error","correct":false}]},{"q":"<p>Consider you are working on <strong>Python</strong>. You have implemented the following code.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>lst_1 = [2, 4, 1, 3]\nlst_2 = [3, 1, 2]\n\nprint(max(lst_1, lst_2))</code></pre>\n\n<p> </p>\n\n<p>What will be the output of the above code?</p>","a":[{"id":1575278,"option":"[2, 4, 1, 3]","correct":false},{"id":1575279,"option":"[3, 1, 2]","correct":true},{"id":1575280,"option":"4","correct":false},{"id":1575281,"option":"4, 3","correct":false}]},{"q":"<p>Consider you are working on <strong>Python</strong>. You have implemented the following code.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>lst = [2, 4, 1, 3]\n\nprint(lst*2)</code></pre>\n\n<p> </p>\n\n<p>What will be the output of the above code?</p>","a":[{"id":1575133,"option":"[2, 4, 1, 3] [2, 4, 1, 3]","correct":false},{"id":1575134,"option":"[2, 4, 1, 3, 2, 4, 1, 3]","correct":true},{"id":1575135,"option":"[4, 8, 2, 6]","correct":false},{"id":1575136,"option":"This program will give an Error","correct":false}]},{"q":"<p>In Python 3, you are given the following code. Determine X if you are required to obtain the provided output:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>class sample:\n    count = 0\n    def __repr__(self):\n        return 'Python test'\n    def display(self):\n        X\n\ntemp1 = sample()\ntemp2 = temp1.display()\ndel temp1\nprint(temp2)</code></pre>\n\n<p><strong>Output</strong></p>\n\n<pre class=\"prettyprint\"><code>27</code></pre>\n\n<p> <strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>count = 0\nfor i in range(1,10):\n    count = count*2\nreturn count</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>for i in range(1,11):\n    count = i+i*2\nreturn count</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>for i in range(1,10):\n    count = i+i*2\nreturn count</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>for i in range(0,10):\n    count = i+i*2\nreturn count</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":150551,"option":"1","correct":false},{"id":150552,"option":"2","correct":false},{"id":150553,"option":"3","correct":true},{"id":150554,"option":"4","correct":false}]},{"q":"<p>You are given the following Python 3 code that contains two input variables―n and a. Also, you are given three input values corresponding to <strong>n</strong> and <strong>a</strong> in the code. Determine the output for each of the input values provided.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>try:\n    n = int(input())\n    a = map(int,input().split())\n    m = min(a)\n    print(-1,[2*sum(a)])\nexcept Exception as e:\n    print(e)</code></pre>\n\n<p><strong>Inputs</strong></p>\n\n<ol>\n\t<li>3<br>\n\t1 2 1</li>\n\t<li>2<br>\n\t5 5</li>\n\t<li>1<br>\n\t10</li>\n</ol>\n\n<p><strong>Outputs</strong></p>\n\n<ol>\n\t<li>1. 0 [-1]<br>\n\t2. 0 [-1]<br>\n\t3. 0 [-1]</li>\n\t<li>1. -1 [0]<br>\n\t2. -1 [0]<br>\n\t3. -1 [0]</li>\n\t<li>1. [-1] [0]<br>\n\t2. -1 [0]<br>\n\t3. 0 [-1]</li>\n\t<li>1. 0 [-1]<br>\n\t2. 0 -1<br>\n\t2. -1 0 </li>\n</ol>","a":[{"id":730496,"option":"1","correct":false},{"id":730497,"option":"2","correct":true},{"id":730498,"option":"3","correct":false},{"id":730499,"option":"4","correct":false}]},{"q":"<p>You are given the following Python 3 code. Determine the output corresponding to the provided input:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>n = input()\nprint(max(i for i in range(3000)if int(bin(i)[2:])&lt;=n))</code></pre>\n\n<p><strong>Input</strong></p>\n\n<pre class=\"prettyprint\"><code>23536</code></pre>\n\n<p> </p>","a":[{"id":730504,"option":"53","correct":false},{"id":730505,"option":"31","correct":false},{"id":730506,"option":"7","correct":false},{"id":730507,"option":"TypeError","correct":true}]},{"q":"<p>You are given the following Python 3 code. Determine the output corresponding to the provided input:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>dp = [0] * 3\nfor i in input():\n        if i == 'a':\n                dp[2] = max(dp) + 1\n                dp[0] += 1\n        else:\n                dp[1] = max(dp[0],dp[1]) + 1\nprint(max(dp))</code></pre>\n\n<p><strong>Input</strong></p>\n\n<pre class=\"prettyprint\"><code>abba</code></pre>\n\n<p> </p>","a":[{"id":730512,"option":"2","correct":false},{"id":730513,"option":"4","correct":true},{"id":730514,"option":"3","correct":false},{"id":730515,"option":"5","correct":false}]},{"q":"<p>You are given the following Python 3 code. Determine the output corresponding the provided input:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>k,d,x=map(int,input().split())\nx *= 2\nif d &lt; k:\n    d = (k+d-1)/d*d\ne = d+k\nt = x/e*d\nx %= e\nif x &gt; k*2:\n    t += k\n    t += x-k*2\nelse:\n    t += x/2.0\nprint(round(t, 2))</code></pre>\n\n<p><strong>Input</strong></p>\n\n<pre class=\"prettyprint\"><code>8 10 8</code></pre>\n\n<p> </p>","a":[{"id":730516,"option":"16.89","correct":true},{"id":730517,"option":"16.88826","correct":false},{"id":730518,"option":"16.88888888888889","correct":false},{"id":730519,"option":"TypeError","correct":false}]},{"q":"<p>In Python 3, which of the following statements about the <strong>@property</strong> decorator are correct:</p>\n\n<ol>\n\t<li>It includes the setter and getter method to access the encapsulated data. Also, it returns the objects of the property class.</li>\n\t<li>It provides an interface to the instance attributes and returns the property of the main class.</li>\n\t<li>It only takes the get and set methods as arguments and returns the object of the main class.</li>\n\t<li>It takes the get, set, and delete arguments and returns the object of the property class.</li>\n</ol>","a":[{"id":1121989,"option":"1 and 2","correct":false},{"id":1121990,"option":"2 and 3","correct":false},{"id":1121991,"option":"3 and 4","correct":false},{"id":1121992,"option":"1 and 4","correct":true}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>import functools\n@functools.lru_cache()\ndef fibonacci(n):\n    if n &lt; 4:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\nres = fibonacci(10)\nprint(res)\n</code></pre>\n\n<p> </p>","a":[{"id":1122009,"option":"55","correct":false},{"id":1122010,"option":"89","correct":true},{"id":1122011,"option":"-55","correct":false},{"id":1122012,"option":"17","correct":false}]},{"q":"<p>Consider the following Python 3 code. Determine the value of <strong>wrapper_count.num_calls</strong> after the code is run?</p>\n\n<pre class=\"prettyprint\"><code>import functools\ndef count(f):\n    @functools.wraps(f)\n    def wrapper_count(*args, **kwargs):\n        wrapper_count.num_calls -= 1\n        return f(*args, **kwargs)\n    wrapper_count.num_calls = 0\n    return wrapper_count\n@count\ndef PythonProg():\n    print(\"Python\")\nPythonProg()\nPythonProg()\t# End of execution\n</code></pre>\n\n<p> </p>","a":[{"id":1122001,"option":"2","correct":false},{"id":1122002,"option":"-2","correct":true},{"id":1122003,"option":"1","correct":false},{"id":1122004,"option":"-1","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>def Compute(prog):\n    def ComputeInside(*args, **kwargs):\n        return prog(*args, **kwargs) + 1\n    return ComputeInside\n@Compute\ndef result(n):\n    return n - 4\nprint(result(5))\n</code></pre>\n\n<p> </p>","a":[{"id":1121985,"option":"3","correct":false},{"id":1121986,"option":"2","correct":true},{"id":1121987,"option":"1","correct":false},{"id":1121988,"option":"RuntimeError","correct":false}]},{"q":"<p>Which of the following is another way of representing the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>@my_decorator\ndef program():\n    print(\"HackerEarth\")\n</code></pre>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>my_decorator = program(HackerEarth)</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>program = my_decorator(HackerEarth)</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>def my_decorator(program):\n     print(“HackerEarth”)</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1121957,"option":"1","correct":false},{"id":1121958,"option":"2","correct":true},{"id":1121959,"option":"3","correct":false},{"id":1121960,"option":"None of these","correct":false}]},{"q":"<p>In Python 3, which of the following statements about <strong>decorators</strong> are correct:</p>\n\n<ol>\n\t<li>They allow you to modify the behavior of functions or classes.</li>\n\t<li>They allow you to wrap another function to extend the behavior of the wrapped function with permanent modification.</li>\n\t<li>They allow you to wrap another function to extend the behavior of the wrapped function without permanently modifying it.</li>\n</ol>","a":[{"id":1121953,"option":"1 and 2","correct":false},{"id":1121954,"option":"2 and 3","correct":false},{"id":1121955,"option":"1 and 3","correct":true},{"id":1121956,"option":"All of these","correct":false}]},{"q":"<p>In Python 3, which of the following statements about the generator expression and list comprehension are correct:</p>\n\n<ol>\n\t<li>The generator expression yields one item only when required. </li>\n\t<li>List comprehension reserves the memory for the entire list.</li>\n</ol>","a":[{"id":1121893,"option":"1","correct":false},{"id":1121894,"option":"2","correct":false},{"id":1121895,"option":"Both of these","correct":true},{"id":1121896,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>geneExp = (m for m in range(6) if m % 5 == 0) \nfor m in geneExp: \n    print(m*m, end=\" \") \n</code></pre>\n\n<p> </p>","a":[{"id":1121889,"option":"5","correct":false},{"id":1121890,"option":"0 5","correct":false},{"id":1121891,"option":"25","correct":false},{"id":1121892,"option":"0 25 ","correct":true}]},{"q":"<p>In Python 3, which of the following statements represent the difference between the generator function and normal function:</p>\n\n<ol>\n\t<li>In generators, when the function yields, it is paused and the control is given to the caller.</li>\n\t<li>Local variables and their states are remembered between successive calls unlike in normal functions.</li>\n\t<li>Generator functions can contain multiple yield similar to a normal function that can have multiple return statements.</li>\n</ol>\n\n<p> </p>","a":[{"id":1121885,"option":"1 and 2","correct":true},{"id":1121886,"option":"2 and 3","correct":false},{"id":1121887,"option":"1 and 3","correct":false},{"id":1121888,"option":"All of these","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>import itertools\ntry:\n    print(tuple(itertools.repeat(5, 'a')))\nexcept Exception as e:\n    print(e)\n</code></pre>\n\n<p> </p>","a":[{"id":1121881,"option":"(5, 5, 5)","correct":false},{"id":1121882,"option":"[5, 5, 5]","correct":false},{"id":1121883,"option":"(a, a, a, a, a)","correct":false},{"id":1121884,"option":"Exception is raised","correct":true}]},{"q":"<p>In Python 3, which of the following represent types of infinite iterators:</p>\n\n<ol>\n\t<li>count(start, step)</li>\n\t<li>cycle(iterables)</li>\n\t<li>repeat(val, num)</li>\n</ol>","a":[{"id":1121865,"option":"1 and 2 ","correct":false},{"id":1121866,"option":"2 and 3","correct":false},{"id":1121867,"option":"1 and 3","correct":false},{"id":1121868,"option":"All of these","correct":true}]},{"q":"<p>In Python 3, which of the following statements about <strong>iterators</strong> is correct:</p>\n\n<ol>\n\t<li>They allow you to work with infinite sequences without having to reallocate the resources for every sequence.</li>\n\t<li>Not all itertool functions return iterators.</li>\n</ol>\n\n<p> </p>","a":[{"id":1121853,"option":"1","correct":true},{"id":1121854,"option":"2","correct":false},{"id":1121855,"option":"Both of these","correct":false},{"id":1121856,"option":"None of these","correct":false}]},{"q":"<p>In Python 3, which of the following statements about the <strong>__next__ </strong>method is correct:</p>\n\n<ol>\n\t<li>It returns the next value.</li>\n\t<li>It returns the StopIteration error if all the objects have been looped through.</li>\n\t<li>It can only be used while using the ‘for’ and ‘in’ keywords.</li>\n</ol>","a":[{"id":1121829,"option":"1","correct":false},{"id":1121830,"option":"1 and 2","correct":true},{"id":1121831,"option":"2 and 3","correct":false},{"id":1121832,"option":"1 and 3","correct":false}]},{"q":"<p>In Python 3, you want to create an iterator object. For this, you are required to implement two methods in your iterator class. Which of the following methods can you implement?</p>","a":[{"id":1121825,"option":"__iter__, __next__","correct":true},{"id":1121826,"option":"__iter__, StopIteration","correct":false},{"id":1121827,"option":"__next__, StopIteration","correct":false},{"id":1121828,"option":"__init__, __iter__","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>class Deco:\n    def __init__(self):\n        self.n ='Python Testing'\n    @property\n    def prog(self):\n        return self.n\n    @prog.setter\n    def prog(self, value):\n        self.n = value\ndata = Deco()\ndata.prog = 'HackerEarth'\nprint(data.prog)</code></pre>\n\n<p> </p>","a":[{"id":1122005,"option":"Python Testing","correct":false},{"id":1122006,"option":"HackerEarth","correct":true},{"id":1122007,"option":"Python Testing HackerEarth","correct":false},{"id":1122008,"option":"Runtime error","correct":false}]},{"q":"<p>In Python 3, you have created an object of a class locally inside a method instead of passing it as an argument while calling the method. Which of the following statements about this scenario is correct:</p>\n\n<ol>\n\t<li>It is a weak relationship. It is not displayed in the class diagram.</li>\n\t<li>It is a weak relationship. It is displayed in the class diagram.</li>\n\t<li>It is a strong relationship. It is not displayed in the class diagram.</li>\n\t<li>It is a strong relationship. It is displayed in the class diagram.</li>\n</ol>","a":[{"id":730688,"option":"1","correct":true},{"id":730689,"option":"2","correct":false},{"id":730690,"option":"3","correct":false},{"id":730691,"option":"4","correct":false}]},{"q":"<p>You are given the following Python 3 code. Determine X if you must obtain the provided output:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>import re\npat1 = re.compile('Hacker')\npat2 = X('Earth', 'Python')\nprint(pat2)</code></pre>\n\n<p><strong>Output</strong></p>\n\n<pre class=\"prettyprint\"><code>Python</code></pre>\n\n<p> </p>","a":[{"id":730576,"option":"pa1.replace","correct":false},{"id":730577,"option":"pat1.sub","correct":true},{"id":730578,"option":"pat1.insert","correct":false},{"id":730579,"option":"pat1.sup","correct":false}]},{"q":"<p>In Python 3, which of the following statements about the property method and class method decorator are correct:</p>\n\n<ol>\n\t<li>The property method allows you to define the attribute of an object, whereas the class method can be applied to any method of a class.</li>\n\t<li>The property method works on instances whereas the class method operates on the class independent of any instance.</li>\n\t<li>The class method decorator allows you to call a method using the class name instead of the object.</li>\n\t<li>The property method works independently of any instance whereas the class method operates on instances.</li>\n</ol>","a":[{"id":1121993,"option":"1 and 2","correct":false},{"id":1121994,"option":"1, 2, and 3","correct":true},{"id":1121995,"option":"2, 3, and 4","correct":false},{"id":1121996,"option":"All of these ","correct":false}]},{"q":"<p>In Python 3, consider the following progMain decorator. Which of these statements about this code is correct:</p>\n\n<p><strong>Decorator</strong></p>\n\n<pre class=\"prettyprint\"><code>def progMain(f):\n    def prog(*args, **kwargs):\n        return f(*args, **kwargs)\n    return prog\n</code></pre>\n\n<p><strong>Statements</strong><br>\n1. The * and ** operators are used in prog closure definition to collect all positional and keyword arguments and store them in variables.<br>\n2. The prog closure forwards the collected arguments to the original input function.<br>\n3. The collected arguments are forwarded using the argument unpacking operators.</p>","a":[{"id":1122013,"option":"1 and 2","correct":false},{"id":1122014,"option":"2 and 3","correct":false},{"id":1122015,"option":"1 and 3","correct":false},{"id":1122016,"option":"All of these","correct":true}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>def main_list(sample_list):\n    def Compute():\n        return sum([i for i in sample_list if isinstance(i, float)])\n    result = Compute()\n    final_list.append(result)\n    return final_list\nsample_list = [1000, 1010.90, 3450, 7809.23]\nfinal_list=[]\nprint(main_list(final_list))\n</code></pre>\n\n<p> </p>","a":[{"id":1122049,"option":"[4456]","correct":false},{"id":1122050,"option":"[13270.13]","correct":false},{"id":1122051,"option":"[ ]","correct":false},{"id":1122052,"option":"[0]","correct":true}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>class StudentData:\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score\n    @property\n    def getScore(self):\n        return self.name + self.score \n    @getScore.setter\n    def getScore(self, n):\n        name, rand, marks = n.split(' ')\n        self.name = name\n        self.score = score\nst = StudentData(\"Bob\", \"20\")\nprint(st.getScore, sep=',')\n</code></pre>\n\n<p> </p>","a":[{"id":1122053,"option":"Bob, 20","correct":false},{"id":1122054,"option":",Bob20","correct":false},{"id":1122055,"option":"Bob20","correct":true},{"id":1122056,"option":"AttributeError","correct":false}]},{"q":"<p>You are a balloon vendor and you buy balloons from two balloon makers, John and Alice. You are given the following details in the Python 3 code:</p>\n\n<ol>\n\t<li>List of colors that the balloon makers use while making balloons</li>\n\t<li>Class <strong>balloons</strong></li>\n\t<li>Subclass <strong>balloon_maker</strong></li>\n</ol>\n\n<p>You are required to print a brand name that contains the color of the balloon and the balloon maker's name.</p>\n\n<p><strong>Example</strong></p>\n\n<ul>\n\t<li>Output: Red **Alice </li>\n\t<li>Explanation: Here, red is the color used by Alice to make balloons. Therefore, Red **Alice is the output.</li>\n</ul>\n\n<p><strong>Python 3 code</strong></p>\n\n<pre class=\"prettyprint\"><code>class balloons:\n    def __init__(self, color='red'):\n        self.color = color\n    class balloon_maker:\n        def __init__(self, name = ''):\n            self.name = name\n        def maker_details(self):\n            self.name = 'John'\n            self.name = 'Alice'\n            return \"**\"+self.name\n    def balloon_details(self, color_list):\n        for _ in color_list[1]:\n            self.color = _\n        return self.color\ncolor_list = [['Red', \"Yellow\"], (\"White\", \"Black\"), [\"Pink\",\"Green\"]]\nb = balloons('yellow')\nc = balloons().balloon_maker()\nbrand = b.balloon_details(color_list)\nname = c.maker_details()\nprint(brand, name)</code></pre>\n\n<p> </p>","a":[{"id":1121905,"option":"Red **John","correct":false},{"id":1121906,"option":"Black **Alice","correct":true},{"id":1121907,"option":"Black **John","correct":false},{"id":1121908,"option":"Green **Alice","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>l = ['12', '34', '5']\nt = tuple(map(list,(list(set(l)))))\nprint(sorted(t, key = lambda q:(q[-1])))</code></pre>\n\n<p> </p>","a":[{"id":730656,"option":"[['1', '2'], ['3', '4'], ['5']]","correct":true},{"id":730657,"option":"['1', '2', '3', '4', '5']","correct":false},{"id":730658,"option":"[['5', '4'], ['3', '2'], ['1']]","correct":false},{"id":730659,"option":"['5', '4', '3', '2', '1']","correct":false}]},{"q":"<p>In Python 3, which of the following statements about <strong>metaprogramming</strong> are correct:</p>\n\n<ol>\n\t<li>It is defined as the ability of a program to manipulate itself.</li>\n\t<li>Metaprogramming is used in decorators thus allowing you to change the behavior of a function or a class.</li>\n</ol>","a":[{"id":1121973,"option":"1","correct":false},{"id":1121974,"option":"2","correct":false},{"id":1121975,"option":"Both of these","correct":true},{"id":1121976,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>def Program(func): \n    def test(*args, **kwargs): \n        value = func(*args, **kwargs) \n        return value         \n    return test \n@Program\ndef Cal(x, y): \n    return x + y \nx, y = 2, 3\nprint(x, y)  \n</code></pre>\n\n<p> </p>","a":[{"id":1121965,"option":"1 2","correct":false},{"id":1121966,"option":"2 3","correct":true},{"id":1121967,"option":"5","correct":false},{"id":1121968,"option":"SyntaxError","correct":false}]},{"q":"<p>In Python 3, which of the following options represent the concept of <strong>metaprogramming</strong>?</p>","a":[{"id":1121961,"option":"Iterators","correct":false},{"id":1121962,"option":"Decorators","correct":true},{"id":1121963,"option":"Generators","correct":false},{"id":1121964,"option":"None of these","correct":false}]},{"q":"<p>In Python 3, which of the following statements about <strong>decorators</strong> is correct:</p>\n\n<ol>\n\t<li>It is a design pattern that allows you to add new functionality to an existing object without modifying its structure.</li>\n\t<li>It is a design pattern that allows you to remove new functionality to an existing object by modifying its structure.</li>\n\t<li>It is a design pattern that allows you to add and remove new functionality to an existing object by modifying its structure.</li>\n</ol>","a":[{"id":1121941,"option":"1","correct":true},{"id":1121942,"option":"2","correct":false},{"id":1121943,"option":"3","correct":false},{"id":1121944,"option":"None of these","correct":false}]},{"q":"<p>In Python 3, which of the following symbols is used before a function to represent a decorator?</p>","a":[{"id":1121949,"option":"&","correct":false},{"id":1121950,"option":"*","correct":false},{"id":1121951,"option":"@","correct":true},{"id":1121952,"option":"$","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>import itertools \ndata = ['apples', 2] \niter_data = itertools.cycle(data) \nfor i in range(3): \n    print(next(iter_data), end = \" \") \n</code></pre>\n\n<p> </p>","a":[{"id":1121869,"option":"apples 2","correct":false},{"id":1121870,"option":"apples 2 apples ","correct":true},{"id":1121871,"option":"apples 2 apples 2","correct":false},{"id":1121872,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>a = {1, 2, 3}\nb = iter(a)\nnext(b)\nprint(type(a))</code></pre>\n\n<p> </p>","a":[{"id":1121857,"option":"<class 'set'>","correct":true},{"id":1121858,"option":"<class 'dictionary'>","correct":false},{"id":1121859,"option":"<class 'list'>","correct":false},{"id":1121860,"option":"SyntaxError","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>t = (\"Python\", \"language\", \"test\")\niter_t = iter(t)\nprint(next(iter_t), end=' ')\nprint(next(iter_t), end=' ')\nprint(next(iter_t))</code></pre>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Python language test</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Python \nlanguage\ntest</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Python  \n\tlanguage test</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Python language\ntest</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1121849,"option":"1","correct":true},{"id":1121850,"option":"2","correct":false},{"id":1121851,"option":"3","correct":false},{"id":1121852,"option":"4","correct":false}]},{"q":"<p>In Python 3, which of the following statements about map and list comprehension is correct:</p>\n\n<ol>\n\t<li>List comprehension is used when a list of results is required whereas map comprehension can only return a map object and cannot return a list.</li>\n\t<li>List comprehension is slower than map comprehension when you want to evaluate expressions that are long or complicated to express.</li>\n</ol>","a":[{"id":1121817,"option":"1","correct":true},{"id":1121818,"option":"2","correct":false},{"id":1121819,"option":"1 and 2","correct":false},{"id":1121820,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>t = {}\nt[(11, 2, 49)] = 18\nt[(49, 10, 21)] = 7\nt[(15, 19)] = 20\ns = 0\nfor i in t: \n    s += t[i] \nprint(s**len(t))\n</code></pre>\n\n<p> </p>","a":[{"id":1121789,"option":"1085","correct":false},{"id":1121790,"option":"135","correct":false},{"id":1121791,"option":"18225","correct":false},{"id":1121792,"option":"91125","correct":true}]},{"q":"<p>In Python 3, consider the following code. If you want to obtain the provided results, determine the value of X.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>T = (1,'a', 5, 13, 'k', 10, 'b')\nR = X(4, 7)\nprint(T[R])</code></pre>\n\n<p><strong>Result</strong></p>\n\n<pre class=\"prettyprint\"><code>('k', 10, 'b')</code></pre>\n\n<p> </p>","a":[{"id":1121765,"option":"split","correct":false},{"id":1121766,"option":"slice","correct":true},{"id":1121767,"option":"join","correct":false},{"id":1121768,"option":"getstate","correct":false}]},{"q":"<p>In Python 3, which of the following statements represents the <strong>rstrip()</strong> function correctly?</p>\n\n<ol>\n\t<li>It removes spaces from the right side of the string.</li>\n\t<li>It removes any leading spaces in the string.</li>\n\t<li>It does not accept any arguments.</li>\n</ol>","a":[{"id":1121761,"option":"1 and 2","correct":false},{"id":1121762,"option":"2 and 3","correct":false},{"id":1121763,"option":"1 and 3","correct":true},{"id":1121764,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>from itertools import zip_longest\nn = [2, 6, 10, 13, 15]\nm = ['words', 'Hacker', 'Earth', 'Hi']\nl = range(3)\nresult = zip_longest(n, m, l, fillvalue = '0')\nprint(list(result))</code></pre>\n\n<p> </p>","a":[{"id":1121757,"option":"[(2, 'words', 0), (6, 'Hacker', 0), (10, 'Earth', 0), (13, 'Hi', '0'), (15, '0', '0')]","correct":false},{"id":1121758,"option":"[(2, 'words', 0), (6, 'Hacker', 1), (10, 'Earth', 2), ('0', 'Hi', '0')]","correct":false},{"id":1121759,"option":"[(2, 'words', 0), (6, 'Hacker', 1), (10, 'Earth', 2), (13, 'Hi', '0'), (15, '0', '0')]","correct":true},{"id":1121760,"option":"Runtime error","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>def element(x): \n    return x[0] \ndef sort_list(t):  \n  return sorted(t, key = element)  \nprint(sort_list([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)]))  \n</code></pre>\n\n<p> </p>","a":[{"id":1121745,"option":"[(1, 2), (2, 1), (2, 3), (2, 5), (4, 4)] ","correct":false},{"id":1121746,"option":"[(1, 2), (2, 3), (2, 1), (2, 5), (4, 4)]","correct":false},{"id":1121747,"option":"[(1, 2), (2, 5), (2, 3), (2, 1), (4, 4)]","correct":true},{"id":1121748,"option":"[(1, 2), (2, 5), (2, 1), (2, 3), (4, 4)]","correct":false}]},{"q":"<p>You are given the following Python 3 expressions. Which of these represents:</p>\n\n<ol>\n\t<li>Data type of c</li>\n\t<li>Correct value of c</li>\n</ol>\n\n<p><strong>Expression</strong></p>\n\n<pre class=\"prettyprint\"><code>a = 0 + True * True\nb = 0 + False * True\nc = (a + b * ( b - a))**11</code></pre>\n\n<p> </p>","a":[{"id":1121741,"option":"1. Int \r\n2. c = 1","correct":true},{"id":1121742,"option":"1. Int \r\n2. c = -1","correct":false},{"id":1121743,"option":"1. Boolean \r\n2.  c = True","correct":false},{"id":1121744,"option":"Throws a runtime error","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>a = {1: 'Bob', '10abc': 'language', 1998: 'Age'}\nprint(a.get(10abc))</code></pre>\n\n<p> </p>","a":[{"id":1121725,"option":"‘language’","correct":false},{"id":1121726,"option":"None","correct":false},{"id":1121727,"option":"Bob","correct":false},{"id":1121728,"option":"SyntaxError","correct":true}]},{"q":"<p>You are given the following Python 3 code. Determine X to obtain the provided output:<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>L1=[1, 2]\nL2=[4, 6]\nfor (x,y) in X:\n    print(x*y, end=' ')</code></pre>\n\n<p><strong>Output</strong></p>\n\n<pre class=\"prettyprint\"><code>4 12</code></pre>\n\n<p> </p>","a":[{"id":730648,"option":"(L1,L2)","correct":false},{"id":730649,"option":"(L2,L1)","correct":false},{"id":730650,"option":"zip(L1,L2)","correct":true},{"id":730651,"option":"zip([1,2],L1)","correct":false}]},{"q":"<p>What is the output of the following Python code:</p>\n\n<pre class=\"prettyprint\"><code>L1 = [32, 3, 54, 8, 100]\nL2 = [2]\nL3 = []\nfor (x,y) in zip(L1,L2):\n    if(x&gt;10 and y&lt;5):\n        L3=L3+[x+y]\nprint(L3)</code></pre>\n\n<p> </p>","a":[{"id":730632,"option":"[34]","correct":true},{"id":730633,"option":"[34, 56, 102]","correct":false},{"id":730634,"option":"[34, 54, 100]","correct":false},{"id":730635,"option":"[]","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>tuple1 = [('flex', '2.256'), ('alen', '55.51'), ('james', '54.22'),  \n    ('adam', '21.20'), ('graun', '1.25')] \ntuple1.sort(key = lambda x: float(x[1]), reverse = True) \nprint(tuple1.reverse()) </code></pre>\n\n<p> </p>","a":[{"id":730624,"option":"[('alen', '55.51'), ('james', '54.22'), ('adam', '21.20'), ('flex', '2.256'), ('graun', '1.25')]","correct":false},{"id":730625,"option":"[('graun', '1.25'), ('flex', '2.256), ('adam', 21.20'), (james', '54.22'), ('alen', '55.51')]","correct":false},{"id":730626,"option":"[('adam', 21.20'), ('alen', '55.51'),  ('flex', '2.256), ('graun', '1.25'), (james', '54.22')]","correct":false},{"id":730627,"option":"None","correct":true}]},{"q":"<p>You are given the following Python 3 code. The actual output that you obtain does not match the expected output. Which of these statements represent the reason for this mismatch:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>value = 8\nanswer = 0\nfor x in range(1, 13):\n  answer = value * x\nprint(\"{0} times {1} is {2}\"\n     .format(x, value, answer))</code></pre>\n\n<p><strong>Actual output</strong></p>\n\n<pre class=\"prettyprint\"><code>12 times 8 is 96</code></pre>\n\n<p><strong>Expected output</strong></p>\n\n<pre class=\"prettyprint\"><code>1 times 8 is 8\n2 times 8 is 16\n3 times 8 is 24\n4 times 8 is 32\n5 times 8 is 40\n6 times 8 is 48\n7 times 8 is 56\n8 times 8 is 64\n9 times 8 is 72\n10 times 8 is 80\n11 times 8 is 88\n12 times 8 is 96</code></pre>\n\n<p><strong>Statements</strong></p>\n\n<ol>\n\t<li>The answer variable is 0.</li>\n\t<li>The range is provided in the code is 13. This causes an extra line of output.</li>\n\t<li>The indentation at line 6 is incorrect. After the for loop terminates, the program only prints a single line of output.</li>\n\t<li>The line of code '{0} times {1} is {2}' is printed 12 times.</li>\n</ol>","a":[{"id":730029,"option":"1","correct":false},{"id":730030,"option":"2","correct":false},{"id":730031,"option":"3","correct":true},{"id":730032,"option":"4","correct":false}]},{"q":"<p>The following Python 3 code:</p>\n\n<ul>\n\t<li>Denotes a list of candies\n\t<ul>\n\t\t<li>The list of tuples represents the type of candy and its quantity. For example in (2, 1), '2' represents the type of candy, and '1' represents the quantity of that specific type.</li>\n\t</ul>\n\t</li>\n\t<li>Has a class named <strong>shop</strong></li>\n</ul>\n\n<p>If you are required to pay an extra charge on the purchase of any of the types of candies, determine the charge for each type based on the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>class shop:\n    charges = 10\n    def candy_count(self, candies):\n        result = {} \n        for i, j in candies: \n            result.setdefault(j, []).append(i) \n        return result\n         \n    def candy_count_result(self,a):\n        return a*shop.charges\n    \nobj1 = shop()\ntry:\n    candies = [(2, 1), (1, 1), (4, 4), (5, 6), (7, 5), (6, 4)] \n    a = obj1.candy_count(candies) \n    b = obj1.candy_count_result(a)\n    print(a)\nexcept Exception as e:\n    print(e)</code></pre>\n\n<p> </p>","a":[{"id":1207695,"option":"{10: [2, 1], 40: [2, 6], 60: [2], 50: [7]}","correct":false},{"id":1207696,"option":"{1: [2, 1], 4: [4, 6], 5: [7], 6: [5]}","correct":false},{"id":1207697,"option":"An exception is raised because of unsupported operand type(s).","correct":true},{"id":1207698,"option":"SyntaxError","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>class party:\n    def __init__(self, v = {}):\n        self.v = {\"apple\":1, \"grapes\":2, \"mango\":3, \"pineapple\":4, \"watermelon\":5, \"orange\":6}\n    def cal_bill(self):\n        val = []\n        for i in range(len(self.v)//5):\n            for x in self.v.values():\n                val.append(x)\n        return val\n\na = party()\nprint(a.cal_bill())  </code></pre>\n\n<p> </p>","a":[{"id":730448,"option":"[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6]","correct":false},{"id":730449,"option":"[1, 2, 3, 4, 5, 6]","correct":true},{"id":730450,"option":"['apple', 'grapes', 'mango', 'pineapple', 'watermelon', 'orange']","correct":false},{"id":730451,"option":"['apple', 'grapes', 'mango', 'pineapple', 'watermelon', 'orange', 'apple', 'grapes', 'mango', 'pineapple', 'watermelon', 'orange']","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>l=[1,2,3,4,5,6,7,8,9]\nl=l[::-4]\nl=l[-5-5:3]\nl=l[0:-1+2]\nprint(l[-2::])</code></pre>\n\n<p> </p>","a":[{"id":730692,"option":"[9]","correct":true},{"id":730693,"option":"[7]","correct":false},{"id":730694,"option":"[2,5]","correct":false},{"id":730695,"option":"[2, 3, 4, 5]","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>def decorator(func): \n    def program1(*args, **kwargs): \n        value = func(*args, **kwargs) \n        return value \n    return program1 \n@decorator\ndef numbers(x, y): \n    return x + y  \nx, y = 5, 2\nprint(numbers(x, y))\n</code></pre>\n\n<p> </p>","a":[{"id":1121977,"option":"10","correct":false},{"id":1121978,"option":"7","correct":true},{"id":1121979,"option":"8","correct":false},{"id":1121980,"option":"RuntimeError","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>def Generator1(n):\n    for i in range(n):\n        yield i\ndef Generator2(x, y):\n    for j in range(x, y):\n        yield j\ndef Generator3(n, m):\n    yield from Generator1(n)\n    yield from Generator2(n, m+3)\nprint(tuple(Generator2(4, 10)))\n</code></pre>\n\n<p> </p>","a":[{"id":1121929,"option":"(4, 5, 6, 7, 8, 9)","correct":true},{"id":1121930,"option":"(4, 7, 10, 13, 16, 19)","correct":false},{"id":1121931,"option":"(4, 5, 6, 7, 8, 9, 10)","correct":false},{"id":1121932,"option":"TypeError","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>L = [\"HackerEarth\", \"Python\", \"Test\"]\niteraL = iter(L)\nnext(iteraL)\nprint(tuple(next(iteraL)))</code></pre>\n\n<p> </p>","a":[{"id":1121897,"option":"(‘HackerEarth’)","correct":false},{"id":1121898,"option":"(‘Python’)","correct":false},{"id":1121899,"option":"('P', 'y', 't', 'h', 'o', 'n')","correct":true},{"id":1121900,"option":"('H', 'a', 'c', 'k', 'e', 'r', 'E', 'a', 'r', 't', 'h')","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>def Num(x):\n    n = 0\n    while n &lt;= x:\n        yield n\n        n += 1 \nS = sum(Num(10))\nprint(S)\n</code></pre>\n\n<p> </p>","a":[{"id":1121877,"option":"45","correct":false},{"id":1121878,"option":"55","correct":true},{"id":1121879,"option":"40","correct":false},{"id":1121880,"option":"50","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>def numbers(n):\n    for i in n:\n        yield (i**2)\ncubes = numbers([2, 6, 1, 9, 5])\nprint(list(sorted(cubes)))\n</code></pre>\n\n<p> </p>","a":[{"id":1121845,"option":"[4, 36, 1, 81, 25]  ","correct":false},{"id":1121846,"option":"[1, 4, 25, 36, 81] ","correct":true},{"id":1121847,"option":"[2, 6, 1, 9, 5]","correct":false},{"id":1121848,"option":"TypeError","correct":false}]},{"q":"<p>In Python 3, which of the following represent the advantages of using <strong>iterators</strong>:</p>\n\n<ol>\n\t<li>Enables you to produce cleaner code</li>\n\t<li>Has the ability to work with infinite sequences</li>\n\t<li>Saves memory because, at a time, only one element is stored in the memory unlike in lists or tuples</li>\n</ol>","a":[{"id":1121833,"option":"1 and 2","correct":false},{"id":1121834,"option":"2 and 3","correct":false},{"id":1121835,"option":"1 and 3","correct":false},{"id":1121836,"option":"All of these","correct":true}]},{"q":"<p>In Python 3, which of the following statements about the <strong>yield </strong>keyword is correct:</p>\n\n<ol>\n\t<li>It turns a regular function into a generator.</li>\n\t<li>It can generate a sequence of values without destroying the local variable state.</li>\n</ol>","a":[{"id":1121841,"option":"1","correct":false},{"id":1121842,"option":"2","correct":false},{"id":1121843,"option":"Both of these","correct":true},{"id":1121844,"option":"None of these","correct":false}]},{"q":"<p>In Python 3, which of the following statements represents a <strong>tuple</strong>:</p>\n\n<ol>\n\t<li>It is mutable.</li>\n\t<li>The implementation of iterations on a tuple is more time-consuming compared to a list.</li>\n\t<li>It consumes less memory compared to a list.</li>\n\t<li>It does not allow operations such as insertion and deletion.</li>\n</ol>\n\n<p> </p>","a":[{"id":730452,"option":"1 and 2","correct":false},{"id":730453,"option":"2 and 3","correct":false},{"id":730454,"option":"3 and 4","correct":true},{"id":730455,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>class Student(object):\n    @staticmethod\n    def program(name):\n        n = name.split(' ')\n        return len(n) &lt; 1\nres = Student.program('Bob Alice')  \nprint(res)</code></pre>\n\n<p> </p>","a":[{"id":1121997,"option":"'Bob Alice'","correct":false},{"id":1121998,"option":"0","correct":false},{"id":1121999,"option":"False ","correct":true},{"id":1122000,"option":"True ","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>def decorator(prog):\n    def func(x):\n        result = prog(x)\n        print(result)\n    return func\n@decorator\ndef program_result(i):\n    return i + 1\nprogram_result(10)\n</code></pre>\n\n<p> </p>","a":[{"id":1122017,"option":"10","correct":false},{"id":1122018,"option":"9","correct":false},{"id":1122019,"option":"11","correct":true},{"id":1122020,"option":"12","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>from math import sin, cos, pi\ndef decorProg(f):\n    def function(x):\n        res = int(f(x))\n        print(res)\n    return function\nsin = decorProg(cos)\nfor f in [sin, cos]:\n    f(pi)\n</code></pre>\n\n<p> </p>","a":[{"id":1122021,"option":"1","correct":false},{"id":1122022,"option":"0","correct":false},{"id":1122023,"option":"-1","correct":true},{"id":1122024,"option":"2","correct":false}]},{"q":"<p>In Python 3, which of the following statements about <strong>dictionaries</strong> are correct:</p>\n\n<ol>\n\t<li>They are an unordered collection of elements.</li>\n\t<li>The elements are stored as key-value pairs.</li>\n\t<li>They are indexed by keys.</li>\n\t<li>The values can be of any type but the keys are immutable.</li>\n</ol>","a":[{"id":1121701,"option":"1, 2, and 3","correct":false},{"id":1121702,"option":"1, 2, and 4","correct":false},{"id":1121703,"option":"2, 3, and 4","correct":false},{"id":1121704,"option":"All of these","correct":true}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>def MainProg(x, y, z): \n    def ProgF(f): \n        def ProgS(*args, **kwargs):  \n            x + y \n            return z*(x+y)\n            f(*args, **kwargs)\n        return ProgS \n    return ProgF \ndef output(*args): \n    for n in args: \n        i = n+1\n        j = i+1\n        print(i+n+j)\nprint(MainProg(12, 15, 10)(output)() )</code></pre>\n\n<p> </p>","a":[{"id":1122045,"option":"27","correct":false},{"id":1122046,"option":"270","correct":true},{"id":1122047,"option":"37","correct":false},{"id":1122048,"option":"TypeError","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>def MainProgram(f):\n  def program_1():\n    print(\"1\", end=' ')\n    f()\n    print(\"2\")\n  return program_1\ndef program_2():\n    print(\"Python\", end= ' ')\nnewf = MainProgram(program_2)\nnewf()\n</code></pre>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>1\nPython\n2</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>1 Python 2</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>1\nPython 2</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>1 Python \n2</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1121969,"option":"1","correct":false},{"id":1121970,"option":"2","correct":true},{"id":1121971,"option":"3","correct":false},{"id":1121972,"option":"4","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>def mul(f): \n    def Cal(*args, **kwargs): \n        result = f(*args, **kwargs) \n        return result \n    return Cal \n@mul\ndef mul(a, b): \n    return a * b  \nprint(mul(3, b = 6)) \n</code></pre>\n\n<p> </p>","a":[{"id":1121945,"option":"9","correct":false},{"id":1121946,"option":"18","correct":true},{"id":1121947,"option":"TypeError","correct":false},{"id":1121948,"option":"None","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>def Task(p, i):\n    i = iter(i)\n    for x in i:\n        if not p(x):\n            yield x\n            break\n    for x in i:\n        yield x\na = Task(lambda x: x&lt;5, [4,-2, 0, 1, 3, -1, 10, 33])\nfor i in range(2):\n    print(next(a), end=' ')\n</code></pre>\n\n<p> </p>","a":[{"id":1121937,"option":"10 33","correct":true},{"id":1121938,"option":"43865","correct":false},{"id":1121939,"option":"33 10 4 -2","correct":false},{"id":1121940,"option":"StopIteration","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>def MainProgram(iterable, x):\n    sample = tuple(iterable)\n    n = len(sample)\n    if not n and x:\n        return\n    indices = [1] * x\n    yield tuple(sample[i] for i in indices)\n    while True:\n        for i in reversed(range(x)):\n            if indices[i] != n - 1:\n                break\n        else:\n            return\n        indices[i:] = [indices[i] + 1] * (x - i)\n        yield tuple(sample[i] for i in indices)\na = MainProgram('PYTHON', 3) \nprint(next(a))\n</code></pre>\n\n<p> </p>","a":[{"id":1121933,"option":"(‘P’, ‘P’, ‘P’)","correct":false},{"id":1121934,"option":"(‘P’, ‘Y’, ‘T’)","correct":false},{"id":1121935,"option":"(‘Y’, ‘Y’, ‘Y’)","correct":true},{"id":1121936,"option":"((‘P’, ‘Y’, ‘T’), (‘P’, ‘Y’, ‘T’), (‘P’, ‘Y’, ‘T’))","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>import itertools\ndef MainProg(items):\n    n = len(items)\n    count = 0\n    if n==0: yield []\n    else:\n        for i in range(len(items)):\n            for cc in MainProg(items[:i]+items[i+3:]):\n                yield [items[i]]+cc\n                count += 1\nfor i in MainProg(list(\"red\")): print(''.join(i) + \", \", end=\"\")\nresult = MainProg(['t','a','n'])\nnext(result)\nprint(next(result))  \n</code></pre>\n\n<p> </p>","a":[{"id":1121925,"option":"r, er, dr, der, ['t']","correct":false},{"id":1121926,"option":"r, er, dr, der, ['a', 't']","correct":true},{"id":1121927,"option":"r, er, dr, der, ['n', 'a', 't']","correct":false},{"id":1121928,"option":"StopIteration","correct":false}]},{"q":"<p>In Python 3, consider the following expressions. Which of these statements about these expressions are correct:</p>\n\n<p><strong>Expressions</strong></p>\n\n<pre class=\"prettyprint\"><code>a = [i*3 for n in range(150)]\nb = (i*3 for n in range(150))</code></pre>\n\n<p><strong>Statements</strong></p>\n\n<ol>\n\t<li>type(a) is a list and type(b) is a generator</li>\n\t<li>print(a[0:5:-2]) is [0] and print(b[0:5:-2]) is (18, 15, 12, 6, 3)</li>\n\t<li>a[4] gives 12 and b[4] throws a TypeError</li>\n\t<li>Expression 1 executes the operations immediately and returns a list whereas expression 2 returns an object that can be iterated over</li>\n</ol>","a":[{"id":1121913,"option":"1, 2, and 3","correct":false},{"id":1121914,"option":"2, 3, and 4","correct":false},{"id":1121915,"option":"1, 3, and 4","correct":true},{"id":1121916,"option":"All of these","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>from collections import Counter \ndef chars(s1,s2): \t\n\td1 = Counter(s1) \n\td2 = Counter(s2) \n\td = d1 &amp; d2 \n\tif len(d) == 0: \n\t\treturn 0\n\tchars = list(d.elements()) \n\tchars = sorted(chars) \n\treturn ''.join(chars) \ns1 = 'Python'\ns2 = 'HackerEarth'\nprint(chars(s1, s2))\n</code></pre>\n\n<p> </p>","a":[{"id":1121809,"option":"PH","correct":false},{"id":1121810,"option":"ht","correct":true},{"id":1121811,"option":"th","correct":false},{"id":1121812,"option":"oe ","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>total = 0\ncount = 0\ns = [2, 40, 65, 81]\nflag = True\nwhile flag:\n    for i in s:\n        if i % 2 == 0:\n            count += 1 \n        total = total + count\n        if total &gt; 10:\n            flag = False\nprint('The sum is ' + str(total))\n</code></pre>\n\n<p> </p>","a":[{"id":1121797,"option":"The sum is 14","correct":false},{"id":1121798,"option":"The sum is 22","correct":true},{"id":1121799,"option":"The sum is 7","correct":false},{"id":1121800,"option":"None","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>a = ['Hacker','Earth','1','2', 'Python','Language', '10']\na_to_dictionary = dict(zip(a[0::2], a[1::2]))\nprint(a_to_dictionary)</code></pre>\n\n<p> </p>","a":[{"id":1121753,"option":"{'Hacker': 'Earth', '1': 'Language', 'Python': '10'}","correct":false},{"id":1121754,"option":"{'Hacker': 'Earth', '1': '2', 'Python': 'Language'}","correct":true},{"id":1121755,"option":"{'Hacker': '1', 'Earth': '2', 'Python': 'Language'}","correct":false},{"id":1121756,"option":"{'Hacker': 'Earth', '1': '2', 'Python': 'Language’, '10' : '0'}","correct":false}]},{"q":"<p>In Python 3, which of the following are important points while you convert a list to a string:</p>\n\n<ol>\n\t<li>Using the .join method</li>\n\t<li>You are required to convert integer elements of the list into strings before starting the conversion</li>\n\t<li>Using the str() function on the elements of the list</li>\n\t<li>It is not possible to convert lists into strings</li>\n</ol>","a":[{"id":1121749,"option":"1 and 2","correct":false},{"id":1121750,"option":"2 and 3","correct":false},{"id":1121751,"option":"1, 2, and 3","correct":true},{"id":1121752,"option":"All of these","correct":false}]},{"q":"<p>In Python, consider the following list. If you perform the <strong>Join</strong> method on this list, what is the output:</p>\n\n<p><strong>List</strong></p>\n\n<pre class=\"prettyprint\"><code>L = ['A', 'B', 'C']\n</code></pre>\n\n<p><strong>Method</strong></p>\n\n<pre class=\"prettyprint\"><code>print('***'.join(L))</code></pre>\n\n<p> </p>","a":[{"id":1121713,"option":"'ABC***'","correct":false},{"id":1121714,"option":"'***ABC'","correct":false},{"id":1121715,"option":"'A***B***C'","correct":true},{"id":1121716,"option":"'A*B*C '","correct":false}]},{"q":"<p>Which of the following statements about line 2 in this Python code is correct:</p>\n\n<pre class=\"prettyprint\"><code>a = ‘HackerEarth’    #line1\nb = a[::-1]    #line2</code></pre>\n\n<p> </p>","a":[{"id":1121709,"option":"Slices HackerEarth into Earth Hacker","correct":false},{"id":1121710,"option":"Reverses the string into htraErekcaH","correct":true},{"id":1121711,"option":"Rearranges the characters of the string into rekcaH htraE","correct":false},{"id":1121712,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>l = [28.04, 51.98, 77.21, 80.8, 31.10, 10.1]\nl = [int(i) for i in l]\nl.sort()\nprint(list(l))</code></pre>\n\n<p> </p>","a":[{"id":1121705,"option":"[10.1, 28.04, 31.10, 51.98, 77.21, 80.3]","correct":false},{"id":1121706,"option":"[10, 28, 31, 51, 77, 80]","correct":true},{"id":1121707,"option":"[80.3, 77.21, 51.98, 31.10, 28.04, 10.1]","correct":false},{"id":1121708,"option":"Runtime error","correct":false}]},{"q":"<p>You are given the following Python 3 code. Determine the output.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>def sample(arr, lens, n): \n    m = 2\n    for i in range(lens):  \n        m = (m * (arr[i] % n)) % n \n      \n    return m % n \narr = [ 10, 110, 2, 2.5, 5, 4 ] \nlens = len(arr) \nn = 11\nprint(sample(arr, lens, n)) </code></pre>\n\n<p> </p>","a":[{"id":730025,"option":"9.0","correct":false},{"id":730026,"option":"0.0","correct":true},{"id":730027,"option":"3.2","correct":false},{"id":730028,"option":"4.5","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>L1 = [2, 's', 4]\nL2 = ['m', '1', 10]\nprint(L1+L2*2**2)</code></pre>\n\n<p> </p>","a":[{"id":1121733,"option":"[2, 's', 4, 'm', '1', 10, 2, 's', 4, 'm', '1', 10, 2, 's', 4, 'm', '1', 10, 2, 's', 4, 'm', '1', 10]","correct":false},{"id":1121734,"option":"[2, 's', 4, 'm', '1', 10, 'm', '1', 10, 'm', '1', 10, 'm', '1', 10]","correct":true},{"id":1121735,"option":"[2, ‘s’, 4, 2, ‘s’, 4, 'm', '1', 10, 'm', '1', 10]","correct":false},{"id":1121736,"option":"None of these","correct":false}]},{"q":"<p>  What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>class fun: \n    def __init__(self, l): \n        self.l = l \n    def __iter__(self): \n        self.a = 15\n        return self\n    def __next__(self): \n        a = self.a \n        if a &gt; self.l: \n            raise StopIteration \n        self.a = a + 1; \n        return a \nfor i in fun(18): \n    print(i, end= ' ')</code></pre>\n\n<p> </p>","a":[{"id":1121861,"option":"16 17 18","correct":false},{"id":1121862,"option":"15 16 17 18","correct":true},{"id":1121863,"option":"15 16 17","correct":false},{"id":1121864,"option":"None","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>def MainProgram(n):\n    looping = False\n    while not looping:\n        try:\n            item = iter(n)\n            looping = True\n        except StopIteration:\n            looping = True\n    for i in n:\n        print(i, end = ' ')\nn = {4, 7, 0, 3}\nprint(MainProgram(n))\n</code></pre>\n\n<p> </p>","a":[{"id":1121901,"option":"[4, 7, 0, 3] None  ","correct":false},{"id":1121902,"option":"0 3 4 7 None","correct":true},{"id":1121903,"option":"4 7 0 3 None","correct":false},{"id":1121904,"option":"None ","correct":false}]},{"q":"<p>The following Python 3 code throws an exception error. Which of the following lines of code will you change to obtain the output provided here?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>def test_number(f):\n    def prog(i):\n        if type(i) == int and i &gt;= 0:\n            return f(i)\n        else:\n            raise Exception\n    return prog\n@test_number\ndef s(n):\n    if n == 1:\n        return 1\n    else:\n        return n*s(n-2)\nfor num in range(2, 10, 2):\n\tprint(s(num), end= ' ')\nprint(s(5))\n</code></pre>\n\n<p><strong>Output</strong></p>\n\n<pre class=\"prettyprint\"><code>2 24 720 40320 120</code></pre>\n\n<p> </p>","a":[{"id":1122029,"option":"i >= 0 --> i <= 0","correct":false},{"id":1122030,"option":"return n*s(n-2) --> return n*s(n) ","correct":false},{"id":1122031,"option":"return n*s(n-2) --> return n*s(n-1)","correct":true},{"id":1122032,"option":"None of these","correct":false}]},{"q":"<p>In Python 3, you are given the following code. Determine the output if n = 2.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>n = int(input())\ni = 1\nfor i in range(1, n):\n    if i * (i + 1) &gt;= n:\n        break\n    a = range(1, n + 1)\nfor j in range(0, n, i):\n    a[j:j+i] = a[j:j+i][::-1]\nfor x in a:\n    print(x) </code></pre>\n\n<p> </p>","a":[{"id":730456,"option":"1 2 3 4","correct":false},{"id":730457,"option":"2 1 4 3","correct":false},{"id":730458,"option":"3 2 1 4","correct":false},{"id":730459,"option":"NameError","correct":true}]},{"q":"<p>You are given the following Python 3 code. Determine the output.</p>\n\n<p><strong>Code</strong> </p>\n\n<pre class=\"prettyprint\"><code>start = [20, 10, 33, 12]\nend = [40, 11, 11, 4, 6]\n \nfor x in start:\n  if x//2&gt;10:\n    for j in end:\n        if(x % j==0):\n            print(x, end = ' ')\n  else:\n    print(x, end = ' ')</code></pre>\n\n<p> </p>","a":[{"id":730464,"option":"10 20 33 33 12 ","correct":false},{"id":730465,"option":"20 10 33 12 22 ","correct":false},{"id":730466,"option":"20 10 33 33 12 ","correct":true},{"id":730467,"option":"TypeError","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>class Book:\n    def __init__(self, name_of_book  = \"Lost Symbol\"):\n        self.name_of_book = name_of_book\n    def setPrice(self, price = 505):\n        self.price = price\n    def setAuthor(self, author):\n        self.author = author\n    def Display(self):\n        print(\"The name of the book is:\", self.name_of_book)\n        print(\"Author is:\", self.author)\n        print(\"Price is:\", self.price,'Rs')\nobj = Book(\"Angels\")\nobj.setPrice(350.95)\nobj.setAuthor('Dan Brown')\nobj.Display()</code></pre>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>The name of the book is: Lost Symbol\nAuthor is: Dan Brown\nPrice is: 350.95 Rs</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>The name of the book is: Angels\nAuthor is: Dan Brown\nPrice is: 350.95 Rs</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>The name of the book is: Angels\nAuthor is: Dan Brown\nPrice is: 505 Rs</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":730508,"option":"1","correct":false},{"id":730509,"option":"2","correct":true},{"id":730510,"option":"3","correct":false},{"id":730511,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>l = ['12', '34', '5']\nprint(len(list(list(list(map(list, l))))))</code></pre>\n\n<p> </p>","a":[{"id":730660,"option":"3","correct":true},{"id":730661,"option":"5","correct":false},{"id":730662,"option":"12, 34, 5","correct":false},{"id":730663,"option":"AttributeError","correct":false}]},{"q":"<p>Consider the following Python 3 code. What will you replace the missing expressions X, Y, and Z with to obtain the provided result:<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>def MainProgram(f):\n    def Create(old_value):\n        def new_value(*args, **kwds):\n            X \n        Y  \n    Z\n        \n@MainProgram(5) \ndef return_value(n):\n    return n\nres = return_value(5) \nprint(res)\n</code></pre>\n\n<p><strong>Result</strong></p>\n\n<pre class=\"prettyprint\"><code>25</code></pre>\n\n<p><strong>Missing expressions</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>        return f * old_value(*args, **kwds) \n    return new_value \nreturn Create</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>return f * old_value(*args, **kwds) \n    return new_value \nreturn Create</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>        return new_value\n    return f * old_value(*args, **kwds) \nreturn Create</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>return Create(*args, **kwds) \n        return f * new_value \n    return old_value </code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1122037,"option":"1","correct":true},{"id":1122038,"option":"2","correct":false},{"id":1122039,"option":"3","correct":false},{"id":1122040,"option":"4","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>def cycle(i):\n    sample = []\n    for element in i:\n        yield element\n        sample.append(element)\n        print(sample)\n    while sample:\n        for element in sample:\n              yield element\na = cycle({10, -3, 70, 27, 'ABC'})\nfor n in a:\n    print(n, end=' ')\n    break\n</code></pre>\n\n<p> </p>","a":[{"id":1121921,"option":"27","correct":false},{"id":1121922,"option":"10 -3 70 27  ‘ABC’","correct":false},{"id":1121923,"option":"-3","correct":false},{"id":1121924,"option":"None of these","correct":true}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>def Filter1(nums):\n    for num in nums:\n        if num % 2 == 0:\n            yield num\ndef Filter2(nums):\n    for num in nums:\n        yield num * 3\ndef Filter3(nums):\n    for num in nums:\n        yield num\nnums = [0, -1, -4, -9, -16, -25, -36, -49]\nresult = Filter3(Filter2(Filter1(nums)))\nfor num in result:\n    print(num, end=' ')\n</code></pre>\n\n<p> </p>","a":[{"id":1121917,"option":"0 -12 -48 -108 ","correct":true},{"id":1121918,"option":"0 -48 -12 -108 ","correct":false},{"id":1121919,"option":"12 -48 0 -108 ","correct":false},{"id":1121920,"option":"TypeError ","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>def Fun(x):\n    while(x!=0):\n        if x % 3 == 0:\n            yield x\n        x-=1\nfor i in Fun(9):\n    print(i, end=' ')\n</code></pre>\n\n<p> </p>","a":[{"id":1121873,"option":"8 4 2  ","correct":false},{"id":1121874,"option":"3 6 9  ","correct":false},{"id":1121875,"option":"9 6 3","correct":true},{"id":1121876,"option":"9 6 4 2","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>def MainProg(f): \n    m = {} \n    def InnerProg(num): \n        if num not in m:          \n            m[num] = f(num) \n        return m[num]  \n    return InnerProg     \n@MainProg\ndef Cal(num): \n    if num == 0: \n        return 1\n    else: \n        return num**2*Cal(num-1) \nprint(Cal(3))\n</code></pre>\n\n<p> </p>","a":[{"id":1122033,"option":"172","correct":false},{"id":1122034,"option":"81","correct":false},{"id":1122035,"option":"36","correct":true},{"id":1122036,"option":"RecursionError","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>s = 'HackerEarth-testing'\nL = \"-\"\nindex = None\nfor i in range(len(s)): \n    if L == s[i]: \n        index = i \nres = s[:index] \nprint(res)  \n</code></pre>\n\n<p> </p>","a":[{"id":1121805,"option":"Hacker-testing","correct":false},{"id":1121806,"option":"HackerEarth-test","correct":false},{"id":1121807,"option":"HackerEarth","correct":true},{"id":1121808,"option":"Error","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>a = ['a','e','i','o','u','A','E','I','O','U',' ']\nb = \"HackerEarth Tests\"\nfor i in a:\n  if i not in b:\n    a = a[:a.index(i)]+a[a.index(i)+1:]\nprint(a)\n</code></pre>\n\n<p> </p>","a":[{"id":1121801,"option":"['e', 'i', 'A', 'E ']  ","correct":false},{"id":1121802,"option":"['a', 'e', 'E', '  ']  ","correct":true},{"id":1121803,"option":"['a', 'i', 'E', 'O'] ","correct":false},{"id":1121804,"option":"['a', 'e', 'E', 'I']","correct":false}]},{"q":"<p>In Python, which of the following statements about <strong>tuples</strong> is correct:</p>\n\n<ol>\n\t<li>It can be used for the purpose of keys in dictionaries.</li>\n\t<li>They are allowed to have mixed lengths.</li>\n\t<li>The order of the items in a tuple is considered when you are comparing the equality of the values in a dictionary.</li>\n</ol>","a":[{"id":1121793,"option":"1 and 2","correct":true},{"id":1121794,"option":"2 and 3","correct":false},{"id":1121795,"option":"1 and 3","correct":false},{"id":1121796,"option":"All of these","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>List = [] \nList.append(2) \nList.append(0) \nList.append(6) \nfor i in range(1, 4): \n    List.append((5)) \nfor i in range(1, 5):\n    List.insert(3, 'Python')\nprint(List) \n</code></pre>\n\n<p> </p>","a":[{"id":1121785,"option":"[2, 0, 6, 5, 5, 5]","correct":false},{"id":1121786,"option":"[2, 0, 6, 'Python', 'Python', 'Python', 'Python']","correct":false},{"id":1121787,"option":"[2, 0, 6, 'Python', 'Python', 'Python', 'Python', 5, 5, 5]","correct":true},{"id":1121788,"option":"TypeError","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>def compare(a, b):\n    if a == b:\n        return True\n    else:\n        return False\ndef remove_extra(a):\n    for i in a:\n        if i not in b:\n            b.append(i)\n            a.remove(i)\n    print(b)\na = [1, 1, 2, 2, 3, 4, 4, 3, 0 ,0]\nb = []\nremove_extra(a)\nprint(compare(a, b))\n</code></pre>\n\n<p> </p>","a":[{"id":1121773,"option":"[1, 2, 4, 3, 0]\r\nTrue  ","correct":false},{"id":1121774,"option":"[4, 3, 2, 1, 0]\r\nFalse ","correct":false},{"id":1121775,"option":"[1, 2, 3, 4, 0] \r\nFalse  ","correct":true},{"id":1121776,"option":"[1, 2, 3, 4, 0]\r\nTrue  ","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>l = [[1,2],[3,4],[5,6]]\nm = [(y,x) for x, y in l]\nprint(m)</code></pre>\n\n<p> </p>","a":[{"id":1121737,"option":"[(1,2), (3, 4), (5, 6)]","correct":false},{"id":1121738,"option":"[(4,3), (2, 1), (6, 5)]","correct":false},{"id":1121739,"option":"[(1, 2), (5, 6), (3, 4)]","correct":false},{"id":1121740,"option":"[(2, 1), (4, 3), (6, 5)]","correct":true}]},{"q":"<p>In Python, which of the following statements about the <strong>.isalpha()</strong> function is correct:</p>\n\n<ol>\n\t<li>Indicates whether a character is a letter or not</li>\n\t<li>Returns True if the character is a letter, else returns False</li>\n\t<li>Indicates whether a character is a number</li>\n\t<li>Can be used on string operations only</li>\n</ol>","a":[{"id":1121729,"option":"1, 2, and 3","correct":false},{"id":1121730,"option":"2, 3, and 4","correct":false},{"id":1121731,"option":"1, 2, and 4","correct":true},{"id":1121732,"option":"All of these","correct":false}]},{"q":"<p>In Python 3, you are given the following values of x and y. Which of these code statements allows you to obtain the provided output:</p>\n\n<p><strong>Values</strong></p>\n\n<pre class=\"prettyprint\"><code>x = [1,2,3,4,5]\ny = [11,12,13,14,15]</code></pre>\n\n<p><strong>Output</strong></p>\n\n<pre class=\"prettyprint\"><code>5</code></pre>\n\n<p> </p>","a":[{"id":730472,"option":"print(len([m+n for m, n in zip(x,y)]))","correct":true},{"id":730473,"option":"print(len([m+n for m, n in (x,y)]))","correct":false},{"id":730474,"option":"print([m+n for m, n in zip(x,y)])","correct":false},{"id":730475,"option":"print(len([m+n for zip(m, n) in x,y]))","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>class Calculate(object):\n    def __init__(self, var1):\n        self.var1 = var1\n    def Calget(self):\n        return self.var1 ** 2\n    def Calset(self, var2):\n        return self.var2 ** self.var1\n    def Caldel(self):\n        return 0\n    area = property(Calget, Calset, Caldel)\na = Calculate(10)\nprint(a.Calget(), end='')\nprint(a.Caldel())\n</code></pre>\n\n<p> </p>","a":[{"id":1122041,"option":"0 100","correct":false},{"id":1122042,"option":"1000","correct":true},{"id":1122043,"option":"100 0","correct":false},{"id":1122044,"option":"RuntimeError ","correct":false}]},{"q":"<p>If you give the provided input to the following Python 3 code. Determine the output.</p>\n\n<p><strong>Input</strong></p>\n\n<pre class=\"prettyprint\"><code>0 0 2 0 0 1</code></pre>\n\n<p><strong>Code</strong> </p>\n\n<pre class=\"prettyprint\"><code>l = list(map(int,input().split()))\ndef ds(a,b): return (l[a]-l[b])**2 + (l[a+1]-l[b+1])**2\ndef ch():\n    a=ds(0,2)\n    b=ds(2,4)\n    c=ds(4,0)\n    if a*b*c==0: return 0\n    return a+b==c or b+c==a or c+a==b\ns=ch()\nfor i in range(6):\n    for j in [1,-1]:\n        l[i]+=j\n        if s==0: s = 2*ch()\n        l[i]-=j\nprint([\"YOU\",\"ME\",\"SS\"][s])</code></pre>\n\n<p> </p>","a":[{"id":730492,"option":"YOU","correct":false},{"id":730493,"option":"ME","correct":true},{"id":730494,"option":"SS","correct":false},{"id":730495,"option":"TypeError","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>s = 'HackerEarth Python Testing' \nnVowels = 0 \nnCons = 0 \nfor char in s:   \n    if char == 'a' or char == 'e' or char == 'i' or char == 'o'  or char == 'u': \n        nVowels += 1 \n    elif char == 'o' or char == 'M': \n        print(char) \n    else: \n        nCons -= 1 \nprint(nVowels) \n</code></pre>\n\n<p> </p>","a":[{"id":1121781,"option":"10","correct":false},{"id":1121782,"option":"6","correct":true},{"id":1121783,"option":"3","correct":false},{"id":1121784,"option":"14","correct":false}]},{"q":"<p>In Python 3, which of the following statements about the <strong>set()</strong> method is correct:</p>\n\n<ol>\n\t<li>It returns True if all the iterable objects are True.</li>\n\t<li>If returns True if you have an empty iterable object.</li>\n\t<li>A dictionary can be created using this but only the keys remain after conversion and all the values are lost.</li>\n</ol>\n\n<p> </p>","a":[{"id":1121777,"option":"1 and 2","correct":false},{"id":1121778,"option":"2 and 3","correct":false},{"id":1121779,"option":"1 and 3","correct":false},{"id":1121780,"option":"All of these","correct":true}]},{"q":"<p>In Python, which of the following statements about <strong>tuple</strong> are correct:</p>\n\n<ol>\n\t<li>They are an immutable sequence</li>\n\t<li>Removing individual tuple elements is allowed</li>\n\t<li>Items in it contain values and keys</li>\n\t<li>Represented using parentheses</li>\n</ol>","a":[{"id":1121717,"option":"1 and 2","correct":false},{"id":1121718,"option":"2 and 3","correct":false},{"id":1121719,"option":"1 and 4","correct":true},{"id":1121720,"option":"2 and 4","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>class operations:\n    def __init__(self):\n        self.name = [\" \", \"Bob\", \"Rebecca\", \"Clint\", \"11231\", \"32i73\"]\n        \n    def data(self, names):\n        self.names = list(filter(lambda el:el[0].isupper() and el[1:].islower(),names))\n        return self.name\n    \n    def display(self, result):\n        length = len(''.join(self.names))\n        n = sorted([int(x) for x in result if x.isdigit()])\n        for i in ((filter(lambda x:x&gt;length,n))):\n            return i\n\no = operations()\nnames = ['Alice', 'mark Thomas', 'rebecca', 'Bob1231', '08732', 'Clint', \"11231\", \"32i73\"]\nresult = o.data(names)\ndis = o.display(result)\nprint(dis)</code></pre>\n\n<p> </p>","a":[{"id":1207839,"option":"32i73","correct":false},{"id":1207840,"option":"11231","correct":true},{"id":1207841,"option":"08732","correct":false},{"id":1207842,"option":"Bob1231","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>class MainProgram: \n    def __init__(self, val): \n        self.val = val \n        self.var = [ ] \n    def __call__(self, *args, **kwargs): \n        try: \n            result = self.val(*args, **kwargs) \n        except Exception as e: \n            self.var.append((args, kwargs, e)) \n            raise e \n        else: \n            self.var.append((args, kwargs, result)) \n            return result \n    @classmethod\n    def SubProgram(cls, f): \n        return cls(f) \n@MainProgram.SubProgram \ndef func(x, y): \n    return x / y \nprint(func(y = 6, x = 0))\n</code></pre>\n\n<p> </p>","a":[{"id":1122057,"option":"0","correct":false},{"id":1122058,"option":"1.5","correct":false},{"id":1122059,"option":"0.0","correct":true},{"id":1122060,"option":"ZeroDivisionError","correct":false}]},{"q":"<p>In Python 3, which of the following statements about the terms decorator and decorator pattern are correct:</p>\n\n<ol>\n\t<li>Decorator pattern allows behavior to be added to an existing object dynamically whereas the term decorator defines an object with which you can extend its functionality.</li>\n\t<li>A decorator allows you to place an object inside special wrapper objects dynamically whereas decorator pattern is independent of other instances of the same class.</li>\n\t<li>Python decorators are an implementation of the decorator pattern.</li>\n</ol>","a":[{"id":1121981,"option":"1 and 2","correct":true},{"id":1121982,"option":"2 and 3","correct":false},{"id":1121983,"option":"1 and 3","correct":false},{"id":1121984,"option":"All of these","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>greeting = 'Hacker Earth!'\ncount = 0\nfor letter in greeting:\n    count += 1\n    if count % 2 == 0:\n        print(letter, end= ' ')\n    print(letter, end= ' ')\n</code></pre>\n\n<p> </p>","a":[{"id":1121769,"option":"H a a c k k e r r   E E a r r t h h ! ","correct":true},{"id":1121770,"option":"H a a c k k e r  E E a r r t h h ! ","correct":false},{"id":1121771,"option":"H a c k e r  E a r t h ! ","correct":false},{"id":1121772,"option":"H a a c k k e r r   E E a r r t h h ! !","correct":false}]},{"q":"<p>If the output of the following Python 3 code must match the output that is provided here, determine the value of X.</p>\n\n<p><strong>Code</strong> </p>\n\n<pre class=\"prettyprint\"><code>class test:\n    def __init__(self, a):\n        self.a = a\n        \n    def operation(self, a, b):\n        X\n        return a\n\na = ['a','e','i','o','u','A','E','I','O','U',' ']\nobj = test(a)\nb = \"HackerEarth Tests\"\nc = obj.operation(a,b)\nprint(c)</code></pre>\n\n<p><strong>Output</strong></p>\n\n<pre class=\"prettyprint\"><code>['a', 'e', 'E', ' ']</code></pre>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>for i in a:\n            if i not in b:\n                a = a[:a.index(i+1)]+a[a.index(i):]</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>for i in a:\n            if i not in b:\n                a = a[:a.index(i)]+a[a.index(i)+1:]</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>for i in b:\n            if i not in a:\n                a = a[:a.index(i)]+a[a.index(i)+1:]</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>for i in b:\n            if i not in a:\n                a = a[:a.index(i+1)]+a[a.index(i)+1:]</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1207691,"option":"1","correct":false},{"id":1207692,"option":"2","correct":true},{"id":1207693,"option":"3","correct":false},{"id":1207694,"option":"4","correct":false}]},{"q":"<p>In Python 3, you are given the following Code 1 and Code 2. Which of these will display a runtime error?</p>\n\n<p><strong>Code 1</strong></p>\n\n<pre class=\"prettyprint\"><code>class demo:\n    def reset(self):\n        self.x = 0\n        self.y = 0\np = demo()\ndemo.reset(p)\nprint(p.x, p.y)\n</code></pre>\n\n<p><strong>Code 2</strong> </p>\n\n<pre class=\"prettyprint\"><code>class demo:\n        def reset(self):\n                self.x = 0\n                self.y = 0\np = demo()\np.reset()\nprint(p.x, p.y)</code></pre>\n\n<p> </p>","a":[{"id":730484,"option":"Code 1","correct":false},{"id":730485,"option":"Code 2","correct":false},{"id":730486,"option":"Both of these","correct":false},{"id":730487,"option":"None of these","correct":true}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>class Python: \n        \"ss\"  #line 2  \n        1222    # line 3\n        \"ss\"    \n        \"Welcome\" \n        a = 5\n        def display(self):\n                print('Python')\nprint(Python.a, Python.__doc__)  # line 9</code></pre>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>5 ss 1222 ss Welcome</code></pre>\n\t<strong>  </strong></li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>5 ss</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>\n\n<p> </p>","a":[{"id":730672,"option":"1","correct":false},{"id":730673,"option":"2","correct":true},{"id":730674,"option":"Compilation error at line 2 ","correct":false},{"id":730675,"option":"Compilation error at line 9","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>class Python:\n    def __init__(self,a,b=1):\n        self.a = a\n        self.b = b\n    def display(self):\n        print(\"Hi\".capitalize(format(self.a,self.b)))   \nobj1 = Python(5,10)\nobj2 = Python(1)\nobj1.c = 2         \nobj1.display()  </code></pre>\n\n<p> </p>","a":[{"id":730668,"option":"HI 5 10","correct":false},{"id":730669,"option":"HI 1","correct":false},{"id":730670,"option":"TypeError","correct":true},{"id":730671,"option":"AttributeError","correct":false}]},{"q":"<p>You are given the following Python 3 code. Which of these options is the equivalent code of the mentioned code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>class A(object):\n    def f(x):\n        print(10*x)\nA.f(5)</code></pre>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>  \n\t<pre class=\"prettyprint\"><code>class A(object):\n    @staticmethod\n    def f(x):\n        print(10*x)\nA.f(5)</code></pre>\n\t</li>\n\t<li>  \n\t<pre class=\"prettyprint\"><code>class A(object):\n    def f(self,x):\n        print(10*x)\na=A()\na.f(5)</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>  \n\t<pre class=\"prettyprint\"><code>class A():\n    def f(self,x):\n        print(10*x)\na=A()\na.f(5)</code></pre>\n\n\t<p>  </p>\n\t</li>\n</ol>","a":[{"id":730480,"option":"1","correct":false},{"id":730481,"option":"2","correct":false},{"id":730482,"option":"3","correct":false},{"id":730483,"option":"All of these","correct":true}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>class world:\n \n    def __init__(wow):\n        wow.__newtime()\n \n    def dow(wow):\n        print ('HackerEarth ')\n \n    def __newtime(wow):\n        print ('Python test')\n \nx = world()\nx.dow()</code></pre>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>HackerEarth \nPython test</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Python test\nHackerEarth </code></pre>\n\t \n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>HackerEarth</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":730524,"option":"1","correct":false},{"id":730525,"option":"2","correct":true},{"id":730526,"option":"3","correct":false},{"id":730527,"option":"TypeError","correct":false}]},{"q":"<p>Three car companies manufacture a specific set of cars every quarter.</p>\n\n<p><strong>Company1</strong> is the parent company of <strong>company2</strong> and <strong>company3</strong>. If <strong>company2</strong> and <strong>company3</strong> want to sign a partnership, then they require information about the ratio of cars manufactured by <strong>company2</strong> to the ratio of cars manufactured by <strong>company3</strong>.</p>\n\n<p>Determine the required ratio based on the output of the following Python 3 code.</p>\n\n<pre class=\"prettyprint\"><code>class company1:\n    cars_manuf = 100\n    def x(self): \n        company1.cars_manuf = 150\n       \nclass company2(company1): \n    cars_manuf = 1000\n    def x(self): \n        print(company2.cars_manuf*company1.cars_manuf)\n  \nclass company3(company1):\n    def x(self): \n        cars_manuf = 10\n      \nclass Partner(company2, company3): \n    def x(self): \n        partner_car_val = company2.cars_manuf/company3.cars_manuf   \n        return partner_car_val\nobj = Partner() \na = obj.x()\nprint(a)</code></pre>\n\n<p> </p>","a":[{"id":1208704,"option":"1.0","correct":false},{"id":1208705,"option":"0.1","correct":false},{"id":1208706,"option":"10.0","correct":true},{"id":1208707,"option":"100.0","correct":false}]},{"q":"<p>In Python 3, consider the provided code. Which of these outputs will be obtained if you perform the following function for the fourth time?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>iter_obj=iter([3,4,5])\nnext(iter_obj)   # first time</code></pre>\n\n<p><strong>Function</strong></p>\n\n<pre class=\"prettyprint\"><code>next(iter_obj)</code></pre>\n\n<p> </p>","a":[{"id":1121837,"option":"3","correct":false},{"id":1121838,"option":"5","correct":false},{"id":1121839,"option":"4","correct":false},{"id":1121840,"option":"StopIteration","correct":true}]},{"q":"<p>You are given the following Python 3 code. Which of these statements about this code is correct:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>class Base():\n        a=1\nclass Der(Base):\n        pass\nclass Dert(Der):\n        pass\nprint(Base.a,Der.a,Dert.a)</code></pre>\n\n<p><strong>Statements</strong></p>\n\n<ol>\n\t<li>The output of the code is 1 1 1.</li>\n\t<li>Both the Der and Dert classes have inherited the properties of the Base class.</li>\n</ol>","a":[{"id":730528,"option":"1","correct":false},{"id":730529,"option":"2","correct":false},{"id":730530,"option":"Both of these","correct":true},{"id":730531,"option":"None of these","correct":false}]},{"q":"<p>You are required to perform some calculations to determine the profit difference between the various departments in a company. The calculations to be performed are provided in the following Python 3 code. If <strong>ID_num</strong> is 201 and <strong>dept</strong> is 1, then determine the output.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>class company:\n    def __init__(self):\n        #ID = {ID_num: [Dept_num, dept_profit]}\n        self.ID = {101:[1, 8000],102:[1,6000],201:[1,6000],\n            202:[1,5500]}\n        self.dept_num = {1:[101,102,201,202]}\n        \n    def data(self):\n        d = self.ID.copy()\n        d.update(self.dept_num)\n        return d\n     \n    def data_profit(self, a, ID_num, dept):\n        val = a[ID_num][dept]-a[ID_num+1][dept]\n        return val\n               \ns = company()\na = s.data()\nID_num, dept = map(int, input().split(\",\"))\nb = s.data_profit(a, ID_num, dept)\nprint(b)</code></pre>\n\n<p> </p>","a":[{"id":1207815,"option":"2500","correct":false},{"id":1207816,"option":"500","correct":true},{"id":1207817,"option":"1000","correct":false},{"id":1207818,"option":"ValueError","correct":false}]},{"q":"<p>Which of the following are in-built iterables in Python 3:</p>\n\n<ol>\n\t<li>Lists</li>\n\t<li>Dictionaries</li>\n\t<li>Tuples</li>\n</ol>","a":[{"id":1121821,"option":"1 and 2","correct":false},{"id":1121822,"option":"2 and 3","correct":false},{"id":1121823,"option":"1 and 3","correct":false},{"id":1121824,"option":"All of these","correct":true}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>t = [(2, 1), (1, 1), (2, 4), (2, 6), (7, 5), (6, 4)] \nresult = {} \nfor i, j in t: \n     result.setdefault(j, []).append(i) \nprint(result) \n</code></pre>\n\n<p> </p>","a":[{"id":1121813,"option":"{1: [1, 1], 4: [6, 6], 6: [2], 5: [7]} ","correct":false},{"id":1121814,"option":"{1: [2, 1], 4: [2, 6], 6: [2], 5: [7]}  ","correct":true},{"id":1121815,"option":"{1: (2, 1), 4: (2, 6), 6: (2), 5: (7)} ","correct":false},{"id":1121816,"option":"{2: [1, 4, 6], 1: [1], 7: [5], 6: [4]}","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>a = ('Joe', 'Alice', 'Bob', 1978, 2, 'R', 2019)\nprint(a)\ndel a\nprint(a)</code></pre>\n\n<p> </p>","a":[{"id":1121721,"option":"TypeError: type ‘a’ not defined\r\n('Joe', 'Alice', 'Bob', 1978, 2, 'R', 2019)","correct":false},{"id":1121722,"option":"('Joe', 'Alice', 'Bob', 1978, 2, 'R', 2019)\r\nNameError: name ‘a’ not defined","correct":true},{"id":1121723,"option":"NameError: name ‘a’ not defined\r\n('Joe', 'Alice', 'Bob', 1978, 2, 'R', 2019)","correct":false},{"id":1121724,"option":"('Joe', 'Alice', 'Bob', 1978, 2, 'R', 2019)\r\nTypeError: type ‘a’ not defined","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>def MainCount(f):\n    def progFirst(*args, **kwargs):\n        progFirst.calls += 1\n        return f(*args, **kwargs)\n    progFirst.calls = 0\n    return progFirst\n@MainCount\ndef progSecond(i):\n    return i + 1\n@MainCount\ndef Count(i= 0, j = 1):\n    return i*j + 1\nprint(progSecond.calls)\nfor n in range(5):\n    progSecond(n)\nCount(j = 0, i = 1)\nprint(Count.calls)\n</code></pre>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>1\n0</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>0\n1</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>1\n1</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>0\n0</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1122025,"option":"1","correct":false},{"id":1122026,"option":"2","correct":true},{"id":1122027,"option":"3","correct":false},{"id":1122028,"option":"4","correct":false}]},{"q":"<p>You are leading a group of students for a sports event. Some students have registered for the event and some have not. You are given the following Python 3 code. Determine the output that checks if Alice and Bob have registered for the event using the code. </p>\n\n<pre class=\"prettyprint\"><code>class Sports(object):\n\n        def __init__(boy, why):\n                boy.why = \"Sports 2020:\"\n\n        def Identity(boy):\n                return boy.why\n\n        def isBoy(boy):\n                return False\n\nclass Check(Sports):\n    \n        def isBoy(boy):\n                return True\n                \nx= Sports(\"Alice\")\nprint(x.Identity(), x.isBoy())\n\nx = Check(\"Bob\") \nprint(x.Identity(), x.isBoy())</code></pre>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Sports 2020: True\nSports 2020: False</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Sports 2020: False\nSports 2020: True</code></pre>\n\t<strong>  </strong></li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Alice: False\nBob: True</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Alice: True\nBob: False</code></pre>\n\t</li>\n</ol>","a":[{"id":730520,"option":"1","correct":false},{"id":730521,"option":"2","correct":true},{"id":730522,"option":"3\r\n","correct":false},{"id":730523,"option":"4","correct":false}]}]
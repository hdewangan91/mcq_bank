[{"q":"<p>What is the output of the following Ruby code?<br>\n<strong>Code</strong>:</p>\n\n<pre class=\"prettyprint\"><code>#!/usr/bin/ruby\n\nz=1\nif z &gt; 2\n   puts \"z is greater than 2\"\nelsif z &lt;= 2 and z!=0\n   puts \"z is 1\"\nelse\n   puts \"Can not be determined\"\nend\n</code></pre>","a":[{"id":82728,"option":"z is 1 ","correct":true},{"id":82729,"option":"z is greater than 2 ","correct":false},{"id":82730,"option":"can not be determined","correct":false},{"id":82731,"option":"Error","correct":false}]},{"q":"<p>What is the output of the following Ruby code:</p>\n\n<p><strong>Code</strong>:</p>\n\n<pre class=\"prettyprint\"><code>puts \"Burj Khalifa\" if false\n</code></pre>","a":[{"id":83252,"option":"Burj Khalifa","correct":false},{"id":83253,"option":"Fork error!","correct":false},{"id":83254,"option":"False","correct":false},{"id":83255,"option":"No output","correct":true}]},{"q":"<p>What is the output of the given Ruby code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>a=12\nif a&gt;&gt;2 &gt; 20\n  a=a&amp;20\nelse\n  a=a|20\nend\nputs a</code></pre>","a":[{"id":1770751,"option":"12","correct":false},{"id":1770752,"option":"28","correct":true},{"id":1770753,"option":"24","correct":false},{"id":1770754,"option":"14","correct":false}]},{"q":"<p>What is the output of the given Ruby code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>a=120\nb=25\nc=20\nif b&gt;20\n  c=b*60\n  c+=b+1.2*a*(b-10)\n  if c&gt;1200\n    c=c-1200\n  end\nend\nputs c</code></pre>","a":[{"id":1770747,"option":"Error","correct":false},{"id":1770748,"option":"985.0","correct":false},{"id":1770749,"option":"3058.0","correct":false},{"id":1770750,"option":"2485.0","correct":true}]},{"q":"<p>Analyze the given Ruby code and choose the correct option that indicates the number of times \"hello\" gets printed in the output:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>a=60\nb=43\nif a!=b and a&lt;=b\n  puts \"hello\"\nend\nif a!=b or a&gt;=b\n  puts \"hello\"\nend\nif !(a==b)\n  puts \"hello\"\nend</code></pre>","a":[{"id":1770743,"option":"2","correct":true},{"id":1770744,"option":"3","correct":false},{"id":1770745,"option":"0","correct":false},{"id":1770746,"option":"1","correct":false}]},{"q":"<p>What is the output of the given Ruby code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>c = 1\ncount=0\nif c &gt; 2\n   count=2\nelsif c &lt;= 2 and c!=0\n   count=3\nelse\n   count=4\nend\nputs count</code></pre>","a":[{"id":1770739,"option":"0","correct":false},{"id":1770740,"option":"3","correct":true},{"id":1770741,"option":"2","correct":false},{"id":1770742,"option":"4","correct":false}]},{"q":"<p>What is the output to the following code if number=2.55:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#import\nint main (int argc, const char * argv[])\n{\n  NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init];\n  int number;\n  printf (\"Enter a number between 0 and 3: \");\n  scanf (\"%i\", &amp;number);\n  switch (number)\n  {\n   case 0:\n          NSLog (@\"it is zero\");\n          break;\n   case 1:\n          NSLog (@\"it is one\");\n          break;\n   case 2:\n          NSLog (@\"it is two\");\n          break;\n   case 3:\n          NSLog (@\"it is three\");\n          break;\n   default:\n          NSLog (@\"Integer out of range\");\n          break; \n  }\n  [pool drain];\n  return 0;\n }</code></pre>","a":[{"id":1769728,"option":"it is three","correct":false},{"id":1769729,"option":"it is two","correct":true},{"id":1769730,"option":"Integer out of range","correct":false},{"id":1769731,"option":"it is zero","correct":false}]},{"q":"<p>You have been given a sample code where it uses conditional statements to achieve a particular array as a result. What output would you expect for the following input?<br>\n<br>\n<em>Input: 64, 34, 25, 12, 22, 11, 90</em></p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#import\n#include\nint main()\n{\n -(NSArray *)arrayBubbleSort:(NSArray *)targetArray\n{\n  NSMutableArray *resultArray = [targetArray mutableCopy];\n  for (int s = 0; s &lt; resultArray.count; s++)\n  {\n   for (int e = 0; e&lt; resultArray.count; e++)\n    {\n     if ([resultArray[s] intValue] &lt; [resultArray[e] intValue])\n     {\n      [resultArray exchangeObjectAtIndex:k withObjectAtIndex:l];\n     }\n    }\n   }\n return resultArray;\n}\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1769720,"option":"11 12 25 22 34 64 90","correct":false},{"id":1769721,"option":"11 12 22 34 24 64 90 ","correct":false},{"id":1769722,"option":"11 12 22 25 34 64 90","correct":true},{"id":1769723,"option":"90 64 34 25 22 12 11","correct":false}]},{"q":"<p>You have been given a code to work with files that contain images. The code isn't getting compiled . You have to recognize the error and fix the bug in the following code. What is the reason the following code is not being compiled correctly?</p>\n\n<pre class=\"prettyprint\"><code>#import\n#include\nint main(int argc, const char * argv[]){\n@autoreleasepool{\nif (_imageView,image==NULL)\n{\n  NSString *files = @\"NOFILE\";\n}\nelse\n{\n  NSString *files= @\"FILESET\";\n}\nNSLog(@\"%@\",files);\nreturn 0;\n}\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1769716,"option":"Syntax error","correct":false},{"id":1769717,"option":"isFileSet cant be accessed outside of if-else loop","correct":true},{"id":1769718,"option":"The given file cant be accessed in the loop","correct":false},{"id":1769719,"option":"Infinite loop leading to compilation error.","correct":false}]},{"q":"<p>Consider the code-snippet given alongside. The following Objective C code checks whether the given string is empty or not. But this code is unsuccessful while executing. What should be changed/added in the given code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#import\nint main() {\nNSString *String = @\"Hello!\";\nif ([String length] == 0)\n  //NSLog(@\"This is an empty string\");\nelse\n //NSLog(@\"This is not an empty string.\");\n}</code></pre>","a":[{"id":1769708,"option":"{} curly braces needs to added in conditional statements.","correct":true},{"id":1769709,"option":"Error in the initialization of a string.","correct":false},{"id":1769710,"option":"Syntax error","correct":false},{"id":1769711,"option":"Compilation error","correct":false}]},{"q":"<p>You have executed the following C code to check whether the two integers are equal or not. If they are equal you use an if-else statement to print the same. You need to ensure the given code executes correctly for the input given but the fifth line is producing an error. What should be changed/added in the below code to make it work?</p>\n\n<pre class=\"prettyprint\"><code>#import\nint main() {\nNSInteger int1 = 13;\nNSInteger int2 = 6;\nif (int1 = int2)\n{\n  NSLog(@\"Integers are equal.\");\n} \nelse \n{\n  NSLog(@\"Integers are not equal.\");\n}\n}</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p>1.&nbsp;The code should use comparison operators(==).<br>\n&nbsp; &nbsp; So line 7 should be rectified as &nbsp;if(int1 == int2)</p>\n\n<p>2.&nbsp;The code should initialize int1 and int2 &nbsp;properly</p>\n\n<p>3.&nbsp;The code is expected to have ; at the end of the statement</p>\n\n<p>4.&nbsp;The code has unnecessary use of curly braces</p>","a":[{"id":1769704,"option":"1","correct":true},{"id":1769705,"option":"2","correct":false},{"id":1769706,"option":"3","correct":false},{"id":1769707,"option":"4","correct":false}]},{"q":"<p>You have created an array and later you were given a task to reverse it. You have to execute the objective C code by using conditional statements that are provided in the code. You have to use a built-in function to reverse the array.<br>\n&nbsp;&nbsp;&nbsp;&nbsp;<br>\nSelect the correct code which fulfills the task.</p>\n\n<p><strong>Options</strong></p>\n\n<p>1.&nbsp;</p>\n\n<pre class=\"prettyprint\"><code>#import &lt;Foundation/Foundation.h&gt;\nint main() {\n@implementation NSMutableArray (Reverse)\n- (void)reverse {\n if ([self count] &lt;= 1)\n  return;\n NSUInteger s = 0;\n NSUInteger p = [self count] - 1;\n while (s &lt; p) {\n  [self reverseObjectAtIndex:iwithObjectAtIndex:j];\n   s++;\n   p--;\n }\n}\n@end\n}</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>#import &lt;Foundation/Foundation.h&gt;\nint main() {\n@implementation NSMutableArray (Reverse)\n- (void)reverse {\n if ([self count] &lt;= 1)\n  return;\n NSUInteger s = 0;\n NSUInteger p = [self count] - 1;\n while (s &lt; p) {\n  [self exchangeObjectAtIndex:i\n   withObjectAtIndex:j];\n   s++;\n   p--;\n }\n}\n@end\n}</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>[self alterObjectAtIndex:i withObjectAtIndex:j];\n#import &lt;Foundation/Foundation.h&gt;\nint main() {\n@implementation NSMutableArray (Reverse)\n- (void)reverse {\n    if ([self count] &lt;= 1)\n        return;\n    NSUInteger s = 0;\n    NSUInteger p = [self count] - 1;\n    while (s &lt; p) {\n     [self alterObjectAtIndex:i withObjectAtIndex:j];\n        s++;\n        p--;\n    }\n}\n@end\n}</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>#import &lt;Foundation/Foundation.h&gt;\nint main() {\n@implementation NSMutableArray (Reverse)\n- (void)reverse {\n    if ([self count] &lt;= 1)\n        return;\n    NSUInteger s = 0;\n    NSUInteger p = [self count] - 1;\n    while (s &lt; p) {\n    [self converseObjectAtIndex:i withObjectAtIndex:j];\n        s++;\n        p--;\n    }\n}\n@end\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1769700,"option":"1","correct":false},{"id":1769701,"option":"2","correct":true},{"id":1769702,"option":"3","correct":false},{"id":1769703,"option":"4","correct":false}]},{"q":"<p>What is the output of the given code snippet:</p>\n\n<p><strong>Code snippet</strong></p>\n\n<pre class=\"prettyprint\"><code>fun main(){\n   val x:Int=10\n   val y:Int=25\n   val str1: String=\"sthaghar\"\n   val str2: String=\"strhshus\"\n   var res=0\n   if(str1&gt;=str2){\n     if(x&gt;y){\n       res=x\n     }\n     else{\n       res=y\n     }\n   }\n   else if(str1&lt;str2){\n     if(x&lt;y){\n       res=x\n     }\n     else{\n       res=y\n     }\n   }\n   print(res)\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1764897,"option":"Error","correct":false},{"id":1764898,"option":"25","correct":false},{"id":1764899,"option":"0","correct":false},{"id":1764900,"option":"10","correct":true}]},{"q":"<p>What is the output of the given Kotlin code snippet:</p>\n\n<pre class=\"prettyprint\"><code>fun main(args: Array&lt;String&gt;) {\n    var num=367\n    var n=num%10\n    var res:Double = 0.0\n    if(n&gt;5){\n       res=n/3.5\n    }\n    else{\n       res=n + 3.5\n    }\n    println(res)\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1747222,"option":"Error","correct":false},{"id":1747223,"option":"6.5","correct":false},{"id":1747224,"option":"2.0","correct":true},{"id":1747225,"option":"10.02","correct":false}]},{"q":"<p>What is the output of the given Kotlin code snippet:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>fun main(args: Array&lt;String&gt;) {\n    var z:Double = 120.0\n    var y =53\n    var x:Double = 12.0\n    if(y&gt;40){\n       z=x*50\n       z+=1.5*x*(y-40)\n       if(z&lt;=800){\n           z=800-z\n       }\n    }\n    else{\n       z=x*y\n    }\n    println(z)\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1747218,"option":"-34","correct":false},{"id":1747219,"option":"834","correct":true},{"id":1747220,"option":"120","correct":false},{"id":1747221,"option":"Syntax error","correct":false}]},{"q":"<p>Consider a situation where you were asked to write a program for calculating electricity bills based on the number of units consumed. If the number of units is divisible by 7, then there is a special offer saying \"no need to pay 12% of the resultant bill\". For calculation of bill, follow these conditions:</p>\n\n<ul>\n\t<li>For the first 50 units, there will be no charge</li>\n\t<li>For the next 100 units, charge 5 dollars per unit</li>\n\t<li>For remaining units, charge 15 dollars per unit</li>\n</ul>\n\n<p>Determine the correct Kotlin code-snippet from the following options in order to perform the given task:</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>fun main(args: Array&lt;String&gt;) {\n    var units=350\n    var bill:Double = 0.0\n    if(units&gt;=0 &amp;&amp; units&lt;=50){\n       bill=0.0 }\n    else if(units&lt;=100 &amp;&amp; units&gt;50){\n       bill=5.0*(units-50) }\n    else if(units&gt;100){\n       bill=500+15.0*(units-100) }\n    else{\n       bill=0.0 }\n    if(units%7==0){\n       bill=bill + 0.12*bill }\n    println(bill)\n}</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>fun main(args: Array&lt;String&gt;) {\n    var units=350\n    var bill:Double = 0.0\n    if(units&gt;=0 &amp;&amp; units&lt;=50){\n       bill=0.0 }\n    else if(units&lt;=100 &amp;&amp; units&gt;50){\n       bill=5.0*(units-50) }\n    else if(units&gt;100){\n       bill=250+15.0*(units-100) }\n    else{\n       bill=0.0 }\n    if(units%7==0){\n       bill=bill - 0.12*bill }\n    println(bill)\n}</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>fun main(args: Array&lt;String&gt;) {\n    var units=350\n    var bill:Double = 0.0\n    if(units&gt;=0 &amp;&amp; units&lt;=50){\n       bill=0.0 }\n    else if(units&lt;=150 &amp;&amp; units&gt;50){\n       bill=5.0*(units-50) }\n    else if(units&gt;150){\n       bill=250+15.0*(units-150) }\n    else{\n       bill=0.0 }\n    if(units%7==0){\n       bill=bill + 0.12*bill }\n    println(bill)\n}</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>fun main(args: Array&lt;String&gt;) {\n    var units=350\n    var bill:Double = 0.0\n    if(units&gt;=0 &amp;&amp; units&lt;=50){\n       bill=0.0 }\n    else if(units&lt;=150 &amp;&amp; units&gt;50){\n       bill=5.0*(units-50) }\n    else if(units&gt;150){\n       bill=500+15.0*(units-150) }\n    else{\n       bill=0.0 }\n    if(units%7==0){\n       bill=bill - 0.12*bill }\n    println(bill)\n}</code></pre>\n\t</li>\n</ol>","a":[{"id":1747214,"option":"1","correct":false},{"id":1747215,"option":"2","correct":false},{"id":1747216,"option":"3","correct":false},{"id":1747217,"option":"4","correct":true}]},{"q":"<p>Suppose there is an organization consisting of 100 workers. The management will pay each worker based on the number of hours they worked. If the number of hours is more than the daily limit work hours, then they pay for extra hours will be 2.5 times of usual pay. Consider daily limit is 8 hours and pay per hour is 150 dollars. The following code is written to perform the given task in Kotlin:</p>\n\n<pre class=\"prettyprint\"><code>fun main(args: Array&lt;String&gt;) {\n    var rate:Double = 150.0\n    var hours =13\n    var pay:Double = 0.0\n    pay=rate*hours\n    println(pay)\n}</code></pre>\n\n<p>But the given code produced a wrong result. Which of the following is the correct code snippet&nbsp;that is used to calculate the daily pay of workers based on hours and rate by rectifying errors in the given code?</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>var rate:Double = 150.0\nvar hours =13\nvar pay:Double = 0.0\nif(hours&gt;8){\n   pay=rate*8\n   pay+=2.5*rate*(hours-8) }\nelse{\n   pay=rate*hours }</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>var rate:Double = 150.0\nvar hours =13\nvar pay:Double = 0.0\nif(hours&lt;8){\n   pay=rate*8\n   pay+=2.5*rate*(8-hours) }\nelse{\n   pay=rate*hours }\n</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>var rate:Double = 150.0\nvar hours =13\nvar pay:Double = 0.0\nif(hours&gt;8){\n   pay=rate*8\n   pay+=rate*(hours-8)+2.5 }\nelse{\n   pay=rate*8 }\n</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>var rate:Double = 150.0    \nvar hours =13 \nvar pay:Double = 0.0    \nif(hours&gt;8){       '\n   pay=rate*8       \n   pay+=2.5*rate*(8-hours) }\nelse{\n   pay=rate*8 }</code></pre>\n\t</li>\n</ol>\n\n<p>&nbsp;</p>","a":[{"id":1747210,"option":"1","correct":true},{"id":1747211,"option":"2","correct":false},{"id":1747212,"option":"3","correct":false},{"id":1747213,"option":"4","correct":false}]},{"q":"<p>Which of the following statements is correct about the lines A and B in the C# code snippet given below:<br>\n<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\npublic class Hack\n{\n    static void Main(string[] args)\n        {\n            if (hack1() &amp;&amp; hack2())   // A\n            {\n                Console.WriteLine(\"Hey\");   \n            }\n            \n            if (hack1() &amp; hack2())   // B\n            {\n                Console.WriteLine(\"Hey\");\n            }\n        }\n\t static bool hack1()\n        {\n            Console.WriteLine(\"Hi\");\n            return false ;\n        }\n\n       static bool hack2()\n        {\n            Console.WriteLine(\"Hello\");\n            return true;\n        }\n        \n}\n</code></pre>\n\n<p><br>\n<br>\n<strong>Statements</strong></p>\n\n<ol>\n\t<li>\n\t<p>​ Line A and Line B gives the same output ​</p>\n\t</li>\n\t<li>\n\t<p>​ Line A and Line B gives different outputs​</p>\n\t</li>\n\t<li>\n\t<p>​ Line B gives a compilation error ​</p>\n\t</li>\n</ol>","a":[{"id":1419502,"option":"3","correct":false},{"id":1419503,"option":"1","correct":true},{"id":1419504,"option":"2","correct":false},{"id":1419505,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following C# code?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\npublic class Hack\n{\n    static void Main(string[] args)\n        {\n            if (hack1() &amp;&amp; hack2())\n            {\n                Console.WriteLine(\"Hey\");\n            }\n        }\n\t static bool hack1()\n        {\n            Console.WriteLine(\"Hi\");\n            return false ;\n        }\n\n       static bool hack2()\n        {\n            Console.WriteLine(\"Hello\");\n            return true;\n        }\n        \n}\n</code></pre>\n\n<p> </p>\n\n<p><strong>Output</strong><br>\n </p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hi\n</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hi\nHello</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hi\nHello\nHey</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1419462,"option":"1","correct":true},{"id":1419463,"option":"2","correct":false},{"id":1419464,"option":"3","correct":false},{"id":1419465,"option":"The code gives a compile time error","correct":false}]},{"q":"<p>In Shell Scripting, if you are required to implement the following command in your Linux terminal for the following bash script, then determine the output of the following script in this scenario:</p>\n\n<p><strong>Command</strong></p>\n\n<pre class=\"prettyprint\"><code>./hack.sh</code></pre>\n\n<p><strong>hack.sh</strong></p>\n\n<pre class=\"prettyprint\"><code>a=0\nwhile [ \"$a\" -lt 4 ]\ndo\n            b=\"$a\"\n            while [ \"$b\" -ge 0 ]\n            do\n                        echo -n \"$b \"\n                        b=`expr $b - 1`\n            done\n            echo\n            a=`expr $a + 1`\ndone\n</code></pre>\n\n<p>Note: Assume you have given the executable permissions for this file by using the command <strong>chmod +x hack.sh</strong> through your Linux terminal</p>\n\n<p><strong>Output</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>1\n1 2\n1 2 3</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>1 2 3 4</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>0\n0 1\n0 1 2\n0 1 2 3</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>0\n1 0\n2 1 0\n3 2 1 0</code></pre>","a":[{"id":1125211,"option":"1","correct":false},{"id":1125212,"option":"2","correct":false},{"id":1125213,"option":"3","correct":false},{"id":1125214,"option":"4","correct":true}]},{"q":"<p>What is the output of the following C code:</p>\n<pre class=\"prettyprint\"><code>    #include &lt;stdio.h&gt;\n    int main( )\n    {\n    int k = 35 ;\n    printf ( \"\\n%d %d %d\", k == 35, k = 50, k &gt; 40 ) ;\n    }\n</code></pre>","a":[{"id":123040,"option":"1 50 0","correct":false},{"id":123041,"option":"0 50 0","correct":true},{"id":123042,"option":"1 50 1","correct":false},{"id":123043,"option":"None of these","correct":false}]},{"q":"<p>In COBOL, the <strong>GO TO</strong> statement is used to transfer the flow of execution in the __________________.</p>","a":[{"id":402668,"option":"Backward direction","correct":false},{"id":402669,"option":"Forward direction","correct":true},{"id":402670,"option":"sequential order","correct":false},{"id":402671,"option":"none of the above","correct":false}]},{"q":"<p>In COBOL, if a user needs to execute a block of code 10 times, which of the following looping statements is used?</p>","a":[{"id":402664,"option":"Perform Until","correct":false},{"id":402665,"option":"Perform Times","correct":true},{"id":402666,"option":"Perform Thru","correct":false},{"id":402667,"option":"Perform Varying","correct":false}]},{"q":"<p>In COBOL, which of the following factors can be used to replace the <strong>if-else</strong> statement?</p>","a":[{"id":402656,"option":"Evaluate Verb","correct":true},{"id":402657,"option":"Switch","correct":false},{"id":402658,"option":"Go to","correct":false},{"id":402659,"option":"Compound condition","correct":false}]},{"q":"<p>Which condition is used in COBOL to identify the datatype of an operand?</p>","a":[{"id":402648,"option":"Class ","correct":true},{"id":402649,"option":"Condition-Name ","correct":false},{"id":402650,"option":"Negated ","correct":false},{"id":402651,"option":"Combined ","correct":false}]},{"q":"<p>Which of these is equivalent from line 1 to line 4 in the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n{\n    int x = 5;\n    int flag =0;\n    if(x&lt;0) //line 1\n       flag=0; // line 2\n    else //line 3\n       flag=1; //line 4\n    cout&lt;&lt;flag;\n}\n\n\n</code></pre>\n\n<p> </p>","a":[{"id":133622,"option":"flag=(x<0)?1:0;","correct":false},{"id":133623,"option":"flag=(x>0)?0:1;","correct":false},{"id":133624,"option":"flag=(x<0)?0:1;","correct":true},{"id":133625,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    int x = 0;\n    switch (x) {\n    case 1:\n        cout &lt;&lt; \"Hacker\";\n    case 0:\n        cout &lt;&lt; \"Earth\";\n    }\n}\n</code></pre>","a":[{"id":132245,"option":"Hacker","correct":false},{"id":132246,"option":"HackerEarth","correct":false},{"id":132247,"option":"Earth","correct":true},{"id":132248,"option":"Compilation error","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    int x = -1;\n    unsigned int y = 2;\n\n    if (x &gt; y) {\n        cout &lt;&lt; \"x is greater\";\n    }\n    else {\n        cout &lt;&lt; \"y is greater\";\n    }\n}\n</code></pre>","a":[{"id":147609,"option":"x is greater","correct":true},{"id":147610,"option":"y is greater","correct":false},{"id":147611,"option":"Error","correct":false},{"id":147612,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following PHP code:</p>\n<pre class=\"prettyprint\"><code>&lt;?php\n    if (-100)\n       print \"hi\";\n    else\n       print \"where are you\";\n?&gt;\n</code></pre>","a":[{"id":61126,"option":"where are you","correct":false},{"id":61127,"option":"hi","correct":true},{"id":61128,"option":"Error","correct":false},{"id":61129,"option":"None of these","correct":false}]},{"q":"<p>Which of the following syntaxes can be used in place of XXX in the JavaScript code snippet given below to produce the output as follows?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>function* CharacterRange(a, b)\n{\n    for (let i = a; i &lt;= b; i += 1)\n    {\n        yield i;        \n    }    \n}\n\nfunction GenerateRange(a, b)\n{\n    if(typeof a === 'string')\n    {\n        let res = XXX\n        console.log(res);        \n    }\n    else \n    {\n        let res = [...CharacterRange(a, b)];\n        console.log(res);        \n    }    \n}\nGenerateRange(1, 5);\nGenerateRange('A', 'G');</code></pre>\n\n<p> </p>\n\n<p><strong>Output</strong></p>\n\n<pre class=\"prettyprint\"><code>[ 1, 2, 3, 4, 5 ]\n[\n  'A', 'B', 'C',\n  'D', 'E', 'F',\n  'G'\n]</code></pre>\n\n<p> </p>\n\n<p> </p>\n\n<p><strong>Syntaxes</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>[...GenerateRange(b.charCodeAt(), a.charCodeAt())].map(n =&gt; String.fromCharCode(n));</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>[...CharacterRange(b.charCodeAt(), a.charCodeAt())].map(n =&gt; String.fromCharCode(n));</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>[...GenerateRange(a.charCodeAt(i), b.charCodeAt(i))].map(n =&gt; String.fromCharCode(n));</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>[...CharacterRange(a.charCodeAt(), b.charCodeAt())].map(n =&gt; String.fromCharCode(n));</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1420412,"option":"1","correct":false},{"id":1420413,"option":"2","correct":false},{"id":1420414,"option":"3","correct":false},{"id":1420415,"option":"4","correct":true}]},{"q":"<p>What is the output of the following C code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;stdio.h&gt;\nint main()\n{\n    int i,j;\n    for (i = 0; i &lt;=10; i++)\n    {\n        for (j&lt;=4;j++;j=0)\n        {\n            for(i=j;i&lt;=j;i++)\n            {\n                j = myhackFunc(j);\n            }\n        } \n    }\n    printf(\"%d\",j);\n}\nint myhackFunc(int i)\n{\n    static int hackvar = 0;\n    hackvar = hackvar + i*i+i-i/i;\n    if(hackvar&gt;=i*i+i)\n    {\n        return(hackvar+i-i*i);\n    }\n    else\n    {\n        return(hackvar+i*i+i);\n    }\n}\n</code></pre>","a":[{"id":126096,"option":"10","correct":false},{"id":126097,"option":"1","correct":true},{"id":126098,"option":"0","correct":false},{"id":126099,"option":"Runtime error","correct":false}]},{"q":"<p>What is the output of the following C code:</p>\n<pre class=\"prettyprint\"><code>     #include &lt;stdio.h&gt;\n        int main()\n        {\n            int a = -2;\n            int b = 0;\n            int y = (b == 0) ? a :(a &gt; b);\n            printf(\"%d\\n\", y);\n        }\n</code></pre>","a":[{"id":122844,"option":"0","correct":false},{"id":122845,"option":"1","correct":false},{"id":122846,"option":"-2","correct":true},{"id":122847,"option":"Compilation error","correct":false}]},{"q":"<p>What is the output of the following C code:</p>\n<pre class=\"prettyprint\"><code>    #include &lt;stdio.h&gt;\n        int main()\n        {\n            int x = 1, y = 0, z = 3,m;\n           return( x &gt; y ? printf(\"%d\", z) :printf(\"%d\", z));\n        }\n</code></pre>","a":[{"id":122520,"option":"1","correct":false},{"id":122521,"option":"0","correct":false},{"id":122522,"option":"3","correct":true},{"id":122523,"option":"Compilation error","correct":false}]},{"q":"<p>What is the output of the following PHP code:</p>\n<pre class=\"prettyprint\"><code>&lt;?php\n    $x=6;\n    if($x==10){\n      echo\"A\";\n    }\n    elseif($x&gt;7 &amp;&amp; $x&lt;10){\n      echo\"B\";\n    }\n    elseif($x==20){\n      echo\"C\";\n    }\n    else{\n      echo\"D\";\n    }\n?&gt;\n</code></pre>","a":[{"id":61078,"option":" B ","correct":false},{"id":61079,"option":" C ","correct":false},{"id":61080,"option":" D ","correct":true},{"id":61081,"option":" A ","correct":false}]},{"q":"<p>If the following is the input, then determine the output of the following C code:</p>\n\n<p><strong>Input</strong></p>\n\n<p>3 2 1 3</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#include&lt;stdio.h&gt;\nint main()\n{\n    int n,s[1001],i,t,j;\n    scanf(\"%d\",&amp;n);\n    for(i=0;i&lt;n;i++)\n    {\n        scanf(\"%d\",&amp;s[i]);\n    }\n    for(i=0;i&lt;n;i++)\n        for(j=i+1;j&lt;n;j++)\n            if(s[j]&lt;s[i])\n            {\n                t=s[j];\n                s[j]=s[i];\n                s[i]=t;\n            }\n    int c=n/2-1;\n    int d=(n+1)/2-1;\n    if(n%2!=0) \n        printf(\"%d\",s[d]);\n    else \n        printf(\"%d\",s[c]);\n}</code></pre>\n\n<p> </p>","a":[{"id":721554,"option":"2","correct":true},{"id":721555,"option":"1","correct":false},{"id":721556,"option":"3","correct":false},{"id":721557,"option":"Compilation error","correct":false}]},{"q":"<p>In C++, what is the following operator called?</p>\n\n<pre class=\"prettyprint\"><code>&amp;&amp;</code></pre>","a":[{"id":146431,"option":"Logical","correct":true},{"id":146432,"option":"Binary","correct":false},{"id":146433,"option":"Arithmetic","correct":false},{"id":146434,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following Ruby code:</p>\n\n<p><strong>Code</strong>:</p>\n\n<pre class=\"prettyprint\"><code>if 5 \nputs 'hello ruby'\nend\n</code></pre>","a":[{"id":83228,"option":"Error  ","correct":false},{"id":83229,"option":"hello ruby  ","correct":true},{"id":83230,"option":"5  ","correct":false},{"id":420955,"option":"None of these","correct":false}]}]
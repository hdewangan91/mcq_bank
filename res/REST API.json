[{"q":"<p>You have users and accounts, on which you perform CRUD operations. You are hosting the application locally on port <em>8080</em>. You have designed the following endpoints. Which is the correct request URI's to delete the user with id: <em>141</em> and accounts with id: <em>231</em>?<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>app.delete(\"/users/:id\",function(req,res){\n   //some code\n})\napp.delete(\"/accouts/:id\",function(req,res){\n   //some code\n})</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1718995,"option":"HTTP DELETE http://localhost:8080/delete?users=141&accounts=231","correct":false},{"id":1718996,"option":"HTTP DELETE http://localhost:8080/users/accounts/141/231","correct":false},{"id":1718997,"option":"HTTP DELETE http://localhost:8080/users/141/accounts/231","correct":true},{"id":1718998,"option":"HTTP DELETE http://localhost:8080/users=141&accounts=231","correct":false}]},{"q":"<p>While working with the OPTIONS request method, Ben came across a situation where the response body is not included in the response for the request. The header contains the other details but what should be the value of the content-length field according to Ben?</p>","a":[{"id":1719019,"option":"0","correct":true},{"id":1719020,"option":"Number of methods corresponding to the Allow attribute in the header.","correct":false},{"id":1719021,"option":"Since, there is no response body, Content-Length should not be mentioned.","correct":false},{"id":1719022,"option":"-1","correct":false}]},{"q":"<p>While developing your application, you came across the HEAD method. You were really impressed by the features it provided. Which of the following is the feature that is provided by the method, and can be useful for an application?</p>\n\n<p><strong>Options:</strong></p>\n\n<ol>\n\t<li>It has no body in request and is a safe method.</li>\n\t<li>The successful response of this type of request has the body.</li>\n\t<li>It requests the header information of the response if the GET request was sent instead of this.</li>\n\t<li>The response to these requests are cacheable.</li>\n</ol>","a":[{"id":1719067,"option":"1 and 2 only","correct":false},{"id":1719068,"option":"1, 2 and 4 only","correct":false},{"id":1719069,"option":"1, 3 and 4 only","correct":true},{"id":1719070,"option":"1, 2 and 3 only","correct":false}]},{"q":"<p>You have developed an endpoint with URL \"/controls\". You wish to design a User experience where you want to display the header content of all the designed endpoints without actually placing the request for the resource. For this, you are finding a way and you now need to write a python script that would result in displaying the HTTP code and content of the request. What is the correct way to do so?<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>import requests\n// make a request\n// display the http error code\n// display the header content</code></pre>\n\n<p><strong>Options:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>response = requests.head('http://localhost:8000/controls')\nprint(response.code)\nprint(response.content)</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>response = requests.head('http://localhost:8000/controls')\nprint(response.code)\nprint(response)</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>response = requests.head('http://localhost:8000/controls')\nprint(response)\nprint(response.headers)</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>response = requests.head('http://localhost:8000/controls')\nprint(response)\nprint(response.content)</code></pre>\n\t</li>\n</ol>","a":[{"id":1719075,"option":"1","correct":false},{"id":1719076,"option":"2","correct":false},{"id":1719077,"option":"3","correct":true},{"id":1719078,"option":"4","correct":false}]},{"q":"<p>In an application, your home page is designed to show a complete list of students. As soon as, the following URL gets hit, you have to send the details of the students as json in response. You have to choose the correct option from the following that displays:</p>\n\n<ol>\n\t<li>The right way to check the endpoint is through the terminal.</li>\n\t<li>Code snippet for the endpoint.</li>\n</ol>\n\n<p><strong>URL</strong>: http://localhost:3000/home/<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>var students = [\n   {roll_number:1, name: \"ABC\"},\n   {roll_number:2, name: \"XYZ\"}\n   // many more\n];\nvar router=express.Router();\n//code of endpoint\napp.listen(3000)</code></pre>\n\n<p><strong>Options</strong>:</p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>1. curl -i -H \"Accept: text/html\" -X GET localhost:3000/home\n\n2. router.get('/', function(req, res){\n      res.json(students);\n   });</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>1. curl -i -H \"Accept: application/json\" -H \"Content-Type: application/json\" -X GET \n   localhost:3000/home\n\n2. router.get('/home', function(req, res){\n      res.json(students);\n   });</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>1. curl -i -H \"Accept: application/json\" -H \"Content-Type: application/json\" -X GET \n   localhost:3000\n\n2. router.get('/home', function(req, res){\n      res.json(students);\n   });</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>1. curl -i -H \"Accept: text/html\" -X GET localhost:3000/home\n\n2. router.get('/home', function(req, res){\n     res.json(students);\n   });</code></pre>","a":[{"id":1718915,"option":"1","correct":false},{"id":1718916,"option":"2","correct":true},{"id":1718917,"option":"3","correct":false},{"id":1718918,"option":"4","correct":false}]},{"q":"<p>In RESTful web services, you are working on caching. If you are required to configure the client’s caching, then which of the following statements about the headers that are available in the server response are correct:</p>\n\n<ol>\n\t<li>The <em>Date</em><strong> </strong>header indicates the Date and Time of the resource when the resource was created.</li>\n\t<li>The <em>Cache-Control</em><strong> </strong>header represents the primary header to control the caching.</li>\n\t<li>The <em>Expired</em> header indicates the expiration date and time of the caching.</li>\n\t<li>The <em>Age</em> header indicates the duration in seconds from when the resource was fetched from the server.</li>\n</ol>","a":[{"id":1435596,"option":"1, 2, and 3","correct":false},{"id":1435597,"option":"2, 3, and 4","correct":false},{"id":1435598,"option":"1, 2, and 4","correct":true},{"id":1435599,"option":"1, 3, and 4","correct":false}]},{"q":"<p>In RESTful web services, you are working on the messaging technique. Which of the following are the components of an HTTP Request:</p>\n\n<ol>\n\t<li>Verb</li>\n\t<li>URI</li>\n\t<li>HTTP Version</li>\n\t<li>Request Header and Request Body</li>\n</ol>","a":[{"id":1435584,"option":"1, 2, and 3","correct":false},{"id":1435585,"option":"2, 3, and 4","correct":false},{"id":1435586,"option":"1, 3, and 4","correct":false},{"id":1435587,"option":"All of these","correct":true}]},{"q":"<p>In RESTful web services, you are working on REST-based architecture. Which of the following statements about the HTTP methods that are used in this architecture are correct:</p>\n\n<ol>\n\t<li>The <em>GET</em> method is used to provide write-only access to a resource.</li>\n\t<li>The <em>POST</em> method is used to create a new resource.</li>\n\t<li>The <em>DELETE</em> method is used to remove a resource</li>\n\t<li>The <em>PUT</em> method is used to update an existing resource or create a new resource.</li>\n</ol>","a":[{"id":1435576,"option":"1, 2, and 3","correct":false},{"id":1435577,"option":"2, 3, and 4","correct":true},{"id":1435578,"option":"1, 2, and 4","correct":false},{"id":1435579,"option":"1, 3, and 4","correct":false}]},{"q":"<p>In RESTful web services, you are working on the addressing technique. If you are required to design a URI (Uniform Resource Identifier), then which of the following rules must be performed in this scenario:</p>\n\n<ol>\n\t<li>Use plural nouns to define the resources.</li>\n\t<li>Use underscore (_) or hyphen (-) when using a long resource name.&nbsp;</li>\n\t<li>As Web Service is a private service, a URI once made private should always be available. In case, the URI gets updated, redirect the older URI to a new URI using the HTTP Status code, 300.</li>\n\t<li>Use the HTTP Verbs such as&nbsp; GET, PUT and DELETE to perform the operations on the resource.</li>\n</ol>","a":[{"id":1435588,"option":"1, 2, and 3","correct":false},{"id":1435589,"option":"2, 3, and 4","correct":false},{"id":1435590,"option":"1, 2, and 4","correct":true},{"id":1435591,"option":"1, 3, and 4","correct":false}]},{"q":"<p>You are developing an application with a domain as \"myApplication\". You are designing the server and you wish to implement a feature that enables only requests with \"mySmallApp\" domain, to access the resources of this domain. Also, the requests that are either PUT or DELETE should be allowed for \"mySmallApp\" domain. To make this happen, what should be specified in the header by \"myApplication\"?</p>","a":[{"id":1719163,"option":"Allow-Access-Control-Origin: \"mySmallApp\" and Allowed-Methods: PUT, DELETE","correct":false},{"id":1719164,"option":"Access-Control-Allow-Method: PUT, DELETE","correct":false},{"id":1719165,"option":"CORS: true and Allow-Control-Method: PUT, DELETE","correct":false},{"id":1719166,"option":"Access-Control-Allow-Origin: \"mySmallApp\" and Access-Control-Allow-Method: PUT, DELETE","correct":true}]},{"q":"<p>What is the correct order of placing a POST request between origin <em>1</em> and origin <em>2</em>?</p>\n\n<ol>\n\t<li>The POST request is made with the required resources.</li>\n\t<li>The Server at origin 2 processes the request and identifies if it is a valid request or not.</li>\n\t<li>Origin 2 responses with additional HTTP Headers.</li>\n\t<li>The preflight request is sent from origin 1 to origin 2.</li>\n</ol>","a":[{"id":1719159,"option":"1, 3, 2, 4","correct":false},{"id":1719160,"option":"4, 3, 2, 1","correct":false},{"id":1719161,"option":"4, 2, 3, 1","correct":true},{"id":1719162,"option":"1, 2, 3, 4","correct":false}]},{"q":"<p>If you have an application with origin as: \"myApi.in\" and you want to request the data from the same domain but with another port say: \"myApi:5050\", Which of the following would enable you to do so?</p>","a":[{"id":1719155,"option":"HTTP Protocols","correct":false},{"id":1719156,"option":"CORS","correct":true},{"id":1719157,"option":"XML Request","correct":false},{"id":1719158,"option":"Fetch API","correct":false}]},{"q":"<p>Suppose you have the following JSON:</p>\n\n<pre class=\"prettyprint\"><code>GET /students/abc10\n{\n   \"username\":\"abc10\",\n   \"name\":\"DEF\"\n}</code></pre>\n\n<p>You wish to change the name from \"DEF\" to \"XYZ\" and for this you decided to use the PATCH method. If the content-type is defined below,</p>\n\n<p>\"content-type\":\"application/json-patch+json\"</p>\n\n<p>What is the correct representation of the request body for applying the desired changes?</p>","a":[{"id":1719151,"option":"HTTP PATCH /students/abc10\r\n{\r\n\"name\": \"XYZ\"\r\n}","correct":false},{"id":1719152,"option":"HTTP PATCH /students/abc10\r\n{\r\n\"op\":\"update\", \"name\": \"XYZ\"\r\n}","correct":false},{"id":1719153,"option":"HTTP PATCH /students\r\n{\r\n\"op\":\"replace\", \"key\": \"abc10\", \"value\": \"XYZ\"\r\n}","correct":false},{"id":1719154,"option":"HTTP PATCH /students/abc10\r\n{\r\n\"op\":\"replace\",\"path\":\"/name\", \"value\": \"XYZ\"\r\n}","correct":true}]},{"q":"<p>Your application contains multiple auto-increment fields. Now, if you have used PUT and PATCH methods on these fields, what would be the impact?</p>","a":[{"id":1719147,"option":"For auto increment fields,\r\nPUT - update a part of the resource\r\nPATCH - replace the complete resource","correct":false},{"id":1719148,"option":"For auto increment fields,\r\nPUT - overrides the previous records \r\nPATCH - replaces the existing record by creating a new one.","correct":false},{"id":1719149,"option":"For auto increment fields,\r\nPUT - overrides the previous records \r\nPATCH - it will change something every time the request is placed and can have side effects.","correct":true},{"id":1719150,"option":"For auto increment fields,\r\nPUT - No changes would be made for these fields\r\nPATCH -No changes would be made definitely","correct":false}]},{"q":"<p>Which of the following is the correct statement about the PATCH Method?</p>","a":[{"id":1719143,"option":"It necessarily changes the state of the server every time we fire the request.","correct":true},{"id":1719144,"option":"It is cacheable and hence partial information would be cached.","correct":false},{"id":1719145,"option":"It updates and overrides the entire representation every time.","correct":false},{"id":1719146,"option":"It is idempotent and hence, not safe.","correct":false}]},{"q":"<p>Being a developer, you implemented RESTful API with delete last functionality. The front-end developer is not aware of the delete last functionality implementation at the back-end and according to his design, the code for placing a delete request goes in a loop and breaks if a 404 error code is encountered. Which of these options states the correct end and correct way to avoid this?</p>","a":[{"id":1719139,"option":"It would end after deleting a requested record from the server and the best practise to avoid it is to make DELETE method should not be called from within a loop.","correct":false},{"id":1719140,"option":"It would end when nothing is left on the server and the best practise to avoid it is to make DELETE method idempotent from the server side.","correct":false},{"id":1719141,"option":"It would end after deleting the desired record from the server and the best practise to avoid it is to make DELETE method idempotent from the server side.","correct":true},{"id":1719142,"option":"It would end when nothing is left on the server and the best practise to avoid  it is to make DELETE method should not be called from within a loop.","correct":false}]},{"q":"<p>In your local web service, you have added a single data, multiple times. Now, you wish to delete an instance of data and decide to use the DELETE HTTP method. You are using the following Endpoint for the communication. What your URL and request body should look like for this purpose?</p>\n\n<p><strong>Endpoint</strong>: /items:id</p>","a":[{"id":1719135,"option":"URL : http://localhost:3000/items/3 and Body: {}","correct":true},{"id":1719136,"option":"URL : http://localhost:3000/delete/items:id and Body: {'id':3}","correct":false},{"id":1719137,"option":"URL : http://localhost:3000/items/3 and Body: {'data': {'id': 3}}","correct":false},{"id":1719138,"option":"URL : http://localhost:3000/delete/items:id and Body: {'data': {'id':3}}","correct":false}]},{"q":"<p>You are developing an application with the domain as <em>domain1</em>, where you display videos that are altered frequently by the domain you get it from. You retrieve these videos from a domain named&nbsp;<em>domain2</em>. These videos are considerably large and take time to get downloaded and displayed. What should be the prominent way to do so as to increase the performance and save bandwidth?</p>","a":[{"id":1719131,"option":"GET requests should be used to download the video with increased bandwidth for better performance.","correct":false},{"id":1719132,"option":"CORS should be ensured using a preflight request prior to the actual request. And a GET request should be placed to download the video as soon as possible.","correct":false},{"id":1719133,"option":"CORS should be ensured using a preflight request prior to the actual request. And a HEAD method should be used to identify if the videos have been changed since it was last downloaded.","correct":true},{"id":1719134,"option":"HEAD request should be used to check if the video has been changed since it was last downloaded.","correct":false}]},{"q":"<p>As a Developer, which of the following points need to be kept in mind while implementing a HEAD method?</p>\n\n<ol>\n\t<li>The method should not alter the state of the server.</li>\n\t<li>The method should not, intentionally or unintentionally, introduce any side effects.</li>\n\t<li>The method should not trigger any external systems.</li>\n</ol>","a":[{"id":1719127,"option":"1 and 3 only","correct":false},{"id":1719128,"option":"1,2 and 3 only","correct":true},{"id":1719129,"option":"2 and 3 only","correct":false},{"id":1719130,"option":"1 and 2 only","correct":false}]},{"q":"<p>You wish to use head methods as the response of the request can be stored and used later for this method. Determine the reason in this scenario?</p>","a":[{"id":1719123,"option":"The HEAD method is Cacheable.","correct":true},{"id":1719124,"option":"The HEAD method is safe.","correct":false},{"id":1719125,"option":"The HEAD method is Idempotent.","correct":false},{"id":1719126,"option":"The HEAD method allows CORS.","correct":false}]},{"q":"<p>Suppose your application consists of 4 buttons namely: GET, POST, PUT, and DELETE. As the user clicks on any one of these, the respective request is sent to the server with a set of request data. Now, if a user continuously clicks a button multiple times and a request is being sent each time, clicking on which of these buttons would not result in redundancy of data at the server?</p>","a":[{"id":1719119,"option":"GET and PUT","correct":false},{"id":1719120,"option":"GET, POST and PUT","correct":false},{"id":1719121,"option":"GET, PUT and DELETE","correct":true},{"id":1719122,"option":"GET, POST, PUT and DELETE","correct":false}]},{"q":"<p>Which of the following is correct about a PUT request?</p>\n\n<ol>\n\t<li>It is a safe request.</li>\n\t<li>It is an idempotent method.</li>\n\t<li>It is used for updating the data on the server.</li>\n\t<li>It is used for creating a new resource or overwriting the existing data on the server.</li>\n</ol>","a":[{"id":1719115,"option":"1,3 only","correct":false},{"id":1719116,"option":"1, 2 and 3 only","correct":false},{"id":1719117,"option":"1,2 and 4 only","correct":false},{"id":1719118,"option":"2, 4 only","correct":true}]},{"q":"<p>In the documentation for a RESTful API web service, you want to describe each endpoint with its argument, request and response structure, and also the type of requests that are allowed and CORS policies. For this, you are applying all the HTTP methods for all the endpoints. What can be the better alternative to achieve this efficiently?</p>\n\n<ol>\n\t<li>Open the project and analyze all the endpoints and then include the endpoints allowed methods.</li>\n\t<li>Use the reflection API on the project to analyze all the endpoints and include them according to the allowed methods.</li>\n\t<li>Use the OPTIONS method for all the endpoints and then include the allowed methods.</li>\n</ol>","a":[{"id":1719107,"option":"1 only","correct":false},{"id":1719108,"option":"2 or 3 only","correct":true},{"id":1719109,"option":"1 and 3 only","correct":false},{"id":1719110,"option":"3 only","correct":false}]},{"q":"<p>The following is the request header of an OPTIONS type request. What can be inferred from the request header?<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>OPTIONS * HTTP/1.1\nAccess-Control-Request-Method: GET\nAccess-Control-Request-Headers: Content-Type</code></pre>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>It will let us know the methods allowed for the complete server.</li>\n\t<li>It will tell the server that when the actual request is sent, it will be GET.</li>\n\t<li>It will tell the server that when the actual request is sent, it will be having the content type headers.</li>\n</ol>","a":[{"id":1719103,"option":"1 only","correct":false},{"id":1719104,"option":"1 and 2 only","correct":false},{"id":1719105,"option":"1 and 3 only","correct":false},{"id":1719106,"option":"1, 2 and 3","correct":true}]},{"q":"<p>In an application, you have managed a record of students and you would update it only when you get \"Authorization\" as a header parameter. You have completed the endpoint implementation including the authentication part and now want to check it using a python script. Following is the pseudocode, what alterations would you make to this, in order to update the records?<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>request_header = {\n'Accept' :\n'Content-Type' :\n}\nrequest_uri = ...\nrequest_body = ....</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1719099,"option":"request_header = {\r\n'Authorization' : \r\n'Accept' : \r\n'Content-Type' :\r\n}","correct":false},{"id":1719100,"option":"response = requests.patch(request_uri, request_body, request_header)","correct":false},{"id":1719101,"option":"Both of these needs to incorporated to get the desired results.","correct":true},{"id":1719102,"option":"No changes are required as the authentication is always done on server and Hence, server responds with Internal server error.","correct":false}]},{"q":"<p>In the REST API web service, that is hosted locally on port 8000, you want to use the PATCH request for the following operations:</p>\n\n<ol>\n\t<li>To replace the value at path \"/items:id/price\" with 420</li>\n\t<li>To delete the item description</li>\n</ol>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>HTTP PATCH /store\n[list of operations]</code></pre>\n\n<p>Which of the following operations can be used to do so?</p>\n\n<ol>\n\t<li>{ \"op\": \"remove\", \"path\": \"/items:id/description\" }</li>\n\t<li>{ \"op\": \"move\", \"path\": \"/items/id/price\", \"price\": 420}</li>\n\t<li>{ \"op\": \"delete\", \"path\": \"/items/id/description\" }</li>\n\t<li>{ \"op\": \"replace\", \"path\": \"/items:id/price\", \"value\": 420}</li>\n</ol>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>","a":[{"id":1719095,"option":"1 and 2 only","correct":false},{"id":1719096,"option":"1 and 4 only","correct":true},{"id":1719097,"option":"2 and 3 only","correct":false},{"id":1719098,"option":"3 and 4 only","correct":false}]},{"q":"<p>You wish to perform partial updation to a resource. For this, you came across the PATCH method. Along with this advantage, what are a couple of more advantages provided by this method?</p>\n\n<ol>\n\t<li>The request and the successful response of this request contain the body</li>\n\t<li>This request involves a set of instructions that depicts how to modify and what to modify</li>\n\t<li>This is a safe, cacheable, and idempotent type of request</li>\n</ol>","a":[{"id":1719091,"option":"1 and 2 only","correct":true},{"id":1719092,"option":"1 and 3 only","correct":false},{"id":1719093,"option":"2 and 3 only","correct":false},{"id":1719094,"option":"1, 2 and 3 ","correct":false}]},{"q":"<p>You have designed a REST API service that is a library management system. You have to delete the records of the books if you get a key in request, else you have to send an error -KEY NOT FOUND. What would be the right implementation of the endpoint?</p>","a":[{"id":1719087,"option":"app.delete(\"/library/:id\",(req,res)=>{\r\nif(req.body.key){\r\n//code to delete from the data structures\r\n}\r\nelse {\r\nres.status(404);\r\nres.json({message:\"Key not found\"});\r\n}\r\n};)","correct":true},{"id":1719088,"option":"app.delete(\"/library/:id\",(req,res)=>{\r\nif(!req.body.key){\r\n//code to delete from the data structures\r\n}\r\nelse {\r\nres.status(404);\r\nres.json({message:\"Key not found\"});\r\n}\r\n};)","correct":false},{"id":1719089,"option":"app.remove(\"/library/:id\",(req,res)=>{\r\nif(req.body.key){\r\n//code to delete from the data structures\r\n}\r\n};)","correct":false},{"id":1719090,"option":"app.remove(\"/library/:id\",(req,res)=>{\r\nif(req.body.key){\r\n//code to delete from the data structures\r\n}\r\nelse {\r\nres.status(404);\r\nres.json({message:\"Key not found\"});\r\n}\r\n};)","correct":false}]},{"q":"<p>You are asked to remove a resource that has an index of 3 in the collection. You have the following code written for your endpoint. What would be the correct technique to do this?<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>app.delete(\"/movies/:id\", function(req, res){\n   var removeIndex = movies.map(function(movie){return movie.id;}).indexOf(req.params.id);\n});</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1719083,"option":"if(removeIndex === 3) {\r\nmovies.splice(3, 1);\r\nres.send({message: \"Movie id \" + req.params.id + \" removed.\"});\r\n}","correct":false},{"id":1719084,"option":"if(removeIndex === -1){\r\nres.json({message: \"Not found\"});\r\n} else {\r\nmovies.splice(removeIndex, 1);\r\nres.send({message: \"Movie id \" + req.params.id + \" removed.\"});\r\n}","correct":false},{"id":1719085,"option":"if(removeIndex === -1){\r\nres.json({message: \"Not found\"});\r\n} else {\r\nmovies.splice(3, 1);\r\nres.send({message: \"Movie id \" + req.params.id + \" removed.\"});\r\n}","correct":true},{"id":1719086,"option":"if(removeIndex === -1){\r\nres.json({message: \"Not found\"});\r\n} else {\r\nmovies.splice(removeIndex, 3);\r\nres.send({message: \"Movie id \" + req.params.id + \" removed.\"});\r\n}","correct":false}]},{"q":"<p>In your application, you used the DELETE method for functionality. You encountered different responses if the method is successfully applied. Which of these are correct responses?</p>\n\n<ol>\n\t<li>200 - Ok - The code has been enacted and the necessary information has been shared</li>\n\t<li>202 - Accepted - It will be a success but has not been enacted yet</li>\n\t<li>204 - No Content - The action have been enacted but there is no further data that needs to be shared</li>\n</ol>","a":[{"id":1719079,"option":"1 only","correct":false},{"id":1719080,"option":"1 and 2 only","correct":false},{"id":1719081,"option":"1 and 3 only","correct":false},{"id":1719082,"option":"1,2 and 3 ","correct":true}]},{"q":"<p>In an application, that facilitates video transcoding and subtitling, you wish to implement the functionality for video transcoding and post transcoding, you wish to download the file transcoded video. The video can be as long as 30 minutes. What would be your way of implementing the functionality?</p>","a":[{"id":1719071,"option":"Downloading it directly from the path given using a GET method and calculate the total time after the completion.","correct":false},{"id":1719072,"option":"Downloading it after you get the header details from the HEAD method, so that you can calculate the estimated time.","correct":true},{"id":1719073,"option":"Downloading immediately without the information of the file size and estimated time.","correct":false},{"id":1719074,"option":"Downloading after you get the header details from the POST method, so that you can calculate the estimated time.","correct":false}]},{"q":"<p>You have developed the following endpoint for a PUT type of request. The code written below sends a BAD Request error in the response of every request. The sample_serializer contains a method is_valid() that will let you know if you need to save the sample and send the data in the response or send an error. Which of the following is the correct way to do so?<br>\n<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>if request.method == 'PUT':\n   sample_data = JSONParser().parse(request) //line 1\n   sample_serializer = SampleSerializer(sample, data=sample_data) //line 2\n   return JsonResponse(sample_serializer.errors, status=status.HTTP_400_BAD_REQUEST) //line 3</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1719063,"option":"Adding the following condition after line 2\r\n        if !sample_serializer.is_valid(): \r\n            sample_serializer.save()","correct":false},{"id":1719064,"option":"Adding the following condition after line 1\r\n        if !sample_serializer.is_valid(): \r\n            sample_serializer.save() ","correct":false},{"id":1719065,"option":"Adding the following condition after line 1\r\n        if sample_serializer.is_valid(): \r\n            sample_serializer.save() \r\n            return JsonResponse(sample_serializer.data) ","correct":false},{"id":1719066,"option":"Adding the following condition after line 2\r\n        if sample_serializer.is_valid(): \r\n            sample_serializer.save() \r\n            return JsonResponse(sample_serializer.data) ","correct":true}]},{"q":"<p>You have the following code snippet to implement the functionality. Its main feature is to send an error message if the ID is not found in the request. To fulfill this, which of the line should be altered?<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>@app.errorhandler(404)\ndef page_not_found(e):\n    return \"&lt;h1&gt;404&lt;/h1&gt;&lt;p&gt;The resource could not be found.&lt;/p&gt;\", 404\n\n@app.route('/library/books', methods=['PUT'])    //line 1\ndef api_id():\n    if 'id' in request.args: \n        id = int(request.args['id'])    //line 2\n    else:\n        return;     //line 3</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1719059,"option":"Line 1","correct":false},{"id":1719060,"option":"Line 2","correct":false},{"id":1719061,"option":"Line 3","correct":true},{"id":1719062,"option":"No changes are required.","correct":false}]},{"q":"<p>You decided to use the PUT method in your REST API web service. Which of the following is the reasons to use it in your application?</p>\n\n<ol>\n\t<li>It has no side effects on successively calls</li>\n\t<li>It is a safe method to use</li>\n\t<li>It either creates or updates the requested resource</li>\n</ol>","a":[{"id":1719055,"option":"3 only","correct":false},{"id":1719056,"option":"1 and 3 only","correct":true},{"id":1719057,"option":"2 and 3 only","correct":false},{"id":1719058,"option":"1, 2 and 3","correct":false}]},{"q":"<p>IMDB has an API service for accessing its database for an authorized user. Any query made returns a JSON formatted data of the movie details.<br>\nA REST API example using MongoDB-like query syntax is given below. What does the following query return?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>https://imdbapi.io/rest/movies?q={\"name\" : {\"$nin\" : [\"Titanic\", \"Avatar\", \"Batman\"]}}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1719051,"option":"Returns the details of all movies named Titanic, Avatar and Batman.","correct":false},{"id":1719052,"option":"Returns the details of all movies having Titanic, Avatar and Batman in its name.","correct":false},{"id":1719053,"option":"Returns the details of all movies with names starting with either Titanic, Avatar or Batman.","correct":false},{"id":1719054,"option":"Returns the details of all movies not having Titanic, Avatar and Batman in its name.\r\n","correct":true}]},{"q":"<p>Consider the following example API that returns JSON and uses Express back end framework. You are also using your device as a localhost.<br>\nThe API has been created for the Public Library database. It has /books as one endpoint. The database has a review for each book labeled as 'review'.You have to return a JSON format review for a given book (consider each book has a unique ID as labeled 'bookID'). For the given code, a part is labeled X the correct replacement for is?<br>\n<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>const express = require('express');\nconst bodyParser = require('body-parser');\n\nconst app = express();\n\napp.use(bodyParser.json());\n\nX</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1719047,"option":"app.get('/books/:bookId/review', (req, res) => {\r\n  const { bookId } = req.params;\r\n  const reviews = [];\r\n  // code to get reviews by bookId\r\n  res.json(reviews);\r\n});","correct":true},{"id":1719048,"option":"app.get('/books/:bookId/review', (req, res) => {\r\n  const { bookId } = req.params;\r\n  const reviews = [];\r\n  // code to get reviews by bookId\r\n  req.json(reviews);\r\n});","correct":false},{"id":1719049,"option":"app.get('/books/:bookId/review', (req, res) => {\r\n  const reviews = [];\r\n  // code to get reviews by bookId\r\n  req.json(reviews);\r\n});","correct":false},{"id":1719050,"option":"app.get('/books/:bookId/review', (req, res) => {\r\n  // code to get reviews by bookId\r\n  req.json(reviews);\r\n});","correct":false}]},{"q":"<p>You are hosting your webservice on port 8080. Your web service contains a list of students, identified by rollNumber. You have to design an endpoint that would return the student corresponding to the rollNumber recieved if and only if the result of the students is PASS, \"Student Failed\" if the result is FAIL. And 404: not found status if the student is not found. You need to complete condition 1, condition 2 and condition 3.<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>const students: [\n   {\"rollNumber\":1,\"name\":\"Ken\",\"result\":\"PASS\"},\n   {\"rollNumber\":2,\"name\":\"Rey\",\"result\":\"FAIL\"}\n   // more students\n]\nrouter.get(\"/:rollNumber\",function(req, res){\n  var studentFilter = students.filter(function(student){\n    if(//condition 1){ return true; }\n  });\n  if(studentFilter.length==1 &amp;&amp; //condition 2) { res.json(studentFilter[0]) }\n  else{\n    if(studentFilter.length==1 &amp;&amp; //condition 3) { res.send({message: \"Student Failed\"})}\n    else {\n      res.status(404);\n      res.json({message:\"Not Found\"});\n    }\n  }\n});\napp.listen(8080);</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1718939,"option":"Condition 1: student.rollNumber == req.param.id\r\nCondition 2: studentFilter[0] == \"PASS\"\r\nCondition 2: studentFilter[0] == \"FAIL\"","correct":false},{"id":1718940,"option":"Condition 1: student.rollNumber == req.query.id\r\nCondition 2: studentFilter[0].result = \"PASS\"\r\nCondition 2: studentFilter[0].result = \"FAIL\"","correct":false},{"id":1718941,"option":"Condition 1: student.rollNumber == req.param.id\r\nCondition 2: studentFilter.result == \"PASS\"\r\nCondition 2: studentFilter.result == \"FAIL\"","correct":false},{"id":1718942,"option":"Condition 1: student.rollNumber == req.query.id\r\nCondition 2: studentFilter[0].result == \"PASS\"\r\nCondition 2: studentFilter[0].result == \"FAIL\"","correct":true}]},{"q":"<p>You have created a file in NodeJS named myapi.js implementing a RESTful API that returns JSON and uses Express back end framework.<br>\nThe API uses /myapi/ as one endpoint and has PORT = 1331 with your device as a localhost. You want to return the JSON data in the browser hence you create an HTML page with the necessary addons. For implementing it the HTML code is given below but a part is missing and labeled as X. The correct code replacing X is?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>&lt;html&gt;\n&lt;head&gt;\n   &lt;meta charset=\"UTF-8\"&gt;\n   &lt;title&gt;Myapi&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n   &lt;script&gt;\n      X\n   &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>","a":[{"id":1719043,"option":"get('http://localhost:1331/myapi/')\r\n  .then((response) => {\r\n    return response.json();\r\n  })\r\n  .then((json) => {\r\n    console.log(json);\r\n  });","correct":false},{"id":1719044,"option":"fetch('http://localhost:1331/myapi/')\r\n  .get((response) => {\r\n    return response.json();\r\n  })\r\n  .get((json) => {\r\n    console.log(json);\r\n  });","correct":false},{"id":1719045,"option":"fetch('http://localhost:1331/myapi/')\r\n  .then((response) => {\r\n    return response.json();\r\n  })\r\n  .then((json) => {\r\n    console.log(json);\r\n  });","correct":true},{"id":1719046,"option":"fetch('http://localhost:1331/myapi/')\r\n  .then((request) => {\r\n    return request.json();\r\n  })\r\n  .then((json) => {\r\n    console.log(json);\r\n  });","correct":false}]},{"q":"<p>Consider the following example API that returns JSON and uses Express back end framework. You are also using your device as a local host. For the code given below, what must be the correct HTTP request for getting the following JSON:</p>\n\n<pre class=\"prettyprint\"><code>{\n        \"message\": \"myapi abc\"\n}</code></pre>\n\n<p>myapi.js file has the following code:<br>\n<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>'use strict';\nconst\n        port = 1331,\n        express = require('express'),\n        app = express();\n\napp.get('/myapi/:name?', (req, res) =&gt;\n        res.json(\n                { message: `myapi ${req.params.name || 'xyz'}!` }\n        )\n);\n\n// start server\napp.listen(port, () =&gt;\n        console.log(`Server started on port ${port}`);\n);</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1719039,"option":"http://localhost:1331/myapi/","correct":false},{"id":1719040,"option":"http://:1331/myapi/","correct":false},{"id":1719041,"option":"http://localhost:1331/myapi/abc/","correct":true},{"id":1719042,"option":"http://:1331/myapi/","correct":false}]},{"q":"<p>You made the following HTTP request for your API created at port <em>1331</em>.<br>\n<em>http://localhost:1331/myapi/</em><br>\nBut you got the following message:<br>\n<strong>Message</strong>:<br>\n400 Bad Request<br>\nWhat does it mean?</p>","a":[{"id":1719035,"option":" that client-side input fails validation","correct":true},{"id":1719036,"option":" the user is authenticated, but it’s not allowed to access a resource","correct":false},{"id":1719037,"option":" that a resource is not found","correct":false},{"id":1719038,"option":"the user isn’t not authorized to access a resource","correct":false}]},{"q":"<p>Consider a Company XYZ that uses an Express Based framework and an API for database handling of its employee's information.<br>\nWe created routes like GET /employee/ for getting the employee details, DELETE /emplyee/ :id for deleting a given employee id.<br>\nHence the correct code for updating an employee with the given id must be.<br>\n<strong>Code</strong><br>\nI.</p>\n\n<pre class=\"prettyprint\"><code>app.post('/employee', (req, res) =&gt; {\n        // code to Update ...\n        res.json(req.body);\n});</code></pre>\n\n<p><br>\nII.</p>\n\n<pre class=\"prettyprint\"><code>app.put('/employee/:id', (req, res) =&gt; {\n        // code to Update ...\n        res.json(req.body);\n});</code></pre>\n\n<p><br>\nIII.</p>\n\n<pre class=\"prettyprint\"><code>app.put('/employee/id', (req, res) =&gt; {\n        // code to Update ...\n        res.json(req.body);\n});\n</code></pre>\n\n<p><br>\nIV.</p>\n\n<pre class=\"prettyprint\"><code>app.update('/employee/:id', (req, res) =&gt; {\n        // code to Update ...\n        res.json(req.body);\n});</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1719031,"option":"I","correct":false},{"id":1719032,"option":"II","correct":true},{"id":1719033,"option":"III","correct":false},{"id":1719034,"option":"IV","correct":false}]},{"q":"<p>Consider a Company XYZ that uses a REST API-based database for handling its employee's information.<br>\nThe database has the employee ID as the primary key. You want to fetch the data for the employee with ID = 100.<br>\nWhich of the following is NOT the correct syntax for implementing it?<br>\n<strong>Options</strong></p>\n\n<ol>\n\t<li>&nbsp;/user/100</li>\n\t<li>&nbsp;/user/id/100</li>\n\t<li>&nbsp;/user/?id=100</li>\n\t<li>&nbsp;/user/id=100</li>\n</ol>\n\n<p>&nbsp;</p>","a":[{"id":1719027,"option":"1","correct":false},{"id":1719028,"option":"2","correct":false},{"id":1719029,"option":"3","correct":false},{"id":1719030,"option":"4","correct":true}]},{"q":"<p>In CORS, you are about to send a preflight request with the OPTIONS method. You want to specify a request method that the original method would have, to the server and also want to specify the content-type headers for the actual request. Below is the snippet of the preflight request. What is the correct way of implementation, to fulfill the requirement?<br>\n<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>HTTP OPTIONS /student/subject/\nHost:\nAccept:\nAccept-Language:\nConnection:\nOrigin:</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1719023,"option":"Use Content-type and Allow in the request","correct":false},{"id":1719024,"option":"Use Request-Method and Request-Headers in the request","correct":false},{"id":1719025,"option":"Use Control-Request-Method and Control-Request-Headers in the request","correct":false},{"id":1719026,"option":"Use Access-Control-Request-Method and Access-Control-Request-Headers in the request","correct":true}]},{"q":"<p>In an application, you have designed several endpoints but just for validation purposes, you want to know the methods allowed for a particular URL. The endpoint URL is \"/store\". Which of the following methods would you use to achieve this?</p>","a":[{"id":1719015,"option":"PATCH","correct":false},{"id":1719016,"option":"GET","correct":false},{"id":1719017,"option":"OPTIONS","correct":true},{"id":1719018,"option":"TRACE","correct":false}]},{"q":"<p>You are developing an application and you decided to use patch requests for a couple of operations. Your request payload looks like the one given below and the pseudo endpoint design is shown in the snippet. What would be the outcome of the code present in both of the lines of code?<br>\n<br>\n<strong>Request</strong></p>\n\n<pre class=\"prettyprint\"><code>HTTP PATCH /students/23\n[{ \"op\": \"replace\", \"path\": \"/scores\", \"value\": \"420\" }\n{ \"op\": \"copy\", \"from\": \"/subject/physics\", \"path\": \"/subject/maths\"}]</code></pre>\n\n<p><br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>app.patch(\"/students/:rollNumber\", function(req,res){\n   if op is replace { lines of code 1}\n   else { lines of code 2}\n})</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1719011,"option":"Lines of code 1: create a new student and add the score attribute with 420, with roll number as 23.\r\n\r\nLines of code 2: copy the details of physics subject to the details of maths subject.","correct":false},{"id":1719012,"option":"Lines of code 1: replace the score attribute with 420, for the student with roll number as 23.\r\n\r\nLines of code 2: move the details of physics subject to the details of maths subject and removes the details of the physics subject.","correct":false},{"id":1719013,"option":"Lines of code 1: replace the score attribute with 420, for the student with roll number as 23.\r\n\r\nLines of code 2: copy the details of physics subject to the details of maths subject.","correct":true},{"id":1719014,"option":"Lines of code 1: create a new student with the score attribute as 420, with roll number as 23.\r\n\r\nLines of code 2: move the details of physics subject to the details of maths subject.","correct":false}]},{"q":"<p>In an application, you want to update the name of a candidate and decided to use a sample patch request. After the completion, you will deploy the project and you assumed that the code used in your application is supported by the browsers and frameworks, universally. Your sample patch request to update the email looks like the snippet given below. What would be the response to the request when your application is being used with a Tomcat or Django server?<br>\n<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>HTTP PATCH /candidates/153\n[\n// request payload\n]</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1719007,"option":"The candidate with ID as 153, will be updated with name specified in the payload.","correct":false},{"id":1719008,"option":"There might an error in some cases because not all the softwares support PATCH Request.","correct":true},{"id":1719009,"option":"The candidate with ID as 153, will be replaced by a new candidate with name specified in the payload.","correct":false},{"id":1719010,"option":"There would be an error because a Tomcat or Django server should never be used.","correct":false}]},{"q":"<p>You are storing the data about an entity. An attribute of that entity is changing frequently, What is the efficient type of request that should be used to update the data in this situation?</p>","a":[{"id":1719003,"option":"POST","correct":false},{"id":1719004,"option":"PUT","correct":false},{"id":1719005,"option":"PATCH","correct":true},{"id":1719006,"option":"DELETE","correct":false}]},{"q":"<p>For the code given below, it is known that the process in the loop is time consuming but would definitely terminate within 10 seconds. But you do not want to wait this long and wish to send the response prior to that. What is the appropriate status code that should be sent, for the arised situation?<br>\n<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>//code to parse the request\n//code to send the response\nwhile(condition){\n   //some time consuming process\n}\n//code to delete the resource</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1718999,"option":"206 - Partial content","correct":false},{"id":1719000,"option":"204 - No content","correct":false},{"id":1719001,"option":"200 - Ok","correct":false},{"id":1719002,"option":"202 - Accepted","correct":true}]},{"q":"<p>In an application, you are working with the data and you are sending a request without specifying the resource you are working on. You are not sending any parameter value. For which of the following pair of methods, it is an invalid way to do this?</p>","a":[{"id":1718991,"option":"Only PUT","correct":false},{"id":1718992,"option":"POST and PUT","correct":false},{"id":1718993,"option":"PUT and DELETE","correct":true},{"id":1718994,"option":"POST and DELETE","correct":false}]},{"q":"<p>In a web application, you are managing the data of the students. There exists a file on the server which contains the record of all the students currently enrolled and the endpoint to retrieve the file is \"/getStudents\". You want to check whether any alteration to the data has been done today or not. What would be the efficient way to do so?<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>app.get(\"/getStudents\",function(req, res){\n   //some code\n});\napp.head(\"/getStudents\",function(req, res){\n   //some code\n});\napp.get(\"/getStudent/:id\",function(req, res){\n   //some code\n});</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1718987,"option":"You can get individual students using GET request for the \"/getStudent\" endpoint, and compare the complete manaully.","correct":false},{"id":1718988,"option":"You can get all the students using GET request for the \"/getStudents\" endpoint, and compare the data using a loop.","correct":false},{"id":1718989,"option":"You can get all the students using HEAD request for the \"/getStudents\" endpoint, and compare the student data recieved.","correct":false},{"id":1718990,"option":"Send a head request to \"/getStudents\" and send another similar head request at the end of the day. Since, Head request is cacheable, you can now compare the last modified date and you get the knowledge about the same.","correct":true}]},{"q":"<p>In an application where you upload and download files, you are about to design the download functionality. But prior to that, you want to design an endpoint that could let you the know metainformation about a particular file identified by its unique ID and not result in any downloading. What is the correct way to design the endpoint?<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>var app = express();\n//endpoint here\napp.listen(8080);</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1718983,"option":"app.head(\"/getFile/:id\",function(req,res){\r\n// code for retrieving the meta information about the requested resource\r\nres.send(data);\r\n});","correct":true},{"id":1718984,"option":"app.get(\"/getFile/:id\",function(req,res){\r\n// code for retrieving the meta information about the requested resource\r\nres.send(data);\r\n});","correct":false},{"id":1718985,"option":"app.head(\"/getFile\",function(req,res){\r\n// code for retrieving the meta information about the requested resource\r\nres.send(data);\r\n});","correct":false},{"id":1718986,"option":"app.get(\"/getFile\",function(req,res){\r\n// code for retrieving the meta information about the requested resource\r\nres.send(data);\r\n});","correct":false}]},{"q":"<p>You used a command to check an endpoint with URL \"/item\" and ID =143. If the response includes connection, content-type, server, date only, what is the correct command for the scenario?</p>","a":[{"id":1718979,"option":"curl -X GET \"http://localhost:3000/item=143\"","correct":false},{"id":1718980,"option":"curl -X HEAD \"http://localhost:3000/item/143\"","correct":true},{"id":1718981,"option":"curl -X HEAD \"http://localhost:3000?item=143\"","correct":false},{"id":1718982,"option":"curl -X GET \"http://localhost:3000/item/143\"","correct":false}]},{"q":"<p>For the given code, which of the following command would have no side effects over the customer's list on repeating it over and over? (Customer ID exists from <em>100 -200</em>)<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>app.put('/customers/:id', function(req, res){\n  var updateIndex = customers.map(function(customer){\n    return customer.id;\n  }).indexOf(parseInt(req.params.id));\n  if(updateIndex === -1){\n    //code to add a new customer to customers list.\n    res.json({message: \"Customer created.\", location: \"/customers/\" + req.params.id});\n  } else {\n    // code to update the existing customer to the customers list\n    res.json({message: \"Customer's id \" + req.params.id + \" updated.\", location: \"/customers/\" + req.params.id});\n  }\n});</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1718971,"option":"curl -X PUT -data \"name = Joy%20Aniston http://localhost:3000/101","correct":false},{"id":1718972,"option":"curl -X POST --data \"name = Joy%20Aniston http://localhost:3000/customer/101","correct":false},{"id":1718973,"option":"curl -X PATCH --data \"name = Joy%20Aniston http://localhost:3000/101","correct":false},{"id":1718974,"option":"curl -X PUT --data \"name = Joy%20Aniston http://localhost:3000/customers/101","correct":true}]},{"q":"<p>You are using the put method and have written a code as shown in the given snippet. What is the correct choice that is suitable for line <em>1</em> and line <em>2</em>, so as to maintain the principle of the PUT method?<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>app.put('/items/:id', function(req, res){\n  var updateIndex = items.map(function(item){\n    return items.id;\n  }).indexOf(parseInt(req.params.id));\n  if(updateIndex === -1){\n    //line 1\n  } else {\n    //line 2\n  }\n});</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1718967,"option":"Line 1: \r\nitems.push({\r\nid: req.params.id,\r\nname: req.body.name\r\n});\r\nres.json({message: \"New item created.\", location: \"/items/\" + req.params.id});\r\n\r\nLine 2: \r\nitems[updateIndex] = {\r\nid: req.params.id,\r\nname: req.body.name\r\n};\r\nres.json({message: \"Item id \" + req.params.id + \" updated.\", location: \"/items/\" + req.params.id});","correct":true},{"id":1718968,"option":"Line 1: \r\nitems[updateIndex] = {\r\nid: req.params.id,\r\nname: req.body.name\r\n};\r\nres.json({message: \"Item id \" + req.params.id + \" updated.\", location: \"/items/\" + req.params.id});\r\n\r\nLine 2: \r\nitems.push({\r\nid: req.params.id,\r\nname: req.body.name\r\n});\r\nres.json({message: \"New item created.\", location: \"/items/\" + req.params.id});","correct":false},{"id":1718969,"option":"Line 1: \r\nitems[updateIndex] = {\r\nid: req.params.id,\r\nname: req.body.name\r\n};\r\nres.json({message: \"New item created.\", location: \"/items/\" + req.params.id});\r\n\r\nLine 2: \r\nitems.push({\r\nid: req.params.id,\r\nname: req.body.name\r\n});\r\nres.json({message: \"New item created.\", location: \"/items/\" + req.params.id});","correct":false},{"id":1718970,"option":"Line 1: \r\nitems.push({\r\nid: req.params.id,\r\nname: req.body.name\r\n});\r\nres.json({message: \"Item id \" + req.params.id + \" updated.\", location: \"/items/\" + req.params.id});\r\n\r\nLine 2: \r\nitems[updateIndex] = {\r\nid: req.params.id,\r\nname: req.body.name\r\n};\r\nres.json({message: \"Item id \" + req.params.id + \" updated.\", location: \"/items/\" + req.params.id});","correct":false}]},{"q":"<p>As part of the requirement, you have to send a request for the particular endpoint in a loop. Which of the following method would you use, so that each time the request is sent, there is no successive effect each time?</p>","a":[{"id":1718959,"option":"GET","correct":false},{"id":1718960,"option":"POST","correct":false},{"id":1718961,"option":"PUT","correct":true},{"id":1718962,"option":"DELETE","correct":false}]},{"q":"<p>Being a developer, you wish to perform a validation whenever a request arrives for the route or sub-routes as \"items\". You want to validate if the request body contains a key attribute or not. If the key attribute is not found, a 404 error code along with the error message should be sent. And if the key is present, then only the site should be stored. Which choice is most suitable to fulfill the condition?<br>\n<br>\n<strong>Code</strong>:</p>\n\n<pre class=\"prettyprint\"><code>var express = require('express');\nvar app = express();\n\napp.post('/items', function(req, res){\n   //code to store the item.\n});\napp.listen(3000);</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1718955,"option":"app.use(function(req, res, next){\r\nif(req.body.key!=NULL) next();\r\nelse{\r\nres.status(404);\r\nres.json({message:\"Not Found\"});\r\n}\r\n});","correct":false},{"id":1718956,"option":"app.get('/items', function(req, res, next){\r\nif(req.body.key!=NULL) next();\r\nelse{\r\nres.status(404);\r\nres.json({message:\"Not Found\"});\r\n}\r\n});","correct":false},{"id":1718957,"option":"app.use('/items', function(req, res, next){\r\nif(!req.body.key) next();\r\nelse{\r\nres.status(404);\r\nres.json({message:\"Not Found\"});\r\n}\r\n});","correct":false},{"id":1718958,"option":"app.use('/items', function(req, res, next){\r\nif(req.body.key!=NULL) next();\r\nelse{\r\nres.status(404);\r\nres.json({message:\"Not Found\"});\r\n}\r\n});","correct":true}]},{"q":"<p>You have designed a Web-based Customer Management System. This system store retrieves and manipulates the data as per requirement. You are asked to add a customer to the application. The customer has only \"name\" attribute and is passed through the request body. The route for the act should be \"/addCustomer\". What is the correct choice that fills up the missing code, accurately?<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>var express=require('express');\nvar app=express();\n//missing code\napp.listen(3000);</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1718951,"option":"app.post(\"/addCustomer\",function(req,res){\r\nvar newId = customers[customers.length-1].id+1;\r\ncustomers.push({\r\n\tid: newId,\r\n\tname: req.body.name\r\n});\r\nres.json({message: \"New Customer Added.\", location: \"/addCustomer/\" + newId});\r\n});","correct":true},{"id":1718952,"option":"app.get(\"/addCustomer\",function(req,res){\r\nvar newId = customers[customers.length-1].id+1;\r\ncustomers.push({\r\n\tid: newId,\r\n\tname: req.body.name\r\n});\r\nres.json({message: \"New Customer Added.\", location: \"/addCustomer/\" + newId});\r\n});","correct":false},{"id":1718953,"option":"app.post(\"/addCustomer\",function(req,res){\r\nvar newId = customers[customers.length-1].id+1;\r\ncustomers.push({\r\n\tid: newId,\r\n\tname: req.query.name\r\n});\r\nres.json({message: \"New Customer Added.\", location: \"/addCustomer/\" + newId});\r\n});","correct":false},{"id":1718954,"option":"app.get(\"/addCustomer\",function(req,res){\r\nvar newId = customers[customers.length-1].id+1;\r\ncustomers.push({\r\n\tid: newId,\r\n\tname: req.param.name\r\n});\r\nres.json({message: \"New Customer Added.\", location: \"/\" + newId});\r\n});","correct":false}]},{"q":"<p>You have hosted a web application locally on port 8000. You have decided to display the text field for the name of the user. As soon as he fills up the name and hits a button, your wish is to display the following message on the server end. The body of the request to the endpoint contains the name of the user. What is the suitable endpoint to achieve that?<br>\n<strong>Message</strong>: New user:<br>\n<strong>URL</strong>: http://localhost:8000/home<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>var express = require('express');\nvar router = express.Router();\n\n//missing code</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1718947,"option":"router.post(\"/\",function(req,res){\r\nconsole(\"New user:\",req.body.name);\r\n});","correct":false},{"id":1718948,"option":"router.get(\"/home\",function(req,res){\r\nconsole(\"New user:\",req.body.name);\r\n});","correct":false},{"id":1718949,"option":"router.post(\"/home\",function(req,res){\r\nconsole(\"New user:\",req.body.name);\r\n});","correct":true},{"id":1718950,"option":"router.get(\"/\",function(req,res){\r\nconsole(\"New user:\",req.body.name);\r\n});","correct":false}]},{"q":"<p>You are developing a RESTful Web Service, and you want to validate the request data before the endpoint processing starts. Also, you have to restrict it to the URL for a specific route that starts with \"/students\". You have all the necessary code written. What would be the correct match for missing code to implement the same.<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>var express = require('express');\nvar app = express();\n//missing code\napp.get('/students', function(req, res){\n   // some code\n});\napp.listen(3000);</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1718919,"option":"app.get('/students', function(req, res, next){\r\n   console.log(\"Date\" + Date.now());\r\n   next();\r\n});","correct":false},{"id":1718920,"option":"app.use('/', function(req, res, next){\r\n   console.log(\"Date\" + Date.now());\r\n   next();\r\n});","correct":false},{"id":1718921,"option":"app.use('/students', function(req, res, next){\r\n   console.log(\"Date\" + Date.now());\r\n   next();\r\n});","correct":true},{"id":1718922,"option":"app.get('/', function(req, res, next){\r\n   console.log(\"Date\" + Date.now());\r\n   next();\r\n});","correct":false}]},{"q":"<p>You are hosting a web service on port 3000 and decided to use dynamic routes. Dynamic routes would allow you to pass the parameter and process them. Now, you have to complete the missing code, in order to design an endpoint for dynamic routes and send the parameters back in the response.<br>\n<br>\n<strong>URL</strong>: http://localhost:3000/getStudents/1/physics<br>\n<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>var express = require('express');\nvar app = express();\n\n//Missing Code\n\napp.listen(3000);</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1718935,"option":"app.get('/getStudents/:id/:name', function(req, res) {\r\n   res.send('id: ' + req.query.id + ' and name: ' + req.query.name);\r\n});","correct":false},{"id":1718936,"option":"app.get('/:id/:name', function(req, res) {\r\n   res.send('id: ' + req.params.id + ' and name: ' + req.params.name);\r\n});","correct":false},{"id":1718937,"option":"app.get('/getStudents/:id/:name', function(req, res) {\r\n   res.send('id: ' + req.params.id + ' and name: ' + req.params.name);\r\n});","correct":true},{"id":1718938,"option":"app.get('/:id/:name', function(req, res) {\r\n   res.send('id: ' + req.query.id + ' and name: ' + req.query.name);\r\n});","correct":false}]},{"q":"<p>You are hosting a web service locally on PORT 3000. The endpoint code snippet is given below. What would be the response, if you check the endpoint using the following command.<br>\n<em>Command</em>: curl -i -H \"Accept: application/json\" -H \"Content-Type: application/json\" -X GET localhost:3000/movie/1<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>var movies = [\n   {\"id\":1,\"name\":\"ABC\"}\n   //more movies\n];\nrouter.get('movies/:id', function(req, res){\n   var movieFilter = movies.filter(function(movie){\n      if(movie.id == req.params.id){return true;}\n   });\n   if(movieFilter.length == 1){\n      res.json(movieFilter[0])\n   }else {\n      res.status(404);\n      res.json({message: \"Not Found\"});\n   }\n});</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1718931,"option":"Not Found","correct":false},{"id":1718932,"option":"ABC","correct":false},{"id":1718933,"option":"{\"id\":1, \"name\": \"ABC\"}","correct":false},{"id":1718934,"option":"cannot GET Error","correct":true}]},{"q":"<p>You are in situation where you want to retrieve the complete list of courses provided by an institute. You have used the below-specified URL, what should be the missing code snippet for the endpoint for the request.<br>\n<em>URL</em>: http://localhost:3000/getCourses<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>var express = require('express');\nvar app = express();\nconst courses = [.. details about courses];\n\n//missing code\n\napp.listen(3000)</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1718927,"option":"app.get(\"/getCourses\", (req, res)=>{\r\nres.send(courses);\r\n};)","correct":true},{"id":1718928,"option":"app.get(\"/\", (req, res)=>{\r\nres.send(courses);\r\n};)","correct":false},{"id":1718929,"option":"app.get(\"/getCourses\", (req, res)=>{\r\nres.SetSendData(courses);\r\n};)","correct":false},{"id":1718930,"option":"app.get(\"/\", (req, res)=>{\r\nres.SetSendData(courses);\r\n};)","correct":false}]},{"q":"<p>You are hosting a server at PORT 3000 and you are using middlewares for some reason. You saw this code and you are asked the order in which the output would be printed on the console. What would be the correct order of the execution of the given code?<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>var express = require('express');\nvar app = express();\napp.use(function(req, res, next){\n            console.log(\"Hey! My name is Kat.\");\n            next();\n});\napp.get('/', function(req, res, next){\n            res.send(\"Heya! My name is Ken.\");\n            next();\n});\napp.use('/', function(req, res){\n            console.log('Hello! My name is kevin.');\n});\napp.listen(3000);</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1718923,"option":"Hey! My name is Kat.\r\nHeya! My name is Ken.\r\nHello! My name is Kevin.","correct":false},{"id":1718924,"option":"Hey! My name is Kat.\r\nHello! My name is Kevin.","correct":true},{"id":1718925,"option":"Hello! My name is Kevin.\r\nHey! My name is Kat.","correct":false},{"id":1718926,"option":"Heya! My name is Ken.\r\nHey! My name is Kat.\r\nHello! My name is Kevin.","correct":false}]},{"q":"<p>You are developing a RESTful web service that is hosted on port 8080. You have designed an endpoint that sends \"Some message\" as the response. The following code is used for implementing the same. What would be the error, if the following URL is hit for the endpoint?<br>\n<em>URL:</em> http://localhost:8080/Home<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>app.get(\"/home\",(res,req)=&gt;{\n   res.send(\"Some message\")\n};)\napp.listen(8080);</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1718911,"option":"No error.","correct":false},{"id":1718912,"option":"Internal Server Error","correct":false},{"id":1718913,"option":"Not Found","correct":true},{"id":1718914,"option":"Forbidden Access","correct":false}]},{"q":"<p>You are hosting your web services on port 8080. Your web service contains a list of subjects, identified by its id. You have to design an endpoint that would return the subject corresponding to the id received.</p>\n\n<p>And 404: not found status if the subject is not found. You need to complete condition 1, condition 2, and line 1.<br>\n<br>\n<strong>Code</strong>:</p>\n\n<pre class=\"prettyprint\"><code>const subjects: [\n   {\"id\":1,\"name\":\"English\"}\n   // more subjects\n]\nrouter.get(\"/:id\",function(req, res){\n   var subjectFilter = subjects.filter(function(subject){\n   if(//condition 1){ return true; }\n   });\n   if(//condition 2) { res.json(subjectFilter[0])}\n   else {\n   // line 1\n   }\n});\napp.listen(8080)</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1718907,"option":"condition 1: subject.id==req.query.id\r\ncondition 2: subjectFilter.length==1\r\nline 1: res.status(404); res.json({message: \"Not Found\"});","correct":false},{"id":1718908,"option":"condition 1: subject.id==req.params.id\r\ncondition 2: subjectFilter.length==1\r\nline 1: res.status(404); res.json({message: \"Not Found\"});","correct":true},{"id":1718909,"option":"condition 1: subject.id==req.params.id\r\ncondition 2: subjectFilter==1\r\nline 1: res.status(404); res.json({message: \"Not Found\"});","correct":false},{"id":1718910,"option":"condition 1: subject.id==req.query.id\r\ncondition 2: subjectFilter==1\r\nline 1: res.json({message: \"Not Found\"});","correct":false}]},{"q":"<p>You are developing a RESTful web service that is hosted on port 8080. You have designed an endpoint that sends \"Welcome to my Service\" as the response. The following code is used for implementing the same. What would be the response, if the following URL is hit for the endpoint?<br>\nURL: http://localhost:3000/Welcome<br>\n<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>app.get(\"/welcome\",(res,req)=&gt;{\n   res.send(\"Welcome to my Service\")\n};)\napp.listen(8080);</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1718903,"option":"Error 503: Service unavailable","correct":true},{"id":1718904,"option":"Error 404: Not Found","correct":false},{"id":1718905,"option":"Welcome to my Service","correct":false},{"id":1718906,"option":"Error 500: Internal Server Error","correct":false}]},{"q":"<p>In your RESTful API web service, due to some reasons, you want to parse your URL so that you can get all the query, hostname, port, params and path. This would help in debugging and would help in processing the URL faster and easier. Which of the following line of code will do this?<br>\n<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>const rawURL: http://localhost:3000/getRecords?page4&amp;limit=5\nconst url = require('url');\nlet parsedURL= //line 1\nconsole.log(parsedURL);</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1718899,"option":"let parsedURL = rawURL.query;","correct":false},{"id":1718900,"option":"let parsedURL = rawURL.parse();","correct":false},{"id":1718901,"option":"let parsedURL = parser(rawURL);","correct":false},{"id":1718902,"option":"let parsedURL = url.parse(rawURL);","correct":true}]},{"q":"<p>You are developing web services for student management systems and hosting them on PORT 3000, locally. For the same, you will have to create an endpoint for storing the FirstName and LastName of the students. All the other necessary codes have been completed. You just have to complete the code of lines <em>1</em> and <em>2</em>.<br>\n<br>\nThe URL/endpoint would be: <u>http://localhost:3000/saveName?FirstName=Ken&amp;SecondName=Adams</u><br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>const save=(req, res) =&gt;{\n   var FirstName = //line 1\n   var LastName = //line 2\n   console.log(FirstName,LastName);\n};</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1718895,"option":"var FirstName = req.getFirstName();\r\nvar LastName = req.getLastName();","correct":false},{"id":1718896,"option":"var FirstName = req.FirstName;\r\nvar LastName = req.LastName;","correct":false},{"id":1718897,"option":"var FirstName = req.query.FirstName;\r\nvar LastName = req.query.LastName;","correct":true},{"id":1718898,"option":"var FirstName = req.query.get(FirstName);\r\nvar LastName = req.query.get(LastName);","correct":false}]},{"q":"<p>You are working on an application and your server is listening on port 8080 locally. You want to accept text/html on your server but you would send application/json as a response. You have completed the code and now you want to test if everything is working fine or not. What would you type in your terminal to check things.<br>\n<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>const work=(req,res)=&gt;{\n   //some code\n   res.type('json');\n};\napp.listen(8080,work)</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1718891,"option":"curl -i -H \"Accept: application/json\" -H \"Content-Type: text/html\" -X GET \r\nlocalhost:8080/","correct":true},{"id":1718892,"option":"curl -i -H \"Accept: test/html\" -H \"Content-Type: text/html\" -X GET \r\nlocalhost:8080/","correct":false},{"id":1718893,"option":"curl -i -H \"Accept: application/json\" -H \"Content-Type: application/json\" -X GET \r\nlocalhost:8080/","correct":false},{"id":1718894,"option":"curl -i -H \"Accept: test/html\" -H \"Content-Type: application/json\" -X GET \r\nlocalhost:8080/","correct":false}]},{"q":"<p>You have developed a RESTful API application. The work is in progress, but due to some reasons, you want to check whether the request is arriving in a course of <em>4</em> minutes or not. And if no request arrives in <em>4</em> minutes, you wish to shut down the server.<br>\nWhich line of code you will replace with what piece of code, to get the above things done?<br>\n<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>//line 1\nconst app = express();\n//line 2\nconst server=app.listen(3000);\n//line 3</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1718887,"option":"Replace line 2 with server.setTimeout=4;","correct":false},{"id":1718888,"option":"Replace line 3 with app.setTimeout=24000","correct":false},{"id":1718889,"option":"Replace line 3 with server.timeout=240000","correct":true},{"id":1718890,"option":"replace line 1 with app.timeout=24000","correct":false}]},{"q":"<p>You are single-handedly developing an application and want to load up some files as soon as the server starts. You have completed the code for loading up the files but you need to figure out where to implement that, to achieve the goal.<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>const startup=()=&gt;{\n//some code to load the files\n};</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1718883,"option":"app.get(\"/\",startup)","correct":false},{"id":1718884,"option":"app.listen(3000,startup)","correct":true},{"id":1718885,"option":"app.post(\"/\",startup)","correct":false},{"id":1718886,"option":"app.listen(3000)\r\napp.get(\"/startup\")","correct":false}]},{"q":"<p>You have used the PORT 3000 for hosting your server locally using the express js server. You are developing a website but till now the content is not finalized. You want to print \"COMING SOON!\" without quotes. What should be the correct API structure on the server to make this happen?<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>var express = require('express');\nvar app = express();\n//missing code\napp.listen(3000)</code></pre>\n\n<p><strong>Note:</strong>&nbsp;<em>You have http://localhost:3000/ as the URL endpoint.</em></p>","a":[{"id":1718879,"option":"app.get(\"/\",(req,res)=>{\r\nres.send(\"COMING SOON!\");\r\n};)","correct":true},{"id":1718880,"option":"app.get(\"/\",(req,res)=>{\r\nres.send(COMING SOON!);\r\n};)","correct":false},{"id":1718881,"option":"app.post(\"/\",(req,res)=>{\r\nres.send(\"COMING SOON!\");\r\n};)","correct":false},{"id":1718882,"option":"app.get(\":3000/\",(req,res)=>{\r\nres.send(COMING SOON!);\r\n};)","correct":false}]},{"q":"<p>Bob is developing a full-stack web application using Spring Boot. When Bob integrates the frontend with the backend and sends some HTTP requests from the frontend to fetch data from the backend API he gets a forbidden error. Which of the following can be the possibilities of causing this error in this scenario:</p>\n\n<ol>\n\t<li>Check for CORS if @CrossOrigin annotation to his controller.</li>\n\t<li>By disabling csrf Protection</li>\n\t<li>Invalid token</li>\n</ol>","a":[{"id":1473866,"option":"1 and 2","correct":false},{"id":1473867,"option":"2 and 3","correct":false},{"id":1473868,"option":"1 and 3","correct":true},{"id":1473869,"option":"All of these","correct":false}]},{"q":"<p>You are working on REST API. Instead of requesting the server for similar resources client stores, the response received from the server. In REST API architecture what do we call this principle and what are the other principles of REST API architecture?</p>\n\n<p> </p>\n\n<p><strong>Principles</strong></p>\n\n<ol>\n\t<li>Stateless<br>\n\t </li>\n\t<li>Uniform Interface<br>\n\t </li>\n\t<li>Layered System<br>\n\t </li>\n\t<li>Cacheable<br>\n\t </li>\n\t<li>Stateful</li>\n</ol>","a":[{"id":1565621,"option":"2, 3, 4 and 5","correct":false},{"id":1565622,"option":"3, 4 and 5","correct":false},{"id":1565623,"option":"1, 2, 3 and 4","correct":true},{"id":1565624,"option":"1, 3 and 4","correct":false}]},{"q":"<p>You are working on Spring and you have created a REST controller. Consider the code given below. Which of the following statement is correct?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>@RestController\n@RequestMapping(\"student-data\")\npublic class student_controller \n{\n    \n    @GetMapping(\"/{roll_no}\")\n    public Student getStudent_data(@PathVariable int roll_no) \n    {\n        return getStudentbyroll_no(roll_no);\n    }\n\n    private Student getStudentbyroll_no(int roll_no) \n    {\n        // some code\n    }\n}</code></pre>\n\n<p> </p>\n\n<p><strong>Statements:</strong></p>\n\n<ol>\n\t<li><strong>GET</strong> operation does not modify the resource at the server<br>\n\t </li>\n\t<li><strong>GET </strong>is not an idempotent operation.<br>\n\t </li>\n\t<li>The response format of the <strong>getStudent_data </strong>method is JSON.</li>\n</ol>","a":[{"id":1565557,"option":"1 and 2","correct":false},{"id":1565558,"option":"2 and 3","correct":false},{"id":1565559,"option":"1 and 3","correct":true},{"id":1565560,"option":"All of these","correct":false}]},{"q":"<p>You are working on Spring and you have created a REST controller. Now consider the code given below. Which of the following statements is correct?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>@RestController\n@RequestMapping(\"/hackerearth\")\nclass Hackerearth_controller \n{\n  @RequestMapping(method = RequestMethod.GET)\n  String hack_method1()\n  {\n    return \"hack_method1\";                  \n  }\n  @RequestMapping(method = RequestMethod.DELETE)\n  String hack_method2()\n  {\n    return \"hack_method2\";\n  }\n  @RequestMapping(method = RequestMethod.POST)\n  String hack_method3()\n  {\n    return \"hack_method3\";\n  }\n  @RequestMapping(method = RequestMethod.PUT)\n  String hack_method4()\n  {\n    return \"hack_method4\";\n  }\n}</code></pre>\n\n<p> </p>\n\n<p><strong>Statements:</strong></p>\n\n<ol>\n\t<li>The RequestMethod HEAD is an unsafe operation<br>\n\t </li>\n\t<li>The RequestMethod PUT is an idempotent operation<br>\n\t </li>\n\t<li>The <strong>@RequestMapping</strong> annotation is used to map requests to the controller methods.</li>\n</ol>","a":[{"id":1565193,"option":"1 and 2","correct":false},{"id":1565194,"option":"2 and 3","correct":true},{"id":1565195,"option":"1 and 3","correct":false},{"id":1565196,"option":"All of these","correct":false}]},{"q":"<p>In Spring you have a class named <strong>Student</strong> and you have created a REST controller to fetch details of a student from the student database. Now if you have implemented the code given below then which of the following statements is correct?<br>\n<br>\n<em><strong>Note</strong>: </em>Assume http://localhost:8080/ as the host URL.<br>\n </p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>@RestController\n@RequestMapping(\"student-data\")\npublic class student_controller \n{\n    \n    @GetMapping(\"/{roll_no}\", produces = \"application/json\")\n    public Student getStudent_data(@PathVariable int roll_no) \n    {\n        return getStudentbyroll_no(roll_no);\n    }\n\n    private Student getStudentbyroll_no(int roll_no) \n    {\n        // some code\n    }\n}</code></pre>\n\n<p><br>\n </p>\n\n<p><strong>Statements:</strong></p>\n\n<ol>\n\t<li>The method <strong>getStudent_data</strong> returns data in JSON format.<br>\n\t </li>\n\t<li>The method <strong>getStudent_data</strong> requires the annotation <strong>@ResponseBody.</strong><br>\n\t </li>\n\t<li>The objects returned by the <strong>getStudent_data</strong> method are serialized into HttpResponse.<br>\n\t </li>\n\t<li>The  URI for the mapping in the given code can be -  <strong>http://localhost:8080/student-data/{roll_no}</strong></li>\n</ol>","a":[{"id":1565125,"option":"1, 2 and 3","correct":false},{"id":1565126,"option":"1, 3 and 4","correct":true},{"id":1565127,"option":"1 and 4","correct":false},{"id":1565128,"option":"All of these","correct":false}]},{"q":"<p>Consider you are working on Apple's REST API. Apple determines whether a user is a real person or not by using the following mechanisms</p>\n\n<p><strong>Mechanisms</strong></p>\n\n<ol>\n\t<li>ASUserDetectionStatus.likelyReal</li>\n\t<li>ASUserDetectionStatus.unknown</li>\n\t<li>ASUserDetectionStatus.unsupported</li>\n</ol>\n\n<p>Consider the following definitions about the Mechanisms.</p>\n\n<p><strong>Definitions</strong></p>\n\n<p><strong>a.</strong> The system hasn’t determined whether the user might be a real person. </p>\n\n<p><strong>b. </strong>The user appears to be a real person.</p>\n\n<p><strong>c. </strong>The system can’t determine this user’s status as a real person.</p>\n\n<p> </p>\n\n<p>Which of the following options are correct on matching Mechanisma with their correct definitions.</p>\n\n<p> </p>\n\n<p> </p>","a":[{"id":1566049,"option":"1-a, 2-b, 3-c","correct":false},{"id":1566050,"option":"1-a, 2-c, 3-b","correct":false},{"id":1566051,"option":"1-b, 2-a, 3-c","correct":true},{"id":1566052,"option":"1-c, 2-b, 3-a","correct":false}]},{"q":"<p>Mike is working on an iOS project for which he wants to work on Apple REST API to generate and validate the identity tokens used to verify a user’s identity. If he is received with an object named TokenResponse on a successful request, then which of the following statements about the properties of this object are correct:</p>\n\n<p><strong>Statements</strong></p>\n\n<ol>\n\t<li>The property <strong>id_token</strong> is an XML Web Token (XWT) that contains the user’s identity information.</li>\n\t<li>The property <strong>refresh_token</strong> is used to regenerate new access tokens. </li>\n\t<li>The property <strong>access_token</strong> represents a token used to access allowed data, such as generating and exchanging transfer identifiers during user migration.</li>\n</ol>","a":[{"id":1571975,"option":"1 and 2","correct":false},{"id":1571976,"option":"2 and 3","correct":true},{"id":1571977,"option":"1 and 3","correct":false},{"id":1571978,"option":"All of these","correct":false}]},{"q":"<p>Ben designed a website that is used for various food delivery operations from various restaurants. He wants to implement various RESTful web services to perform various functions for the website. Now, which of the following security measures that he must follow while designing this RESTful web service in this scenario:</p>\n\n<p><strong>Security measures</strong></p>\n\n<ol>\n\t<li>All inputs on the server should be validated and the server should be protected against SQL or NoSQL injection attacks.</li>\n\t<li>Always use username, password, or session token in a URL, these values should be passed to Web Service via the POST method.</li>\n\t<li>Allow restricted use of methods like GET, POST, and DELETE methods. The GET method should not be able to delete data.</li>\n\t<li>A web service method should use HTTP error messages like 403 to show access forbidden, etc.</li>\n</ol>","a":[{"id":1566668,"option":"1, 2, and 3","correct":false},{"id":1566669,"option":"2, 3, and 4","correct":false},{"id":1566670,"option":"1, 2, and 4","correct":true},{"id":1566671,"option":"1, 3, and 4","correct":false}]},{"q":"<p>Alice is working for a library. She has developed RESTful Web Services for that library to perform various tasks such as getting the different catalog entries, returning the issued book, or issuing a new book available in the library. One day, Bob tried to delete the available list of books from the books API. Now, the librarian wants the RESTful Web Services that is constructed around his library operations to be secured such that only he has access to make changes in the API of the library. Alice has secured the API information by implementing HTTPS in it. If she has implemented a Secure Socket Layer (SSL) in this procedure, which of the following statements represent the advantages of using this protocol in this scenario:</p>\n\n<p><strong>Statements</strong></p>\n\n<ol>\n\t<li>The authentication credentials can be simplified to a randomly generated access token.</li>\n\t<li>The server will compare the current timestamp to the request timestamp and only accept the request within a reasonable timeframe.</li>\n\t<li>The token is delivered in the username field of HTTP Basic Auth.</li>\n</ol>","a":[{"id":1566664,"option":"1 and 2","correct":false},{"id":1566665,"option":"2 and 3","correct":false},{"id":1566666,"option":"1 and 3","correct":true},{"id":1566667,"option":"All of these","correct":false}]},{"q":"<p>In Databricks, you are working on the authentication using Databricks personal access tokens in SQL Analytics. If you are required to use a personal access token to access the Databricks REST API, which of the following bash commands is used pass the token to the Bearer Authentication:<br>\n<strong>Bash commands</strong><br>\n1.</p>\n\n<pre class=\"prettyprint\"><code>curl -u : -X GET 'Authorization: Bearer ' https:///api/2.0/sql/endpoints/</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>curl -n -X GET 'Authorization: Bearer ' https:///api/2.0/sql/endpoints/get?id</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>curl -X GET -H 'Authorization: Bearer ' https:///api/2.0/sql/endpoints/</code></pre>\n\n<p> </p>","a":[{"id":1544629,"option":"1","correct":false},{"id":1544630,"option":"2","correct":false},{"id":1544631,"option":"3","correct":true},{"id":1544632,"option":"None of these","correct":false}]},{"q":"<p>In Databricks, you are working on the Alert access control in the Databricks SQL Analytics. You have invoked your methods on the following REST endpoint to manage the alert permissions by using an API. Now, if you are required to set the <strong>Can Manage</strong> permission to the user <strong>bob.smith@hackerearth.com</strong>, then which of the following Bash commands must be implemented to perform this action in this scenario:<br>\n<br>\n<strong>REST endpoint:</strong></p>\n\n<pre class=\"prettyprint\"><code>/2.0/permissions/sql/alert/</code></pre>\n\n<p><br>\n<strong>Bash commands:</strong><br>\n1.</p>\n\n<pre class=\"prettyprint\"><code>git -m 'REST:' https:///api/2.0/permissions/sql/alert/ -X PATCH -d '{ \"access_control_list\" : [ { \"user_name\": bob.smith@hackerearth.com\", \"permission_level\": \"CAN_MANAGE\" } ] }'</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>curl -m 'REST:' https:///api/2.0/access_controls/sql/alert/code -M user -d '{ \"access_control_list\" : [ { \"user_name\": bob.smith@hackerearth.com\", \"permission_level\": \"CAN_MANAGE\" } ] }'</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>git -m 'REST:' https:///api/2.0/access_controls/sql/alert/code -M user -d '{ \"access_control_list\" : [ { \"user_name\": bob.smith@hackerearth.com\"}]}'</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>curl -u 'token:' https:///api/2.0/permissions/sql/alert/ -X PATCH -d '{ \"access_control_list\" : [ { \"user_name\": bob.smith@hackerearth.com\", \"permission_level\": \"CAN_MANAGE\" } ] }'</code></pre>\n\n<p> </p>","a":[{"id":1544705,"option":"1","correct":false},{"id":1544706,"option":"2","correct":false},{"id":1544707,"option":"3","correct":false},{"id":1544708,"option":"4","correct":true}]},{"q":"<p>You have made a GET request to retrieve a list of inventory sources as:</p>\n\n<pre class=\"prettyprint\"><code>GET /api/v1/inventory_sources/ HTTP 200 OK Content-Type: application/json Vary: Accept Allow: GET, HEAD, OPTIONS X-API-Time: 0.053s</code></pre>\n\n<p>What will the resulting data structure contain?</p>","a":[{"id":1534492,"option":"{\"count\": 100, \"next\": uri, \"previous\": null, \"results\": [] }","correct":false},{"id":1534493,"option":"{\"count\": 100, “source”:ec2 \"previous\": null, \"results\": [] }","correct":false},{"id":1534494,"option":"{\"count\": 99, \"next\": null, \"previous\": null, \"results\": [] }","correct":true},{"id":1534495,"option":"{\"count\": 99, “api”: GET, “next”: null, \"previous\": null, \"results\": [] }","correct":false}]},{"q":"<p>uri is an ansible module that is used to send any kind of HTTP request. You are using ansible modules for interacting directly with rabbitmq but, you are not having ssh daemon in the docker container for Ansible to connect to. How would you use the rabbitmq docker container and explore the API?</p>","a":[{"id":1534488,"option":"docker run -d --name rabbitmq-mgmt1 --m json.tool rabbitmq:3.6-management-alpine","correct":false},{"id":1534489,"option":"rabbitmq-api-playbook.yml docker run","correct":false},{"id":1534490,"option":"docker run -d --name rabbitmq-mgmt1 -p 127.0.0.1:15672:15672 rabbitmq:3.6-management-alpine","correct":true},{"id":1534491,"option":"rabbitmq-api-playbook.yml docker run -p 127.0.0.1:15672:15672 rabbitmq:","correct":false}]},{"q":"<p>You have queried on a Tower server name. What would you do in a “query_set” system to filter out the results to get the groups which has the word “vc” in its name?</p>","a":[{"id":1534484,"option":"Write ?name=vc","correct":true},{"id":1534485,"option":"Write ?name__contains=vc","correct":false},{"id":1534486,"option":"Use the query selector to implement the functionality","correct":false},{"id":1534487,"option":"Write ?contains_in=vc","correct":false}]},{"q":"<p>You are visiting</p>\n\n<pre class=\"prettyprint\"><code> http:///api/v1/model_verbose_name_plural for returning {{ model_verbose_name_plural }}</code></pre>\n\n<p>.However, you want to check them in ascending order while making a GET request. What would you do to get the required page?</p>","a":[{"id":1534480,"option":"Configure the model_verbose_model by specifying query_order=ASC","correct":false},{"id":1534481,"option":"Visit http://<Tower server name>/api/v1/model_verbose_name_plural?order_by=-{{ order_field }}","correct":false},{"id":1534482,"option":"Configure the model_verbose_model by ASC keyword.","correct":false},{"id":1534483,"option":"Visit http://<Tower server name>/api/v1/model_verbose_name_plural?order_by={{ order_field }}","correct":true}]},{"q":"<p>You want to check out the Ansible Tower REST API in your computer browser to access the resources by URI path. What would you visit?</p>","a":[{"id":1534476,"option":"http://<Tower server name>/resources/api/","correct":false},{"id":1534477,"option":"http://localhost/5000/resources/api/","correct":false},{"id":1534478,"option":"http://<Tower server name>/api/","correct":true},{"id":1534479,"option":"http://localhost/5000/<Tower server name>/api/","correct":false}]},{"q":"<p>Which of the following files would you use to configure your private key and certificate chain file that will be used for SSL client authentication?</p>","a":[{"id":1534472,"option":"client_key file","correct":false},{"id":1534473,"option":"client_cert file","correct":true},{"id":1534474,"option":"encode_key file","correct":false},{"id":1534475,"option":"client_path file","correct":false}]},{"q":"<p>The body parameter corresponds to the body of the http request/response for a webs service. What exact syntax would you use to convert a data structure into JSON?</p>","a":[{"id":1534468,"option":"body_format","correct":true},{"id":1534469,"option":"body_parameter","correct":false},{"id":1534470,"option":"attr","correct":false},{"id":1534471,"option":"json_convert","correct":false}]},{"q":"<p>What would you use to define a specific failure criteria for tasks?</p>","a":[{"id":1534464,"option":"try catch","correct":false},{"id":1534465,"option":"failed_when","correct":true},{"id":1534466,"option":"error try","correct":false},{"id":1534467,"option":"return try","correct":false}]},{"q":"<p>Which of the following methods will throw an IOException?</p>","a":[{"id":627782,"option":"addRequestProperty","correct":false},{"id":627783,"option":"getRequestProperties","correct":false},{"id":627784,"option":"setContentHandlerFactory","correct":false},{"id":627785,"option":"guessContentTypeFromStream","correct":true}]},{"q":"<p>What will be the return type of the following JAVA function:</p>\n\n<blockquote>\n<p>public _________ handleResponse(HttpResponse xxxxx) </p>\n</blockquote>","a":[{"id":626658,"option":"Int","correct":false},{"id":626659,"option":"Object","correct":false},{"id":626660,"option":"ResponseHandler","correct":false},{"id":626661,"option":"String","correct":true}]},{"q":"<p>In Java API, which of the following methods will throw <strong>ProtocolException</strong>?</p>","a":[{"id":628905,"option":"getResponseCode","correct":false},{"id":628906,"option":"getPermission","correct":false},{"id":628907,"option":"setRequestMethod","correct":true},{"id":628908,"option":"disconnect","correct":false}]},{"q":"<p>Which of these REST codes is represented by the following statement: </p>\n\n<blockquote>\n<p>A conflicting change has been detected during an attempt to modify a resource and any further information will be provided in the response body.</p>\n</blockquote>","a":[{"id":626870,"option":"401","correct":false},{"id":626871,"option":"201","correct":false},{"id":626872,"option":"409","correct":true},{"id":626873,"option":"204","correct":false}]},{"q":"<p>Which of these types of REST methods is explained by the following statement: </p>\n\n<pre class=\"prettyprint\"><code>Sending ..... request to URL :  https://selfsolve.apple.com/wcResults.do\nParameters : sn=C02G8416DRJM&amp;cn=&amp;locale=&amp;caller=&amp;num=12345\nResponse Code : 200\nApple product detail...</code></pre>\n\n<p> </p>","a":[{"id":627778,"option":"POST","correct":true},{"id":627779,"option":"PUT","correct":false},{"id":627780,"option":"OPTIONS","correct":false},{"id":627781,"option":"GET","correct":false}]},{"q":"<p>Which of these REST methods is appropriate for the following RESTful web services code:</p>\n\n<pre class=\"prettyprint\"><code>@Path(\"books\")\npublic class Example {\n \n    @...\n    @Produces(....)\n    @Path(\"/{id}\")\n    public Response allbooks(@PathParam(\"id\") String bookId){\n    return Response.status(200)\n               .entity(\"Book id is : \" + bookId).build();\n    }\n     \n}</code></pre>","a":[{"id":623743,"option":"Put","correct":false},{"id":623744,"option":"Get","correct":true},{"id":623745,"option":"Post","correct":false},{"id":623746,"option":"Patch","correct":false}]},{"q":"<p>In web services, which of these error messages is displayed if the response code greater than or equal to <strong>300</strong> and the response body is consumed?</p>","a":[{"id":626654,"option":"HttpException","correct":false},{"id":626655,"option":"Exception","correct":false},{"id":626656,"option":"HttpResponseException","correct":true},{"id":626657,"option":"Bad connection","correct":false}]},{"q":"<p>Which of these lines in the following REST API web service contains errors:</p>\n\n<pre class=\"prettyprint\"><code>\n@Path(\"/persons\")\npublic class per_service \n{\n\n@GET\n@Path(\"/get\")\npublic Response getper(HttpHeaders headers).../**Line B**/\n {\n\nString per = headers.getRequestHeader(\"person-agent\").get(0);\n\nreturn Response.status(200)\n.entity(\"getPerson as:\" + per).build(); .../**Line C**/\n\n }\n</code></pre>\n\n<p> </p>","a":[{"id":624886,"option":"Line B","correct":true},{"id":624887,"option":"Response.status(>200)","correct":false},{"id":624888,"option":"Line C","correct":false},{"id":624889,"option":"No error","correct":false}]},{"q":"<p>Which of these types of values is returned by the following JAVA function:</p>\n\n<pre class=\"prettyprint\"><code>getAsJsonPrimitive(String xxxx)</code></pre>\n\n<p> </p>","a":[{"id":627265,"option":"JsonElement","correct":false},{"id":627266,"option":"boolean","correct":false},{"id":627267,"option":"JsonPrimitive","correct":true},{"id":627268,"option":"JsonArray","correct":false}]},{"q":"<p>Which of these requests can be sent using a tool called fiddler when testing Rest web services?</p>","a":[{"id":624094,"option":"Get and Post","correct":false},{"id":624095,"option":"Patch and Get","correct":false},{"id":624096,"option":"Post and Put","correct":true},{"id":624097,"option":"Options and Get","correct":false}]},{"q":"<p>Which of these Rest methods is defined by the following web service code:</p>\n\n<pre class=\"prettyprint\"><code>@Path(\"books\")\npublic class Example {\n     \n  @_____\n  @Produces(MediaType.TEXT_PLAIN)\n  @Consumes(MediaType.TEXT_PLAIN)\n  @Path(\"/{id}\")\n  public Response getbooks(@PathParam(\"id\") String bookid,String bookname){\n    return Response.status(200)\n     .entity(\"Book id and name :\" + bookid +\" \"+  bookname).build();\n    }\n     \n}</code></pre>\n\n<p> </p>","a":[{"id":626550,"option":"POST","correct":false},{"id":626551,"option":"GET","correct":false},{"id":626552,"option":"DELETE","correct":false},{"id":626553,"option":"PUT","correct":true}]},{"q":"<p>Which of these classes or interfaces has the method <strong>sslContext(SSLContext xxx)</strong>?</p>\n\n<p> </p>","a":[{"id":621883,"option":"Client","correct":false},{"id":621884,"option":"javax.ws.rs.Consumes","correct":false},{"id":621885,"option":"ClientBuilder","correct":true},{"id":621886,"option":"Configurable<ClientBuilder>","correct":false}]},{"q":"<p>In web services, which of these methods is used to apply configuration on a device in the following statement:</p>\n\n<p>HTTP _________ /devices/{id.}/configurations </p>\n\n<p> </p>","a":[{"id":626750,"option":"POST","correct":false},{"id":626751,"option":"PATCH","correct":false},{"id":626752,"option":"DELETE","correct":false},{"id":626753,"option":"PUT","correct":true}]},{"q":"<p>Which of these strings completes the following web service code:</p>\n\n<pre class=\"prettyprint\"><code>URL obj = new URL(....);\n\t\tHttpsURLConnection con = (HttpsURLConnection) obj.openConnection();\n\n\t\tcon.setRequestMethod(\"POST\");\n   .....\n    ......\n           con.(______)(true);</code></pre>\n\n<p> </p>","a":[{"id":627774,"option":"setIfModifiedSince","correct":false},{"id":627775,"option":"getDoInput","correct":false},{"id":627776,"option":"guessContentTypeFromStream","correct":false},{"id":627777,"option":"setDoOutput","correct":true}]},{"q":"<p>Which of these is used to initialize the <strong>WebResource</strong> class object in the following RESTful API code:</p>\n\n<pre class=\"prettyprint\"><code>....\n private static final String BASE_URI = \"http://localhost:8083/Restful-web-service\";\n private static final String PATH_NAME = \"/PostExampleService/empInfo\";\nprivate static void post\n{\nClientConfig config = new DefaultClientConfig();\n        Client client = Client.create(config);\n        WebResource resource =(....);\n        WebResource nameResource = resource.path(\"rest\").path(PATH_NAME);\n......\n}\n</code></pre>\n\n<pre> </pre>","a":[{"id":622889,"option":"WebResource.resource(Base_URI)","correct":false},{"id":622890,"option":"client.resource(PATH_NAME)","correct":false},{"id":622891,"option":"client.resource(BASE_URI)","correct":true},{"id":622892,"option":"client.path(BASE_URI)","correct":false}]},{"q":"<p>Which of these REST methods is appropriate for the following RESTful code:</p>\n\n<pre class=\"prettyprint\"><code>http://localhost:8080/tttRest/vx1/participants/participant?name=new_participant</code></pre>\n\n<p> </p>","a":[{"id":627269,"option":"Post","correct":false},{"id":627270,"option":"Put","correct":false},{"id":627271,"option":"Delete","correct":true},{"id":627272,"option":"Get","correct":false}]},{"q":"<p>What is the output of the following RESTful web service code:</p>\n\n<pre class=\"prettyprint\"><code>....\n{\nString s=\"{\\\"name\\\":\\\"John\\\",\\\"salary\\\":600000.0,\\\"age\\\":25}\";  \n    Object obj=JSONValue.parse(s);  \n    JSONObject jsonObject = (JSONObject) obj;  \n  \n    String n = (String) jsonObject.get(\"name\");  \n    double s = (Double) jsonObject.get(\"salary\");  \n    long a = (Long) jsonObject.get(\"age\");  \n    System.out.println(n+\" \"+s+\" \"+a);  \n}\n....</code></pre>\n\n<p> </p>","a":[{"id":622893,"option":"John600000.025","correct":false},{"id":622894,"option":"John  600000.0  25","correct":true},{"id":622895,"option":"Runtime error","correct":false},{"id":622896,"option":"Syntax error","correct":false}]},{"q":"<p>What is the output of the following RESTful web service code assuming that it includes a working <strong>UserService</strong> class?</p>\n\n<pre class=\"prettyprint\"><code> ....\nclass Web{ \nprivate String REST_SERVICE_URL = \"http://localhost:8080/UserManagement/rest/UserService/users\";\n private static final String SUCCESS_RESULT=\"&lt;result&gt;success&lt;/result&gt;\";\n    .....\nprivate void adduser(){\n      Form form = new Form();\n      form.param(\"id\", \"2\");\n      form.param(\"name\", \"suresh\");\n      form.param(\"profession\", \"CFO\");\n      String callResult = client\n         .target(REST_SERVICE_URL)\n         .request(MediaType.APPLICATION_XML)\n         .post(Entity.entity(form,\n            MediaType.APPLICATION_FORM_URLENCODED_TYPE),\n            String.class);\n      String result = \"Pass\";\n      if(!SUCCESS_RESULT.equals(callResult)){\n         result = \"fail\";\n      }\n\n      System.out.println(\"Test case name: testAddUser, Result: \" + result );\n   }\n     .....\n}</code></pre>\n\n<p> </p>\n\n<p> </p>","a":[{"id":622813,"option":"Compilation error","correct":false},{"id":622814,"option":"Compiles correctly without any output","correct":false},{"id":622847,"option":"Compiles correctly with some output","correct":true},{"id":622848,"option":"None of these","correct":false}]},{"q":"<p>You are building a custom RESTful API to implement simple CRUD functionalities in your  web application.<br>\nWhich of these patterns can you use to avoid performance bottlenecks and increase the overall responsiveness of your application?</p>","a":[{"id":1418872,"option":"async/await pattern","correct":true},{"id":1418873,"option":"Singleton pattern","correct":false},{"id":1418874,"option":"Formatter pattern","correct":false},{"id":1418875,"option":"Either 1 or 3","correct":false}]},{"q":"<p>Which of these methods completes line <strong>A </strong>in the following REST code:</p>\n\n<pre class=\"prettyprint\"><code>.......\nHttpClient httpclient = new DefaultHttpClient();\n                HttpPost httppost = new HttpPost(....);\n                 \n                try {\n                    List&lt;NameValuePair&gt; valuePairs = new ArrayList&lt;NameValuePair&gt;();\n                       valuePairs.add(.....);\n                       valuePairs.add(.....);\n\n                       httppost.__________(new UrlEncodedFormEntity(valuePairs));  /*Line A*/\n                       httpclient.execute(httppost);\n             ......\n}</code></pre>\n\n<p> </p>","a":[{"id":628909,"option":"setPath","correct":false},{"id":628910,"option":"setCollections","correct":false},{"id":628911,"option":"setParams","correct":false},{"id":628912,"option":"setEntity","correct":true}]},{"q":"<p>Which of these methods initializes the instance of the <strong>HttpEntity</strong> class in the following RESTful web service code:</p>\n\n<pre class=\"prettyprint\"><code>  String ip = \"http://10.0.2.2/webservice/select\";\n    ..... \n     .....\nprivate void webCall() {\n\t\t.......\n\t\ttry {\n\t\t\tHttpClient httpClient = new DefaultHttpClient();\n\t\t\tHttpPost httpPost = new HttpPost(ip);\n\t\t\tHttpResponse response = httpClient.execute(httpPost);\n\t\t\tHttpEntity entity = .......;\n\t\t\tInputStream is = entity.getContent();\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tLog.e(\"Webservice 1\", e.toString());\n\t\t}</code></pre>\n\n<p> </p>","a":[{"id":623021,"option":"response.setEntity()","correct":false},{"id":623022,"option":"HttpEntity.entity()","correct":false},{"id":623023,"option":"response.getEntity()","correct":true},{"id":623024,"option":"HttpEntity.getEntity()","correct":false}]},{"q":"<p>Which of these methods is appropriate for initializing the <strong>JSONObject</strong> instance in the following RESTful web service code: </p>\n\n<pre class=\"prettyprint\"><code>JSONArray jarr = new JSONArray(....);\n                    for (int i = 0; i &lt; jarr.length(); i++) {\n                        JSONObject obj = (......);\n                       ....\n}</code></pre>\n\n<p> </p>","a":[{"id":627245,"option":"jArr.JSONObject()","correct":false},{"id":627246,"option":"jArr.getJSONObject(i)","correct":true},{"id":627247,"option":"jArr.JSONobject(i)","correct":false},{"id":627248,"option":"JSONArray.response(i)","correct":false}]},{"q":"<p>In Java API, which of these strings completes the following web service code:</p>\n\n<pre class=\"prettyprint\"><code>URL obj = new URL(....);\n\t\tHttpURLConnection con = (HttpURLConnection) obj.openConnection();\n\n\t\tcon.setRequestMethod(\"GET\");\n\n\t\tcon.__________(\"User-Agent\", USER_AGENT);\n</code></pre>\n\n<p> </p>","a":[{"id":627770,"option":"setContentHandlerFactory","correct":false},{"id":627771,"option":"getRequestProperty","correct":false},{"id":627772,"option":"setRequestProperty","correct":true},{"id":627773,"option":"setUseCaches","correct":false}]},{"q":"<p>Which of the following is a disadvantage of a layered system in REST?</p>","a":[{"id":59856,"option":"Added overhead and latency to the processing of data ","correct":true},{"id":59857,"option":"Portability of code is reduced","correct":false},{"id":59858,"option":"Hard in terms of maintenance ","correct":false},{"id":59859,"option":"Visibility of communication between components is reduced\r\n ","correct":false}]},{"q":"<p>In REST API web services, which of these methods is used to remove configuration on a device in the following statement:</p>\n\n<blockquote>\n<p>HTTP ________ /devices/{id}/configurations/{id}   </p>\n</blockquote>","a":[{"id":626754,"option":"POST","correct":false},{"id":626755,"option":"DELETE","correct":true},{"id":626756,"option":"OPTIONS","correct":false},{"id":626757,"option":"PUT","correct":false}]},{"q":"<p>Which of the following inferences can be made about the process from the following REST statement:</p>\n\n<pre class=\"prettyprint\"><code>GET /products?filters[status_id]=1&amp;filters[category_id]=23&amp;filter[features][id]=5</code></pre>\n\n<p> </p>","a":[{"id":628875,"option":"Sorting","correct":false},{"id":628876,"option":"Searching","correct":false},{"id":628877,"option":"Field Selection","correct":false},{"id":628878,"option":"Filtering","correct":true}]},{"q":"<p>In web services, what will the following Rest API statement return:</p>\n\n<pre class=\"prettyprint\"><code>GET https://www.googleapis.com/gmail/v1/users/me/messages?q=\"in:sent after:2014/01/01 before:2014/01/30\"</code></pre>\n\n<p> </p>","a":[{"id":621339,"option":"Error 409","correct":false},{"id":621340,"option":"Returns null","correct":false},{"id":621341,"option":"Messages sent between 1/1/2014 and 1/30/2014","correct":true},{"id":621342,"option":"None of these","correct":false}]},{"q":"<p>Which of the following inferences can be made about the process from the following REST statement:</p>\n\n<pre class=\"prettyprint\"><code>GET /products?page=3&amp;per_page=50</code></pre>\n\n<p> </p>\n\n<p> </p>","a":[{"id":628901,"option":"Filtering","correct":false},{"id":628902,"option":"Searching","correct":false},{"id":628903,"option":"Field Selection","correct":false},{"id":628904,"option":"Pagination","correct":true}]},{"q":"<p>Which of these REST codes is represented by the following statement:</p>\n\n<blockquote>\n<p>The data format of the request body specified in the Content-Type header is not supported by the target resource.</p>\n</blockquote>","a":[{"id":626862,"option":"401","correct":false},{"id":626863,"option":"303","correct":false},{"id":626864,"option":"409","correct":false},{"id":626865,"option":"415","correct":true}]},{"q":"<p>Which of these statements about RESTful web services is true:</p>\n\n<ol>\n\t<li>REST allows a greater variety of data formats.</li>\n\t<li>REST is the protocol that is often used for major services such as Yahoo, eBay, Amazon, and Google.</li>\n\t<li>REST is generally faster and uses less bandwidth.</li>\n\t<li>REST provides superior performance, particularly through caching information that is not altered and not dynamic.</li>\n</ol>","a":[{"id":626762,"option":"2 and 4","correct":false},{"id":626763,"option":"2","correct":false},{"id":626764,"option":"2, 3, and 4","correct":false},{"id":626765,"option":"All of these","correct":true}]},{"q":"<p>Identify the <strong>client initialization</strong> statement in the following RESTful web service code:</p>\n\n<pre class=\"prettyprint\"><code>public class RESTfulJerseyClient {\n\tprivate static final String webServiceURI = \"http://localhost:8080/RESTful_Hello_World\";\n\tpublic static void main(String[] args) {\n\t\tClientConfig clientConfig = new ClientConfig();\n\t\tClient client = ......;\n\t\tURI serviceURI = UriBuilder.fromUri(webServiceURI).build();\n\t\tWebTarget webTarget = ....;\n     .......\n     .....\n}</code></pre>\n\n<p> </p>","a":[{"id":621803,"option":"ClientBuilder.newClient(clientConfig)","correct":true},{"id":621804,"option":"ClientBuilder.newBuilder(clientConfig)","correct":false},{"id":621805,"option":"Builder.build()","correct":false},{"id":621806,"option":"ClientBuilder.newClient()","correct":false}]},{"q":"<p>Which of these return statements is appropriate for the following RESTful web service code:</p>\n\n<pre class=\"prettyprint\"><code>\n@Path(\"/image\")\npublic class Iservice {\n\n\tprivate final String FILE_PATH = \"....\";\n\n\t@GET\n\t@Path(\"/get\")\n\t@Produces(...)\n\tpublic Response getfile() {\n\n\t\tFile file = new File(FILE_PATH);\n\n\t\tResponseBuilder response = Response.ok((Object) file);\n\t\tresponse.header(\"Content-Disposition\",\n\t\t\t\"attachment; filename=image_from_server.png\");\n\t\t\n     return (.....);\n\n\t}\n\n}</code></pre>\n\n<p> </p>","a":[{"id":623794,"option":"response.set()","correct":false},{"id":623795,"option":"Response.build()","correct":false},{"id":623796,"option":"Response.return()","correct":false},{"id":623797,"option":"response.build()","correct":true}]},{"q":"<p>What is the output of the following RESTful web service statement:</p>\n\n<pre class=\"prettyprint\"><code>GET /customers?sort=value1, value2</code></pre>\n\n<p><strong> </strong></p>","a":[{"id":621223,"option":"Retrieves parameters with the given values","correct":false},{"id":621224,"option":"Sorts parameters with a list of comma-separated fields","correct":true},{"id":621225,"option":"Executes a simple query","correct":false},{"id":621226,"option":"Sorts the given values","correct":false}]},{"q":"<p>In web services, which of the following statements is correct:</p>\n\n<ol>\n\t<li>GET requests can be bookmarked whereas PATCH requests cannot be bookmarked.</li>\n\t<li>GET requests can be bookmarked whereas POST requests cannot be bookmarked.</li>\n\t<li>POST requests can be bookmarked whereas DELETE requests cannot be bookmarked.</li>\n\t<li>GET requests can be bookmarked whereas PUT requests cannot be bookmarked.</li>\n</ol>","a":[{"id":627714,"option":"1","correct":false},{"id":627715,"option":"2","correct":true},{"id":627716,"option":"3","correct":false},{"id":627717,"option":"4","correct":false}]},{"q":"<p>Which of these return statements is available in the following RESTful web service code:</p>\n\n<pre class=\"prettyprint\"><code>public class RestTask extends AsyncTask&lt;HttpUriRequest, Void, String&gt;\n{\n    ....\n    public static final String HTTP_RESPONSE = \"httpResponse\";\n ......\n\n@Override\n    protected String doInBackground(HttpUriRequest... params)\n    {\n        try\n        {\n            HttpUriRequest request = params[0];\n            HttpResponse serverResponse = mClient.execute(request);\n            BasicResponseHandler handler = new BasicResponseHandler();\n            return ......;\n        }\n        catch (Exception e)\n        {\n            // TODO handle this properly\n            e.printStackTrace();\n            ...\n        }\n    }\n\n     ....\n    .......\n}</code></pre>\n\n<p> </p>","a":[{"id":621743,"option":"handleResponse(serverResponse)","correct":false},{"id":621744,"option":"BasicResponseHandler.response(serverResponse)","correct":false},{"id":621745,"option":"handler.response(serverResponse)","correct":false},{"id":621746,"option":"handler.handleResponse(serverResponse)","correct":true}]},{"q":"<p>Which of these lines contain errors in the following RESTful web services code:</p>\n\n<pre class=\"prettyprint\"><code>public class RestWebServicesDemo extends Activity {  \n\n\n    String URL = \"http://open.api.ebay.com/.....\";  \n    String result = \"\";  \n    String deviceId = \"*****\" ;  \n\n         \n\n    public void callservice(String endpoint){  \n\n  HttpClient httpclient = new DefaultHttpClient(); .../**Line A**/ \n\n        HttpGet request = new HttpGet(....);\n\n        request.addHeader(...);  \n\n  ResponseHandler&lt;String&gt; handler = new BasicResponseHandler(); .../**Line B**/ \n\n        try {  \n\n            result = httpclient.execute(request, handler);  \n\n        } catch (...) {  \n\n            e.printStackTrace();  \n\n        } catch (...) {  \n\n            e.printStackTrace();  \n\n        }  \n\n  httpclient.getConnectionManager().shutdown();  .../**Line C**/\n\n        Log.i(tag, result);  \n\n    }\n}</code></pre>","a":[{"id":623739,"option":"Line A","correct":false},{"id":623740,"option":"Line B","correct":false},{"id":623741,"option":"Line C","correct":false},{"id":623742,"option":"No errors","correct":true}]},{"q":"<p>Which of the following statements about the statelessness of RESTful web services is correct:</p>\n\n<ol>\n\t<li>These services simplify an application design.</li>\n\t<li>These services treat each method request independently.</li>\n\t<li>These services work seamlessly with HTTP protocols.</li>\n\t<li>HTTP is not a statelessness protocol.</li>\n</ol>","a":[{"id":613793,"option":"1, 2, and 3","correct":true},{"id":613794,"option":"1 and 4","correct":false},{"id":613795,"option":"1 and 3","correct":false},{"id":942232,"option":"All of these","correct":false}]},{"q":"<p>Which of these is represented by the following Rest API code:</p>\n\n<pre class=\"prettyprint\"><code>{\n      \"servlet-name\": \"cofaxTools\",\n      \"servlet-class\": \"org.cofax.cms.CofaxToolsServlet\",\n      \"init-param\": {\n        \"templatePath\": \"toolstemplates/\",\n        \"dataLog\": 1,\n        \"dataLogLocation\": \"/usr/local/tomcat/logs/dataLog.log\",\n        \"dataLogMaxSize\": \"\",\n        \"removePageCache\": \"/content/admin/remove?cache=pages&amp;id=\",\n        \"removeTemplateCache\": \"/content/admin/remove?cache=templates&amp;id=\",\n        \"fileTransferFolder\": \"/usr/local/tomcat/webapps/content/fileTransferFolder\",\n        \"adminGroupID\": 4,\n        \"betaServer\": true}}],\n  \"servlet-mapping\": {\n    \"cofaxCDS\": \"/\",\n    \"cofaxEmail\": \"/cofaxutil/aemail/*\",\n    \"cofaxAdmin\": \"/admin/*\",\n    \"fileServlet\": \"/static/*\",\n    \"cofaxTools\": \"/tools/*\"},\n...\n}</code></pre>\n\n<p> </p>","a":[{"id":622897,"option":"XML","correct":false},{"id":622898,"option":"HTML","correct":false},{"id":622899,"option":"JSON","correct":true},{"id":622900,"option":"UML","correct":false}]},{"q":"<p>Which of the following REST methods are almost identical to each other?</p>","a":[{"id":627710,"option":"GET and PUT","correct":false},{"id":627711,"option":"POST and DELETE","correct":false},{"id":627712,"option":"POST and HEAD","correct":false},{"id":627713,"option":"GET and HEAD","correct":true}]},{"q":"<p>What is the return statement in the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>\n private String method(String url, String js) throws IOException\n {\n\n   RequestBody body = RequestBody.create(JSON,js);\n\n    Request request = new Request.Builder()\n\n                    .url(url)\n\n                    .post(...)\n\n                    .build();\n\n    Response response = client.newCall(request).execute();\n\n     return (......);\n\n  }\n</code></pre>\n\n<p> </p>\n\n<p> </p>","a":[{"id":623853,"option":"Response.return()","correct":false},{"id":623854,"option":"response.tostring()","correct":false},{"id":623855,"option":"Response.get()","correct":false},{"id":623856,"option":"response.body().string()","correct":true}]},{"q":"<p>In the following RESTful web service code, which of these will you use to replace Line B with so that the code processes the JSON object:</p>\n\n<pre class=\"prettyprint\"><code>\n   .....\n\nJsonReader jsonReader = new JsonReader(....);\n  ...\n\n/**Line B**/\n...\nwhile (jsonReader.hasNext()) \n{ \n    String key = jsonReader.nextName(); \n    if (key.equals(\"organization_url\")) \n{ \n       \n        String value = jsonReader.nextString();\n         \n      .....                 \n        break; \n    }\n else {\n\n        jsonReader.skipValue(); \n\n    }\n}</code></pre>\n\n<p> </p>","a":[{"id":621235,"option":"jsonReader.startObject()","correct":false},{"id":621236,"option":"jsonReader.beginArray()","correct":false},{"id":621237,"option":"jsonReader.peek()","correct":false},{"id":621238,"option":"jsonReader.beginObject()","correct":true}]},{"q":"<p>Identify the <strong>WebTarget</strong><strong> initialization</strong> statement in the following RESTful web service code:</p>\n\n<pre class=\"prettyprint\"><code>public class RESTfulJerseyClient {\n\tprivate static final String webServiceURI = \"http://localhost:8080/RESTful_Hello_World\";\n\tpublic static void main(String[] args) {\n\t\tClientConfig clientConfig = new ClientConfig();\n\t\tClient client = .......;\n\t\tURI serviceURI = UriBuilder.fromUri(webServiceURI).build();\n\t\tWebTarget webTarget = .....;\n        .....\n}\n....\n}</code></pre>\n\n<p>'''</p>\n\n<p> </p>","a":[{"id":621807,"option":"client.service()","correct":false},{"id":621808,"option":"client.target(serviceURI)","correct":true},{"id":621809,"option":"WebTarget.target(serviceURI)","correct":false},{"id":621810,"option":"Webtarget.startService(ServiceURI)","correct":false}]},{"q":"<p style=\"text-align: justify;\">Which of the following statements about RESTful web services is true:</p>\n\n<ol>\n\t<li>Facebook, Twitter, and Google expose their functionality in the form of RESTful web services.</li>\n\t<li>With the help of RESTful services web applications can reside in different environments, some on Windows and others on Linux.</li>\n\t<li>It makes sense for web services to be programmed on REST-based architecture to make the best use of cloud-based services.</li>\n</ol>","a":[{"id":621991,"option":"2 and 3","correct":false},{"id":621992,"option":"1 and 2","correct":false},{"id":621993,"option":"1 and 3","correct":false},{"id":621994,"option":"All of these","correct":true}]},{"q":"<p>In RESTful API and services, which of the following web service operations is nullipotent:</p>\n\n<ol>\n\t<li>Put</li>\n\t<li>Get</li>\n\t<li>Post</li>\n\t<li>Patch</li>\n</ol>","a":[{"id":621227,"option":"1","correct":false},{"id":621228,"option":"2","correct":true},{"id":621229,"option":"2 and 3","correct":false},{"id":621230,"option":"4","correct":false}]},{"q":"<p>Which of these REST methods is appropriate for the following RESTful response code:</p>\n\n<pre class=\"prettyprint\"><code>HTTP/1.1 200 OK\nContent-Type: application/xml\n \n&lt;configuration id=\"9977\"&gt;\n    &lt;link rel=\"...\" href=\"/configurations/9977\" /&gt;\n    &lt;content&gt;&lt;![CDATA[. updated content here .]]&gt;&lt;/content&gt;\n    &lt;status&gt;active&lt;/status&gt;\n    &lt;link  rel=\"....\" href=\".....\" /&gt;\n&lt;/configuration&gt;</code></pre>\n\n<p> </p>","a":[{"id":626758,"option":"Get","correct":false},{"id":626759,"option":"Post","correct":false},{"id":626760,"option":"Put","correct":true},{"id":626761,"option":"Delete","correct":false}]},{"q":"<p>According to the definition, which of the following best describes the use of the <strong>GET</strong> method in a RESTful API?</p>","a":[{"id":59908,"option":"Listing of the URIs and other details of the collection's members","correct":true},{"id":59909,"option":"Replacement of the entire collection with another collection","correct":false},{"id":59910,"option":"Creation of a new entry in the collection","correct":false},{"id":59911,"option":"Deletion of the entire collection","correct":false}]},{"q":"<p>In RESTful web services, which of these methods will you use to retrieve all the books from the server?</p>","a":[{"id":626650,"option":"GET /books/123","correct":false},{"id":626651,"option":"PUT /books/123","correct":false},{"id":626652,"option":"GET /books","correct":true},{"id":626653,"option":"POST /books/","correct":false}]},{"q":"<p>Which of these REST methods will you use to update a resource partially in the following statement:</p>\n\n<blockquote>\n<p>_________ /tickets/12/messages/5</p>\n</blockquote>","a":[{"id":628871,"option":"POST","correct":false},{"id":628872,"option":"GET","correct":false},{"id":628873,"option":"PATCH","correct":true},{"id":628874,"option":"OPTIONS","correct":false}]},{"q":"<p>What is the output of the following RESTful web service code:</p>\n\n<pre class=\"prettyprint\"><code>@Path(\"/helloworld\")\npublic class HelloWorld {\n\t@GET\n\t@Produces(MediaType.TEXT_XML)\n\tpublic String Hello() {\n\t\treturn \"Hello World!\";\n\t}\n....\n}</code></pre>\n\n<p> </p>","a":[{"id":621987,"option":"TEXT_XML","correct":true},{"id":621988,"option":"TEXT_HTML","correct":false},{"id":621989,"option":"NULL","correct":false},{"id":621990,"option":"TEXT_PLAIN","correct":false}]},{"q":"<p>In the following RESTful web service code, which of these will you use to replace Line A with so that the code sends data to the server:</p>\n\n<pre class=\"prettyprint\"><code>   .....\n\n  AsyncTask.execute(new Runnable() {\n    @Override\n    public void run() {\n\n        URL Endpoint = new URL(\"https://httpbin.org/post\");\nHttpsURLConnection myConnection\n        = (HttpsURLConnection) Endpoint.(...)();\n \n            /**Line A**/\n         \n  ......\n    }\n});</code></pre>\n\n<p> </p>","a":[{"id":621231,"option":"myConnection.connect(\"POST\")","correct":false},{"id":621232,"option":"myConnection.getServerCertificates()","correct":false},{"id":621233,"option":"myConnection.setRequestMethod(\"POST\")","correct":true},{"id":621234,"option":"No statement required","correct":false}]},{"q":"<p>What is the output of the following RESTful web service statement:</p>\n\n<pre class=\"prettyprint\"><code>PUT/customers/5</code></pre>\n\n<p> </p>","a":[{"id":621219,"option":"Retrieves the customer API endpoint with the ID 5","correct":false},{"id":621220,"option":"Transmits the customer API endpoint with the ID 5","correct":false},{"id":621221,"option":"Updates the customer API endpoint with ID 5","correct":true},{"id":621222,"option":"None of these","correct":false}]},{"q":"<p>In REST APIs, which of the following RESTful HTTP methods is used to fetch <strong>read-only</strong> queries?</p>","a":[{"id":60036,"option":"POST","correct":false},{"id":60037,"option":"GET","correct":true},{"id":60038,"option":"PUT","correct":false},{"id":60039,"option":"DELETE","correct":false}]}]
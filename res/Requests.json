[{"q":"<p>A servlet throws a ServletException during the service of a request. What could be a possible reason for this to occur and what should you do to avoid it?</p>","a":[{"id":1655757,"option":"The servlet is unable to handle requests temporarily, and the request should be resent","correct":false},{"id":1655758,"option":"The servlet is unable to handle requests permanently, and the request should be sent to another servlet container","correct":false},{"id":1655759,"option":"An error occurred during the processing of the request, and the container should clean up the request","correct":true},{"id":1655760,"option":"An error occurred during the processing of the request, and the container should drop the request","correct":false}]},{"q":"<p>A client wants to request a resource from your HTTP servlet. However, the resource will only be returned if it has been modified recently. Which of these methods of the HttpServlet interface can be used to implement such a conditional GET request?</p>","a":[{"id":1655749,"option":"getConditional","correct":false},{"id":1655750,"option":"doGet","correct":false},{"id":1655751,"option":"getLastModified","correct":true},{"id":1655752,"option":"doGetConditional","correct":false}]},{"q":"<p>You are using the HttpServlet abstract subclass to add additional methods to a basic servlet instance. In the given context, which of the following method responds with the HTTP methods that are supported by the servlet?</p>","a":[{"id":1655745,"option":"doOptions","correct":true},{"id":1655746,"option":"doMethods","correct":false},{"id":1655747,"option":"doTypes","correct":false},{"id":1655748,"option":"doTrace","correct":false}]},{"q":"<p>In Spring Boot, if you have implemented the following code then which of the following statements is correct?<br>\n </p>\n\n<p><strong>Code:</strong><br>\n </p>\n\n<pre class=\"prettyprint\"><code>@RestController\n@RequestMapping(\"/hack_user\")\npublic class Hackerearth_User \n{\n\n    @CrossOrigin(origins = \"http://hack.com\")\n    @RequestMapping(method = RequestMethod.GET, path = \"/{id}\")\n    public User get_user(@PathVariable Long hack_id) \n    {\n        // some code\n    }\n\n    @RequestMapping(method = RequestMethod.DELETE, path = \"/{id}\")\n    public void del_user(@PathVariable Long hack_id) \n    {\n        // some code\n    }\n}</code></pre>\n\n<p><br>\n<br>\n<strong>Statements:</strong></p>\n\n<ol>\n\t<li>The @CrossOrigin annotation is used to allow cross-origin requests on specific handler classes and/or handler methods.<br>\n\t </li>\n\t<li>The <em>del_user </em>allows all origins to send cross-origin requests.<br>\n\t </li>\n\t<li>The <em>get_user</em>  method allows only http://hack.com to send cross-origin requests.</li>\n</ol>","a":[{"id":1558100,"option":"1 and 2","correct":false},{"id":1558101,"option":"2 and 3","correct":false},{"id":1558102,"option":"1 and 3","correct":false},{"id":1558103,"option":"All of these","correct":true}]}]
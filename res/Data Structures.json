[{"q":"<p>What is the output of the following code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>For input1 = 5 and input2 = 5\n\nfunction(input1, input2)\n   if(input1&lt;input2)\n      return function(input2, input1)\n   else if(input2 != 0)\n      return (input1 * function(input1, input2 - 1))\n   else\n      return 0\n</code></pre>","a":[{"id":1668375,"option":"1255","correct":false},{"id":1668376,"option":"625","correct":false},{"id":1668377,"option":"3125","correct":true},{"id":1668378,"option":"125","correct":false}]},{"q":"<p>What is the time complexity of the following pseudocode:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>function hacker(int arr[], int n){\n   for i=1 to n-1\n      k = arr[i]\n      j = i-1\n      while (j&gt;=0 and arr[j]&gt;k)\n         arr[j+1] = arr[j]\n         j = j-1\n      arr[j+1] = k\n}</code></pre>","a":[{"id":1668635,"option":"O(n*n)","correct":true},{"id":1668636,"option":"O(nlog n)","correct":false},{"id":1668637,"option":"O(log n)","correct":false},{"id":1668638,"option":"O(n)","correct":false}]},{"q":"<p>What is the output of the given pseudocode:</p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>BEGIN\n INTEGER i,a,b,c\n INTEGER n=10\n ARRAY array[n]\n array = {10,5,6,3,9,7,8,11,1,12}\n a=0\n b=0\n c=0\n FOR i IN 0 to n-1\n if array[i] &gt; a\n  c = b\n  b = a\n  a = array[i]\n else if array[i] &gt; b\n  c = b\n  b = array[i]\n else if array[i] &gt; c\n  c = array[i];\n ENDFOR\n PRINT a, b, c\nEND</code></pre>","a":[{"id":1607766,"option":"1 3 2005","correct":false},{"id":1607767,"option":"12 11 10","correct":true},{"id":1607768,"option":"5 3 2001","correct":false},{"id":1607769,"option":"10 11 12","correct":false}]},{"q":"<p>What will be the modified array (arr) after executing the given Pseudocode:</p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>DECLARE arr : ARRAY[0,6] of {23,54,21,31,56,78,65}\np1 = 0\np2 = 6\n\nWHILE p1&lt;p2\n\tt = arr[p1]\n\tarr[p1] = arr[p2]\n\tarr[p2] = t\n\tp1 = p1 + 1\n\tp2 = p2 - 1\nENDWHILE\n</code></pre>","a":[{"id":1534813,"option":"arr = [ 65, 78, 21, 31, 56, 54, 23 ]","correct":false},{"id":1534814,"option":"arr = [ 65, 78, 56, 21, 31, 54, 23 ]","correct":false},{"id":1534815,"option":"arr = [ 65, 78, 56, 31, 21, 54, 23 ]","correct":true},{"id":1534816,"option":"arr = [ 23, 54, 21, 31, 56, 78, 65 ]","correct":false}]},{"q":"<p>What is the output of the following pseudocode with the given input:</p>\n\n<p><strong>Input: </strong><em>array= {3, 6, 6, 7, 8}, n = 5</em></p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>long long int hackersum(int hack[], int m)\n int hacksum = 0\n unordered_map&lt;int, int&gt; mp\n for i=0 to m \n  int s = 0;\n  for j=i to m \n   s += hack[j]\n   mp[s]++\n for (auto x : mp)\n  if (x.second == 1)\n   hacksum += x.first\n return hacksum</code></pre>","a":[{"id":1659018,"option":"170","correct":false},{"id":1659019,"option":"171","correct":true},{"id":1659020,"option":"172","correct":false},{"id":1659021,"option":"173","correct":false}]},{"q":"<p>Lisa was working on a task given by her teacher. The task was to find out the maximum product value of&nbsp;the&nbsp;elements of&nbsp;all possible subarrays in an array of integers.</p>\n\n<p><strong>Example</strong><br>\nConsider an array <em>[2, 1, 3]</em><br>\nThe possible subarrays are<br>\n<em>[ 2 ] -&gt; product = 2<br>\n[ 1 ] -&gt; product = 1<br>\n[ 3 ] -&gt; product = 3<br>\n[ 2, 1 ] -&gt; product = 2 * 1 = 2<br>\n[ 1, 3 ] -&gt; product = 1 * 3 = 3<br>\n[ 2, 1, 3 ] -&gt; product = 2 * 1 * 3 = 6 -&gt;&nbsp;maximum product value</em><br>\nSo the maximum product of all the possible subarrays is <em>6</em>.<br>\nNow,&nbsp;she has implemented the following&nbsp;pseudocode where the function <em>Maximum_Product</em>&nbsp;returns the maximum product value of all the subarrays for a given array.</p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>FUNCTION Maximum_Product(arr, n)\n\n    minVal = arr[0]\n    maxVal = arr[0]\n    \n    ans = arr[0]\n    \n    FOR i -&gt; 1 to n-1\n        IF (arr[i] &lt; 0)\n            temp = maxVal\n            maxVal = minVal\n            minVal = temp\n        ENDIF\n    \n        // Line 11\n        // Line 12\n    \n        ans = max(ans, maxVal)\n    ENDFOR\n    \n    RETURN ans\n\nDECLARE arr = ARRAY[0,n-1] of {-1, -2, -5, 0, 6, 8, 10}\nn = 7\nPRINT Maximum_Product(arr, n)</code></pre>\n\n<p><em>Notes</em></p>\n\n<ol>\n\t<li>Do not consider empty subarray.</li>\n\t<li>The function max() returns the maximum element. Eg<em> max(2, 4)</em> returns <em>4</em></li>\n\t<li>The function min()<strong> </strong>returns the minimum element. Eg <em>min(2, 4)</em> returns <em>2</em></li>\n</ol>\n\n<p>She got stuck at Line 11 and<strong> </strong>Line 12. If you were asked to complete the above pseudocode then which of the following code snippets would you choose to replace Line 11<strong> </strong>and<strong> </strong>Line 12 such that the output of the pseudocode is <em>480</em>.</p>\n\n<p><strong>Code Snippets</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>maxVal = max(arr[i], minVal * arr[i])\nminVal = min(arr[i], maxVal * arr[i])</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>maxVal = max(arr[i], maxVal * arr[i])\nminVal = min(arr[i], minVal * arr[i])</code></pre>\n\n<p>3.&nbsp;</p>\n\n<pre class=\"prettyprint\"><code>maxVal = min(arr[i], maxVal * arr[i])\nminVal = max(arr[i], minVal * arr[i])</code></pre>\n\n<p>4.&nbsp;</p>\n\n<pre class=\"prettyprint\"><code>maxVal = min(arr[i], minVal * arr[i])\nminVal = max(arr[i], maxVal * arr[i])</code></pre>\n\n<ol>\n</ol>","a":[{"id":1556010,"option":"1","correct":false},{"id":1556011,"option":"2","correct":true},{"id":1556012,"option":"3","correct":false},{"id":1556013,"option":"4","correct":false}]},{"q":"<p>In Data Structures, you are working on Arrays. You are given a Pseudocode that implements various operations on the given array. Which of the following options best fit in <em>Line 10</em>&nbsp;and <em>Line 12</em>&nbsp;so that the output will be<strong> </strong><em>4, 9</em>?</p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>DECLARE arr : ARRAY[0,8] of { 1, 3, 4, 6, 8, 9, 13, 15, 16 }\nk = 13\np1 = 0\np2 = 8\nWHILE p1&lt;p2\n\tIF arr[p1]+arr[p2]==k\n\t\tPRINT (arr[p1],arr[p2])\n\t\tBREAK\n\tELSE IF arr[p1]+arr[p2]&lt;k\n\t\t// Line 10\n\tELSE IF arr[p1]+arr[p2]&gt;K\n\t\t// Line 12\n\tENDIF\nENDWHILE\n\n</code></pre>\n\n<p>Now, select the option that best fit in the comments in&nbsp;<em>Line 10</em> and <em>Line 12</em> such that when you implement the pseudocode in your own programming, the output is&nbsp;<em>4, 9</em>.</p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1. </strong></p>\n\n<pre class=\"prettyprint\"><code>p1+=1\np2+=1</code></pre>\n\n<p><strong>2. </strong></p>\n\n<pre class=\"prettyprint\"><code>p1+=1\np2-=1</code></pre>\n\n<p><strong>3. </strong></p>\n\n<pre class=\"prettyprint\"><code>p1-=1\np2+=1</code></pre>\n\n<p><strong>4. </strong></p>\n\n<pre class=\"prettyprint\"><code>p1-=1\np2-=1</code></pre>","a":[{"id":1537228,"option":"1","correct":false},{"id":1537229,"option":"2","correct":true},{"id":1537230,"option":"3","correct":false},{"id":1537231,"option":"4","correct":false}]},{"q":"<p>What is the output of the following pseudocode:</p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>input string = \"HACKEREARTH\"\n\nfunction hacker(String S)\n mlen = 1\n beg= 0\n len = length of S\n  low, high\nfor i=1 to len \n  low = i - 1;\n  high = i;\n  while (low &gt;= 0 &amp;&amp; high &lt; len&amp;&amp; str[low] == str[high]) \n    --low\n\t++high\n//end of while\n  ++low; --high;\n  if (str[low] == str[high] &amp;&amp; high - low + 1 &gt; maxLength) \n\tbeg= low;\n\tmlen= high - low + 1;\n  //end of if\n  low = i - 1;\n  high = i + 1;\n  while (low &gt;= 0 &amp;&amp; high &lt; len &amp;&amp; str[low] == str[high]) \n\t--low;\n\t++high;\n  //end of while\n  ++low\n  --high\n  if (str[low] == str[high] &amp;&amp; high - low + 1 &gt; maxLength) \n\tbeg= low\n\tmlen= high - low + 1\n  //end of if\n//end of for\n\tans=mlen\n\twhile(ans--)\n\tprint(str[beg++])\n\n</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1709999,"option":"HACK","correct":false},{"id":1710000,"option":"ERE","correct":true},{"id":1710001,"option":"EARTH","correct":false},{"id":1710002,"option":"RTH","correct":false}]},{"q":"<p>In Data structures, what is the time complexity of the following code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>int hack_count(int n){\n int x[n], y[n];\n x[0] = y[0] = 1;\n for (int i = 1; i &lt; n; i++){\n   x[i] = x[i - 1] + y[i - 1];\n   y[i] = x[i - 1];\n }\n return (1 &lt;&lt; n) - x[n - 1] - y[n - 1];\n}</code></pre>","a":[{"id":1668575,"option":"O(n)","correct":true},{"id":1668576,"option":"O(log n)","correct":false},{"id":1668577,"option":"O(n*n)","correct":false},{"id":1668578,"option":"O(n log n)","correct":false}]},{"q":"<p>Bob was given a string consisting of only 0, 1, A, O, X where<br>\nA=AND<br>\nO=OR<br>\nX=XOR</p>\n\n<p>What is the output of the following pseudocode:</p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>input string s=\"1X1O1O0A01A0A1X1A1\"\n\nfunction hacker_eval(string s)\n n = length of s\n for i=0 to n \n  if (s[i + 1] == 'A') \n\tif (s[i + 2] == '0'|| s[i] == '0')\n\t s[i + 2] = '0'\n\telse\n\t s[i + 2] = '1'\n   else if (s[i + 1] == 'O') {\n\t if (s[i + 2] == '1'|| s[i] == '1')\n\t  s[i + 2] = '1'\n\t else\n\t  s[i + 2] = '0'\n   else \n\t if (s[i + 2] == s[i])\n\t  s[i + 2] = '0'\n\t else\n\t  s[i + 2] = '1'\n  return s[n - 1] -'0'\n</code></pre>","a":[{"id":1709492,"option":"0","correct":false},{"id":1709493,"option":"1","correct":true},{"id":1709494,"option":"-1","correct":false},{"id":1709495,"option":"None of the above","correct":false}]},{"q":"<p>What is the time complexity of given pseudocode:</p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>function Hacker_findchar(string str1, string str2)\n\tn1=length of str1\n\tn2=length of str2\n\tunordered_map&lt;char, int&gt; mp;\n\tfor i=0 to n2\n\t\tmp[str2[i]]++;\n\tfor i=0 to n1\n\t\tmp[strA[i]]--;\n\tfor h1 = beg of mp to end of mp \n\t\tif (h1-&gt;second == 1)\n\t\t\treturn h1-&gt;first\n</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1709440,"option":"O(n)","correct":true},{"id":1709441,"option":"O(n*n)","correct":false},{"id":1709442,"option":"O(n log n)","correct":false},{"id":1709443,"option":"O(log n)","correct":false}]},{"q":"<p>Alice and Bob were given two numbers as strings. The reason for the numbers to be taken as strings was that they were very large which may not fit in a long long int. Their task was&nbsp;to find the sum of these two numbers in the most optimized way possible. Though Alice came up with the pseudocode but Bob was unsure about its time complexity. Can you help them to find the time complexity of the given pseudocode?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>function hacker_sum(string str1, string str2)\n\tn1 = length of str1\n\tn2 = length of str2\n\tif (n1 &gt; n2)\n\t  swap(str1, str2)\n\tstr = \"\"\n\tdiff = n2 - n1\n\tcarry = 0\n\tfor i=n-1 to 0\n\t  sum = ((ith char of str1-'0') +((i+diff)thchar of str2-'0') +carry)\n\t  push(sum%10 + '0') into str\n\t  carry = sum/10\n\tfor i=n2-n1-1 to 0\n\t   sum = ((ith char of str2-'0')+carry)\n\t   push(sum%10 + '0') into str\n\t   carry = sum/10\n\tif (carry)\n\t  push(carry+'0') into str\n\treverse(str.begin(), str.end())\n\treturn str</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1709436,"option":"O(n1)","correct":false},{"id":1709437,"option":"O(n2)","correct":false},{"id":1709438,"option":"O(n1+n2)","correct":true},{"id":1709439,"option":"O(n1*n2)","correct":false}]},{"q":"<p>What is the output of the following pseudocode:</p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>input string s1=\"Hackerearth\", s2=\"Earth\", k=4\n\nfunction hack(string str1, string str2, int k)\n  int flag = 0;\n  if (str1.length() != str2.length())\n\t\treturn false;\n  int n = str1.length();\n  char arr1[n];\n\tchar arr2[n];\n\tstrcpy(arr1, str1.c_str());\n\tstrcpy(arr2, str2.c_str());\n\tsort(arr1, arr1 + n);\n\tsort(arr2, arr2 + n);\n\tvector&lt;char&gt; list;\n\tfor (int i = 0; i &lt; str1.length(); i++) {\n\t\tif (arr1[i] != arr2[i]) {\n\t\t\tlist.push_back(arr2[i]);\n\t\t}\n\t}\n\tif (list.size() &lt;= k)\n\t\tflag = 1;\n\n\tif (flag == 1)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\n</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1710487,"option":"True","correct":false},{"id":1710488,"option":"False","correct":true},{"id":1710489,"option":"Null","correct":false},{"id":1710490,"option":"Error","correct":false}]},{"q":"<p>What is the output of the following pseudocode:</p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>input string str=\"hackerearth\"\n\nfunction hacker_check(string str)\n  l = 0\n  h = length of string - 1;\n   while (h &gt; l)\n    if (str[l++] != str[h--])\n     f=1\n     break;\n\n  if(f==1)\n   return false\n  else \n   return true</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1709518,"option":"true","correct":false},{"id":1709519,"option":"false","correct":true},{"id":1709520,"option":"error","correct":false},{"id":1709521,"option":"null","correct":false}]},{"q":"<p>What is the output of the following pseudocode:</p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>Integer a\nString str1\nSet str1 = “hackerearth”\na = stringLength(str1)\nPrint (a ^ 1)</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1709444,"option":"0","correct":false},{"id":1709445,"option":"10","correct":true},{"id":1709446,"option":"11","correct":false},{"id":1709447,"option":"-1","correct":false}]},{"q":"<p>What is the output of the following pseudocode:</p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>String a, b, c\na=\"hacker\"\nb=\"earth\"\nc=\"hackerearth\"\nSet x = a.length, y = b.length, z = c.length\nz = (x ^ z)^ (x)\ny = y mod 4\nPrint x + y + z</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1709448,"option":"16","correct":false},{"id":1709449,"option":"15","correct":false},{"id":1709450,"option":"18","correct":true},{"id":1709451,"option":"22","correct":false}]},{"q":"<p>You are required to find valid and the longest parentheses. The provided code can be used to perform this task but some logic statements are missing in this code. Which of the following code statements will you use to replace <em>//code</em>?&nbsp;</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>function Hacker(string str){\n  n=length of string\n  if (n &lt;= 1)\n     return 0\n  declare and initialize x=0\n  declare an array arr of size n\n  arr={0};\n  for i=1 to n\n\tif (str[i] == ') and i - arr[i - 1] - 1 &gt;= 0 and str[i - arr[i - 1] - 1] == '(')\n        if(i - arr[i - 1] - 2 &gt;= 0)\n           arr[i]= arr[i - 1] + 2+ //code\n\t  x= max(arr[i], x);\n   return x;\n</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1690386,"option":"arr[i - arr[i - 1] - 2]","correct":true},{"id":1690387,"option":"arr[i - arr[i] - 2]","correct":false},{"id":1690388,"option":"arr[i - arr[i + 1] - 2]","correct":false},{"id":1690389,"option":"arr[arr[i - 1] - 2]","correct":false}]},{"q":"<p>What is the time complexity of the following code:</p>\n\n<pre class=\"prettyprint\"><code>func hacker(Queue Q)\n  read stack S\n  while (Q is not empty) \n\tpush(front of Q) into S\n\tpop top element of Q\n\n  while (S is not empty) \n\tpush(top of S)into Q\n\tpop top element S</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1689723,"option":"O(n)","correct":true},{"id":1689724,"option":"O(n*n)","correct":false},{"id":1689725,"option":"O(log n)","correct":false},{"id":1689726,"option":"O(n log n)","correct":false}]},{"q":"<p>In data structures, what is the time complexity of the following code:</p>\n\n<pre class=\"prettyprint\"><code>function Hackerearth(String str)\n  int n = length of str\n  Stack S\n  for i=0 to n\n    char ch = ith character of str\n      if (ch == '(')\n        push i into S\n       else if (ch == ')')\n\t\tif(top element of S == null)\n\t\t  return false\n\t\tpop element of S\n   return true</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1692129,"option":"O(log n)","correct":false},{"id":1692130,"option":"O(n)","correct":true},{"id":1692131,"option":"O(1)","correct":false},{"id":1692132,"option":"O(n log n)","correct":false}]},{"q":"<p>In data structures, which of the following code can reverse a string:</p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hackreverse(String str)\n  Stack stk\n  n=size of str\n  for i=0 to n\n    push(ith character of string)into stk\n  String rev = \"\";\n  while (stk is not empty)\n    rev = rev + stk.peek()\n  return rev</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hackreverse(String str)\n  Stack stk\n  n=size of str\n  for i=0 to n\n    push(ith character of string)into stk\n  String rev = \"\";\n  while (stk is not empty)\n    rev = rev + stk.pop()\n  return rev</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hackreverse(String str)\n  Stack stk\n  n=size of str\n  for i=0 to n\n    push(ith character of string)into stk\n  String rev = \"\";\n  while (stk is not empty)\n    rev = rev + stk.peek()</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hackreverse(String str)\n  Stack stk\n  n=size of str\n  for i=0 to n\n    push(ith character of string)into stk\n  String rev = \"\";\n  while (stk is not empty)\n    rev = rev + stk.pop()\n    pop element from stk\n  return rev</code></pre>\n\t</li>\n</ol>","a":[{"id":1692119,"option":"1","correct":false},{"id":1692120,"option":"2","correct":true},{"id":1692121,"option":"3","correct":false},{"id":1692122,"option":"4","correct":false}]},{"q":"<p>In data structures, what is the output of the following code:</p>\n\n<pre class=\"prettyprint\"><code>Input stack s= 20 6 5 10 11 -3 -2 5 4\n\nfunction Hackerearth(Stack s)\n  Stack temp\n  while (s is not empty) \n    push(top of s)into temp\n\tpop element from s\n\tbool result = true\n\twhile (size of temp &gt; 1) \n\t  int x = top of temp \n\t  pop element from temp\n\t  int y = top of temp\n      pop element from temp\n\t  if (abs(x - y) != 1)\n\t  result = false;\n\t  push x into s\n      push y into s\n\tif (size of temp == 1)\n\t  push(top of temp) into s\n return result</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1692115,"option":"True","correct":true},{"id":1692116,"option":"False","correct":false},{"id":1692117,"option":"Compilation error","correct":false},{"id":1692118,"option":"None of these","correct":false}]},{"q":"<p>In data structures, what is the output of the following code:</p>\n\n<pre class=\"prettyprint\"><code>input Q= [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n      k= 5\n\nfunction Hacker(int k, Queue Q)\n if (Q is empty or k &gt; size of Q)\n  return;\n if (k &lt;= 0)\n  return;\n Stack S\n for i=0 to k \n  push into S(front of Q)\n  pop from Q\n while (!S.empty())\n  push into Q(top element of S);\n  Stack.pop();\n for i=0 to size of Q-K\n  push into Q(front of Q);\n  pop from Q\n\nfunction print(queue&lt;int&gt;&amp; Q)\n  while (Q is not empty)\n   print(front of Q)\n   pop from Q</code></pre>","a":[{"id":1692111,"option":"50 40 30 20 10 60 70 80 90 100","correct":true},{"id":1692112,"option":"30 20 10 50 40 60 70 80 90 100","correct":false},{"id":1692113,"option":"10 20 30 40 50 60 70 80 90 100","correct":false},{"id":1692114,"option":"60 70 80 90 100 50 40 30 20","correct":false}]},{"q":"<p>In data structures, what is the output of the following code:</p>\n\n<pre class=\"prettyprint\"><code>For input string = \"IIDDD\"\n\nfunction(string str)\n  String res\n  n=length of str\n  Stack s;\n  for i=0 to n\n   s.push(i + 1);\n\tif (i == seq.length() or seq[i] == 'I')\n\t while s is not empty\n\t   res += convert to string(top ele of s)\n\t   res+= \" \"\n\t   s.pop()\n   print res\n</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1690561,"option":"4 1 6 5 4 3","correct":false},{"id":1690562,"option":"1 2 6 5 4 3","correct":true},{"id":1690563,"option":"1 2 3 4 5 6","correct":false},{"id":1690564,"option":"1 2 4 5 3 6","correct":false}]},{"q":"<p>You are given an incorrect code for a data structures algorithm that is supposed to determine whether a sequence of parentheses is balanced or not. Which of the following unbalanced sequences are balanced in the provided code?</p>\n\n<p><strong>Incorrect code</strong></p>\n\n<pre class=\"prettyprint\"><code>function hacker(string s)\n{\ndeclare a character stack; \nwhile (s is not empty){    \n    read a character;    \n    if (the character is a '(') {\n        push it on the stack;   \n    }\n    else if (the character is a ')' and the stack is not empty)  {\n        pop a character off the stack;    \n    }\n    else {\n        print \"unbalanced\" and exit;\n    }\n}\nprint \"balanced\";\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1688893,"option":"((())","correct":true},{"id":1688894,"option":"())(()","correct":false},{"id":1688895,"option":"(()()))","correct":false},{"id":1688896,"option":"(()))()","correct":false}]},{"q":"<p>In data structures, if the input stack is&nbsp;<em>[1, 2, 3, 4, 5]</em>, then what is the output of the following code:</p>\n\n<pre class=\"prettyprint\"><code>void hacker(Stack S, int n,int c=0)\n{\nif (S is empty || c == n)\n\treturn;\ncharacter x = S.top();\nS.pop();\nhacker(S, n, c+1);\nif (c != n/2)\n\tS.push(x);\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1688889,"option":"1 3 4 5","correct":false},{"id":1688890,"option":"1 2 4 5","correct":true},{"id":1688891,"option":"1 2 3 4 ","correct":false},{"id":1688892,"option":"2 3 4 5","correct":false}]},{"q":"<p>Which of the following options will you use to replace&nbsp;<strong>//CODE1&nbsp;</strong>in the provided code?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>func hacker(int hack[], int n, int a[])\n    STACK st\n    push 0 into st\n    a[0] = 1\n    for i=1 to n \n      while (st is not empty &amp;&amp; hack[top of st] &lt;= hack[i])\n            st.pop()\n      a[i] = //Code1\n      st.push(i)\n </code></pre>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>(st.empty()) ? (i + 1) : (i - st.top());</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>(st.top()) ? (i + 1) : (i - st.empty());</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>(st.top()) ? (i + 1) : (i - st.top());</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>(st.pop()) ? (i + 1) : (i - st.top());</code></pre>\n\t</li>\n</ol>","a":[{"id":1687678,"option":"1","correct":true},{"id":1687679,"option":"2","correct":false},{"id":1687680,"option":"3","correct":false},{"id":1687681,"option":"4","correct":false}]},{"q":"<p>What is the time&nbsp;complexity of the following code if <em>Code 2</em> is executed after <em>Code 1</em>?</p>\n\n<p><strong>Code 1</strong></p>\n\n<pre class=\"prettyprint\"><code>​void hacker1(int hack[], int n)\n\tstack s1;\n\tfor i=0 to n\n\tpush hack[i] into s1\n\tSTACK temp = calling function hacker2 by passing value s1\n\tfor i=0 to n\n\t  hack[i] = top of temp\n\t  pop the top value of temp</code></pre>\n\n<p><strong>Code 2</strong></p>\n\n<pre class=\"prettyprint\"><code>STACK hacker2(STACK s2)\n\tSTACK temp2;\n\twhile (s2 is not empty)\n\t\tint tmp = top of s2\n\t\ts2.pop();\n\t\twhile (!temp2.empty() &amp;&amp;temp2.top() &lt; tmp)\n\t\t\tpush(top of temp2) into s2\n\t\t\ttemp2.pop()\n\n\t\tpush tmp into temp2\n\treturn temp2</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1687401,"option":"O(n*n)","correct":true},{"id":1687402,"option":"O(n*n*n)","correct":false},{"id":1687403,"option":"O(n)","correct":false},{"id":1687404,"option":"O(n log n)","correct":false}]},{"q":"<p>What is the output&nbsp;of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nstack&lt;char&gt; st;\nstring ns;\nchar hack_insert(char x)\n{\n\tif(st.size() == 0)\n\tst.push(x);\n\telse\n\t{\n\t\tchar a = st.top();\n\t\tst.pop();\n\t\thack_insert(x);\n\t\tst.push(a);\n\t}\n}\nchar hack()\n{\n\tif(st.size()&gt;0)\n\t{\n\t\tchar x = st.top();\n\t\tst.pop();\n\t\thack();\n\t\thack_insert(x);\n\t}\n}\nint main()\n{\n\tst.push('1');\n\tst.push('2');\n\tst.push('3');\n\tst.push('4');\n\thack();\n\twhile(!st.empty())\n\t{\n\t\tchar p=st.top();\n\t\tst.pop();\n\t\tns+=p;\n\t}\n\tcout&lt;&lt;ns[3]&lt;&lt;\" \"&lt;&lt;ns[2]&lt;&lt;\" \"\n\t\t&lt;&lt;ns[1]&lt;&lt;\" \"&lt;&lt;ns[0]&lt;&lt;endl;\n\treturn 0;\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1686781,"option":"4 1 2 3","correct":false},{"id":1686782,"option":"4 3 2 1","correct":true},{"id":1686783,"option":"2 1 4 3","correct":false},{"id":1686784,"option":"1 2 4 3","correct":false}]},{"q":"<p>Consider the following code that does not contain some logical statements.&nbsp;</p>\n\n<pre class=\"prettyprint\"><code>For the input string=\"100 * ( 2 + 12 ) / 14\"\n\nint hack_apply(int a, int b, char op){\n  switch(op){\n\tcase '+': return a + b;\n\tcase '-': return a - b;\n\tcase '*': return a * b;\n\tcase '/': return a / b;\n\t}\n}\nint hack_prec(char op){\n\tif(op == '+'||op == '-')\n\treturn 1;\n\tif(op == '*'||op == '/')\n\treturn 2;\n\treturn 0;\n}\nint hack_eval(string str){\n\tint i;\n\tstack &lt;int&gt; valu;\n\tstack &lt;char&gt; ops;\n\tfor(i = 0; i &lt; str.length(); i++){\n\t  if(str[i] == ' ')\n\t\tcontinue;\n\t  //CODE_1\n\t  else if(isdigit(str[i])){\n\t\tint val = 0;\n\t  while(i &lt; str.length() &amp;&amp; isdigit(str[i])){\n\t\tval = (val*10) + (str[i]-'0');\n\t\ti++;\n\t\t}\n\t\tvalu.push(val);\n\t\ti--;\n\t\t}\n\t\telse if(str[i] == ')')\n\t\t{\n\t\t  while(!ops.empty() &amp;&amp; ops.top() != '(')\n\t\t    {\n\t\t\tint val2 = valu.top();\n\t\t\tvalu.pop();\n\t\t\tint val1 = valu.top();\n\t\t\tvalu.pop();\n\t\t\tchar op = ops.top();\n\t\t\tops.pop();\n\t\t\tvalu.push(hack_apply(val1, val2, op));\n\t\t\t}\n\t\t\tif(!ops.empty())\n\t\t\tops.pop();\n\t\t}\n\t\telse\n\t\t{\n\t\t  while(!ops.empty() &amp;&amp; hack_prec(ops.top())&gt;= hack_prec(str[i])){\n\t\t\t int val2 = valu.top();\n\t\t\t valu.pop();\n\t\t\t int val1 = valu.top();\n\t\t\t valu.pop();\n\t\t\t char op = ops.top();\n\t\t\t ops.pop();\n\t\t\t valu.push(hack_apply(val1, val2, op));\n\t\t\t}\n\t\t\tops.push(str[i]);\n\t\t}\n\t}\t\n   while(!ops.empty()){\n\t\tint val2 = valu.top();\n\t\tvalu.pop();\n\t\tint val1 = valu.top();\n\t\tvalu.pop();\n\t\tchar op = ops.top();\n\t\tops.pop();\n\t\tvalu.push(hack_apply(val1, val2, op));\n\t}\n\treturn valu.top();\n}</code></pre>\n\n<p>Which of these code statements will you use to replace CODE_1:</p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>else if(str[i] == '('){\nops.push(str[i]);\n}</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>else if(str[i] == '('){\nops.pop(str[i]);\n}</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>else if(str[i] == '('){\nops.push(str[i]);\nops.push(str[i+1]);\n}</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>else if(str[i] == '('){\nops.push(str[i]);\nops.peek(str[i+1]);\n}</code></pre>\n\t</li>\n</ol>","a":[{"id":1685645,"option":"1","correct":true},{"id":1685646,"option":"2","correct":false},{"id":1685647,"option":"3","correct":false},{"id":1685648,"option":"4","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid hack_print(int hack[], int n)\n{\n\tfor (int k = 1; k &lt;= n; k++) {\n\t\tint cal= INT_MIN;\n\t\tfor (int i = 0; i &lt;= n - k; i++) {\n\t\t\tint min = hack[i];\n\t\t\tfor (int j = 1; j &lt; k; j++) {\n\t\t\t\tif (hack[i + j] &lt; min)\n\t\t\t\t\tmin = hack[i + j];\n\t\t\t}\n\t\t\tif (min &gt; cal)\n\t\t\t\tcal= min;\n\t\t}\n\t\tcout &lt;&lt; cal&lt;&lt; \" \";\n\t}\n}\nint main()\n{\n\tint hack[] = { 10, 20, 30, 50, 10, 70, 30 };\n\tint n = sizeof(hack) / sizeof(hack[0]);\n\thack_print(hack, n);\n\treturn 0;\n}</code></pre>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>70 30 20 10 10 10 10 </code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>10 30 10 20 10 10 70</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>70 30 10 10 10 10 10 </code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>10 10 10 10 70 30 20</code></pre>\n\t</li>\n</ol>","a":[{"id":1685641,"option":"1","correct":true},{"id":1685642,"option":"2","correct":false},{"id":1685643,"option":"3","correct":false},{"id":1685644,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nbool hackeval(char a){\n switch (a) {\n  case '+':\n  case '-':\n  case '/':\n  case '*':\n  return true;\n }\n  return false;\n}\nstring hackexp(string str)\n{\n  stack&lt;string&gt; s;\n  int l = str.size();\n  for (int i = 0; i &lt; l; i++) {\n\tif (hackeval(str[i])) {\n\t  string op1 = s.top();\n\t  s.pop();\n\t  string op2 = s.top();\n\t  s.pop();\n\t  string temp = str[i] + op2 + op1;\n\t  s.push(temp);\n\t  }\n\t  else {\n\t  s.push(string(1, str[i]));\n\t  }\n\t}\n\tstring a = \"\";\n\twhile (!s.empty()) {\n\t\ta += s.top();\n\t\ts.pop();\n\t}\n\treturn a;\n}\nint main(){\n  string str = \"LOVE/-HA/CKER-*\";\n  cout &lt;&lt;hackexp(str);\n  return 0;\n}\n</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1674132,"option":"*-/-/LOVEHACKER","correct":false},{"id":1674133,"option":"LOVEHACKER*-/-/","correct":false},{"id":1674134,"option":"K*-ERCH/A-O/VEL","correct":false},{"id":1674135,"option":"*K-ERC/HA-O/VEL","correct":true}]},{"q":"<p>What is the time complexity of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nvoid hack(int h[], int n)\n{\n   stack&lt;int&gt; s;\n   s.push(h[0]);\n   for (int i = 1; i &lt; n; i++)\n\t{\n      if (s.empty()) {\n\t    s.push(h[i]);\n\t\tcontinue;\n\t\t}\n\t  while (s.empty() == false\n\t\t\t&amp;&amp; s.top() &lt; h[i])\n\t\t{\n\t\t  cout &lt;&lt; s.top()&lt;&lt; \" --&gt; \" &lt;&lt; h[i] &lt;&lt; endl;\n\t\t  s.pop();\n\t\t}\n\t\ts.push(h[i]);\n\t}\n     while (s.empty() == false) {\n        cout &lt;&lt; s.top() &lt;&lt; \" --&gt; \" &lt;&lt; -1 &lt;&lt; endl;\n        s.pop();\n    }\n}\nint main()\n{\n  int arr[] = { 17, 18, 21, 3 };\n  int n = sizeof(arr) / sizeof(arr[0]);\n  hack(arr, n);\n  return 0;\n}\n</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1674128,"option":"O(n)","correct":true},{"id":1674129,"option":"O(log n)","correct":false},{"id":1674130,"option":"O(n^2)","correct":false},{"id":1674131,"option":"O(1)","correct":false}]},{"q":"<p>In data structures, what is the time complexity of the following code:</p>\n\n<pre class=\"prettyprint\"><code>int hacker_no(int n)\n  int p = 1, ans = 0\n  while (n)\n   p = p*5\n   if (n &amp; 1)\n\tans += p\n   n &gt;&gt;= 1; \n return ans\n</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1668559,"option":"O(log n)","correct":true},{"id":1668560,"option":"O(n)","correct":false},{"id":1668561,"option":"O(n log n)","correct":false},{"id":1668562,"option":"O(n*n)","correct":false}]},{"q":"<p>In data structures, if the <strong>hacker</strong> function is called with&nbsp;<span class=\"mathjax-latex\">\\(parameter\\ 3\\ge hacker(3)\\)</span>, then determine the time complexity of the following code:</p>\n\n<pre class=\"prettyprint\"><code>int hackSetBits(int i)\n  unsigned int c = 0\n\twhile (i) \n\t  i &amp;= (i - 1)\n\t  c++\n\treturn c\nint hackconvert(int j)\n   int count = 0\n   j--\n   while (j &gt; 0) \n\tj = j &gt;&gt; 1\n\tcount++\n   return count\nbool hacker(int n)\n  for (int x = n - hackconvert(n); x &lt; n; x++)\n\tif (x + hackSetBits(x) == n)\n\t return false\n\treturn true\n</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1668555,"option":"O(log n)","correct":false},{"id":1668556,"option":"O(logn * logn)","correct":true},{"id":1668557,"option":"O(n)","correct":false},{"id":1668558,"option":"O(n^2)","correct":false}]},{"q":"<p>In data structures, what is the time complexity of the following code in which the size of the array hack is <span class=\"mathjax-latex\">\\(N\\)</span>:</p>\n\n<pre class=\"prettyprint\"><code>int hacksearch(int hack[], int a, int b, int key)\n\tif (a &gt; b)\n\t\treturn -1\n\tint mid = (a + b) / 2\n\tif (hack[mid] == key)\n\t\treturn mid;\n\tif (hack[l] &lt;= hack[mid]) \n\t\tif (key &gt;= hack[l] &amp;&amp; key &lt;= hack[mid])\n\t\t  return search(hack, a, mid - 1, key)\n\t  return search(hack, mid + 1, b, key)\n\tif (key &gt;= arr[mid] &amp;&amp; key &lt;= hack[h])\n\t\treturn search(hack, mid + 1, b, key)\n\treturn search(hack, a, mid - 1, key)</code></pre>","a":[{"id":1668551,"option":"O(log N)","correct":true},{"id":1668552,"option":"O(N)","correct":false},{"id":1668553,"option":"O(N log N)","correct":false},{"id":1668554,"option":"None of these","correct":false}]},{"q":"<p>In data structures, what is the time complexity of the following code:</p>\n\n<pre class=\"prettyprint\"><code>void hacksort(HackNode** head)\n{\n\tHackNode* pre = (*head);\n\tHackNode* cur = (*head)-&gt;next;\n\twhile (cur != NULL)\n\t{\n\t if (cur-&gt;data &lt; prev-&gt;data)\n\t  {\n\t\tpre-&gt;next = cur-&gt;next;\n\t\tcur-&gt;next = (*head);\n\t\t(*head) = cur;\n\t\tcur = pre;\n\t   }\n\t\telse\n\t\t  pre = cur;\n\t\tcur = cur-&gt;next;\n\t}\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1668431,"option":"O(n)","correct":true},{"id":1668432,"option":"O(log n)","correct":false},{"id":1668433,"option":"O(n log n)","correct":false},{"id":1668434,"option":"None of these","correct":false}]},{"q":"<p>In data structures, what is the time complexity of the following code:</p>\n\n<pre class=\"prettyprint\"><code>void func_hack(int m, int n, int mat[r][c])\n  int i, k = 0, l = 0\n  while (k &lt; m &amp;&amp; l &lt; n)\n    for i=l to n\n\t  PRINT mat[k][i]\n\t   k++;\n\tfor i=k to m \n\t  PRINT mat[i][n - 1]\n\t   n--\n\tif (k &lt; m) \n\tfor i=n-1 to l \n\t  PRINT mat[m - 1][i]\n\t   m--\n\tif (l &lt; n) \n\tfor i=m-1 to k \n\t  PRINT mat[i][l]\n\t   l++</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1668411,"option":"O(m*n)","correct":true},{"id":1668412,"option":"O(m)","correct":false},{"id":1668413,"option":"O(n)","correct":false},{"id":1668414,"option":"None of these","correct":false}]},{"q":"<p>In data structures, what is the time complexity of the following code:</p>\n\n<pre class=\"prettyprint\"><code>function HackSpan(int arr[], int n, int sum[])\n\tstack st\n\tpush 0 into stack\n\tsum[0] = 1\n\tfor (int i = 1; i &lt; n; i++) \n\t  while (st is not empty &amp;&amp; arr[top of st] &lt;= ith element of arr)\n\t    pop top element of st\n      end of while\n\t\tif(st is empty) then \n         sum[i]=i + 1\n        else\n         sum[i]=(i - top of st)\n        end if\n\t push i into st</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1668399,"option":"O(log n)","correct":false},{"id":1668400,"option":"O(n)","correct":true},{"id":1668401,"option":"O(n^2)","correct":false},{"id":1668402,"option":"O(n log n)","correct":false}]},{"q":"<p>What is the output of the following pseudocode?</p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>For input array: hack[] = {2, 2, 2, 6, 6, 11, 2}\n                      n = 7\nfunc hackLen(int hack[], int n)\n  int m = 1; \n  for i=1 to n-1\n    Set S\n    insert(hack[i]) into S\n     mn = hack[i]\n     mx = hack[i]\n\t for j=i+1 to n\n\t   if (s.find(hack[j]) != s.end())\n\t\t  break;\n\t   insert(hack[j]) into S\n\t   mn = minimum of (mn, hack[j])\n\t   if (mx - mn == j - i)\n\t      m= maximum of(m, mx - mn + 1)\n   return m</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1671098,"option":"1","correct":true},{"id":1671099,"option":"2","correct":false},{"id":1671100,"option":"3","correct":false},{"id":1671101,"option":"Compile time error","correct":false}]},{"q":"<p>What is the output of the following pseudocode?</p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>FOR Input: hack1[] = {10, 5, 3, 4, 6}\n           hack2[] = {8, 7, 9, 3}\n           n1= 5\n           n2= 4\n\nfunc hack_check(int hack1[], int hack2[], int n1, int n2)\n SET s\n for i=0 to n1\n  insert(hack1[i])into s\n for i=0 to n2\n  if (hack2[i]is present in s)\n\t\treturn No\n return Yes</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1671064,"option":"Yes","correct":false},{"id":1671065,"option":"No","correct":true},{"id":1671066,"option":"Compilation Error","correct":false},{"id":1671067,"option":"Runtime Error","correct":false}]},{"q":"<p>What is the output of following C++ code?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nint hack_count(int hack[] , int n)\n{\n\tint res = 0;\n\tset&lt; int &gt; H;\n\tfor (int i = 0 ; i &lt; n; i++)\n\t\tH.insert(hack[i]);\n\tfor (int i = 0 ; i &lt; n; i++)\n\t{\n\t\tfor (int j = i + 1; j&lt;n ; j++)\n\t\t{\n\t\t\tint product = hack[i]*hack[j];\n\t\t\tif (H.find(product) != H.end())\n\t\t\t\tres++;\n\t\t}\n\t}\n\treturn res;\n}\nint main()\n{\n\tint a[] = {8 ,2 ,4 ,16 ,15 , 3, 5};\n\tint n = sizeof(a)/sizeof(a[0]);\n\tcout &lt;&lt; hack_count(a, n) ;\n\treturn 0;\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1665946,"option":"3","correct":true},{"id":1665947,"option":"4","correct":false},{"id":1665948,"option":"5","correct":false},{"id":1665949,"option":"6","correct":false}]},{"q":"<p>What is the output of the following C++ code?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nstruct hack_comp {\n\tbool operator()(pair&lt;int, int&gt; x, pair&lt;int, int&gt; y)\n\t{\n\t\tif (x.second == y.second)\n\t\t\treturn x.first &lt; y.first;\n\t\treturn x.second &lt; y.second;\n\t}\n};\nvoid hack_freq(int hack[], int n, int k)\n{\n\tunordered_map&lt;int, int&gt; um;\n\tfor (int i = 0; i &lt; n; i++)\n\t\tum[hack[i]]++;\n\tpriority_queue&lt;pair&lt;int, int&gt;, vector&lt;pair&lt;int, int&gt; &gt;,hack_comp&gt;\n\t\tpq(um.begin(), um.end());\n\tfor (int i = 1; i &lt;= k; i++) {\n\t\tcout &lt;&lt; pq.top().first &lt;&lt; \" \";\n\t\tpq.pop();\n\t}\n}\nint main()\n{\n\tint a[] = { 3, 3, 4, 4, 6, 2, 6, 1 };\n\tint n = sizeof(a) / sizeof(a[0]);\n\tint k = 2;\n\thack_freq(a, n, k);\n\treturn 0;\n}\n</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1665942,"option":"6 4 3","correct":false},{"id":1665943,"option":"6 4","correct":true},{"id":1665944,"option":"4 3","correct":false},{"id":1665945,"option":"None of these","correct":false}]},{"q":"<p>Alice was given&nbsp;an array containing only <em>0s</em> and <em>1s</em>.&nbsp;His task was to find the largest subarray which contains the equal number of <em>0s</em> and <em>1s</em>.&nbsp;</p>\n\n<p><strong>Example</strong></p>\n\n<pre><strong>Input:</strong> arr[] = {1, 0, 1, 1, 1, 0, 0}\n<strong>Output:</strong> 1 to 6 </pre>\n\n<p>Alice came up with the pseudocode but missed some of the statements in between:</p>\n\n<pre class=\"prettyprint\"><code>int hack_left[n]\nRun a loop from i=0 to n-1\n  if(arr[i]==0)\n  hacksum[i] = hacksum[i-1]+-1\n  else\n  hacksum[i] = hacksum[i-1]+-1\n        if (hacksum[i] &gt; max)\n            max = hacksum[i];\nRun a loop from i=0 to n-1\n if (hacksum[i] == 0)\n        {\n           hackmax = i+1;\n           startindex = 0;\n        }\n        if (hash[hacksum[i]-min] == -1)\n            hash[hacksum[i]-min] = i;\n        else\n        {\n            if ((i - hash[hacksum[i]-min]) &gt; maxsize)\n            {\n                //line 1\n                //line 2\n            }\n        }\nreturn hackmax</code></pre>\n\n<p>Can you help Alice in finding what will come in place of line <em>1</em> and line <em>2</em>?</p>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>hackmax = i - hash[hacksum[i]-min];\nstartindex = hash[hacksum[i]-min] + 1;</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>hackmax = i - hash[hacksum[i+1]-min];\nstartindex = hash[hacksum[i+1]-min] + 1;</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>hackmax = i - hash[hacksum[i]+min];\nstartindex = hash[hacksum[i]+min] + 1;</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>hackmax = i - hash[hacksum[i-1]-min];\nstartindex = hash[hacksum[i-1]-min] + 1;</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1665938,"option":"1","correct":true},{"id":1665939,"option":"2","correct":false},{"id":1665940,"option":"3","correct":false},{"id":1665941,"option":"4","correct":false}]},{"q":"<p>Alice and Bob want to choose a place to do their training and they both have a list of favorite places&nbsp;represented by strings.<br>\nYou need to help them find out their common interest with the least index sum. If there is a choice tie between answers, print all of them with no order requirement. Assume there always exists an answer.</p>\n\n<p>Here is the code which they came up with. Can you help them find the complexity?</p>\n\n<pre class=\"prettyprint\"><code>void hack_find(vector&lt;string&gt; v1, vector&lt;string&gt; v2)\n   unordered_map&lt;string, int&gt; map\n\tfor i=0 to v1.size()\n\t\tmap[v1[i]] = i\n\tvector&lt;string&gt; res\n\tint minsum = INT_MAX\n\tfor j=0 to v2.size()\n\t  if (map.count(v2[j]))\n\t\tint sum = j + map[v2[j]]\n\t\t\tif (sum &lt; minsum)\n\t\t\t  minsum = sum\n\t\t\t  res.clear()\n\t\t\t  res.push_back(v2[j])\n\t\t\telse if (sum == minsum)\n\t\t\t\tres.push_back(v2[j])\n\tfor i=0 to res.size()\n\t\tprint(res[i])</code></pre>\n\n<p><em>(Note:&nbsp;M</em> and <em>N</em> are the lengths of the two vectors respectively)</p>","a":[{"id":1665934,"option":"O(M)","correct":false},{"id":1665935,"option":"O(N)","correct":false},{"id":1665936,"option":"O(M+N)","correct":true},{"id":1665937,"option":"O(M*N)","correct":false}]},{"q":"<p>What is the complexity of the given code?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nbool hackeq(int hack1[], int hack2[], int n, int m){\n if (n != m)\n  return false;\n sort(hack1, hack1 + n);\n sort(hack2, hack2 + m);\n for (int i = 0; i &lt; n; i++)\n   if (hack1[i] != hack2[i])\n\treturn false;\n return true;\n}\nint main(){\n int a[] = {5,2,3};\n int b[] = {2,3,5};\n int n = sizeof(a) / sizeof(int);\n int m = sizeof(b) / sizeof(int);\n  if (hackeq(a, b, n, m))\n   cout &lt;&lt; \"Yes\";\n  else\n   cout &lt;&lt; \"No\";\n  return 0;\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1663220,"option":"O(n)","correct":false},{"id":1663221,"option":"O(n log n)","correct":true},{"id":1663222,"option":"O(log n)","correct":false},{"id":1663223,"option":"O(n^2)","correct":false}]},{"q":"<p>What is the output of following C++ code?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>vector&lt;int&gt; hackDiv(int n){\n vector&lt;int&gt; vec;\n for (int i = 1; i &lt;= sqrt(n); i++) {\n if (n % i == 0) {\n if (n / i == i)\n vec.push_back(i);\n else {\n vec.push_back(i);\n vec.push_back(n / i);\n }\n }\n }\n return vec;\n}\nbool hackPairs(int hack[], int n, int k){\n unordered_map&lt;int, bool&gt; occ;\n for (int i = 0; i &lt; n; i++)\n   occ[hack[i]] = true;\n   bool hackFound = false;\n for (int i = 0; i &lt; n; i++) {\n    if (occ[k] &amp;&amp; k &lt; hack[i])\n    cout &lt;&lt; \"(\" &lt;&lt; k &lt;&lt; \", \" &lt;&lt; hack[i] &lt;&lt; \") \";\n hackFound = true;\n }\n if (hack[i] &gt;= k) {\n vector&lt;int&gt; v = hackDiv(hack[i] - k);\n for (int j = 0; j &lt; v.size(); j++) {\n if (hack[i] % v[j] == k &amp;&amp; hack[i] != v[j] &amp;&amp; occ[v[j]]) {\n cout &lt;&lt; \"(\" &lt;&lt; hack[i] &lt;&lt; \", \"&lt;&lt; v[j] &lt;&lt; \") \";\n hackFound = true;\n }\n }\n v.clear();\n }\n }\n return hackFound;\n}</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>(2, 3) (2, 6) (2, 5) (5, 3) </code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>(2, 3) (2, 6) (2, 5) (3, 5)</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>(2, 3) (3, 6) (2, 5) (5, 6)</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>No such pair exists</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1663216,"option":"1","correct":true},{"id":1663217,"option":"2","correct":false},{"id":1663218,"option":"3","correct":false},{"id":1663219,"option":"4","correct":false}]},{"q":"<p>What is the output of the following C++ code?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nint hackfind(int hackarr[], int n){\n unordered_map&lt;int, int&gt; m;\n for (int i = 0; i &lt; n; i++)\n m[hackarr[i]]++;\n sort(hackarr, hackarr + n);\n for (int i = n - 1; i &gt; 1; i--) {\n  for (int j = 0; j &lt; i &amp;&amp; hackarr[j] &lt;= sqrt(hackarr[i]);j++) {\n   if (hackarr[i] % hackarr[j] == 0) {\n    int result = hackarr[i] / hackarr[j];\n     if (result != hackarr[j] &amp;&amp; result!=hackarr[i] &amp;&amp; m[result] &gt; 0)\n     return hackarr[i];\n     else if (result == hackarr[j] &amp;&amp; m[result] &gt; 1)\n     return hackarr[i];\n     }\n   }\n }\nreturn -1;\n}\nint main()\n{\n\tint a[] = { 17, 22, 1, 15, 34};\n\tint n = sizeof(a) / sizeof(a[0]);\n\tcout &lt;&lt; hackfind(a, n);\n\treturn 0;\n}\n</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1663200,"option":"-1","correct":true},{"id":1663201,"option":"17","correct":false},{"id":1663202,"option":"22","correct":false},{"id":1663203,"option":"15","correct":false}]},{"q":"<p>What is the output of the following C++ code?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nbool ishack(int n){\n if (n &lt;= 1) return false;\n for (int i = 2; i &lt; n; i++)\n if (n % i == 0)\n return false;\n return true;\n}\nvoid hack_prime(int arr[], int k){\n unordered_map&lt;int, int&gt; map;\n for (int i = 0; i &lt; 12; i++)\n map[arr[i]]++;\n for (auto x : map){\n if (ishack(x.second) &amp;&amp; x.second &gt;= k)\n cout &lt;&lt; x.first &lt;&lt; endl;\n}\n}\nint main()\n{\n\tint a[] = {11, 11, 11, 37, 37, 51, 51, 51};\n\tint k = 3;\n\thack_prime(a, k);\n\treturn 0;\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1663212,"option":"11\r\n51","correct":true},{"id":1663213,"option":"37\r\n37","correct":false},{"id":1663214,"option":"37 \r\n51","correct":false},{"id":1663215,"option":"11 \r\n37","correct":false}]},{"q":"<p>Bob loves to solve new problems on data structures and algorithms. He always comes up with the best solution possible but for the first time, he was unsure about the complexity of the code he came up with.</p>\n\n<p>Can you help him find the complexity of the given code?</p>\n\n<pre class=\"prettyprint\"><code>int function_hack(int arr[],int n, int l)\n  unordered_map&lt;int, int&gt; um\n\tint a[n], max = 0\n\tint sum = 0\n\tfor (int i = 0; i &lt; n; i++)\n\t\tsum += arr[i]\n\t\ta[i] = ((sum % l) + l) % l\n\tfor (int i = 0; i &lt; n; i++)\n\t    if (a[i] == 0)\n\t\t\tmax = i + 1\n\t\telse if (um.find(a[i]) == um.end())\n\t\t\tum[a[i]] = i\n\t\telse\n\t\t\tif (max &lt; (i - um[a[i]]))\n\t\t\t\tmax = i - um[a[i]]\t\t\n\treturn max</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1661259,"option":"O(n)","correct":true},{"id":1661260,"option":"O(log n)","correct":false},{"id":1661261,"option":"O(n^2)","correct":false},{"id":1661262,"option":"O(n log n)","correct":false}]},{"q":"<p>What is the output of following code?</p>\n\n<p><em>int seq[] = { 3, 4, 5, 12, 40, 55};<br>\nint n = sizeof(a) / sizeof(a[0]);</em></p>\n\n<pre class=\"prettyprint\"><code>int hacksequence(int seq[], int n)\n unordered_map&lt;int, int&gt; m\n int arr[n]\n memset(arr, 0, sizeof(arr))\n int maxi = INT_MIN\n for (int i = 0; i &lt; n; i++) \n  if (m.find(seq[i] - 1) != m.end()) \n   int lastIndex = m[seq[i] - 1] - 1\n   arr[i] = 1 + arr[lastIndex]\n  else\n   arr[i] = 1\n m[seq[i]] = i + 1\n maxi = max(maxi, arr[i])\nprint maxi\n</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1661255,"option":"3","correct":true},{"id":1661256,"option":"4","correct":false},{"id":1661257,"option":"5","correct":false},{"id":1661258,"option":"6","correct":false}]},{"q":"<p>Alpha and Beta are best friends. They were both given a set of numbers and were asked to form the resultant array of equal size. The condition was such that the&nbsp;numbers which are maximum in their respective arrays should be present in the resultant array Gamma[ ].&nbsp;If there are common elements, then only one element should be present in Gamma[ ] and priority should be given to Alpha[ ].</p>\n\n<p><em>Example</em></p>\n\n<p><em>Input</em>:&nbsp; <em>Alpha[ ] = { 8, 7, 5, 4, 6 }</em>;<br>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<em>Beta[ ] = { 1, 4, 9, 0, 2 };</em></p>\n\n<p><em>Output</em>: <em>Gamma[ ]= {8, 7, 5, 6, 9}</em></p>\n\n<pre class=\"prettyprint\"><code>void hackerearth(int Alpha[], int Beta[],int n){\n\tvector&lt;int&gt; dup1(Alpha, Alpha+n);\n\tvector&lt;int&gt; dup2(Beta, Beta+n);\n\tsort(dup1.begin(), dup1.end(), greater&lt;int&gt;());\n\tsort(dup2.begin(), dup2.end(), greater&lt;int&gt;());\n\tunordered_map&lt;int, int&gt; mp;\n\tint i = 0, j = 0;\n\twhile (mp.size() &lt; n){\n\t\tif (dup1[i] &gt;= dup2[j]){\n\t\t\tmp[dup1[i]]++;\n\t\t\ti++;\n\t\t}\n\t\telse{\n\t\t\tmp[dup2[j]]++;\n\t\t\tj++;\n\t\t}\n\t}\n\tvector&lt;int&gt; gamma;\n\tfor (int i = 0; i &lt; n; i++)\n\t\tif (mp.find(Alpha[i]) != mp.end())\n\t\tgamma.push_back(Alpha[i]);\n\tfor (int i = 0; i &lt; n; i++)\n\t\tif (mp.find(Beta[i]) != mp.end() &amp;&amp;\n\t\t\tmp[Beta[i]] == 1)\n\t\tgamma.push_back(Beta[i]);\n}</code></pre>\n\n<p>Can you help Alpha and Beta in finding the complexity of the given <em>find_gamma</em> function?</p>","a":[{"id":1659279,"option":"O(n)","correct":false},{"id":1659280,"option":"O(n log n)","correct":true},{"id":1659281,"option":"O(n^2)","correct":false},{"id":1659282,"option":"O(log n)","correct":false}]},{"q":"<p>Alice was given a set of numbers and was asked to find the largest number <em>S</em>&nbsp;such that<em> P+Q+R=S</em>. Given that <em>P, Q, R, S</em> all belong to the given set.</p>\n\n<p><em>Example</em>&nbsp;</p>\n\n<p><em>Input:</em> <em>Alice[] = {4, 3, 5, 7, 14}</em>&nbsp;<br>\n<em>Output</em>: <em>14</em></p>\n\n<pre class=\"prettyprint\"><code>int find_S(int alice[], int n)\n  unordered_map&lt;int, pair&lt;int, int&gt; &gt; m\n\tfor (int i = 0; i &lt; n - 1; i++)\n\t\tfor (int j = i + 1; j &lt; n; j++)\n\t\t\tm[alice[i] + alice[j]] = { i, j }\n\tint d = INT_MIN;\n\tfor (int i = 0; i &lt; n - 1; i++) \n\t\tfor (int j = i + 1; j &lt; n; j++) \n\t\t\tint abs_diff = abs(alice[i] - alice[j])\n\t\t\tif (m.find(abs_diff) != m.end())\n\t\t\t\tpair&lt;int, int&gt; p = m[abs_diff]\n\t\t\t\t//CODE\n\treturn d</code></pre>\n\n<p>Can you help Alice to replace <em>//CODE</em> from the given options?</p>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>if (p.first != i &amp;&amp; p.first != j &amp;&amp; p.second != i &amp;&amp; p.second != j)\nd = max(d, max(alice[i], alice[j]));</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>if (p.first != i &amp;&amp; p.first != j &amp;&amp; p.second != i &amp;&amp; p.second != j)\nd = max(d, min(alice[i], alice[j]));</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>if (p.first != i &amp;&amp; p.first != j &amp;&amp; p.second != i &amp;&amp; p.second != j)\nd = min(d, max(alice[i], alice[j]));</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>if (p.first != i &amp;&amp; p.first != j &amp;&amp; p.second != i &amp;&amp; p.second != j)\nd = min(d, min(alice[i], alice[j]));</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1659185,"option":"1","correct":true},{"id":1659186,"option":"2","correct":false},{"id":1659187,"option":"3","correct":false},{"id":1659188,"option":"4","correct":false}]},{"q":"<p>Bob loves to play with numbers but his favorite one is <em>0</em>. He was given an array of numbers and was asked to print the number of subarrays possible which sum up to 0.</p>\n\n<p><em>Example</em></p>\n\n<pre><em>Input:</em><strong> </strong>arr = [6, 3, -1, -3, 4, -2, 2, 4, 6, -12, -7]\n<em>Output:</em><strong> </strong> 5</pre>\n\n<pre class=\"prettyprint\"><code>int hacker(int arr[], int n)\n    unordered_map&lt;int, list&lt;int&gt; &gt; map\n\tint res=0\n\tint s= 0\n\tfor (int i = 0; i &lt; n; i++){\n\t  s += arr[i]\n\t  if (s == 0)\n\t\tres++;\n\t\tif (map.find(s) != map.end())\n\t\t list&lt;int&gt; l= map[s]\n\t\t //Line 6\n\t   map[s].push_back(i)\n\treturn res</code></pre>\n\n<p>He came up with the code, but some code in between went missing. Can you help him replace <em>//Line 6</em>&nbsp;from the given options?</p>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>for (auto it = l.begin(); it != l.end(); it++)\nres++;</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>for (auto it = l.begin(); it != l.end()-1; it++)\nres++;</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>for (auto it = l.begin(); it != l.end(); it++)\nres+=2;</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>for (auto it = l.begin(); it != l.end(); it++)\nres--;</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1659030,"option":"1","correct":true},{"id":1659031,"option":"2","correct":false},{"id":1659032,"option":"3","correct":false},{"id":1659033,"option":"4","correct":false}]},{"q":"<p>Bob and&nbsp;his friends received an invitation to the party, but in order to go to that party they had to follow some rules which are:</p>\n\n<ol>\n\t<li>They could only go in pair</li>\n\t<li>The ages of the people in pair should add up to the given value.</li>\n</ol>\n\n<p><em>Example</em></p>\n\n<pre>Input: arr[] = {1, 5, 7, -1}, \n          sum = 6\nOutput: 2\nExplanation\nPairs with sum 6 are (1, 5) and (7, -1)\n</pre>\n\n<pre class=\"prettyprint\"><code>function Count(int a[], int n, int k)\n  unordered_map&lt;int, int&gt; m\n\tint c = 0\n\tfor (int i = 0; i &lt; n; i++) \n       //Line 6\n\t\tm[a[i]]++\n   return c\n</code></pre>\n\n<p>Bob came up with a solution but is somewhere missing the logic. Can you help him replace <em>//Line 6</em><strong>&nbsp;</strong>in&nbsp;the given code?</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code> if (m.find(k - a[i]) != m.end()) \n            c+= m[k - a[i]];</code></pre>\n\n\t<p>&nbsp;</p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>if (m.find(k - a[i+1]) != m.end())\n            c+= m[k - a[i+1]];</code></pre>\n\n\t<p>&nbsp;</p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>if (m.find(k - a[i])== m.end())\n            c+= m[k - a[i]];</code></pre>\n\n\t<p>&nbsp;</p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>if (m.find(k) != m.end())\n        c+= m[k - a[i]];</code></pre>\n\n\t<p>&nbsp;</p>\n\t</li>\n</ol>","a":[{"id":1656061,"option":"1","correct":true},{"id":1656062,"option":"2","correct":false},{"id":1656063,"option":"3","correct":false},{"id":1656064,"option":"4","correct":false}]},{"q":"<p>Alice and his friends decided to live together for their studies. As they&nbsp;are of the same age, their books were of similar numbers. Alice decided to arrange the books based on the decreasing frequency of the books. Considering if more than one&nbsp;books have the same frequency then print the one which came first.&nbsp;</p>\n\n<p><strong>Example</strong></p>\n\n<p>Input: <em>book[] = {2, 5, 2, 8, 5, 6, 8, 8}</em></p>\n\n<p>Output: <em>book[] = {8, 8, 8, 2, 2, 5, 5, 6}</em></p>\n\n<p>As the book with number 8 has come thrice then it will come first, then books with number 2 and 5 have same frequency but book number 2 came first so it will be printed first and then 5, then at last book with number 6 and least frequency is printed.</p>\n\n<pre class=\"prettyprint\"><code>bool sorting(const pair&lt;int, int&gt;&amp; p,\n\t\t\t\t\tconst pair&lt;int, int&gt;&amp; q)\n{\nif (p.second == q.second)\n\treturn p.first &lt; q.first;\nreturn p.second &gt; q.second;\n}\nvector&lt;int&gt;sortf(int arr[], int n)\n{\nvector&lt;int&gt;res;\nunordered_map&lt;int, int&gt; m;\nvector&lt;pair&lt;int, int&gt; &gt; v;\nfor (int i = 0; i &lt; n; ++i) {\n\tm[arr[i]]++;\t\n}\ncopy(m.begin(), m.end(), back_inserter(v));\nsort(v.begin(), v.end(), sorting);\nfor (int i = 0; i &lt; v.size(); ++i)\n\twhile(v[i].second--){\n\t   res.push_back(v[i].first);\n\t}\nreturn res;\n}\nint main()\n{\nint arr[];\nres = sortf(arr, n);\nreturn 0;  \n}\n</code></pre>\n\n<p>Alice came up with a solution but he is not sure about its complexity. Can you help him find the complexity in this scenario?</p>\n\n<p>(<em>Note</em>: N&nbsp;is the total number of elements and M is the total number of distinct elements)</p>","a":[{"id":1656053,"option":"O(N)","correct":false},{"id":1656054,"option":"O(N+MlogM)  ","correct":true},{"id":1656055,"option":"O(M)","correct":false},{"id":1656056,"option":"O(MlogN)","correct":false}]},{"q":"<p>What is the time complexity of the following pseudocode?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>function hacker(node* node){\n   if(node == null)\n      return 0\n   else{ \n      int a = hacker(node-&gt;left)\n      int b = hacker(node-&gt;right)\n      if a &gt; b\n         return a+1\n      else \n         return b+1\n   }\n}</code></pre>\n\n<p> </p>","a":[{"id":1668639,"option":"O(logn)","correct":false},{"id":1668640,"option":"O(n)","correct":true},{"id":1668641,"option":"O(nlogn)","correct":false},{"id":1668642,"option":"O(2^n)","correct":false}]},{"q":"<p>Which of the following option is true about Time Complexity?</p>\n\n<p><strong>Code 1</strong></p>\n\n<pre class=\"prettyprint\"><code>function hacker(int n)\n   if n == 0\n      return 0\n   else if n ==1\n      return 1\n   return hacker(n-1) + hacker(n-2)</code></pre>\n\n<p><strong>Code 2</strong></p>\n\n<pre class=\"prettyprint\"><code>function hacker(int n)\n   if n==0\n      return 0\n   first = 0\n   second = 1\n   while n&gt;1\n      temp = first+second\n      first = second\n      second = temp\n      n--\n   return second\n</code></pre>\n\n<p> </p>","a":[{"id":1668631,"option":"Code 1 is more time-efficient than Code 2","correct":false},{"id":1668632,"option":"Code 2 is more time-efficient than Code 1\r\n","correct":true},{"id":1668633,"option":"Time complexity of Code 1 and Code 2 is same","correct":false},{"id":1668634,"option":"None of the above","correct":false}]},{"q":"<p>What is the output of the following pseudo code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>For InputArray[]={1,2,3}\n\nfunction(int arr[])\n   n = Size of arr\n   count[10] = {0}\n\n   for (i=0;i&lt;n;i++)\n      for (j=arr[i]-1;j&gt;=0;j--)\n         count[arr[i]] = count[arr[i]] + count[j]\n      count[arr[i]]++\n\n   result = 0\n   for (i=0;i&lt;10;i++)\n      result = result + count[i];\n\n   return result</code></pre>\n\n<p> </p>\n\n<p> </p>","a":[{"id":1668407,"option":"6","correct":false},{"id":1668408,"option":"7","correct":true},{"id":1668409,"option":"5","correct":false},{"id":1668410,"option":"14","correct":false}]},{"q":"<p>What is the output of the following pseudo code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>For InputArray[]={2,-2,1,5,3}\n\nfunction(int arr[])\n   max=INT_MIN\n   max_end=0\n   n = Length of Array\n   for i=0 to n-1\n      max_end = max_end + arr[i]\n      if (max &lt; max_end)\n         max = max_end\n      if (max_end &lt; 0)\n         max_end = 0\n   return max</code></pre>\n\n<p> </p>","a":[{"id":1668403,"option":"7","correct":false},{"id":1668404,"option":"9","correct":true},{"id":1668405,"option":"10","correct":false},{"id":1668406,"option":"8","correct":false}]},{"q":"<p>What is the output of the following pseudo code:</p>\n\n<p><strong>Code</strong> </p>\n\n<pre class=\"prettyprint\"><code>For input1=3\n\nfunction(input1)\n   if( input1 == 0 or input1 == 1)\n      return 1\n   return function(input1-1) * (2 * function(input1-2)+function(input1-1))\n</code></pre>\n\n<p> </p>","a":[{"id":1668395,"option":"16","correct":false},{"id":1668396,"option":"13","correct":false},{"id":1668397,"option":"15","correct":true},{"id":1668398,"option":"12","correct":false}]},{"q":"<p>What is the output of the following pseudo code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>For InputString = \"abcdcba\"\n\nfunction(string str)\n   n=Length of String\n   arr[n+1][n+1]\n   for i=0 to n\n      arr[i][0] = 0\n      arr[0][1] = 0\n   for i=1 to n\n      for j=1 to n\n         if (str[i-1] == str[j-1] and i!=j)\n            arr[i][j] = 1 + arr[i-1][j-1]\n         else\n            arr[i][j] = max(arr[i][j-1], arr[i-1][j])\n   return arr[n][n] </code></pre>\n\n<p> </p>","a":[{"id":1668391,"option":"b","correct":false},{"id":1668392,"option":"cd","correct":true},{"id":1668393,"option":"bcd","correct":false},{"id":1668394,"option":"bdc","correct":false}]},{"q":"<p>What is the output of the following pseudo code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>For input1 = 16 and input2 = 28\n\nfunction(input1, input2)\n   if(input1 == input2)\n      return input1\n   else if(input1&gt;input2)\n      return function(input1-input2, input2)\n   else\n      function(input1, input2-input1)\n\n  </code></pre>\n\n<p> </p>\n\n<p> </p>","a":[{"id":1668387,"option":"1","correct":false},{"id":1668388,"option":"16","correct":false},{"id":1668389,"option":"4","correct":true},{"id":1668390,"option":"8","correct":false}]},{"q":"<p>What is the output of the following pseudocode:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>For input root = [2, 1, 3]\n\nstruct NNode {\n    int data;\n    struct NNode *left;\n    struct NNode *right;\n};\n\nNNode* function(NNode* root){\n   if(root != NULL){\n      function(root-&gt;left);\n      function(root-&gt;right);\n      swap(root-&gt;left, root-&gt;right);\n   }  \n   return root;\n}</code></pre>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li><em>[2, 1, 3]</em></li>\n\t<li><em>[2, 3, 1]</em></li>\n\t<li><em>[1, 2, 3]</em></li>\n\t<li><em>[3, 2, 1]</em></li>\n</ol>\n\n<p> </p>\n\n<ol>\n</ol>\n\n<p> </p>","a":[{"id":1668359,"option":"1","correct":false},{"id":1668360,"option":"2","correct":false},{"id":1668361,"option":"3","correct":false},{"id":1668362,"option":"4","correct":true}]},{"q":"<p>Which of the following code have faster Time Complexity?</p>\n\n<p><strong>Code A</strong></p>\n\n<pre class=\"prettyprint\"><code>int main(){\n   int a=0;\n   int i=n;\n   while(i&gt;0){\n      a+=1;\n      i=/2;\n   }\n   return 0;\n}</code></pre>\n\n<p><strong>Code B</strong></p>\n\n<pre class=\"prettyprint\"><code>int main(){\n   int sum=0,n;\n   for(int i=0;i&lt;n;i++){\n      sum++;\n   }\n   cout&lt;&lt; sum &lt;&lt;endl;\n   return 0;\n}\n</code></pre>\n\n<p> </p>","a":[{"id":1668255,"option":"Code A","correct":true},{"id":1668256,"option":"Code B","correct":false},{"id":1668257,"option":"Both are same","correct":false},{"id":1668258,"option":"Can't determine","correct":false}]},{"q":"<p>What is the Time Complexity of the following code?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>int hacker(int arr[], int n){\n   int result;\n   for(int i=0;i&lt;32;i++){\n      int count=0;\n      for(int j=0;j&lt;n;j++){\n         if((arr[j] &amp; (1 &lt;&lt; i)){\n            count++;\n         }\n      }\n      result += (count * (n - count));\n   }\n   return result;\n}</code></pre>\n\n<p> </p>","a":[{"id":1668235,"option":"O(n*n)","correct":false},{"id":1668236,"option":"O(n*log n)","correct":false},{"id":1668237,"option":"O(n)","correct":true},{"id":1668238,"option":"O(sqrt(n))","correct":false}]},{"q":"<p>What is the Time complexity for the following code?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>int main(){\n   int k=0;\n   for(int i=n/2;i&lt;n;i++){\n      for(int j=2;j&lt;=n;j=j*2){\n         k=k+n/2;\n      }\n   }\n   return 0;\n}</code></pre>\n\n<p> </p>","a":[{"id":1668067,"option":"O(n/2)","correct":false},{"id":1668068,"option":"O(log n)","correct":false},{"id":1668069,"option":"O(nlog n)","correct":true},{"id":1668070,"option":"O(n)","correct":false}]},{"q":"<p>What is the Time complexity for the following code?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>int main(){\n   int count = 0;\n   for(int i=n;i&gt;0;i/=2){\n      for(int j=0;j&lt;i;j++){\n         count++;\n      }\n   }\n   return 0;\n}</code></pre>\n\n<p> </p>","a":[{"id":1668059,"option":"O(log n)","correct":false},{"id":1668060,"option":"O(n*n)","correct":false},{"id":1668061,"option":"O(n)","correct":true},{"id":1668062,"option":"O(n/2)","correct":false}]},{"q":"<p>Alice and Bob were discussing their family trees and were confused about whether their family tree was perfect or not. They later realized that for a family tree to be perfect all internal nodes should have two children and all leaves are at the same level.</p>\n\n<p>Can you help Alice and Bob in checking the conditions of the family tree required to implement the given pseudocode in the most efficient way possible?</p>\n\n<pre class=\"prettyprint\"><code>bool familytree(struct Node* ref, int d, int level = 0)\n    if (ref == NULL)\n        return true\n    if (ref-&gt;left == NULL &amp;&amp; ref-&gt;right == NULL)\n        return (d == level+1)\n    if (ref-&gt;left == NULL || ref-&gt;right == NULL)\n        return false\n    return familytree(root-&gt;left, d, level+1) &amp;&amp;\n           familytree(root-&gt;right, d, level+1)</code></pre>\n\n<p>What will be the time complexity of the given code?</p>","a":[{"id":1654722,"option":"O(N)","correct":true},{"id":1654723,"option":"O(logN)","correct":false},{"id":1654724,"option":"O(NlogN","correct":false},{"id":1654725,"option":"O(N^2)","correct":false}]},{"q":"<p>Alice and her friends were playing a game. They were given a binary search tree with K nodes and a starting root of the tree. Alice was asked to figure out a way to find the Mth smallest element present. While writing the code some of the lines went missing.</p>\n\n<pre class=\"prettyprint\"><code>int findele(Node *ref, int M)\n  int c = 0\n  int Ms = INT_MIN\n  Node *curr = root\n  while (curr != NULL)\n   if (curr-&gt;left == NULL)\n     c++;\n     if (c==M)\n       Ms = curr-&gt;key\n     curr = curr-&gt;right\n    else\n      Node *last = curr-&gt;left\n      while (last-&gt;right != NULL &amp;&amp; last-&gt;right != curr)\n        last= last-&gt;right\n      if (last-&gt;right==NULL)\n        //LINE 6\n        //LINE 7\n      else\n       last-&gt;right = NULL\n       c++;\n       if (c==k)\n         Ms = curr-&gt;key\n       curr = curr-&gt;right\n    return Ms\n </code></pre>\n\n<p>Can you help Alice and her friends in finding the code for line 6 and line 7?</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>last-&gt;right = curr;\ncurr = curr-&gt;left;</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>last-&gt;left = curr;\ncurr = curr-&gt;left;</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>last-&gt;right = curr;\ncurr = curr-&gt;right;</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>last-&gt;left = curr-&gt;right;\ncurr-&gt;right = curr-&gt;left;</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1654177,"option":"1","correct":true},{"id":1654178,"option":"2","correct":false},{"id":1654179,"option":"3","correct":false},{"id":1654180,"option":"4","correct":false}]},{"q":"<p>Alice loves to take on challenges especially when they are of data structures and algorithms. This time she was given a preorder traversal of the binary search tree and was asked to find all the external nodes of it. Alice was excited but at the same time scared also as she was supposed to do the task in the most efficient way possible.</p>\n\n<p>Alice did come up with a pseudocode but was unaware of its efficiency.</p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>int Search(int in[], int l, int r, int d)\n{\n    int m = (l + r)&gt;&gt;1;\n    if (in[m] == d)\n        return m;\n    else if (in[m] &gt; d)\n        return Search(in,l,m-1,d);\n    else\n        return Search(in,m+1,r,d);\n}\nvoid external(int pre[], int in[],\n                  int l, int r, int *ind, int n)\n{\n    if(l == r)\n    {\n        printf(\"%d \", in[l]);\n        *ind = *ind + 1;\n        return;\n    }\n    if (l &lt; 0 || l &gt; r || r &gt;= n)\n        return;\n    int loc = Search(in, l, r, pre[*ind]);\n    *ind = *ind + 1;\n \n    external(pre, in, l, loc - 1, ind, n);\n    external(pre, in, loc + 1, r, ind, n);\n}\n void leafNodes(int pre[], int n)\n{\n    int in[n];  \n        for (int i = 0; i &lt; n; i++)\n        in[i] = pre[i];\n    sort(in, in + n);\n    int ind = 0;\n    external(pre, in, 0, n - 1, &amp;ind, n);\n}</code></pre>\n\n<p>What will be the time complexity?</p>","a":[{"id":1653229,"option":"O(n)","correct":false},{"id":1653230,"option":"O(nlogn)","correct":true},{"id":1653231,"option":"O(logn)","correct":false},{"id":1653232,"option":"O(n^2)","correct":false}]},{"q":"<p>Alice was telling Bob about their ancestors. Bob was very curious to know if he could implement the same concept on trees. He proposed Alice to play a game with him.</p>\n\n<p>The rules of the game were pretty simple. Bob will give Alice a Node and will be asked to tell its <em>N<sup>th</sup></em> ancestor. Alice came up with a code to solve the challenge but was unable to complete it.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>Node* game(Node *ref, int node , int &amp;N)\n{  \n    if (!ref)\n        return NULL;\n    if (/*line 6*/ ||(temp =  game(ref-&gt;left,node,N)) ||\n               (temp =  game(ref-&gt;right,node,N)))\n    {  \n        if (N &gt; 0)       \n            N--;\n        else if (N == 0)\n        {\n            cout&lt;&lt;ref-&gt;data;\n            return NULL;\n        }\n        return ref;\n    }\n}</code></pre>\n\n<p>What will come in place of line 6?</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>ref-&gt;data == node</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>ref-&gt;left-&gt;data==node</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>ref-&gt;right-&gt;data==node</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>None of these</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1652461,"option":"1","correct":true},{"id":1652462,"option":"2","correct":false},{"id":1652463,"option":"3","correct":false},{"id":1652464,"option":"4","correct":false}]},{"q":"<p>Alice was given a task and was asked to do it in the best way possible. She had to remove all the keys from the Binary Search Tree (with N number of nodes) which are not in a given range. </p>\n\n<p>For example,</p>\n\n<p><strong>Input:</strong> Given BST with 7 nodes and the range [60, 80]</p>\n\n<pre>            50\n          /     \\\n         30      70\n        /  \\    /  \\\n      20   40  60   80 </pre>\n\n<p><strong>Ouput</strong></p>\n\n<pre>           50\n          /\n         30\n        /  \\\n      20   40\n</pre>\n\n<p>The task seemed easy to him but wasn't sure about the efficiency of the solution. Will you help him find out the complexity?</p>\n\n<pre class=\"prettyprint\"><code>tree* remrange(tree *ref, int mini, int maxi){\n if (ref == NULL)\n   return NULL;\n ref-&gt;left =  remrange(ref-&gt;left, mini, maxi)\n ref-&gt;right =  remrange(ref-&gt;right, mini, maxi)\n if (ref-&gt;key &lt; mini)\n  tree *m = ref-&gt;right\n  delete ref\n  return m\n if (ref-&gt;key &gt; maxi)\n  tree *n = ref-&gt;left\n  delete ref\n  return n\n return ref</code></pre>\n\n<p> </p>","a":[{"id":1651585,"option":"O(N^2)","correct":false},{"id":1651586,"option":"O(N)","correct":true},{"id":1651587,"option":"O(logN)","correct":false},{"id":1651588,"option":"O(NlogN)","correct":false}]},{"q":"<p>Alice and Bob were working on trees. While going through it they had the idea that it might be possible that some of their nodes could be identical and hence started thinking about what would be the most efficient way of making that happen.</p>\n\n<p>They came up with a code for two trees having M and N number of nodes respectively.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>void find_identical(Node *r1, Node *r2)\n{\n    stack&lt;Node *&gt; stack1, s1, s2;\n    while (true)\n    {\n        if (r1)\n        {\n            s1.push(root1);\n            r1 = r1-&gt;left;\n        }\n        else if (r2)\n        {\n            s2.push(r2);\n            r2 = r2-&gt;left;\n        }\n        else if (!s1.empty() &amp;&amp; !s2.empty())\n        {\n            r1 = s1.top();\n            r2 = s2.top();\n            if (r1-&gt;key == r2-&gt;key)\n            {\n                cout&lt;&lt; r1-&gt;key &lt;&lt; \" \";\n                s1.pop();\n                s2.pop();\n                root1 = root1-&gt;right;\n                root2 = root2-&gt;right;\n            }\n            else if (r1-&gt;key &lt; r2-&gt;key)\n            {\n                s1.pop();\n                r1 = r1-&gt;right;\n                r2 = NULL;\n            }\n            else if (r1-&gt;key &gt; r2-&gt;key)\n            {\n                s2.pop();\n                r2 = r2-&gt;right;\n                r1 = NULL;\n            }\n        }\n        else  break;\n    }\n}</code></pre>\n\n<p>Can you help Alice and Bob in finding the time complexity of the given code?</p>","a":[{"id":1649865,"option":"O(M*N)","correct":false},{"id":1649866,"option":"O(M+N)","correct":true},{"id":1649867,"option":"O(M)","correct":false},{"id":1649868,"option":"O(N)","correct":false}]},{"q":"<p>Bob loves trees and subtrees. While searching for a Binary Search Tree within a Binary Tree, he was very particular to find the BST which is of the maximum size, but he was confused about whether his method is efficient or not</p>\n\n<p>Here is the pseudocode he came up with.</p>\n\n<pre class=\"prettyprint\"><code>int function_find(node* node)\n{\n   int mini = INT_MAX; \n   int  maxi = INT_MIN; \n   int max_size = 0; \n   bool is_big = 0;\n   function_findut(node, &amp;min, &amp;max,&amp;max_size, &amp;is_big);\n   return max_size;\n}\nint function_findut(node* ref, int *min_ref, int *max_ref,\n                                 int *max_size_ref, bool *is_bst_ref)\n{\n    if (ref == NULL)\n    {\n        *is_bst_ref = 1;\n        return 0; \n    }\n    int min = INT_MAX;\n    bool left_f = false;\n    bool right_f = false;\n    int lbs, rbs; \n    *max_ref = INT_MIN;\n    lbs = function_findut(ref-&gt;left, min_ref, max_ref,\n                        max_size_ref, is_bst_ref);\n    if (*is_bst_ref == 1 &amp;&amp; ref-&gt;data &gt; *max_ref)\n        left_f = true;\n \n    min = *min_ref;\n    *min_ref = INT_MAX;\n    rbs = function_findut(ref-&gt;right, min_ref,\n                        max_ref, max_size_ref, is_bst_ref);\n    if (*is_bst_ref == 1 &amp;&amp; ref-&gt;data &lt; *min_ref)\n        right_f = true;\n    \n    if (min &lt; *min_ref)\n        *min_ref = min;\n    if (ref-&gt;data &lt; *min_ref) // For leaf nodes\n        *min_ref = ref-&gt;data;\n    if (ref-&gt;data &gt; *max_ref)\n        *max_ref = ref-&gt;data;\n   \n    if(left_f &amp;&amp; right_f)\n    {\n        if (lbs + rbs + 1 &gt; *max_size_ref)\n            *max_size_ref = lbs + rbs + 1;\n        return lbs + rbs + 1;\n    }\n    else\n    {\n        *is_bst_ref = 0;\n        return 0;\n    }\n}</code></pre>\n\n<p>Can you help Bob in finding the complexity of the given pseudocode ?</p>","a":[{"id":1649690,"option":"O(N)","correct":true},{"id":1649691,"option":"O(log n)","correct":false},{"id":1649692,"option":"O(n log n)","correct":false},{"id":1649693,"option":"O(N^2)","correct":false}]},{"q":"<p>Bob is very fond of watching mirror images. While solving a question in DSA he became very inquisitive about whether the two trees will be mirror images of each other or not. He was confused as various scenarios came into his mind. The following image depicts the two trees which are mirror images to each other.</p>\n\n<p style=\"text-align: center;\"><img alt=\"Lightbox\" src=\"https://media.geeksforgeeks.org/wp-content/cdn-uploads/2009/06/MirrorTree1.GIF\"></p>\n\n<p>In order to check whether the two trees are mirror images of each other or not several conditions came to his mind but he was not sure which of them were correct. Will you help Bob in finding the conditions for the given problem?</p>\n\n<p><strong>Conditions</strong></p>\n\n<p>1. Their root node’s key must be the same</p>\n\n<p>2. Left subtree of the root of ‘a’ and right subtree root of ‘b’ are mirror</p>\n\n<p>3. Leaf nodes may not be the same</p>\n\n<p>4. Right subtree of ‘a’ and left subtree of ‘b’ are mirror</p>","a":[{"id":1648240,"option":"1, 2 and 4","correct":true},{"id":1648241,"option":"1, 2 and 3","correct":false},{"id":1648242,"option":"2, 3 and 4","correct":false},{"id":1648243,"option":"All of the above","correct":false}]},{"q":"<p>Alice loves to have challenges on trees while working on data structures and algorithms. She was given a number <em>N</em> which stated the length of the preorder sequence. She was then asked to count the number of binary trees possible from the given length <em>N</em>.</p>\n\n<p><strong>Example</strong></p>\n\n<p>Input: n = 1 Output: 1</p>\n\n<p>Input: n = 2 Output: 2</p>\n\n<p>Input: n = 3 Output: 5</p>\n\n<pre class=\"prettyprint\"><code>function_countTrees(N)\n  \n    DECLARE BT[n + 1]; // Array to store number of Binary tree for every count of nodes\n\n    memset(BT, 0, sizeof(BT)); //Intitializing elements of array with 0\n \n    INITIALIZE BT[0] = BT[1] = 1;\n \n    for i-&gt;2 to N\n        for j -&gt;0 to i\n           // LINE 7\n \n    return BT[n];</code></pre>\n\n<p>In the given pseudocode, what will come in place of Line 7?</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>BT[i] += BT[j] * BT[i - j + 1];</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>BT[i] += BT[j] * BT[i - j - 1];</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>BT[i] += BT[j] * BT[i + j - 1];</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>BT[i] += BT[j] * BT[i + j + 1];</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1648228,"option":"1","correct":false},{"id":1648229,"option":"2","correct":true},{"id":1648230,"option":"3","correct":false},{"id":1648231,"option":"4","correct":false}]},{"q":"<p>In Data Structures, you are working on Trees. You are given pseudocode that is used to find the <em>n<sup>th</sup></em> inorder node in a tree. You are required to execute the following pseudocode in a programing language.</p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>Nth_Inorder(struct Node* node, int n)\n{\n    COUNT = 0;\n    if (node == NULL)\n        return;\n \n    if count &lt;= n \n   {\n       //LINE 6\n        count++;\n        if COUNT == n\n           PRINT  node-&gt;data;\n\n      //LINE 7\n    }\n}</code></pre>\n\n<p>What will be the code inplace of line 6 and line 7?</p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Nth_Inorder(node-&gt;left,n)</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Nth_Inorder(node-&gt;right,n)</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Nth_Inorder(node-&gt;left-&gt;left,n)</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Nth_Inorder(node-&gt;right-&gt;right,n)</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1648172,"option":"1 then 2","correct":true},{"id":1648173,"option":"2 then 1","correct":false},{"id":1648174,"option":"3 then 2","correct":false},{"id":1648175,"option":"4 then 1","correct":false}]},{"q":"<p>In Data Structures you are working on <strong>Double Linked List. </strong>The below pseudocode contains a function <strong><em>add_start</em> </strong>that takes a <strong>value</strong> and the <strong>head node(h)</strong> of a double linked list as <strong>input </strong>and creates a new Node with the <strong>Value </strong>at the begin of the double linked list.</p>\n\n<p> </p>\n\n<p><strong>Example</strong><br>\nIf the double Linked list is    <strong>2  &lt;-&gt;  3  &lt;-&gt;  4</strong><br>\nand the <strong>Value=1</strong> and the <strong>head node(h)</strong> is <strong>2</strong><br>\nthen after adding the new double linked list will become</p>\n\n<p><strong>1  &lt;-&gt;  2  &lt;-&gt;  3  &lt;-&gt;  4</strong></p>\n\n<p> </p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>class Node {\n\n    // constructor...\n    Node(value) {\n        data = value\n        prev = NULL\n        next = NULL\n    }\t\n}\n\nFUNCTION add_start( h, value )\n    new_node = Node( value )\n\n     //  Write your code here\n \n    IF h!=NULL:\n        h.prev = new_node\n    ENDIF \n \n    h = new_node\nENDFUN</code></pre>\n\n<p><strong>Note :</strong></p>\n\n<ol>\n\t<li>In the above pseudocode, the <strong>class Node</strong> represents the structure of each <strong>node</strong> in the Double linked list.</li>\n\t<li>The <strong>h </strong>in function <strong>add_start()</strong> will never be <strong>NULL</strong></li>\n</ol>\n\n<p>But the above Pseudocode was incomplete. if you are asked to complete the above Pseudocode then which of the following code snippets will you choose?</p>\n\n<p> </p>\n\n<p><strong>Code snippets</strong></p>\n\n<p><strong>1. </strong></p>\n\n<pre class=\"prettyprint\"><code>new_node.next = NULL\nnew_node.prev = h</code></pre>\n\n<p> </p>\n\n<p><strong>2. </strong></p>\n\n<pre class=\"prettyprint\"><code>new_node.next = h\nnew_node.prev = NULL</code></pre>\n\n<p> </p>\n\n<p><strong>3. </strong></p>\n\n<pre class=\"prettyprint\"><code>h.next = new_node\nh.prev = NULL</code></pre>\n\n<p> </p>\n\n<p><strong>4. </strong></p>\n\n<pre class=\"prettyprint\"><code>h.next = NULL\nh.prev = new_node</code></pre>\n\n<p> </p>","a":[{"id":1557868,"option":"1","correct":false},{"id":1557869,"option":"2","correct":true},{"id":1557870,"option":"3","correct":false},{"id":1557871,"option":"4","correct":false}]},{"q":"<p>In Data Structures, you are working on Arrays. You are given a Pseudocode that implements various operations on the given array. If you are required to execute the following pseudocode in a programming language then what will be the output?</p>\n\n<pre class=\"prettyprint\"><code>DECLARE arr : ARRAY[0,8] of { 2, 4, 7, 10, 14, 27, 39, 52, 67 }\nlo = 0\nhi = 8\nk=52\ncount = 0\n\nWHILE lo &lt; hi\n\tcount = count + 1\n\tm=(lo + hi)/2\n\tIF arr[m]==k\n\t\tBREAK\n\tELSE IF arr[m]&lt;k\n\t\tlo = m + 1\n\tELSE\n\t\thi = m - 1\n\tENDIF\nENDWHILE\n\nPRINT count\n</code></pre>\n\n<p>If you are required to perform the following operations then what will be the final value of the variable <strong>count, </strong>after performing the operations?</p>","a":[{"id":1537224,"option":"2","correct":false},{"id":1537225,"option":"3","correct":true},{"id":1537226,"option":"4","correct":false},{"id":1537227,"option":"5","correct":false}]},{"q":"<p>Consider you are working on Data Structures. You are given two strings <strong>s1</strong> and <strong>s2</strong>. Your task is to convert the string <strong>s1</strong> into <strong>s2 </strong>by <strong>inserting</strong> or <strong>removing</strong> or <strong>replacing</strong> any character any number of times.</p>\n\n<p><strong>Example - 1</strong><br>\nInput: <strong>s1</strong> = \"curs\", <strong>s2</strong> = \"car\"<br>\n<strong>Operations</strong></p>\n\n<ol>\n\t<li>Remove 's' from s1</li>\n\t<li>Replace 'u' with 'a'</li>\n</ol>\n\n<p>Output: Minimum number of operations required to convert string s1 to s2 is <strong>2</strong></p>\n\n<p> </p>\n\n<p><strong>Example - 2</strong><br>\nInput: <strong>s1</strong> = \"cars\", <strong>s2</strong> = \"car\"<br>\nWe can convert s1 into s2 by removing 's'.<br>\nOutput: Minimum number of operations required to convert string s1 to s2 is <strong>1</strong></p>\n\n<p> </p>\n\n<p>So you implemented a function <strong>Minimum_Operations</strong> that takes the <strong>s1</strong> and <strong>s2</strong> as input and <strong>n,m</strong> where <strong>n</strong> is the length of <strong>s1</strong>, <strong>m</strong> is the length of <strong>s2</strong> and returns the minimum number of operations required to convert String <strong>s1</strong> into <strong>s2</strong>. And also the function <strong>Minimum_Operations </strong>takes a 2 Dimensional array named <strong>dp </strong>of size <strong>n*m </strong>with each value<strong> -1.</strong></p>\n\n<p> </p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>FUNCTION Minimum_Operations(s1, s2, n, m, dp)\n    \n    IF (n == 0) :\n      RETURN m       \n    IF (m == 0) :\n      RETURN n\n                    \n    IF (dp[n][m] != -1)  :\n      RETURN dp[n][m];\n    \n    INT m1,m2,m3\n\n    IF (s1[n - 1] == s2[m - 1])        \n        IF (dp[n - 1][m - 1] == -1) \n            dp[n][m] = minDis(s1, s2, n - 1, m - 1, dp)   \n            RETURN dp[n][m]                  \n        ELSE \n            dp[n][m] = dp[n - 1][m - 1]\n            RETURN dp[n][m]\n        ENDIF\n    ELSE            \n        IF (dp[n - 1][m] != -1)   \n            m1 = dp[n - 1][m]     \n        ELSE \n            m1 = Minimum_Operations(s1, s2, n - 1, m, dp)\n        ENDIF\n        \n        IF (dp[n][m - 1] != -1)                \n            m2 = dp[n][m - 1]           \n        ELSE \n            m2 = Minimum_Operations(s1, s2, n, m - 1, dp)  \n        ENDIF\n        \n        IF (dp[n - 1][m - 1] != -1)    \n            m3 = dp[n - 1][m - 1]   \n        ELSE \n            m3 = Minimum_Operations(s1, s2, n - 1, m - 1, dp)\n        ENDIF\n        \n        dp[n][m] = 1 + min(m1, min(m2, m3))\n        RETURN dp[n][m]\n    ENDIF\n    \nENDFUN</code></pre>\n\n<p><strong>Note</strong> : </p>\n\n<ol>\n\t<li>We can perform any number of operations in any order.</li>\n\t<li>The function <strong>max()</strong> returns the maximum element. For Eg max(2,4) returns 4</li>\n\t<li>The function <strong>min() </strong>returns the minimum element. For Eg min(2,4) returns 2</li>\n\t<li>You can only convert <strong>s1</strong> into <strong>s2</strong></li>\n</ol>\n\n<p>What will be the Space and Time complexity of the above pseudocode?</p>\n\n<p> </p>","a":[{"id":1565800,"option":"Space complexity = O(m+n) , Time complexity = O(m+n)","correct":false},{"id":1565801,"option":"Space complexity = O(m+n) , Time complexity = O(m*n)","correct":false},{"id":1565802,"option":"Space complexity = O(m*n) , Time complexity = O(m+n)","correct":false},{"id":1565803,"option":"Space complexity = O(m*n) , Time complexity = O(m*n)","correct":true}]},{"q":"<p>Paul and John are friends and they always love to play games. Paul gives John a number <strong>N (N&gt;0) </strong>and a list of numbers <strong>[1,2,3,4,5,6]</strong>. Now John should figure out the total number of possibilities to choose numbers from the list such that sum of the chosen numbers should equal <strong>N</strong>.<br>\n </p>\n\n<p><strong>Example :</strong><br>\nIf <strong>N</strong>=3<br>\nAll possibilities are<br>\n[1,1,1] = 1+1+1 = 3<br>\n[1,2] = 1+2 = 3<br>\n[2,1] = 2+1 = 3<br>\n[3] = 3<br>\nTotal there are total 4 possibilities.<br>\n </p>\n\n<p><strong>Note :</strong> [1,2] and [2,1] both are considered.</p>\n\n<p><br>\nJohn wants to implement a function <em><strong>no_of_possibilities </strong></em>that takes <strong>N </strong>as input and returns the total number of possibilities. But John was confused at <strong>Line 5</strong>.</p>\n\n<p> </p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>FUNCTION no_of_possibilities( n )\n\tDECLARE p = ARRAY[0,6] of {0,1,2,4,8,16,32}\n\tFOR i -&gt; 7 to n\n\t\ts=sum_of_elements(p)    // It assigns the total sum of elements of the array to s\n\t\t    // Line 5   \n\tENDFOR\n    RETURN p[n%7]\nENDFUN</code></pre>\n\n<p> </p>\n\n<p>Which of the following code snippets will best fit in <strong>Line 5</strong> such that the function <em><strong>no_of_possibilities </strong></em>will always return the correct output for <strong>N</strong>?</p>\n\n<p> </p>\n\n<p><strong>Code snippets</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>p[i%6] = (s-p[i%6])</code></pre>\n\n<p><br>\n<strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>p[i%7] = (s+p[i%7])</code></pre>\n\n<p><br>\n<strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>p[i%6] = (s+p[i%6])</code></pre>\n\n<p><br>\n<strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>p[i%7] = (s-p[i%7])</code></pre>\n\n<p> </p>","a":[{"id":1532606,"option":"1","correct":false},{"id":1532607,"option":"2","correct":false},{"id":1532608,"option":"3","correct":false},{"id":1532609,"option":"4","correct":true}]},{"q":"<p>Mary wants to go home using local transport. The total amount of cost required to reach her home is <strong>N (N&gt;0)</strong>. She has <strong>coins</strong> and each <strong>coin </strong>has a value. The value of the <strong>coin </strong>can be anyone from the list<strong> [ 1, 2, 3 ].</strong> Eg : If you have 2 <strong>coins </strong>the values can be {1,1},{1,2},{1,3},{2,2},{2,3},{3,3}. Now Mary should choose few coins such that the sum of the values of the coins is <strong>N</strong>. So she found that there are so many possible ways such that the sum of the values of the <strong>coins </strong>would be <strong>N</strong>.</p>\n\n<p><strong>Example : </strong>For N=3 the possibleways can be<br>\n{1, 1, 1}<br>\n{1, 2}<br>\n{3}<br>\nThere are a total of 3 ways in which the sum of the chosen <strong>coins </strong>will be N(3).<br>\n </p>\n\n<p><strong>Note :</strong></p>\n\n<ul>\n\t<li>(1,2) and (2,1) are considered only under one set. Hence the set will be {1, 2}.</li>\n\t<li>Mary can choose any coin (from the list)  any number of times</li>\n</ul>\n\n<p>Mary was so curious to find out the total number of possible ways to select <strong>coins </strong>such that the sum of total <strong>coins </strong>selected would be N.<br>\nMary implemented a code to find out the total number of possible ways of choosing <strong>coins</strong>. But she was stuck in <strong>Line 14</strong>. Help her to write the code completely.</p>\n\n<p> </p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>FUNCTION total_ways(a,t,N)\n\tIF (N==0)\n\t\tRETURN 1\n\tENDIF\n\n\tIF (N&lt;0)\n\t\tRETURN 0\n\tENDIF\n\n\tIF (t&lt;=0 and N&gt;=1)\n\t\tRETURN 0\n\tENDIF\n\n\t\t// Line 14\n\nENDFUN\n \nDECLARE a = ARRAY[0,2] of {1,2,3}\nt = 3  // size of the list a\nN = 18\nPRINT total_ways(a,t,N)</code></pre>\n\n<p> </p>\n\n<p>Which of the following code snippets will best fit in <strong>Line 14</strong> so that the code's output will be <strong>37</strong>?</p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>RETURN total_ways( a, t, N ) + total_ways( a, t, N-a[t-1] );</code></pre>\n\n<p><br>\n<strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>RETURN total_ways( a, t-1, N ) + total_ways( a, t, a[t-1] );</code></pre>\n\n<p><br>\n<strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>RETURN total_ways( a, t, N ) + total_ways( a, t, a[t-1] );</code></pre>\n\n<p><br>\n<strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>RETURN total_ways( a, t-1, N ) + total_ways( a, t, N-a[t-1] );</code></pre>\n\n<p> </p>","a":[{"id":1529828,"option":"1","correct":false},{"id":1529829,"option":"2","correct":false},{"id":1529830,"option":"3","correct":false},{"id":1529831,"option":"4","correct":true}]},{"q":"<p>Mike was given a <strong>n*n</strong> matrix with distinct integers. He needs to find the length of the longest path such that all cells along the path are in increasing order with a difference of <strong>1</strong>. He can start from any cell and can only move in <strong>4</strong> directions. If the cell is currently at <strong>(i,j)</strong> then it can move to <strong>(i-1,j)</strong> or <strong>(i,j+1)</strong> or <strong>(i+1, j) </strong>or <strong>(i, j-1)</strong> with the condition that the adjacent cells should differ by <strong>1</strong>.</p>\n\n<p><strong>Example</strong> <br>\nConsider the matrix <strong>{{ 1, 2 },<br>\n                                 { 5, 3 },}</strong></p>\n\n<p>All possible longest paths from each cell are<br>\n<strong>1-2-3</strong> -&gt; lenght = <strong>3</strong><br>\n<strong>2-3</strong> -&gt; lenght = <strong>2</strong><br>\n<strong>3</strong> -&gt; lenght = <strong>1</strong><br>\n<strong>5</strong> -&gt; lenght = <strong>1</strong><br>\nThe length of the longest path is <strong>3</strong></p>\n\n<p>Mike wrote pseudocode to solve the above problem. He has implemented to functions <strong>Path</strong> and <strong>Max_Path. </strong>The function <strong>Path </strong>takes the parameters <strong>i and</strong><strong> j </strong>that are the indexes of the first cell of a path and <strong>mat</strong> matrix, <strong>dp</strong> table and <strong>n </strong>as input and calculates the possible paths. The function <strong>Max_Path</strong> takes matrix <strong>mat</strong> and <strong>n</strong> as input and returns the length of the longest path as output.</p>\n\n<p> </p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>FUNCTION Path( i,  j,  mat,  dp, n)\n    IF (i &lt; 0 || i &gt;= n || j &lt; 0 || j &gt;= n)\n        RETURN 0\n    ENDIF\n    \n    IF (dp[i][j] != -1)\n        RETURN dp[i][j]\n    ENDIF\n    \n    INT x = INT_MIN, y = INT_MIN, z = INT_MIN, w = INT_MIN\n\n    IF (Value_1 &amp;&amp; ((mat[i][j] + 1) == mat[i][j + 1]))   //  Line 9\n        x = 1 + Path(i, j + 1, mat, dp)\n    ENDIF\n\n    IF (Value_2 &amp;&amp; (mat[i][j] + 1 == mat[i][j - 1]))       //  Line 12\n        y = 1 + Path(i, j - 1, mat, dp)\n    ENDIF\n\n    IF (Value_3 &amp;&amp; (mat[i][j] + 1 == mat[i - 1][j]))      //  Line 15\n        z = 1 + Path(i - 1, j, mat, dp)\n    ENDIF\n\n    IF (Value_4 &amp;&amp; (mat[i][j] + 1 == mat[i + 1][j]))  //  Line 18\n        w = 1 + Path(i + 1, j, mat, dp)\n    ENDIF\n\n    RETURN dp[i][j] = max(x, max(y, max(z, max(w, 1))))\n    \nENDFUN\n\n\n\nFUNCTION Max_Path( mat, n)\n    INT ans = 1\n\n    DECLARE dp = ARRAY[n][n] of INT\n    FOR i -&gt; 0 to n-1\n        FOR j -&gt; 0 to m-1\n            dp[i][j]=-1\n        ENDFOR\n    ENDFOR\n\n    FOR i -&gt; 0 to n-1\n        FOR j -&gt; 0 to n-1\n            IF (dp[i][j] == -1)\n                Path(i, j, mat, dp)\n            ENDIF\n            \n            ans = max(ans, dp[i][j])\n        ENDFOR\n    ENDFOR\n\n    RETURN ans\n    \nENDFUN</code></pre>\n\n<p><strong>Note : </strong></p>\n\n<ol>\n\t<li><strong>INT_MIN</strong> is the minimum default value provided by the system</li>\n\t<li>The function <strong>max()</strong> returns the maximum element. For Eg max(2,4) returns 4</li>\n\t<li>The function <strong>min() </strong>returns the minimum element. For Eg min(2,4) returns 2</li>\n</ol>\n\n<p> </p>\n\n<p>But Mike was stuck at some points. To indicate where he got stuck he mentioned them as <strong>Value_1 </strong>at<strong> Line 9, Value_2 </strong>at<strong> Line 12, Value_3 </strong>at<strong> Line 15 </strong>and<strong> Value_4 </strong>at<strong> Line 18. </strong>Now if you are required to help Mike then which of the following options about the Values will you choose to replace such that the above Pseudocode always gives a correct output when executed?</p>\n\n<p> </p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1. </strong></p>\n\n<pre class=\"prettyprint\"><code>Value_1 = j&lt;n\nValue_2 = j&gt;0\nValue_3 = i&gt;0\nValue_4 = i&lt;n</code></pre>\n\n<p> </p>\n\n<p><strong>2. </strong></p>\n\n<pre class=\"prettyprint\"><code>Value_1 = j&gt;n\nValue_2 = j&lt;n\nValue_3 = i&lt;0\nValue_4 = i&gt;n</code></pre>\n\n<p> </p>\n\n<p><strong>3. </strong></p>\n\n<pre class=\"prettyprint\"><code>Value_1 = j&lt;n-1\nValue_2 = j&gt;0\nValue_3 = i&gt;0\nValue_4 = i&lt;n-1</code></pre>\n\n<p> </p>\n\n<p><strong>4. </strong></p>\n\n<pre class=\"prettyprint\"><code>Value_1 = j&gt;n-1\nValue_2 = j&lt;0\nValue_3 = i&lt;0\nValue_4 = i&gt;n-1</code></pre>\n\n<p> </p>\n\n<p> </p>\n\n<p> </p>","a":[{"id":1565865,"option":"1","correct":false},{"id":1565866,"option":"2","correct":false},{"id":1565867,"option":"3","correct":true},{"id":1565868,"option":"4","correct":false}]},{"q":"<p>Consider you are working on Data Structures. You are given two strings <strong>X</strong> and <strong>Y</strong>. You need to find the maximum length of the common subsequence both in <strong>X</strong> and <strong>Y</strong>. </p>\n\n<p><strong>Example</strong><br>\nConsider strings <strong>X</strong> = \"BHHUBC\" and <strong>Y</strong> = \"HYUYBZC\"<br>\nThe longest Common Subsequence is “HUBC” of length <strong>4</strong>.</p>\n\n<p>So you implemented a function <strong>Length</strong> that takes the <strong>X</strong> and <strong>Y</strong> as input and <strong>m,n</strong> where <strong>m</strong> is the length of <strong>X</strong>, <strong>n</strong> is the length of <strong>Y</strong> and returns the length of the Longest Common Subsequence.</p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>FUNCTION Length( X, Y, m, n )\n    DECLARE L = ARRAY[m+1][n+1] of INT\n    INT i\n    INT j\n    FOR i -&gt; 0 to m\n    \tFOR j -&gt; 0 to n\n        \tIF (i == 0 || j == 0)\n        \t\tL[i][j] = L[i-1][j-1] + 1             // Line 8\n        \tELSE IF (X[i-1] == Y[j-1])\n        \t\tL[i][j] = max(L[i-1][j], L[i][j-1])       // Line 10\n        \tELSE\n        \t\tL[i][j] = 0                           //  Line 12               \n        \tENDIF\n    \tENDFOR\n    ENDFOR\n    RETURN L[m][n]\nENDFUN</code></pre>\n\n<p><strong>Note:</strong> </p>\n\n<ul>\n\t<li>The function <strong>max()</strong> returns the maximum element. Eg max(2,4) returns 4</li>\n\t<li>In the above pseudocode, the String starts from index 1</li>\n</ul>\n\n<p>But the above pseudocode is not correct. But if you rearrange <strong>Lines 8, 10, 12 </strong>then the pseudocode will be correct basing on this scenario. Which of the following options is the correct representation of rearranging the code snippets at <strong>Lines 8, 10</strong> and <strong>12?</strong></p>\n\n<p> </p>","a":[{"id":1565639,"option":"8, 12, 10","correct":false},{"id":1565640,"option":"10, 12, 8","correct":false},{"id":1565641,"option":"12, 8, 10","correct":true},{"id":1565642,"option":"12, 10, 8","correct":false}]},{"q":"<p>Consider you are working on Data Structures. You are given a set of integers and your task is to partition the given set into two subsets such that the absolute difference of the sum of two subsets is minimum.</p>\n\n<p><strong>Example</strong><br>\nThe set of numbers is <strong>{1, 6, 8}</strong><br>\nthe possible Partitions are<br>\n<strong>{ 1 } , {6, 8}</strong> -&gt; Sums are 1, 14 -&gt; Absolute Difference is <strong>13</strong><br>\n<strong>{ 6 } , {1, 8}</strong> -&gt; Sums are 6, 9 -&gt; Absolute Difference is <strong>3</strong><br>\n<strong>{ 8 } , {1, 6}</strong> -&gt; Sums are 8, 7 -&gt; Absolute Difference is <strong>1</strong><br>\nThe minimum absolute difference after partitioning into 2 subsets is <strong>1.</strong></p>\n\n<p>So you have implemented a function <strong>Min_Abs_Diff</strong>  that takes array <strong>arr</strong> of integers and <strong>n</strong> the total number of integers in the array as input and returns the minimum absolute difference of the sum of two subsets as output.</p>\n\n<p> </p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>FUNCTION Min_Abs_Diff( arr,  n)\n\tINT sum = 0\n\tFOR i -&gt; 0 to n-1\n\t\tsum += arr[i]\n\tENDFOR\n\n\tDECLARE dp = ARRAY[n+1][sum+1] of BOOL\n\n\tFOR i -&gt; 0 to n\n\t\tdp[i][0] = TRUE\n\tENDFOR\n\n\tFOR i -&gt; 1 to sum\n\t\tdp[0][i] = FALSE\n\tENDFOR\n\n\tFOR i -&gt; 1 to n\n\t\tFOR j -&gt; 1 to sum\n\t\t\tdp[i][j] = dp[i-1][j]\n\t\t\t\n\t\t\tIF (arr[i-1] &lt;= j)\n\t\t\t\tdp[i][j] |= dp[i-1][j-arr[i-1]]            \n\t\t\tENDIF\n\t\tENDFOR\n\tENDFOR\n\n\tINT d = INT_MAX\n\n\tFOR j -&gt; X to 0           // Line 22\n\t\tIF (dp[n][j] == TRUE)\n\t\t\td = sum-Y         // Line 24\n\t\t\tBREAK;\n\t\tENDIF\n\tENDFOR\n\t\n\tRETURN d\n\t\nENDFUN</code></pre>\n\n<p><strong>Note : </strong></p>\n\n<ol>\n\t<li><strong>INT_MAX</strong> is the maximum default value provided by the system</li>\n\t<li>You need to consider all the elements i.e merging the 2 subsets should give the complete set of integers</li>\n\t<li>Don't consider NULL subset i.e <strong>{ }</strong></li>\n\t<li>The total number of elements in the set would be greater than 1</li>\n</ol>\n\n<p> </p>\n\n<p>In the above pseudocode what should be the values of <strong>X</strong> and <strong>Y </strong>at <strong>Lines 22</strong> and <strong>24</strong> such that the pseudocode always gives the correct output when executed?</p>\n\n<p> </p>","a":[{"id":1565816,"option":"X = sum*2, Y = j*2","correct":false},{"id":1565817,"option":"X = sum*2, Y = j/2","correct":false},{"id":1565818,"option":"X = sum/2, Y = j/2","correct":false},{"id":1565819,"option":"X = sum/2, Y = j*2","correct":true}]},{"q":"<p>Paul and Lisa are best friends and always love to play games. Paul gives a Dice to Lisa. But the dice has <strong>F </strong>number of faces numbered from <strong>[1,2,....., F]</strong>. To make the game a little challenging Paul restricts the number of throws to <strong>N </strong>i.e Lisa should throw the dice only <strong>N </strong>times, not less than or greater than <strong>N </strong>times. And Lisa should find the number of times the sum of faces of <strong>N </strong>throws is equal to the given sum <strong>S</strong>.<br>\n </p>\n\n<p><strong>Example : </strong><br>\n<strong>N </strong>= 2<br>\n<strong>F </strong>= 3<br>\n<strong>S </strong>= 4<br>\nThe possibilities are <br>\n[ 2, 2 ] = 2 + 2 = 4<br>\n[ 1, 3 ] = 1 + 3 = 4<br>\n[ 3, 1 ] = 3 + 1 = 4<br>\nThe total number of possibilities are 3<br>\n </p>\n\n<p><strong>Note :</strong> [1,3] and [3,1] both are considered</p>\n\n<p><br>\nLisa implemented a function <em><strong>count_ways</strong></em> that takes <strong>N, F, S</strong> as input and returns the total number of possibilities. But Lisa was stuck at <strong>Line 11</strong>.</p>\n\n<p> </p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>FUNCTION count_ways( N, F, S )\n\tIF N==0 AND S==0\n\t\tRETURN 1\n\tELES IF N==0\n\t\tRETURN 0\n\tELSE IF S&lt;0 OR F*N&lt;F OR N&gt;S\n\t\tRETURN 0\n\tENDIF\n\tans = 0\n\tFOR i -&gt; 1 to F\n\t\t   //  Line 11\n\t\n\tRETURN ans\nENDFUN</code></pre>\n\n<p> </p>\n\n<p>Which of the following code snippets will best fit in <strong>Line 11</strong> so that function always returns the correct output.</p>\n\n<p> </p>\n\n<p><strong>Code snippets</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>ans = ans + count_ways( N-1, F-1, S-i )</code></pre>\n\n<p><br>\n<strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>ans = ans + count_ways( N-1, F, S )</code></pre>\n\n<p><br>\n<strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>ans = ans + count_ways( N-1, F, S-i )</code></pre>\n\n<p><br>\n<strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>ans = ans + count_ways( N-1, F-1, S )</code></pre>\n\n<p> </p>","a":[{"id":1533965,"option":"1","correct":false},{"id":1533966,"option":"2","correct":false},{"id":1533967,"option":"3","correct":true},{"id":1533968,"option":"4","correct":false}]},{"q":"<p>Tara went to a shop to buy apples. In the shop, there is a machine that picks apples from the basket and gives them to the customer. In the machine, you need to select the total number of apples you need. Let's consider Tara selected <strong>N</strong> number of apples. But the machine doesn't pick <strong>N</strong> apples at a time. It either picks <strong>1</strong> or <strong>2</strong> apples at a time. It picks and gives you apples until the sum of the apples reach <strong>N</strong>. Tara figured out that there are so many possibilities that machine can give you apples. <br>\n </p>\n\n<p><strong>Example</strong> <br>\nIf <strong>N</strong>=3<br>\n[1, 2] -&gt; Machine can 1st pick 1 apple and then 2 apples at a time.<br>\n[2, 1] -&gt; Machine can also pick 2 apples at a time and then 1 apple.<br>\nSo for <strong>N</strong>=3, there are <strong>2 possibilities</strong>.</p>\n\n<p><strong>Note</strong> : Consider basket has an infinite number of apples.</p>\n\n<p>Tara has implemented the below pseudocode on function <strong>possibilities</strong> that take <strong>N</strong> as input and returns the total number of possibilities.</p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>FUNCTION possibilities( N )\n    a=1\n    b=1\n    FOR i -&gt; 2 to N\n        // Line 5    \n        // Line 6    \n    ENDFOR\n    \n    RETURN b\nENDFUN</code></pre>\n\n<p><br>\nBut Tara was stuck at <strong>Line 5</strong> and <strong>Line 6</strong>. If you are asked to complete the above pseudocode then which of the following code snippets would you choose to place at <strong>Line 5</strong> and <strong>Line 6</strong> such that the function <strong>possibilities</strong> always returns the correct output for <strong>N</strong>.</p>\n\n<p> </p>\n\n<p><strong>Code snippets</strong></p>\n\n<p><strong>1. </strong></p>\n\n<pre class=\"prettyprint\"><code>b = a - b\na = b + a</code></pre>\n\n<p> </p>\n\n<p><strong>2. </strong></p>\n\n<pre class=\"prettyprint\"><code>a = a + b\nb = b - a</code></pre>\n\n<p> </p>\n\n<p><strong>3. </strong></p>\n\n<pre class=\"prettyprint\"><code>b = a + b\na = b - a</code></pre>\n\n<p> </p>\n\n<p><strong>4. </strong></p>\n\n<pre class=\"prettyprint\"><code>a = a - b\nb = b + a</code></pre>\n\n<p> </p>","a":[{"id":1557552,"option":"1","correct":false},{"id":1557553,"option":"2","correct":false},{"id":1557554,"option":"3","correct":true},{"id":1557555,"option":"4","correct":false}]},{"q":"<p>Miller and Paul both like to play with dice. So they decided to play a game with dice. Paul gives a random number <strong>N</strong> such that Miller should find the total number of possible <strong><em>ways</em></strong> to reach the number <strong>N</strong> by rolling the dice. We can say that a <strong><em>way</em></strong> is possible when the sum of the value of the faces appears when the dice is rolled is equal to <strong>N</strong>. Eg : If a dice is rolled 3 times and the values of the faces are 1,2,1 then the sum would be 1+2+1 = 4. Hence, there's a way to reach 4.<br>\n </p>\n\n<p><strong>Example :</strong><br>\nIf N = 3, then the total possible ways are<br>\n1 + 1 + 1 = 3<br>\n1 + 2 = 3<br>\n2 + 1 = 3<br>\n3 = 3<br>\nthe total number of ways are 4<br>\n </p>\n\n<p><strong>Note :</strong> </p>\n\n<ul>\n\t<li>A dice consisting of 6 faces with values 1,2,3,4,5,6.</li>\n\t<li>You can roll the dice any number of times.</li>\n</ul>\n\n<p> </p>\n\n<p>Miller thought it would take him time to calculate it manually so he decided to implement a function (<strong><em>total_no_of_ways</em></strong>) that returns the total number of possible ways to reach <strong>N</strong>. Miller got stuck at <strong>Line 7</strong>. Please help him complete the code such that the output of the code should return <strong>1936</strong>.</p>\n\n<p> </p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>FUNCTION total_no_of_ways( n )\n\tDECLARE dp = ARRAY[0,n] of {0}\n\tdp[0] = 1\n    FOR i -&gt; 1 to n\n\t    FOR j -&gt; 1 to 6\n\t\t    IF (i-j)&gt;=0\n\t\t\t         //  Line 7\n\t\t    ENDIF\n\t    ENDFOR\n    ENDFOR\n\n\tRETURN dp[n]\nENDFUNCTION total_no_of_ways\n\nn = 12\nPRINT total_no_of_ways( n )</code></pre>\n\n<p><br>\nWhich of the following code snippets will best fit in the above code at <strong>Line 7</strong> :</p>\n\n<p> </p>\n\n<p><strong>Code snippets</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>dp[i] = dp[i] + dp[i+j]\n</code></pre>\n\n<p><br>\n<strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>dp[i] = dp[i-j]\n</code></pre>\n\n<p><br>\n<strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>dp[i] = dp[i] + dp[i-j]\n</code></pre>\n\n<p><br>\n<strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>dp[i] = dp[i+j]\n</code></pre>\n\n<p> </p>","a":[{"id":1527843,"option":"1","correct":false},{"id":1527844,"option":"2","correct":false},{"id":1527845,"option":"3","correct":true},{"id":1527846,"option":"4","correct":false}]},{"q":"<p>Mike wants to climb a tree using a ladder that has a total of <strong>7 </strong>steps. To use the ladder he can take any of the following actions at a time on the ladder</p>\n\n<p><strong>Actions :</strong></p>\n\n<ul>\n\t<li>Taking 1 step forward at a time. Eg: if he is at step 1 after taking action he will be at step 2</li>\n\t<li>Taking 2 steps forward at a time. Eg: if he is at step 1 after taking action he will be at step 3</li>\n</ul>\n\n<p>Mike wants to find the total number of ways to reach step 7, considering mike is initially at step 0 (ground). So he implemented a program that returns the total no of possible ways to reach step 7. In the below pseudocode what should be the values of <strong>x </strong>and <strong>y </strong>at <strong>lines 3 </strong>and <strong>4</strong> such that the function <strong>total_no_ways</strong> returns the output <strong>21</strong>?</p>\n\n<p> </p>\n\n<p><strong>Pseudocode :</strong></p>\n\n<pre class=\"prettyprint\"><code>FUNCTION total_no_ways(n)\n\tDECLARE dp = ARRAY[0,n] of {0}\n\tdp[0] = x  // Line 3\n\tdp[1] = y  // Line 4\n\t\n\tFOR i -&gt; 2 to n\n\t\tdp[i] = dp[i-1] + dp[i-2]\n    ENDFOR\n\tRETURN dp[n]\nENDFUNCTION total_no_ways\n\nn = 7\nPRINT total_no_ways(n)</code></pre>\n\n<p> </p>","a":[{"id":1525941,"option":"x=0, y=0","correct":false},{"id":1525942,"option":"x=1, y=0","correct":false},{"id":1525943,"option":"x=1, y=1","correct":true},{"id":1525944,"option":"x=1, y=0","correct":false}]},{"q":"<p>What will be the output of the given pseudocode?</p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>INTEGER a,b,c\nSET a = 126\nSET b = -67\nSET c = 61\nIF (c&lt;a)\n IF (b&gt;a)\n PRINT b-a\n ELSE\n PRINT b+a\n ENDIF\nELSE\n PRINT c-a\nENDIF</code></pre>\n\n<p> </p>","a":[{"id":1608290,"option":"-193","correct":false},{"id":1608291,"option":"59","correct":true},{"id":1608292,"option":"65","correct":false},{"id":1608293,"option":"-65","correct":false}]},{"q":"<p>Suppose there is a method called <strong>fun()</strong> and you need to perform operations on it. Let st be the stack object. You are calling the function with parameters <strong>3, 4</strong>. What will be the output based on the given pseudocode?</p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>Integer fun(a, b): \n Stack st\n st.push(a) \n st.push(b) \n ele1 ← st.pop() \n ele2 ← st.pop() \n st.push(ele1 + ele2) \n return st.pop()\nEND</code></pre>\n\n<p> </p>","a":[{"id":1608251,"option":"4","correct":false},{"id":1608252,"option":"3","correct":false},{"id":1608253,"option":"1","correct":false},{"id":1608254,"option":"7","correct":true}]},{"q":"<p>You are working on basic operations in queue. While solving an assignment, you have come across a question related to enqueue and dequeue. Let us assume the <strong>enqueue()</strong> method is used to add elements to the queue whereas the <strong>deque()</strong> method is used to remove elements from the queue. Based on the pseudocode, find the suitable option which represents output.</p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>BEGIN\n QUEUE q\n q.enqueue(10)\n q.enqueue(12)\n q.deque()\n q.enqueue(14)\n q.deque()\n PRINT q\nEND</code></pre>\n\n<p> </p>","a":[{"id":1608247,"option":"10","correct":false},{"id":1608248,"option":"14","correct":true},{"id":1608249,"option":"12","correct":false},{"id":1608250,"option":"0","correct":false}]},{"q":"<p>Find the output of the given pseudocode?</p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>BEGIN\n ARRAY array[5]={1,2,9,8,3}\n INTEGER n=array.length, result=array[0]\n FOR i IN 1 to n - 1\n IF array[i] &gt; result \n result=array[i]\n ENDFOR\n PRINT result\nEND</code></pre>\n\n<p> </p>","a":[{"id":1608243,"option":"9","correct":true},{"id":1608244,"option":"8","correct":false},{"id":1608245,"option":"1","correct":false},{"id":1608246,"option":"2","correct":false}]},{"q":"<p>What will be the output of the following pseudocode with input array as <strong>{1, 5, 6, 8, 4, 2}</strong>?</p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>BEGIN\n ARRAY array[6]\n INTEGER n=array.length(), i\n IF n = 1\n PRINT 0\n\n IF array[0] &gt;= array[1]\n PRINT 0\n IF array[n - 1] &gt;= array[n - 2]\n PRINT n-1\n \n FOR i IN 1 to n - 1\n IF array[i] &gt;= array[i - 1] AND\n array[i] &gt;= array[i + 1]\n PRINT i\n ENDFOR\nEND</code></pre>\n\n<p> </p>","a":[{"id":1608239,"option":"6","correct":false},{"id":1608240,"option":"4","correct":false},{"id":1608241,"option":"3","correct":true},{"id":1608242,"option":"2","correct":false}]},{"q":"<p>What will the output for the following pseudocode with the below input array?</p>\n\n<p><strong>array1[ ][ ] = </strong></p>\n\n<pre class=\"prettyprint\"><code>{ { 5, 2, 3, 1 },\n { 2, 2, 2, 2 },\n { 4, 2, 7, 7 },\n { 4, 4, 4, 4 } };</code></pre>\n\n<p><strong>array2[ ][ ] =</strong></p>\n\n<pre class=\"prettyprint\"><code>{ { 4, 2, 1, 3 },\n { 2, 2, 2, 2 },\n { 2, 9, 9, 6 },\n { 4, 4, 4, 4 } };</code></pre>\n\n<p><strong>Pseudocode:</strong></p>\n\n<pre class=\"prettyprint\"><code>BEGIN\n INTEGER array1[4], array2[4],result[4]\n INTEGER i, j, k, n=4\n FOR i IN 0 to n-1\n FOR j IN 0 to n-1\n result[i][j] = 0\n FOR k IN 0 to n-1\n result[i][j] = result[i][j] + array1[i][k] * array2[k][j];\n ENDFOR\n PRINT result[][]\nEND</code></pre>\n\n<p><strong>Options:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>34 45 40 41 \n24 40 27 30 \n62 103 99 86 \n48 68 64 60</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>34 45 40 41 \n24 40 27 30 \n62 103 99 86 \n48 68 64 70</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>34 45 40 41 \n24 34 32 30 \n62 10 67 86 \n48 68 64 60</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>34 45 40 41 \n24 34 32 30 \n62 103 99 86 \n48 68 64 60</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1607946,"option":"1","correct":false},{"id":1607947,"option":"2","correct":false},{"id":1607948,"option":"3","correct":false},{"id":1607949,"option":"4","correct":true}]},{"q":"<p>What will the output for the following pseudocode?</p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>BEGIN\n STACK st\n st.push(10)\n st.pop()\n st.push(14)\n st.push(13)\n st.pop()\n st.push(12)\n PRINT st.top()\nEND</code></pre>\n\n<p> </p>","a":[{"id":1607902,"option":"13","correct":false},{"id":1607903,"option":"12","correct":true},{"id":1607904,"option":"14","correct":false},{"id":1607905,"option":"10","correct":false}]},{"q":"<p>Suppose you working on a binary tree concept. There are three functions given as <strong>fun1, fun2 and fun3</strong>. All three functions accept the tree as a parameter which is represented by the root node. Node is the class with data, left and right parameters. The input is given below. Your task is to find the output of the given pseudocode based on the input tree.</p>\n\n<pre class=\"prettyprint\"><code>   12\n   / \\\n  10 14\n / \\   \\ \n 6 11   16\n\n\n</code></pre>\n\n<p><strong>Pseudocode: </strong></p>\n\n<pre class=\"prettyprint\"><code>FUNCTION fun1(Node T)\n IF T == null\n return\n \n fun1(T-&gt;left)\n fun1(T-&gt;right)\n PRINT T-&gt;data\nEND\n\nFUNCTION fun2(Node T)\n IF T == null\n return\n \n fun2(T-&gt;left)\n PRINT T-&gt;data\n fun2(T-&gt;right)\nEND\n\nFUNCTION fun3(Node T)\n IF T == null\n return\n \n PRINT T-&gt;data\n fun3(T-&gt;left)\n fun3(T-&gt;right)\n\nEND</code></pre>\n\n<p><strong>Options</strong> </p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>6 11 10 16 14 12 \n6 10 11 12 14 16 \n12 10 6 11 14 16</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>12 10 6 11 14 16 \n6 10 11 12 14 16 \n6 11 10 16 14 12</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>6 11 10 16 14 12 \n12 10 6 11 14 16 \n6 10 11 12 14 16</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>6 10 11 12 14 16 \n12 10 6 11 14 16 \n6 11 10 16 14 12</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1607896,"option":"1","correct":true},{"id":1607897,"option":"2","correct":false},{"id":1607898,"option":"3","correct":false},{"id":1607899,"option":"4","correct":false}]},{"q":"<p>Suppose you are working on the binary tree and recursion concept. There is a function given as <strong>fun1</strong>. It has only one parameter i.e.; Node class. This class represents a Tree with data, left, right parameters. Your task is to find the functionality of the pseudocode. Note that input is represented by the root element of the tree.</p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>FUNCTION fun1(Node T)\n IF T == NULL\n return\n ENDIF\n return (T-&gt;data + fun1(T-&gt;left) + fun1(T-&gt;right))\nEND</code></pre>\n\n<p><strong>Options</strong> </p>\n\n<ol>\n\t<li>Retrieve all nodes of the tree</li>\n\t<li>Print left nodes first and then right nodes</li>\n\t<li>Print right nodes first and then left nodes</li>\n\t<li>Sum of all nodes of the tree</li>\n</ol>","a":[{"id":1607892,"option":"1","correct":false},{"id":1607893,"option":"2","correct":false},{"id":1607894,"option":"3","correct":false},{"id":1607895,"option":"4","correct":true}]},{"q":"<p>If the input array is<strong> [8,4,0,2,5,6]</strong>, then what will be the output of the given pseudocode?</p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>BEGIN\n INTEGER array[]\n INTEGER temp = 0, n=array.length()\n INTEGER a = 0, b = 0\n INTEGER x = 0, y = n - 1\n WHILE x &lt;= y\n IF array[x] &lt; array[y] \n IF array[x] &gt; a \n a = array[x]\n ELSE\n Temp = temp + a - array[x]\n x=x+1 \n ELSE \n IF array[y] &gt; b \n b = array[y]\n ELSE\n temp = temp + b - array[y]\n y=y-1\n ENDWHILE\n PRINT temp\nEND</code></pre>\n\n<p> </p>","a":[{"id":1607888,"option":"10","correct":false},{"id":1607889,"option":"14","correct":false},{"id":1607890,"option":"13","correct":true},{"id":1607891,"option":"12","correct":false}]},{"q":"<p>What is the output of the given pseudocode?</p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>BEGIN\n INTEGER temp1 = 0, temp2 = 0\n INTEGER a = 0, b = 0, res = 0\n ARRAY array[10]\n array = {1, 4, 6, -2, 3, -9, 0, -3, 5, 1}\n INTEGER i, n=array.length()\n \n FOR i IN 0 to n-1\n  temp1 = array[i] + temp1\n IF temp2 &lt; temp1\n temp2 = temp1\n a = res\n b = i\n ENDIF\n \n IF temp1 &lt; 0\n temp1 = 0\n res = i + 1\n ENDIF\n ENDFOR\n PRINT (b - a + 1)\nEND</code></pre>\n\n<p> </p>","a":[{"id":1607884,"option":"9","correct":false},{"id":1607885,"option":"5","correct":true},{"id":1607886,"option":"6","correct":false},{"id":1607887,"option":"3","correct":false}]},{"q":"<p>What will be the output of the given pseudocode with the below input?</p>\n\n<p><strong>Input: </strong></p>\n\n<pre class=\"prettyprint\"><code>5 6 7 8\n9 4 2 5\n1 2 3 4\n7 8 9 0</code></pre>\n\n<p><strong>pseudocode: </strong></p>\n\n<pre class=\"prettyprint\"><code>BEGIN\n INTEGER a = 0, b = 0\n INTEGER i, n=4\n ARRAY array[n][n]\n FOR i in 0 to n-1\n a += array[i][i];\n b += array[i][n-i-1];\n ENDFOR\n IF a&gt;b\n PRINT a-b\n ELSE \n PRINT b-a\nEND</code></pre>\n\n<p> </p>","a":[{"id":1607880,"option":"6","correct":false},{"id":1607881,"option":"7","correct":true},{"id":1607882,"option":"-6","correct":false},{"id":1607883,"option":"-7","correct":false}]},{"q":"<p>Find the output of the given pseudocode based on the input. </p>\n\n<p>Input: <strong>(((a)b)(c)xy(z))</strong></p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>BEGIN\n STRING str=(((a)b)(c)xy(z))\n INTEGER temp=0,i,j\n INTEGER result=0, n=str.length()\n \n FOR i IN 0 to n-1{\n if Character at i in str = “(“\n temp=temp+1\n\n if temp &gt; result \n result = temp\n \n else if Character at i in str = “)”\n if temp &gt; 0\n temp=temp-1\n else\n return\n }\n\n if (temp != 0) {\n return\n }\n \n PRINT result\nEND</code></pre>\n\n<p> </p>","a":[{"id":1607538,"option":"4","correct":false},{"id":1607539,"option":"5","correct":false},{"id":1607540,"option":"2","correct":false},{"id":1607541,"option":"3","correct":true}]},{"q":"<p>Suppose you are working in ABC company. You were given sample matrix type data. The customers are represented in rows while the products are represented in columns. For example, a customer x who can buy one are more products of the same or different category. Let <strong>c1, c2, c3, c4</strong> are customers and <strong>p1, p2, p3, p4</strong> are products. The matrix is given as: </p>\n\n<pre class=\"prettyprint\"><code>\tp1\tp2\tp3\tp4\nc1\t1\t2\t3\t4\nc2\t15\t6\t7\t12\nc3\t9\t16\t11\t8\nc4\t5\t6\t8\t9</code></pre>\n\n<p>Now, your task is to find the output of the given pseudocode based on the above data.</p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>BEGIN\n INTEGER n=4, a, b\n ARRAY matrix[n][n]\n INTEGER x, y, max1=0, max2=0\n FOR a IN 0 to n {\nx=0, y=0\nFOR b IN 0 to n {\n x = x + matrix[a][b]\n y = y + matrix[b][a]\n}\nif max1 &lt; x\n max1 = x\nif max2 &lt; y\n max2 = y\n }\n PRINT max1, max2\nEND</code></pre>\n\n<p> </p>","a":[{"id":1607534,"option":"44 33","correct":true},{"id":1607535,"option":"33 44","correct":false},{"id":1607536,"option":"30 44","correct":false},{"id":1607537,"option":"44 30","correct":false}]},{"q":"<p>Compute the output of the given pseudocode.</p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>BEGIN\n ARRAY a[10]\n a = {1,0,0,4,0,2,0,0,5,6}\n n=10\n INTEGER i,count=0\n FOR i IN 0 to 9\n  if a[i] != 0\n   a[count++] = a[i]\n  WHILE count&lt;n\n   a[count++]=0\n FOR i IN 0 to 9\n PRINT a[i]\nEND</code></pre>\n\n<p> </p>","a":[{"id":1607530,"option":"1 4 2 5 6 0 0 0 0 0","correct":true},{"id":1607531,"option":"0 0 0 0 0 1 4 2 5 6","correct":false},{"id":1607532,"option":"6 5 2 4 1 0 0 0 0 0","correct":false},{"id":1607533,"option":"0 0 0 0 0 6 5 2 4 1","correct":false}]},{"q":"<p>What will be the outputs of the pseudocode for the following test cases?</p>\n\n<p><strong>Cases:</strong></p>\n\n<ol>\n\t<li>one=2, two=6</li>\n\t<li>one=36, two=24</li>\n</ol>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>Function fun1(INTEGER one, INTEGER two)\n INTEGER result;\n result= (one * two)/ fun2(one, two);\n return result;\nEND\n\nFunction fun2(INTEGER one, INTEGER two) \n if two == 0\n return one;\n\n return fun2(two, one % two);\nEND</code></pre>\n\n<p> </p>\n\n<p><strong>Outputs</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>6\n36</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>2\n36</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>6\n72</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>2\n72</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>\n\n<p> </p>\n\n<p> </p>","a":[{"id":1607526,"option":"1","correct":false},{"id":1607527,"option":"2","correct":false},{"id":1607528,"option":"3","correct":true},{"id":1607529,"option":"4","correct":false}]},{"q":"<p>There are the 2 pseudocodes given alongside. Determine what function each of them performs. What will be the correct output of both functions? What will be the complexity?</p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>I. INPUT n=7\nFUNCTION (INPUT n)\n IF (n=1)\n  PRINT \"1\"\n ELSE IF (n=0)\n  PRINT \"1\"\n ELSE IF (n&gt;1)\n  RETURN FUNCTION(n*FUNCTION(n-1))\n ELSE\n  RETURN -1\nENDFUNCTION\n\nII. INPUT x=7, y=5\nFUNCTION (INPUT x, INPUT y)\n IF (x=1)\n  PRINT \"1\"\n ELSEIF (y!=0)\n  RETURN (x*FUNCTION(x, y-1))\n ELSE \n  RETURN -1\nENDFUNCTION\n\n</code></pre>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>The first function determines the factorial of a number. The output will be 5040. Complexity : O(n) The second function determines the value of x which decrements each time with the value of y and multiplies with its decreased value at every iteration. The output will be 2520. Complexity: O(y)</li>\n\t<li>The first function determines the factorial of a number. The output will be 5040. Complexity: O(n) The second is an exponential function that determines x^y. The output will be 16807. Complexity: O(y)</li>\n\t<li>The first function determines the factorial of a number. The output will be 5040. Complexity: O(n-1) The second is an exponential function that determines x^y. The output will be 16807. Complexity: O(a)</li>\n\t<li>The first function determines the factorial of a number. The output will be 5040. Complexity: O(n) The second function determines the value of x which decrements each time with the value of y and multiplies with its decreased value at every iteration.The output will be 2520. Complexity: O(a)</li>\n</ol>","a":[{"id":1607226,"option":"1","correct":false},{"id":1607227,"option":"2","correct":true},{"id":1607228,"option":"3","correct":false},{"id":1607229,"option":"4","correct":false}]},{"q":"<p>What function is the pseudocode given alongside performing? What is the time complexity?</p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>FUNCTION (INPUT arr[])\n\n FOR each value of 'i' in arr[]\n  n:=arr[i]\n  j:=i-1\n  done:=false\n  REPEAT\n   IF arr[i]&gt;n\n    arr[j+1]:=arr[j]\n    j:=j-1\n    IF j&lt;0\n     done :=true\n   ELSE\n    done:=true\n  UNTIL done\n  arr[j+1]:=n\n ENDFOR\n\nEND FUNCTION</code></pre>\n\n<p> </p>","a":[{"id":1607222,"option":"It is the bubble sorting technique  ,   Complexity : O(n^2)","correct":false},{"id":1607223,"option":"It's the Insertion sort technique  ,  Complexity : O(n^2)","correct":true},{"id":1607224,"option":"It's the Insertion sort technique  ,  Complexity : O(n^n)","correct":false},{"id":1607225,"option":"Quick sort is implemented here  ,  Complexity : O(n^2) (worst case)","correct":false}]},{"q":"<p>Which of the following options represents the correct Time Complexity of the given Pseudocode?</p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>FUNCTION ( matrix[][], n)\n    INT i\n    FOR i -&gt; 0 to n\n        FOR j -&gt; 0 to n\n            INPUT matrix elements\n        ENDFOR\n    ENDFOR\nENDFUNCTION</code></pre>\n\n<p> </p>","a":[{"id":1608060,"option":"Complexity : O(n)","correct":false},{"id":1608061,"option":"Complexity : O(n^2)","correct":true},{"id":1608062,"option":"Complexity : O(n^n)","correct":false},{"id":1608063,"option":"Complexity : O(log n)","correct":false}]},{"q":"<p>Identify what the pseudocode given below is performing and determine its output.</p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>INTEGER n, remainder, reverse\nSET n = 4096\nreverse = 0\nWHILE n!=0\n    remainder = n%10 \n    reverse = reverse * 10 + remainder \n    n = n/10 \nENDWHILE\nPRINT reverse\nPRINT n-reverse % 9 == 0\n</code></pre>\n\n<p> </p>\n\n<p>Choose the best options </p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Output : Garbage value 1\nThe code is performing the reversal of an integer.</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Output : 4 0\nThe code is printing only the unit's digit.</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Output : 6904 1\nThe code is performing the reversal of a number. Then, subtracting the original number with the reversed number and checking whether the resulting number is divisible by 9 or not.</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Output : 9 garbage value\nSince only one digit is divisible by nine, only that particular digit is printed.</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1608028,"option":"1","correct":false},{"id":1608029,"option":"2","correct":false},{"id":1608030,"option":"3","correct":true},{"id":1608031,"option":"4","correct":false}]},{"q":"<p>Identify the pseudocode from the options provided, that corresponds the best to the flowchart shown below.</p>\n\n<p><img alt=\"\" height=\"366\" src=\"https://he-s3.s3.ap-southeast-1.amazonaws.com/media/uploads/f2b611ac-7fd1-44a2-b676-322a32b5bc6e.png\" width=\"330\"></p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>BEGIN\n    INPUT hours\n    INPUT rate\n    pay== hours * rate\nEND</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>BEGIN\n    INPUT hours\n    pay = hours * rate;\n    PRINT pay;\nEND</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>BEGIN\n    INPUT hours\n    INPUT rate\n    pay == hours * rate\n    PRINT pay\nEND</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>BEGIN\n    INPUT hours\n    INPUT rate\n    pay = hours*rate\n    PRINT pay\nEND</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>\n\n<p> </p>\n\n<p> </p>","a":[{"id":1608020,"option":"1","correct":false},{"id":1608021,"option":"2","correct":false},{"id":1608022,"option":"3","correct":false},{"id":1608023,"option":"4","correct":true}]},{"q":"<p>What will be the output of the pseudocode given below?</p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>INT x=5\nWHILE x!=20 \n    x=x+3\n    PRINT x\nENDWHILE</code></pre>\n\n<p> </p>","a":[{"id":1608002,"option":"8 11 15 17","correct":false},{"id":1608003,"option":"8 11 14 17 20","correct":false},{"id":1608004,"option":"8 11 14 17 19","correct":false},{"id":1608005,"option":"8 11 14 17","correct":true}]},{"q":"<p>Analyse the below pseudocode and choose the option that represents the correct output and the Time Complexity of the Pseudocode?</p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>INTEGER arr[], counter\nSET counter = 0\nSET arr[]={343, 243, 24396, 57, 51246, 648} \nINTEGER size = 6\n\nFOR i -&gt; 0 to size\n    IF arr[i]%3 == 0 &amp;&amp; arr[i]%9 == 0\n        counter ++\n    ENDIF\nENDFOR\n\nPRINT counter\nPRINT counter % 3\nPRINT counter % 2</code></pre>\n\n<p> </p>","a":[{"id":1607984,"option":"Output : 5, 2, 3  ,  Complexity : O(size)","correct":false},{"id":1607985,"option":"Output : 3, 0, 2  ,  Complexity : O(1)","correct":false},{"id":1607986,"option":"Output : 3, 0, 1  ,  Complexity : O(1)","correct":true},{"id":1607987,"option":"Output : 3, 0, 1  ,  Complexity : O(size)","correct":false}]},{"q":"<p>Analyze the below-given pseudocode and choose the correct option that best describes the purpose of the pseudocode and the Time Complexity of the pseudocode.</p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>FUNCTION Find(a)\n    INT i=0\n    i = sqrt(a)\n    FOR value -&gt; 2 to i\n        IF a%value == 0\n            RETURN FALSE\n        ENDIF\n    ENDFOR\n    RETURN TRUE\nENDFUN</code></pre>\n\n<p> </p>","a":[{"id":1607956,"option":"It is a function to find the factors of a number. Time Complexity : O(n)","correct":false},{"id":1607957,"option":"It is a function to determine whether a number is prime or not. Time Complexity : O(n^2)","correct":false},{"id":1607958,"option":"It is a function to determine whether a number is prime or not. Time Complexity : O(n)","correct":true},{"id":1607959,"option":"Cannot be determined","correct":false}]},{"q":"<p>What is the output of the below pseudocode?</p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>INT x=45 y=10\nFUNCTION (INT x, INT y)\n IF (x!=50)\n    RETURN (y + FUNCTION(x+1, y))\n ELSE \n    RETURN 0\n ENDIF\nENDFUN</code></pre>\n\n<p>Note :</p>\n\n<ol>\n\t<li><strong>x</strong> is always greater than <strong>y</strong></li>\n</ol>","a":[{"id":1607960,"option":"60","correct":false},{"id":1607961,"option":"50","correct":true},{"id":1607962,"option":"40","correct":false},{"id":1607963,"option":"30","correct":false}]},{"q":"<p>Bob was assigned a task by his teacher. His teacher gave him a string <strong>s</strong>. Bob needs to find whether the given string consists of unique characters. So </p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>FUNCTION Unique(s, n) \n    INT check = 0\n    FOR i -&gt; 0 to n\n        INT val = ASCII(s[i]) - 65\n        IF ((check &amp; X) &gt; 0)  // Line 5\n            RETURN FALSE\n        check |= Y  // Line 7\n    ENDFOR\n    RETURN TRUE\nENDFUN</code></pre>\n\n<p><strong>Note</strong> :</p>\n\n<ol>\n\t<li>The string contains lowercase alphabets only.</li>\n\t<li>the function <strong>ASCII() </strong>returns the <strong>ASCII</strong> value of the character.</li>\n</ol>\n\n<p>Bob has implemented the above pseudocode that defines the function <strong>Unique()</strong> that takes string <strong>s</strong> and length of the string <strong>n</strong> as input and return the <strong>TRUE</strong> or <strong>FALSE</strong> based on the condition.</p>\n\n<p>Which of the following options show the correct value of <strong>X and Y</strong> at Lines <strong>5</strong> and <strong>7</strong> such that when implemented the pseudocode returns the correct value?</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>X = 1 &lt;&lt; val\nY = 1 &lt;&lt; val</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>X = 1 &lt;&lt; val\nY = 1 &gt;&gt; val</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>X = 1 &gt;&gt; val\nY = 1 &lt;&lt; val</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>X = 1 &gt;&gt; val\nY = 1 &gt;&gt; val</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>\n\n<p> </p>\n\n<p> </p>","a":[{"id":1607952,"option":"1","correct":true},{"id":1607953,"option":"2","correct":false},{"id":1607954,"option":"3","correct":false},{"id":1607955,"option":"4","correct":false}]},{"q":"<p>Alice father gave him a Number <strong>n</strong>. His father asked him whether the number satisfies the following condition or not :</p>\n\n<p><strong>Condition :</strong></p>\n\n<ul>\n\t<li>The sum of the factors of the number <strong>n</strong> is equal to <strong>n. </strong></li>\n</ul>\n\n<p>So Alice has implemented the following function <strong>find() </strong>that takes number <strong>n</strong> as input and returns <strong>TRUE</strong> if the number <strong>n</strong> satisfies the above condition and <strong>FALSE</strong> if it does not satisfy. </p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>FUNCTION find(INT n)  \n    INT sum = 1;\n    INT i = 2\n    WHILE(i * i &lt;= n) X   // Line 5\n        IF (n % i==0)\n            IF(i * i != n) Y  //  Line 9\n                sum = sum + i + n / i\n            ELSE\n                sum = sum + i\n        ENDIF\n        \n        i++\n    ENDWHILE\n   \n    IF (sum == n &amp;&amp; n != 1)\n        RETURN TRUE\n \n    RETURN FALSE\nENDFUN\n</code></pre>\n\n<p> </p>\n\n<p>Which of the following options shows the correct values of <strong>X</strong> and <strong>Y</strong> such that when replaced in the above code at lines <strong>5</strong> and <strong>9</strong>, the pseudocode returns the correct output?</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>X = i * i &lt;= n\nY = i * i &lt;= n</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>X = i * i != n\nY = i * i &lt;= n</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>X = i * i &lt;= n\nY = i * i != n</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>X = i * i != n\nY = i * i != n</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>\n\n<p> </p>\n\n<p> </p>\n\n<p> </p>\n\n<p> </p>","a":[{"id":1607542,"option":"1","correct":false},{"id":1607543,"option":"2","correct":false},{"id":1607544,"option":"3","correct":true},{"id":1607545,"option":"4","correct":false}]},{"q":"<p>Consider you have implemented pseudocode that converts the infix expression to Postfix expression. Your pseudocode defines the function <strong>infix_to_Postfix()</strong> that takes the <strong>exp</strong> <strong>infix</strong> <strong>expression</strong> and <strong>n</strong> length of the <strong>infix</strong> <strong>expression</strong> as input and returns a <strong>Postfix expression</strong> as output. </p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>FUNCTION Operators( c )\n    SWITCH(c)\n        CASE '+'\n        CASE '-'\n            RETURN 1\n\n        CASE '*'\n        CASE '/'\n            RETURN 2\n\n        CASE '^'\n            RETURN 3\n\n    ENDSWITCH\n\n    RETURN -1\nAND FUN\n\n\n\nFUNCTION infix_to_Postfix( exp, n )\n\n    INT count=0\n\n    STRING ans=\"\"\n\n    DECLARE s : STACK of CHAR\n\n    FOR i -&gt; 0 TO n-1\n        CHAR c=exp[i]\n\n        IF isLetterOrDigit(c)\n            ans+=c\n        ELSE IF c=='('\n            s.PUSH(c)\n        ELSE IF c==')'\n            WHILE s.EMPTY()==FALSE &amp;&amp; s.TOP()!='('\n                ans+=s.POP()\n            ENDWHILE\n\n            s.POP()\n            count+=1\n        ELSE\n            WHILE s.EMPTY()==FALSE &amp;&amp; Operators(c)&lt;operators(s.TOP())\n                ans+=s.POP()\n            ENDWHILE\n\n            s.PUSH(c)\n            count+=1\n        ENDIF\n    ENDFOR\n\n    WHILE s.EMPTY()==FALSE\n        IF s.TOP()=='('\n            RETURN \"The Expression is invalid\"\n        ENDIF\n        ans+=s.POP()\n    ENDWHILE\n\n    RETURN ans\nENDFUNCTION</code></pre>\n\n<p><strong>Note:</strong></p>\n\n<ol>\n\t<li>The function <strong>isLetterOrDigit() </strong>takes a character as input and if the character is an alphabet or digit it returns <strong>TRUE</strong> else it returns <strong>FALSE</strong>.</li>\n\t<li>Consider the data structure <strong>STACK</strong> as a given built-in Stack with methods <strong>PUSH(), POP(), EMPTY(), TOP()</strong>.</li>\n\t<li><strong>PUSH()</strong> - It pushes one element to the stack</li>\n\t<li><strong>POP()</strong> - It pops the top element from the stack and returns it</li>\n\t<li><strong>EMPTY()</strong> - this method checks whether the stack is empty or not. If the stack is empty it returns <strong>TRUE</strong> else it returns <strong>FALSE</strong></li>\n\t<li><strong>TOP()</strong> - this method returns the top element of the stack</li>\n</ol>\n\n<p>Now, if the <strong>exp='t+g*(q^j-x)^(b+a*m)-i'</strong> and <strong>n=21 </strong>then what would be the value of the variable <strong>count </strong>in the above pseudocode?</p>","a":[{"id":1599518,"option":"10","correct":true},{"id":1599519,"option":"11","correct":false},{"id":1599520,"option":"12","correct":false},{"id":1599521,"option":"13","correct":false}]},{"q":"<p>Mary's teacher gave him a string and asked him to validate it. The String consists of only these characters<strong> '(', '{', '['</strong>. You can say that a string is a valid sequence when it is inserted with certain numbers and mathematical operators it should give a valid mathematical expression.<br>\nConditions for a Valid bracket</p>\n\n<ol>\n\t<li>Open brackets must be closed by the same type of brackets.</li>\n\t<li>Open brackets must be closed in the correct order.</li>\n</ol>\n\n<p>Examples of valid expressions are <strong>' [ { } ] ', ' { [ { [ ] } ] } ', ' ( { [ ] ( ) } ( ) ) '</strong><br>\nExamples of Invalid expressions are <strong>' { ( ', ' ( ] [ ', ' { } { ', ' ] [ { } ) ( ', ' [ ( ) ) ] '</strong></p>\n\n<p><strong>Note - Bullet points, explanation of brackets clarity.</strong></p>\n\n<p> </p>\n\n<p>So Mary has implemented the below pseudocode which defines the function <strong>Check_Valid()</strong> that takes the string <strong>exp</strong> and <strong>n</strong> the length of the string as input. If the string is a valid string then the function returns <strong>TRUE</strong> or else it returns <strong>FALSE</strong></p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>FUNCTION Check_Valid( exp, n )\n    DECLARE s : STACK of CHAR\n    CHAR x\n    INT count=0\n\n    FOR i -&gt; 0 to n-1\n        IF ( exp[i]=='(' || exp[i]=='[' || exp[i]=='{' )\n            s.PUSH(exp[i])\n            CONTINUE\n        ENDIF\n\n        IF s.EMPTY()==TRUE\n            RETURN FALSE\n        ENDIF\n\n        SWITCH (exp[i])\n            CASE ')':\n                t=s.TOP()\n                s.POP()\n                count+=1\n                IF (t == '{' || t == '[')\n                    RETURN FALSE\n                ENDIF\n                BREAK\n\n            CASE '}':\n                t=s.TOP()\n                s.POP()\n                count+=1\n                IF (t == '(' || t == '[')\n                    RETURN FALSE\n                ENDIF\n                BREAK\n\n            CASE ']':\n                t=s.TOP()\n                s.POP()\n                count+=1\n                IF (t == '(' || t == '{')\n                    RETURN FALSE\n                ENDIF\n                BREAK\n        ENDSWITCH\n    ENDFOR\n\n    RETURN s.EMPTY()\nENDFUN</code></pre>\n\n<p><strong>Note: </strong></p>\n\n<ol>\n\t<li>Consider the data structure <strong>STACK</strong> as a given built-in Stack with methods <strong>PUSH(), POP(), EMPTY(), TOP()</strong>.</li>\n\t<li><strong>PUSH()</strong> - It pushes one element to the stack</li>\n\t<li><strong>POP()</strong> - It pops the top element from the stack and returns it</li>\n\t<li><strong>EMPTY()</strong> - this method checks whether the stack is empty or not. If the stack is empty it returns <strong>TRUE</strong> else it returns <strong>FALSE</strong></li>\n\t<li><strong>TOP()</strong> - this method returns the top element of the stack</li>\n</ol>\n\n<p>If the <strong>exp=' { ( ) } [ ( { [ } ) ] ] '</strong> and <strong>n=12 </strong>then what would be the value of the variable <strong>count </strong>in the above pseudocode?</p>\n\n<p> </p>\n\n<ol>\n</ol>","a":[{"id":1596432,"option":"1","correct":false},{"id":1596433,"option":"2","correct":false},{"id":1596434,"option":"3","correct":true},{"id":1596435,"option":"4","correct":false}]},{"q":"<p>Alice has a DVD Stack in his room. Each DVD represents a different movie. She has to pick the DVD from the DVD stack. But to do this she needs to take out each DVD one by one from the DVD stack. On every DVD she wrote the name of the movie that the DVD contains. But to see what name does DVD has, she needs to take out the DVD only then she can see. So she started taking out DVD's from the stack and checking each DVD. Now, Alice has decided to again put the remaining DVDs onto the stack. Alice wanted to know how many operations she needs to perform for this task. So she has implemented a program.</p>\n\n<p><strong>Function 1:</strong></p>\n\n<pre class=\"prettyprint\"><code>FUNCTION put_back_DVD(dvd_list, n, new_dvd, count)\n\tl[n]=new_dvd\n    n=n+1\n    count+=1\nENDFUN</code></pre>\n\n<p><strong>Function 2:</strong></p>\n\n<pre class=\"prettyprint\"><code>FUNCTION take_out_DVD(dvd_list, n, count)\n\tdvd=l[n-1]\n    n-=1\n    count+=1\n    RETURN dvd\nENDFUN</code></pre>\n\n<p>The above pseudocodes represent 2 functions <strong>put_back_DVD()</strong> and <strong>take_out_DVD()</strong> . While Alice was searching for the DVD she takes out one by one this operation was written as <strong>take_out_DVD()</strong> and after finding out the DVD she put back the remaining DVDs, this operation was written as <strong>take_out_DVD()</strong>. She passed a count variable in each function to count the total number of operations she needs to perform.</p>\n\n<p><strong>take_out_DVD()</strong><br>\nThe function <strong>take_out_DVD()</strong> takes the <strong>dvd_list</strong> the total stack of DVDs, <strong>n</strong> the total number of DVD's present on the stack at that time and the <strong>count</strong> variable. In this way, she takes out each DVD and checks the movie name written on it.</p>\n\n<p><strong>put_back_DVD()</strong><br>\nThe <strong>put_back_DVD()</strong> takes <strong>dvd_list</strong> the total stack of DVDs, <strong>n</strong> the total number of DVD's present on the stack at that time, <strong>new_DVD</strong> this is one of remaining DVD's that were taken out and the <strong>count</strong> variable. In this way, she puts back each DVD. </p>\n\n<p>Now if Alice has a total of <strong>417</strong> DVD's on the DVD Stack and the if the targeted DVD was at the <strong>269</strong>th position from the bottom of the stack. If Alice executes this as the program, what will be the value of the <strong>count</strong> variable after performing all these operations.<br>\n </p>","a":[{"id":1582849,"option":"536","correct":false},{"id":1582850,"option":"296","correct":false},{"id":1582851,"option":"297","correct":true},{"id":1582852,"option":"537","correct":false}]},{"q":"<p>Mike and his friends were standing in a straight line with a 1-meter distance between each of them. Mike was standing at 5th position.<br>\n<strong>[ Alice, Ben, Bob, Mary, Mike ]</strong> - Mike and his friends<br>\n<strong>[194, 165, 172, 168, 182] </strong>- Heights of Mike and his friends in cm.<br>\nThe distance between Alice and Ben is 1 meter and the distance between Ben and Bob is 1 meter and so on. Mike and his friends are looking at Alice. If Bob finds out the distance between him and the first person who is taller than him. He finds out that it is Alice, 2 meters away from him. So Mike observed this and implemented a code that will populate an array, that will indicate the distance of the first person who is taller than the subject.<br>\nThe populated array for the above example is <br>\n<strong>[1, 1, 2, 1, 4]</strong><br>\nConsider Alice is facing the wall, so his distance would be <strong>1 meter</strong> from the <strong>wall</strong> by default.<br>\nMike has implemented the below Pseudocode that includes the function <strong>Find_Out()</strong>. this function takes 2 inputs <strong>Heights</strong> the array that contains the heights of Mike and his friends and <strong>n</strong> the number of people.</p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>FUNCTION Find_Out( Heights, n )\n    DECLARE temp : STACK of INT\n    temp.PUSH(0)\n\n    DECLARE A : ARRAY[n] of INT\n    A[0]=1\n\n    FOR i -&gt; 1 to n-1\n    \n          // Line 7\n            temp.POP()\n        ENDWHILE\n\n        IF temp.EMPTY()==TRUE\n            A[i]=i+1\n        ELSE\n            A[i]=(i-temp.TOP())\n        ENDIF\n\n        temp.PUSH(i)\n\n    ENDFOR\n\n    FOR i -&gt; 0 to n-1\n        PRINT A[i]\nENDFUN</code></pre>\n\n<p><strong>Note: </strong></p>\n\n<ol>\n\t<li>Consider the data structure <strong>STACK</strong> as a given built-in Stack with methods <strong>PUSH(), POP(), EMPTY(), TOP()</strong>.</li>\n\t<li><strong>PUSH()</strong> - It pushes one element to the stack</li>\n\t<li><strong>POP()</strong> - It pops the top element from the stack and returns it</li>\n\t<li><strong>EMPTY()</strong> - this method checks whether the stack is empty or not. If the stack is empty it returns <strong>TRUE</strong> else it returns <strong>FALSE</strong></li>\n\t<li><strong>TOP()</strong> - this method returns the top element of the stack</li>\n</ol>\n\n<p> </p>\n\n<p>Mike was stuck at <strong>Line 7</strong>. Which of the following options best fit in <strong>Line 7</strong> such that the Pseudocode always returns the correct output if the code is executed?</p>\n\n<p> </p>\n\n<p> </p>\n\n<p> </p>","a":[{"id":1594666,"option":"WHILE temp.EMPTY()==FALSE AND Heights[temp.TOP()]<=Heights[i]","correct":true},{"id":1594667,"option":"WHILE temp.EMPTY()==FALSE AND Heights[temp.TOP()]>=Heights[i]","correct":false},{"id":1594668,"option":"WHILE temp.EMPTY()==TRUE AND Heights[temp.TOP()]<=Heights[i]","correct":false},{"id":1594669,"option":"WHILE temp.EMPTY()==TRUE AND Heights[temp.TOP()]>=Heights[i]","correct":false}]},{"q":"<p>Lisa was working on her maths homework. She was calculating Arithmetic expressions. But she doesn't know whether her answer is correct or not. But her teacher gave a Pseudocode to check the answer.</p>\n\n<p>Consider the below Pseudocode that defines the function <strong>Evaluate_Postfix_Expression() </strong>that takes <strong>exp</strong> the <strong>PostFix</strong> expression and <strong>m</strong> the length of the <strong>PostFix </strong>expression as input. </p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>FUNCTION Evaluate_Postfix_Expression( exp, m )\n    INT count=0\n    DECLARE s : STACK of INT\n\n    FOR i -&gt; 0 TO m-1\n        CHAR c=exp[i]\n\n        IF c==' '\n            CONTINUE\n        ELSEIF IS_DIGIT(c)\n            INT n=0\n\n            WHILE IS_DIGIT(c)\n                n=n*10 + INT(c)\n                i+=1\n                c=exp[i]\n            ENDWHILE\n\n            i-=1\n            \n            s.PUSH(n)\n            count+=1\n\n        ELSE\n            INT v1=s.POP()\n            INT v2=s.POP()\n\n            SWITCH(c)\n                CASE '+'\n                    s.PUSH(v2+v1)\n                    BREAK\n\n                CASE '-'\n                    s.PUSH(v2-v1)\n                    BREAK\n\n                CASE '/'\n                    s.PUSH(v2/v1)\n                    BREAK\n\n                CASE '*'\n                    s.PUSH(v2*v1)\n                    BREAK\n            ENDSWITCH\n        ENDIF\n    ENDFOR\n\n    RETURN s.POP()\nENDFUN</code></pre>\n\n<p><strong>Note:</strong></p>\n\n<ol>\n\t<li><strong>IS_DIGIT()</strong> will take a character type and check if it is a digit i.e 0,1,2,3,4,5,6,7,8,9</li>\n\t<li>The <strong>PostFix</strong> expression will always be a valid expression</li>\n\t<li>In the <strong>PostFix</strong> expression, each operator and operand is space-separated</li>\n\t<li>Consider the data structure <strong>STACK</strong> as a given built-in Stack with methods <strong>PUSH(), POP(), EMPTY(), TOP()</strong>.</li>\n\t<li><strong>PUSH()</strong> - It pushes one element to the stack</li>\n\t<li><strong>POP()</strong> - It pops the top element from the stack and returns it</li>\n\t<li><strong>EMPTY()</strong> - this method checks whether the stack is empty or not. If the stack is empty it returns <strong>TRUE</strong> else it returns <strong>FALSE</strong></li>\n\t<li><strong>TOP()</strong> - this method returns the top element of the stack</li>\n</ol>\n\n<p>If the <strong>exp</strong> is <strong>\"234 162 - 2 / 3 * 9 +\" </strong>and <strong>m=21, what</strong> will be the value of variable <strong>count </strong>if the above Pseudocode is executed with these inputs?</p>\n\n<p> </p>","a":[{"id":1597487,"option":"2","correct":false},{"id":1597488,"option":"3","correct":false},{"id":1597489,"option":"4","correct":false},{"id":1597490,"option":"5","correct":true}]},{"q":"<p>In Data Structures you are working on <strong>Single Linked List. </strong>The below pseudocode contains a function <strong>display </strong>that takes the <strong>head node(h)</strong> of a single linked list as <strong>input </strong>and prints the <strong>data </strong>of each node of the single linked list.</p>\n\n<p> </p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>class Node {\n\n    // constructor...\n    Node(value) {\n        data = value\n        next = NULL\n    }\t\n}\n\n\nFUNCTION display( h )\n    \n    // Complete the code\n\nENDFUN</code></pre>\n\n<p><strong>Note : </strong>In the above pseudocode the <strong>class Node</strong> represents the structure of each <strong>node</strong> in the single linked list.</p>\n\n<p> </p>\n\n<p>But the pseudocode was incomplete. If you are asked to complete the pseudocode using the below code snippets, then which one will you choose such that the function <strong>display </strong>prints the <strong>data </strong>of each node of the single linked list?</p>\n\n<p> </p>\n\n<p><strong>Code snippets</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>PRINT h\n</code></pre>\n\n<p> </p>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>WHILE h!=NULL\n    PRINT h\nEND WHILE</code></pre>\n\n<p> </p>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>WHILE h!=NULL\n    PRINT h.data\n    h.next\nEND WHILE</code></pre>\n\n<p> </p>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>WHILE h!=NULL\n    PRINT h.data\n    h=h.next\nEND WHILE</code></pre>\n\n<p> </p>","a":[{"id":1541221,"option":"1","correct":false},{"id":1541222,"option":"2","correct":false},{"id":1541223,"option":"3","correct":false},{"id":1541224,"option":"4","correct":true}]},{"q":"<p>In Data Structures you are working on <strong>Single Linked List. </strong>The below pseudocode contains a function <strong>print_reverse </strong>that takes the <strong>head node(h)</strong> of a single linked list as <strong>input </strong>and prints the <strong>data </strong>of the <strong>nodes </strong>in the <strong>reverse order</strong>.<br>\nNote : The data <strong>print_rev </strong>function prints from the data of the<strong> last node</strong> to the data of the <strong>first(head) node</strong>.</p>\n\n<p><strong>Example</strong> <br>\nConsider a Singlr Linked List   <strong>1 -&gt; 2 -&gt; 3 -&gt; 4</strong><br>\nThe function <strong>print_reverse </strong>prints as<strong> 4, 3, 2, 1</strong></p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>class Node {\n\n    // constructor...\n    Node(value) {\n        data = value\n        next = NULL\n    }\t\n}\n\nFUNCTION print_rev( h )\n    IF h==NULL\n        RETURN\n    ENDIF\n      // Line 12\n     //  Line 13\nENDFUN</code></pre>\n\n<p><strong>Note : </strong>In the above pseudocode the <strong>class Node</strong> represents the structure of each <strong>node</strong> in the single linked list.</p>\n\n<p> </p>\n\n<p>But the pseudocode was incomplete. If you are asked to complete the pseudocode then which one of the following code snippets will best fit in <strong>Line 12</strong> and <strong>Line 13</strong> such that the function <strong>print_rev </strong>prints the <strong>data </strong>of the <strong>nodes </strong>in the <strong>reverse order?</strong></p>\n\n<p> </p>\n\n<p><strong>Code snippets</strong></p>\n\n<p><strong>1. </strong></p>\n\n<pre class=\"prettyprint\"><code>print_rev( h.next )\nPRINT h.data</code></pre>\n\n<p> </p>\n\n<p><strong>2. </strong></p>\n\n<pre class=\"prettyprint\"><code>PRINT h.data\nprint_rev( h.next )</code></pre>\n\n<p> </p>\n\n<p><strong>3. </strong></p>\n\n<pre class=\"prettyprint\"><code>print_rev( h)\nPRINT h.data</code></pre>\n\n<p> </p>\n\n<p><strong>4. </strong></p>\n\n<pre class=\"prettyprint\"><code>PRINT h.data\nprint_rev( h)</code></pre>\n\n<p> </p>","a":[{"id":1541282,"option":"1","correct":true},{"id":1541283,"option":"2","correct":false},{"id":1541284,"option":"3","correct":false},{"id":1541285,"option":"4","correct":false}]},{"q":"<p>In Data Structures you are working on <strong>Single Linked List</strong>. The below pseudocode contains a function <strong>size_of </strong>that takes the <strong>head node(h)</strong> of a single linked list as <strong>input </strong>and returns the size of the single linked list as <strong>output</strong>.</p>\n\n<p> </p>\n\n<p><strong>Pseducode</strong></p>\n\n<pre class=\"prettyprint\"><code>class Node {\n\n    // constructor...\n    Node(value) {\n        data = value\n        next = NULL\n    }\t\n}\n\nFUNCTION size_of( h )\n    IF h==NULL\n        RETURN 0\n    ENDIF\n    // Line 11\nENDFUN</code></pre>\n\n<p><strong>Note : </strong>In the above pseudocode the <strong>class Node</strong> represents the structure of each <strong>node</strong> in the single linked list.</p>\n\n<p> </p>\n\n<p>Now, which of the following code snippets best fit in the above pseudocode in <strong>Line 11</strong> such that the function <strong>size_of </strong>returns the correct size of the single linked list as output?</p>\n\n<p> </p>\n\n<p><strong>Code snippets</strong></p>\n\n<p><strong>1. </strong></p>\n\n<pre class=\"prettyprint\"><code>RETURN size_of( h.next )</code></pre>\n\n<p> </p>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>RETURN 1+size_of( h )</code></pre>\n\n<p> </p>\n\n<p><strong>3. </strong></p>\n\n<pre class=\"prettyprint\"><code>RETURN 1+size_of( h.next )</code></pre>\n\n<p> </p>\n\n<p><strong>4. </strong></p>\n\n<pre class=\"prettyprint\"><code>RETURN size_of( h )</code></pre>\n\n<p> </p>","a":[{"id":1541217,"option":"1","correct":false},{"id":1541218,"option":"2","correct":false},{"id":1541219,"option":"3","correct":true},{"id":1541220,"option":"4","correct":false}]},{"q":"<p>In Data Structures, you are working on Arrays. You are given a Pseudocode that implements various operations on the given array. If you are required to execute the following pseudocode in a programming language then what will be the output?</p>\n\n<pre class=\"prettyprint\"><code>DECLARE arr : ARRAY[0,7] of { 56, 34, 27, 75, 49, 53, 16, 65 }\n\nFOR i -&gt; 0 to 7 :\n\tPRINT arr[7-i]\nENDFOR</code></pre>\n\n<p> </p>","a":[{"id":1537148,"option":"56, 34, 27, 75, 49, 53, 16, 65","correct":false},{"id":1537149,"option":"65, 16, 53, 49, 75, 27, 34, 56","correct":true},{"id":1537150,"option":"65, 16, 53, 75, 49, 27, 34, 56","correct":false},{"id":1537151,"option":"Error","correct":false}]},{"q":"<p>In Data Structures, you are working on arrays. You are given the following Pseudocode that represents rearranging of the elements in the array such that every element of the array is equal to its corresponding index value <strong>(array[x]=x)</strong>.</p>\n\n<pre class=\"prettyprint\"><code>DECLARE arr : ARRAY[0,9] of {8, 2, 5, 1, 6, 3, 7, 0, 9, 4}\nn = 10\ni = 0\nWHILE i&lt;n\n\tIF arr[i]&gt;=0 and arr[i]!=i\n\t\t  //  Line 6\n\tELSE\n\t\ti=i+1\nENDWHILE</code></pre>\n\n<p>Now, which of the following logic is used to replace the comment <strong>Line 6 </strong>such that the code executes the operation successfully?<br>\nNote : The function <strong>SWAP(x,y)</strong> swaps the values of <strong>x </strong>and <strong>y.</strong></p>","a":[{"id":1535108,"option":"arr[arr[i]] = arr[i]","correct":false},{"id":1535109,"option":"SWAP( arr[arr[i]], arr[i] )","correct":true},{"id":1535110,"option":"arr[i] = arr[arr[i]]","correct":false},{"id":1535111,"option":"SWAP( arr[arr[i]], i)","correct":false}]},{"q":"<p>In Data Structures and Algorithms, which of the following statements about the <strong>Trie</strong> data structure are correct:</p>\n\n<ol>\n\t<li>A key can be searched with O(M+N) time complexity by using this data structure where ‘M’ is the maximum string length and ‘N’ is the number of keys in the tree.</li>\n\t<li>A Trie node field isEndOfWord is used to distinguish the node as the end of the word node.</li>\n\t<li>Every character of the input key is inserted as an individual Trie node when a node is being inserted into the Trie.</li>\n\t<li>If the isEndofWord field of the last node is true while searching for a key, then the key exists in the trie.</li>\n</ol>","a":[{"id":1347146,"option":"1, 2, and 3","correct":false},{"id":1347147,"option":"2, 3, and 4","correct":true},{"id":1347148,"option":"1, 2, and 4","correct":false},{"id":1347149,"option":"1, 3, and 4","correct":false}]},{"q":"<p>In Data Structures, if you are required to delete a node of a <strong>Red-Black Tree</strong> of <span class=\"mathjax-latex\">\\(n\\)</span> nodes, then determine its worst-case time complexity</p>","a":[{"id":1347194,"option":"O(n^n)","correct":false},{"id":1347195,"option":"O(n^2)","correct":false},{"id":1347196,"option":"O(log(n))","correct":true},{"id":1347197,"option":"O(n*log(n))","correct":false}]},{"q":"<p>In Data Structures, which of the following statements about the worst-case time complexity in performing various operations on the queue data structure are correct:</p>\n\n<ol>\n\t<li>If you are required to access an element in the queue of <span class=\"mathjax-latex\">\\(n\\)</span> elements, then the worst-case time complexity is <span class=\"mathjax-latex\">\\(O(1)\\)</span>.</li>\n\t<li>If you are required to search an element in the queue of <span class=\"mathjax-latex\">\\(n\\)</span> elements, then the worst-case time complexity is <span class=\"mathjax-latex\">\\(O(n)\\)</span>.</li>\n\t<li>If you are required to insert an element in the queue of <span class=\"mathjax-latex\">\\(n\\)</span> elements, then the worst-case time complexity is <span class=\"mathjax-latex\">\\(O(1)\\)</span>.</li>\n\t<li>If you are required to delete an element in the queue of <span class=\"mathjax-latex\">\\(n\\)</span> elements, then the worst-case time complexity is <span class=\"mathjax-latex\">\\(O(1)\\)</span>.</li>\n</ol>","a":[{"id":1347190,"option":"1, 2, and 3","correct":false},{"id":1347191,"option":"2, 3, and 4","correct":true},{"id":1347192,"option":"1, 2, and 4","correct":false},{"id":1347193,"option":"1, 3, and 4","correct":false}]},{"q":"<p>In Data Structures, determine x in the following pseudocode with respect to the provided input:</p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>input array arr[] = {1,1, 2, 3, 3, 4, 6} \noutput x\nn = length of arr\ndefine number i\ndefine number j = 0\ndefine array Temp[]\nfor i from 0 to n-1 do\n    if (arr[i] != arr[i+1])\n       temp[j++] = arr[i]\n       temp[j++] = arr[n-1]\n    endif\nend-for\nfor i from 0 to j do\n   arr[i] = temp[i]\nend-for\n</code></pre>\n\n<p>Assume that you are required to get the output where each element of the array data-structure temp[] is space-separated.</p>\n\n<p>Assume that the included data-structure is a zero-based indexed array.</p>","a":[{"id":1347174,"option":"1 1 2 3 3 4 6","correct":false},{"id":1347175,"option":"6 4 3 3 2 1 1","correct":false},{"id":1347176,"option":"6 4 3 2 1","correct":false},{"id":1347177,"option":"1 2 3 4 6","correct":true}]},{"q":"<p>In Data Structures, if you are required to insert a node at the beginning of a Doubly-Linked List of <span class=\"mathjax-latex\">\\(n\\)</span> nodes, then determine its worst-case time complexity.</p>","a":[{"id":1347162,"option":"O(n^n-1)","correct":false},{"id":1347163,"option":"O(log(n))","correct":false},{"id":1347164,"option":"O(n)","correct":false},{"id":1347165,"option":"O(1)","correct":true}]},{"q":"<p>In Data Structures and Algorithms, you are given an undirected graph and an integer <span class=\"mathjax-latex\">\\(m\\)</span>. Now, you are required to determine if the graph can be colored with at most m colors such that no two adjacent vertices of the graph are colored with the same color. If you are implementing <strong>Breadth-First Search (BFS)</strong> traversing technique to perform this action, then which of the following sequences of steps in this scenario are correct:</p>\n\n<ol>\n\t<li>For each vertex connected to our node via an edge, check if the color of the nodes is the same. If they are the same, then increase the color of the other node (not the current) by one.</li>\n\t<li>For each vertex connected to our node via an edge, check if the node is visited or unvisited. If not visited, mark it as visited and push it in a queue. </li>\n\t<li>Check all edges of the given node.</li>\n\t<li>Check condition for maxColors. If it exceeds <span class=\"mathjax-latex\">\\(m\\)</span>, then return false. </li>\n\t<li>After visiting all nodes, return true.</li>\n</ol>","a":[{"id":1347154,"option":"1 -> 2 -> 3 -> 4 -> 5","correct":false},{"id":1347155,"option":" 2 -> 3 -> 1 -> 4 -> 5","correct":false},{"id":1347156,"option":"3 - > 1 -> 2 -> 4 -> 5","correct":true},{"id":1347157,"option":"3 -> 2 -> 1 -> 4 -> 5","correct":false}]},{"q":"<p>In Compiler Design, which of the following is the command to disable interrupts locally in <em>SDCC</em>?</p>","a":[{"id":840421,"option":"__critical{ i++; }","correct":true},{"id":840422,"option":"__critical{ i--; }","correct":false},{"id":840423,"option":"__critical{ i; }","correct":false},{"id":840424,"option":"None of these","correct":false}]},{"q":"<p> In Data Structures, you have executed the following pseudocode to perform an operation with the following input values. Determine <strong>x</strong> with the respect to the following input values:</p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>input A,B n*n matrix\noutput C n*n matrix\ndefine i, j, k\nfor i from 0 to n\n   for j from 0 to n\n      C[i,j] = 0\n   end for\nend for\nfor i from 0 to n\n   for j from 0 to n\n      for k from 0 to n\n          C[i, j] = C[i, j] + A[i, k] * B[k, j]\n      end for\n   end for\nend for\n</code></pre>\n\n<p><strong>Input values:</strong></p>\n\n<pre class=\"prettyprint\"><code>N = 2\nA[N][N] = { {1, 2},\n            {3, 4}\n          }\nB[N][N] = { {5, 4},\n            {1, 2}\n          }\n</code></pre>\n\n<p><strong>Output</strong></p>\n\n<pre class=\"prettyprint\"><code>C[N][N] = x</code></pre>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>7 19\n8 20</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>8 20\n7 19</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>7 8\n19 20\n</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>19 20\n7 8</code></pre>\n\n<p> </p>","a":[{"id":1347186,"option":"1","correct":false},{"id":1347187,"option":"2","correct":false},{"id":1347188,"option":"3","correct":true},{"id":1347189,"option":"4","correct":false}]},{"q":"<p>A queen in a chessboard can be moved to any number of unoccupied squares in a straight line vertically, horizontally, or diagonally. The queen captures by occupying the square on which the opponent’s piece is located. You are given a chessboard of size <span class=\"mathjax-latex\">\\(N \\times N\\)</span> with <span class=\"mathjax-latex\">\\(N\\)</span> queens. Now, you are required to arrange all these <span class=\"mathjax-latex\">\\(N\\)</span> queens in such a way that no queen occupies the other queen. If you are required to solve this problem by using the backtracking technique from the data structures and algorithms, then determine the worst-case time complexity to perform this action in this scenario?</p>","a":[{"id":1347150,"option":"O(N)","correct":false},{"id":1347151,"option":"O(1)","correct":false},{"id":1347152,"option":"O(log(N))","correct":false},{"id":1347153,"option":"O(N!)","correct":true}]},{"q":"<p>In Data Structures, Determine the <strong>x</strong> in the following pseudo-code with the respect to the given input.</p>\n\n<pre class=\"prettyprint\"><code>input: array HackArr[] = {1,1,5,5,2,2,7}   \noutput: x\nN = length of HackArr\nfor i from 1 to N-1 do\n  j = i\n  while (j&gt;0) and (hackArr[j] &lt; HackArr[j-1]) do\n     k = HackArr(j)\n     HackArr(j) = HackArr(j-1)\n     HackArr(j-1) = k\n     j = j-1\n  end-do\nend-for\n</code></pre>\n\n<p>Assume that you are required to get the output where each element of this data-structure is space-separated.</p>\n\n<p>Assume that the included data-structure is a zero-based indexed array.</p>","a":[{"id":1346974,"option":"7 5 5 2 2 1 1","correct":false},{"id":1346975,"option":"1 2 5 7 1 2 5","correct":false},{"id":1346976,"option":"1 1 2 2 5 5 7","correct":true},{"id":1346977,"option":"None of these","correct":false}]},{"q":"<p>In data structures, what is the worst-case complexity of the following algorithm:</p>\n\n<pre class=\"prettyprint\"><code>SORT (A)\n{\n n ← length [A]\n  For i = 1 to n do\n Insert A[i] into list B[A[i]/b] ..(b&lt;- constant)\n  For i = 0 to n-1 do\n  Sort list B with Insertion sort\n \n Concatenate the lists B[0], B[1], . . B[n-1]..\n}</code></pre>\n\n<p> </p>","a":[{"id":708038,"option":"O(n+k)","correct":false},{"id":708039,"option":"O(nlogn)","correct":false},{"id":708040,"option":"O(n^2)","correct":true},{"id":708041,"option":"O(n^2logn)","correct":false}]},{"q":"<p>Which problem is realized  from the following Algorithm:</p>\n\n<p>'''</p>\n\n<p> </p>\n\n<pre class=\"prettyprint\"><code>.....SOURCE(G, s)\nfor i ← 1 to |V[G]| - 1\n do for each edge (u, v) -&gt; E[G]\n do RELAX(u, v, w)\n for each edge (u, v) -&gt; E[G]\n do if d[v] &gt; d[u] + w(u, v)\n then return FALSE\n\n return TRUE</code></pre>\n\n<p> </p>\n\n<p>'''</p>","a":[{"id":689293,"option":"Dijkstra's  Problem","correct":false},{"id":689294,"option":"LCS","correct":false},{"id":689295,"option":"Bellman Ford  Problem","correct":true},{"id":689296,"option":"None of these","correct":false}]},{"q":"<p>In Data Structures, if you are working on a Binary Search Tree, then which of the following properties of this data structure are correct:</p>\n\n<ol>\n\t<li>The left subtree of a node contains only nodes with keys lesser than the node’s key.</li>\n\t<li>The right subtree of a node contains only nodes with keys lesser than the node’s key.</li>\n\t<li>The left and right subtree each must also be a binary search tree.</li>\n</ol>","a":[{"id":1347182,"option":"1 and 2","correct":false},{"id":1347183,"option":"2 and 3","correct":false},{"id":1347184,"option":"1 and 3","correct":true},{"id":1347185,"option":"All of these","correct":false}]},{"q":"<p>In Data Structures, you are working on the various sorting algorithms on Array data structure on <span class=\"mathjax-latex\">\\(n\\)</span> elements. Which of the following sorting algorithms have <span class=\"mathjax-latex\">\\(O\\bigl(n\\,\\times\\,log(n)\\bigr)\\)</span> as their worst-case time complexity:</p>\n\n<ol>\n\t<li>Quicksort</li>\n\t<li>Mergesort</li>\n\t<li>Timsort</li>\n\t<li>Cubesort</li>\n</ol>","a":[{"id":1347170,"option":"1, 2, and 3","correct":false},{"id":1347171,"option":"2, 3, and 4","correct":true},{"id":1347172,"option":"1, 2, and  4","correct":false},{"id":1347173,"option":"1, 3, and 4","correct":false}]},{"q":"<p>In Data Structures and Algorithms, which of the following statements represent the advantages of using the <strong>Unrolled Linked List</strong> are correct:</p>\n\n<ol>\n\t<li>Linear search is much faster in unrolled linked lists because of the Cache behavior.</li>\n\t<li>The overhead per node is comparatively higher than singly-linked lists.</li>\n\t<li>This data structure requires lesser storage space than that of the regular linked list for storing pointers or references.</li>\n\t<li>This data structure performs operations such as insertion, deletion, and traversal more quickly than the regular ordinary linked lists.</li>\n</ol>","a":[{"id":1347158,"option":"1, 2, and 3","correct":false},{"id":1347159,"option":"2, 3, and 4","correct":false},{"id":1347160,"option":"1, 2, and 4","correct":false},{"id":1347161,"option":"1, 3, and 4","correct":true}]},{"q":"<p>There is a goldfield of <span class=\"mathjax-latex\">\\((a \\times b)\\)</span> dimensions and <span class=\"mathjax-latex\">\\(n\\)</span> points. Each point has a positive number that denotes the amount of gold available. Bob is assigned to collect gold from this field. He is in the first column of the goldfield. He can be at any row. He can follow these directions to collect the gold from the field:</p>\n\n<ol>\n\t<li>He can move only to his right or to his right up or to his right down direction from his current cell.</li>\n\t<li>He can move diagonally up towards his right or diagonally down towards his right.</li>\n</ol>\n\n<p>If he is required to collect the maximum amount of gold in his path, then determine the best time complexity to perform this action in this scenario.</p>","a":[{"id":1347142,"option":"O(a+b)","correct":false},{"id":1347143,"option":"O(n)","correct":false},{"id":1347144,"option":"O(a*b^n)","correct":false},{"id":1347145,"option":"O(a*b)","correct":true}]},{"q":"<p>In Data Structures, Which of the following statements about the <strong>Binomial Heap</strong> are correct:</p>\n\n<ol>\n\t<li>A Binomial Heap is a set of Binomial Trees.</li>\n\t<li>Binary trees in this heap are represented as the rightmost child and left-sibling representation.</li>\n\t<li>A Binomial Tree must be represented in a way that allows sequential access to all siblings, starting from the leftmost sibling.</li>\n</ol>","a":[{"id":1346978,"option":"1 and 2","correct":false},{"id":1346979,"option":"2 and 3","correct":false},{"id":1346980,"option":"1 and 3","correct":true},{"id":1346981,"option":"All of these","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>a = ('Joe', 'Alice', 'Bob', 1978, 2, 'R', 2019)\nprint(a)\ndel a\nprint(a)</code></pre>\n\n<p> </p>","a":[{"id":1121721,"option":"TypeError: type ‘a’ not defined\r\n('Joe', 'Alice', 'Bob', 1978, 2, 'R', 2019)","correct":false},{"id":1121722,"option":"('Joe', 'Alice', 'Bob', 1978, 2, 'R', 2019)\r\nNameError: name ‘a’ not defined","correct":true},{"id":1121723,"option":"NameError: name ‘a’ not defined\r\n('Joe', 'Alice', 'Bob', 1978, 2, 'R', 2019)","correct":false},{"id":1121724,"option":"('Joe', 'Alice', 'Bob', 1978, 2, 'R', 2019)\r\nTypeError: type ‘a’ not defined","correct":false}]},{"q":"<p>In data structures, which of the following statements about the <strong>doubly-linked list </strong>are correct:</p>\n\n<ol>\n\t<li>It is a way to represent a deck of cards in a game.</li>\n\t<li>A stack, hash table, and binary tree can be implemented using a doubly-linked list.</li>\n\t<li>The browser cache that allows you to use the back button utilizes the doubly-linked list concept.</li>\n</ol>\n\n<p> </p>","a":[{"id":686075,"option":"1 and 3","correct":false},{"id":686076,"option":"1 and 2","correct":false},{"id":686077,"option":"2 and 3","correct":false},{"id":686078,"option":"All of these","correct":true}]},{"q":"<p>In data structures, which of the following statements about a binary search tree is correct:</p>\n\n<ol>\n\t<li>They always have multiple links per node. </li>\n\t<li>They can be sorted efficiently.</li>\n\t<li>They always have multiple links per node and they can be sorted efficiently.</li>\n\t<li>They always have one link per node.</li>\n</ol>","a":[{"id":171009,"option":"1","correct":false},{"id":171010,"option":"2","correct":false},{"id":171011,"option":"3","correct":true},{"id":171012,"option":"4","correct":false}]},{"q":"<p>Which of these algorithms is inferred from the following code using greedy analysis:</p>\n\n<pre class=\"prettyprint\"><code>Greedy...(P, k) \n{\nG = empty\nfor each u in P do \nd[u] = INFINITY\nfor (i = 1 to k) \n{\nLet u be the point of P such that d[u] is maximum\nAdd u to G \nfor (each v in P)\n { \nd[v] = min(d[v], distance(v,u))\n}\nD = max_{v in P} d[v] \n}\nreturn (G, D) \n}</code></pre>\n\n<p> </p>","a":[{"id":684354,"option":"Prim's algorithm","correct":false},{"id":684355,"option":"Huffman analysis","correct":false},{"id":684356,"option":"k-center problem","correct":true},{"id":684357,"option":"Interval scheduling","correct":false}]},{"q":"<p>In data structures, what is the output of the following code assuming the input as {1,2,3,4,5}:</p>\n\n<pre class=\"prettyprint\"><code>public class CLinkedlist {\n\t  int n;\n\t  CLinkedlist next;\n\t  public CLinkedlist()\n\t  {\t  n=0;\n\t\t  next=null;\n\t   }\n\t  public void add(int n){}\n\t public void print()\n\t  {  System.out.print(n+\" \");}\n\t  \n\t public static void main(String []aa)\n\t  {  .......\n\t\t   CLinkedlist first=null,temp=null;\n\t\t   \n\t\t\t  CLinkedlist li=new CLinkedlist();\n\t\t\t  int n=....\n\t\t\t  if(first==null)\n\t\t\t  {\n\t\t\t\t  li.add(n);\n\t\t\t\t  temp=li;\n\t\t\t\t  first=temp;\n\t\t\t  }\t\t\t  \n\t\t\t  else\n\t\t\t  {\n\t\t\t\t  li.add(n);\n\t\t\t\t  temp.next=li;\n\t\t\t\t  temp=li;\n\t\t\t }\n\t\t  .......\n\t\t  temp.next=first;\n\t\t  while(first!=temp.next)\n\t  {\n\t\t first.print();\n\t\t first=first.next;\n\t  }\n\t  </code></pre>\n\n<p> </p>","a":[{"id":686209,"option":"1 2 3 4 5","correct":false},{"id":686210,"option":"1 2 3 4","correct":false},{"id":686211,"option":"No output","correct":true},{"id":686212,"option":"Compilation error","correct":false}]},{"q":"<p>In data structures, if three numbers (2, 3, 5) of an algebraic series are processed inside a queue val1 and a stack val2 which are initially empty, then what is the output of the following code:</p>\n\n<pre class=\"prettyprint\"><code>val1.enqueue(3);\nval1.enqueue(5);\nval1.enqueue(2);\nval2.push(val1.dequeue());\nval2.push(val1.dequeue());\nval2.pop();\n\n</code></pre>\n\n<p> </p>","a":[{"id":721290,"option":"q.front() returns 3 and the stack is empty","correct":false},{"id":721291,"option":"q.front() returns 2 and the stack is empty","correct":false},{"id":721292,"option":"q.front() returns 3 and s.top() returns 5","correct":false},{"id":721293,"option":"q.front() returns 2 and s.top() returns 3","correct":true}]},{"q":"<p>In data structures, if val1 = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 } is passed to the function TestHack, then which of these elements will be present at index 5 in the queue returned by the function in the following code:</p>\n\n<pre class=\"prettyprint\"><code>queue&lt;int&gt; TestHack(queue&lt;int&gt; val1){\n    stack&lt;int&gt; val2;\n    queue&lt;int&gt; val3;\n\n    while(!val1.empty()){\n        val2.push(val1.front());\n        val1.pop();\n    }\n\n    while(!val2.empty()){\n        val3.push(val2.top());\n        val2.pop();\n    }\n\n    return val3;\n}</code></pre>\n\n<p> </p>","a":[{"id":721261,"option":"8","correct":false},{"id":721262,"option":"7","correct":true},{"id":721263,"option":"6","correct":false},{"id":721264,"option":"5","correct":false}]},{"q":"<p>In data structures, consider an unbalanced tree (not necessarily a Binary Tree) of n nodes.<br>\nYou create a tree using an adjacency matrix that has the representation of the tree (tree[][]) to update the weight of the n1<sup>th</sup> edge to n2 and print the maximum edge weight on the path from node n1 to node n2. <br>\nWhich of the following algorithms to set up the subtree size, depth, and parent for each node is most appropriate?</p>","a":[{"id":721322,"option":"Breadth First Search","correct":false},{"id":721323,"option":"Depth First Search","correct":true},{"id":721324,"option":"Maximum Flow","correct":false},{"id":721325,"option":"Minimum Spanning Tree","correct":false}]},{"q":"<p>What is the postfix notation obtained from the following tree:</p>\n\n<p>                             <img alt=\"\" height=\"253\" src=\"https://he-s3.s3.ap-southeast-1.amazonaws.com/media/uploads/2d55cb5d-9d47-44fa-9f7c-3527076e2dbc.png\" width=\"348\"> </p>","a":[{"id":688301,"option":"8, 5, 9, 7, 1, 12, 2, 4, 11, 3 ","correct":false},{"id":688302,"option":"8, 5, 4, 9, 7, 11, 1, 12, 3, 2","correct":false},{"id":688303,"option":"9, 1, 2, 12, 7, 5, 3, 11, 4, 8 ","correct":true},{"id":688304,"option":"None of these","correct":false}]},{"q":"<p>Which of the following statements about the <strong>minimum spanning tree</strong> algorithm is correct:</p>\n\n<ol>\n\t<li>\n\t<p style=\"margin-left: 0in; margin-right: 0in;\">Kruskal's algorithm will grow a solution from the cheapest edge by adding the next cheapest edge provided that it does not create a cycle.</p>\n\n\t<p style=\"margin-left: 0in; margin-right: 0in;\">Prim's algorithm will grow a solution from a random vertex by adding the next cheapest vertex i.e. the vertex that is not currently in the solution but connected to it by the cheapest edge.</p>\n\t</li>\n\t<li>\n\t<p style=\"margin-left: 0in; margin-right: 0in;\">When the algorithm is stopped in the middle, Prim's algorithm always generates a connected tree, but Kruskal, on the other hand, can give a disconnected tree or forest.</p>\n\t</li>\n\t<li>\n\t<p style=\"margin-left: 0in; margin-right: 0in;\">Prim's algorithm is better for dense graphs because we are primarily dealing with nodes rather than adding cycles and edges. Prim's is faster than Kruskal's in case of complex graphs.</p>\n\t</li>\n</ol>","a":[{"id":684006,"option":"2 and 3 ","correct":false},{"id":684007,"option":"Only 1","correct":false},{"id":684008,"option":"All of these","correct":true},{"id":684009,"option":"None of these","correct":false}]},{"q":"<p>Which of the following algorithms does not follow the divide and conquer strategy?</p>","a":[{"id":687093,"option":"Binary search","correct":false},{"id":687094,"option":"Quick sort","correct":false},{"id":687095,"option":"Insertion sort","correct":true},{"id":687096,"option":"Strassen’s algorithm","correct":false}]},{"q":"<p>In Data Structures, you are given the following two arrays <strong>arr1[]</strong> and <strong>arr2[]</strong>. If you are required to check both of the arrays are permutations to each other then which of the following techniques can be implemented in this scenario:</p>\n\n<p><strong>Arrays</strong></p>\n\n<pre class=\"prettyprint\"><code>arr1[] = {1, 3, 5, 2, 2, 5, 6, 4}\narr2[] = {4, 1, 2, 3, 5, 2, 6, 5}</code></pre>\n\n<p><strong>Techniques</strong></p>\n\n<ol>\n\t<li>Sort both the arrays and compare both the arrays. If both the arrays are identical, then return true. Otherwise return false</li>\n\t<li>Create a Hash Map for all the elements of <strong>arr1[]</strong> such that all the elements from the array are keys and their corresponding frequencies in the array are values. Now, traverse <strong>arr2[]</strong> and search for each element of <strong>arr2[]</strong> in the hash map. If an element is found then decrement its count in the hash map. Otherwise, return false. If all elements are found and the value of every key in the hash map is equal to zero, then return true. Otherwise, return false.</li>\n\t<li>Create a circular linked list such that all the elements from both <strong>arr1[]</strong> and <strong>arr2[]</strong> are inserted into this linked list. Now, apply DFS technique on <strong>arr2[]</strong>. If elements found, then return true. Otherwise, return false.</li>\n</ol>","a":[{"id":1347178,"option":"1 and 2","correct":true},{"id":1347179,"option":"2 and 3","correct":false},{"id":1347180,"option":"1 and 3","correct":false},{"id":1347181,"option":"All of these","correct":false}]},{"q":"<p>In data structures, which of the following are applications of a queue:</p>\n\n<ol>\n\t<li>Recognizing a palindrome</li>\n\t<li>Shared resources management.</li>\n\t<li>Keyboard buffer</li>\n\t<li>Job scheduling</li>\n\t<li>Simulation</li>\n</ol>","a":[{"id":694489,"option":"1, 2, and 3","correct":false},{"id":694490,"option":"1, 3, and 5","correct":false},{"id":694491,"option":"All of these","correct":true},{"id":694492,"option":"None of these","correct":false}]},{"q":"<p>In Data structures, which of these solutions is represented by the following algorithm:</p>\n\n<pre class=\"prettyprint\"><code> Algorithm.... (v, w, n, W)  \n\nfor w = 0 to W do \n   c[0, w] = 0 \nfor i = 1 to n do \n   c[i, 0] = 0 \n   for w = 1 to W do \n      if wi ≤ w then \n         if vi + c[i-1, w-wi] then \n            c[i, w] = vi + c[i-1, w-wi] \n         else c[i, w] = c[i-1, w] \n      else \n         c[i, w] = c[i-1, w] </code></pre>\n\n<p> </p>\n\n<p>'''</p>","a":[{"id":689301,"option":"Palindrome partitioning","correct":false},{"id":689302,"option":"Matrix chain multiplication","correct":false},{"id":689303,"option":"Knapsack problem","correct":true},{"id":689304,"option":"None of these","correct":false}]},{"q":"<p>Which of the following scheduling algorithms uses<strong> Circular LinkedList </strong>as a data structure for the implementation?</p>","a":[{"id":686201,"option":"First Come First Serve","correct":false},{"id":686202,"option":"Shortest-Job-First Scheduling","correct":false},{"id":686203,"option":"Round Robin Scheduling","correct":true},{"id":686204,"option":"Priority Scheduling","correct":false}]},{"q":"<p>In Data structures, what is the best case and worst case complexity analysis for the following pseudocode in the insertion sort algorithm:</p>\n\n<pre class=\"prettyprint\"><code>final Node&lt;E&gt; sorted = null;\n    ........\n    Node&lt;E&gt; current = first;\n    while (current != NULL)\n    {\n        \n        Node&lt;E&gt; next = current.next;\n         Unlink(current); \n        sortedInsert(current.data); \n        current = next;\n      .......\n     .........\n    }</code></pre>\n\n<p> </p>","a":[{"id":685213,"option":"O(log n), O(n)","correct":false},{"id":685214,"option":"O(n^2), O(n^2)","correct":false},{"id":685215,"option":"O(n), O(n^2)","correct":true},{"id":685216,"option":"None of these","correct":false}]},{"q":"<p>In Data structures, what is the average case complexity analysis for the following code:</p>\n\n<pre class=\"prettyprint\"><code>public void sort(int[] arr) {\n\n      boolean swapped = true;\n\n      int j = 0;\n\n      int tmp;\n\n      while (swapped) {\n\n            swapped = false;\n\n            j++;\n\n            for (int i = 0; i &lt; arr.length - j; i++) {                                       \n\n                  if (arr[i] &gt; arr[i + 1]) {                          \n\n                        tmp = arr[i];\n\n                        arr[i] = arr[i + 1];\n\n                        arr[i + 1] = tmp;\n\n                        swapped = true;\n\n                  .........\n.....</code></pre>\n\n<p> </p>","a":[{"id":685516,"option":"O(N^2)","correct":true},{"id":685517,"option":"O(N)","correct":false},{"id":685518,"option":"O(NlogN)","correct":false},{"id":685519,"option":"O(logN)","correct":false}]}]
[{"q":"<p>Mike is working on Template engines in Express.js. He is using app.engine() method to create his own template engine. Then which of the following codes should be replaced with <em>OPTION</em><strong> </strong>on line 5<strong>.</strong></p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>var express = require('express')\nvar app = express()\nvar port = 3000\n\n// Line 5\n\napp.get('/', function(req,res) {\n    res.render(\"hacker.html\");\n})\n\napp.listen(Port){\n   console.log(\"Listening on Port !\",Port);\n}</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>app.engine('html', require('ejs').renderFile);</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>app.set('html', require('ejs').renderFile);</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>app.engine('html', require('hbs').renderFile);</code></pre>","a":[{"id":1651409,"option":"1 and 3","correct":false},{"id":1651410,"option":"1 and 2","correct":false},{"id":1651411,"option":"1, 2 and 3","correct":true},{"id":1651412,"option":"None of these","correct":false}]},{"q":"<p>Alice is working on Error Code in Express.js. If she has implemented the following functionality to redirect 404 errors to a page, then which of the following statements about this functionality in this scenario are correct:</p>\n\n<p><strong>Functionality</strong></p>\n\n<pre class=\"prettyprint\"><code>var express = require('express')\nvar app = express()\n\napp.use(function(req, res, next){\n   res.status(404).json({\n        Code: 404,\n        Msg: \"Not Found!\"\n   })\n})</code></pre>\n\n<p><strong>Statements</strong></p>\n\n<p>1. It will redirect 404 errors to a page.</p>\n\n<p>2. res.status() function set the HTTP status for the response.</p>\n\n<p>3. No response.</p>","a":[{"id":1649694,"option":"1 and 2","correct":true},{"id":1649695,"option":"2 and 3","correct":false},{"id":1649696,"option":"1 and 3","correct":false},{"id":1649697,"option":"None of these","correct":false}]},{"q":"<p>Mike is working on Routing in Express.js. He is required to implement a route that responds \"Server Ok\" when a POST request is made to the homepage, then which of the following functionality can he perform in this scenario:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>var express = require('express')\nvar app = express()</code></pre>\n\n<p><strong>Functionality</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>app.post('/', function(req, res) {\n   send(\"Server Ok\");\n})</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>app.post('/', function(req, res) {\n   res.send(\"Server Ok\");\n})</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>app.post('/', function(req, res) {\n   res(\"Server Ok\");\n})</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>app.post('/', function(req, res) {\n   req(\"Hello\");\n})\n</code></pre>","a":[{"id":1649686,"option":"1","correct":false},{"id":1649687,"option":"2","correct":true},{"id":1649688,"option":"3","correct":false},{"id":1649689,"option":"4","correct":false}]},{"q":"<p>John is working on Routing in Express.js. He is required to implement a route that responds \"Hello\" when a GET request is made to the homepage, then which of the following functionality can he perform in this scenario:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>var express = require('express')\nvar app = express()</code></pre>\n\n<p><strong>Functionality</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>app.get('/', function(req, res) {\n   send(\"Hello\");\n})</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>app.get('/', function(req) {\n   res.send(\"Hello\");\n})</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>app.get('/', function(req, res) {\n   res.send(\"Hello\");\n})</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>app.get('/', function(req, res) {\n   res(\"Hello\");\n})\n</code></pre>\n\n<p> </p>","a":[{"id":1649678,"option":"1","correct":false},{"id":1649679,"option":"2","correct":false},{"id":1649680,"option":"3","correct":true},{"id":1649681,"option":"4","correct":false}]},{"q":"<p>Mike is working on Error Handling in Express.js. He has implemented synchronous code by using the following code. If he is required to implement it for asynchronous functions, then which of the following functionality can he perform in this scenario:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>var express = require('express')\nvar app = express()\n\napp.get('/', function(req, res){\n    throw new Error('Error !!');\n})</code></pre>\n\n<p><strong>Functionality</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>var express = require('express')\nvar app = express()\n\napp.get('/', function(req, res){\n    fs.readFile('/file', function(err, data){\n      if(err) {\n         throw err\n      }\n    })\n})</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>var express = require('express')\nvar app = express()\n\napp.get('/', function(req, res, next){\n    fs.readFile('/file', function(err, data){\n      if(err) {\n         throw err\n      }\n    })\n})</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>var express = require('express')\nvar app = express()\n\napp.get('/', function(req, res, next){\n    fs.readFile('/file', function(err, data){\n      if(err) {\n         return next(err)\n      }\n    })\n})</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>var express = require('express')\nvar app = express()\n\napp.get('/', function(req, res, next){\n    fs.readFile('/file', function(err, data){\n      if(err) {\n         return next()\n      }\n    })\n})</code></pre>\n\n<p> </p>","a":[{"id":1649674,"option":"1","correct":false},{"id":1649675,"option":"2","correct":false},{"id":1649676,"option":"3","correct":true},{"id":1649677,"option":"4","correct":false}]},{"q":"<p>Bob is working on Middleware in Express.js. He has implemented the middleware by using the following JavaScript codes. Which of the following codes in this scenario are correct:</p>\n\n<p><strong>Options </strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>var express = require('express')\nvar app = express()\n\napp.use(function (req, res, next) {\n    console.log(\"Middleware\");\n    next();\n})</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>var express = require('express')\nvar app = express()\n\napp.use(function (req, res) {\n    console.log(\"Middleware\");\n})</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>var express = require('express')\nvar app = express()\nvar cors = require('cors')\n\napp.use(cors());\n</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>var express = require('express')\nvar app = express()\n\nconst isMiddleware = (req, res, next)=&gt;{\n     console.log(\"Middleware\");\n     next();\n};</code></pre>\n\n<p> </p>","a":[{"id":1648107,"option":"1 and 2","correct":false},{"id":1648108,"option":"1, 3 and 4","correct":true},{"id":1648109,"option":"1, 2 and 3","correct":false},{"id":1648110,"option":"None of these","correct":false}]},{"q":"<p>Alice is working on Config properties in Express.js. Which of the following statements in this scenario are correct:</p>\n\n<p><strong>Statement 1</strong></p>\n\n<p>1. A file with the name \".env\" is to be created within the project folder.</p>\n\n<p>2. All the properties are to be added in the \".env\" file.</p>\n\n<p>3. Any of the properties can be used in server.js.</p>\n\n<p><strong>Statement 2</strong></p>\n\n<p>1. A file with the name “config.json” is to be created within the config folder within the project folder.</p>\n\n<p>2. The config properties are to be added to the config.json file.</p>\n\n<p>3. Now, require should be used to access the config.json file.</p>","a":[{"id":1648045,"option":"1","correct":false},{"id":1648046,"option":"2","correct":false},{"id":1648047,"option":"All of the above","correct":true},{"id":1648048,"option":"None of these","correct":false}]},{"q":"<p>In Express.js, if you are using the <em>router.route()</em> method in the application, then which of these will be the basis of middleware ordering in that application?</p>","a":[{"id":724857,"option":"Middleware ordering will be based on when the route is created.","correct":true},{"id":724858,"option":"Middleware ordering will be based on when method handlers are added to the route.","correct":false},{"id":724859,"option":"Middleware ordering will be based on when method handlers for the route are initialized.","correct":false},{"id":724860,"option":"Middleware ordering will be based on when method handlers for the route are mounted to the path.","correct":false}]},{"q":"<p>In Express.js, assume that some exceptions are bubbling back to the event loop. Is it advisable to add an event listener for <em>uncaughtException</em> to handle this case?</p>","a":[{"id":724837,"option":"Yes, it is advisable and is a good way to handle this situation as it will prevent app crashes.","correct":false},{"id":724838,"option":"No, because doing so will result in app crash.","correct":false},{"id":724839,"option":"No, because the state of the process will become unreliable and unpredictable.","correct":true},{"id":724840,"option":"No, because it will require multiple supervisors to perform.","correct":false}]},{"q":"<p>In Express.js, how often the following middleware function will be executed:</p>\n\n<pre class=\"prettyprint\"><code>var app = express()\n\napp.use(function (req, res, next) {\n  console.log('something')\n  next()\n})\n</code></pre>\n\n<p> </p>","a":[{"id":724503,"option":"It is never executed.","correct":false},{"id":724504,"option":"It is executed whenever the app is started.","correct":false},{"id":724505,"option":"It is executed for the first request the app receives.","correct":false},{"id":724506,"option":"It is executed each time the app receives a request.","correct":true}]},{"q":"<p>Which of these functions needs to be used at <strong>(</strong><strong>X) </strong>and <strong>(Y)</strong><strong> </strong>to provide fine-grained support for serving files considering the following Express.js code:</p>\n\n<pre class=\"prettyprint\"><code>\"app.get('/user/:uid/photos/:file', function(req, res){\n  var uid = req.params.uid\n    , file = req.params.file;\n\n  req.user.mayViewFilesFrom(uid, function(yes){\n    if (yes) {\n      (X)('/uploads/' + uid + '/' + file);\n    } else {\n      (Y)(403).send(\"\"Sorry! You can't see that.\"\");\n    }\n  });\n});\"</code></pre>\n\n<p> </p>","a":[{"id":724853,"option":"X= res.sendFile, Y= res.status","correct":true},{"id":724854,"option":"X= res.status, Y= res.sendFile","correct":false},{"id":724855,"option":"X= res.sendFile, Y= res.sendFile","correct":false},{"id":724856,"option":"X= res.status, Y= res.status","correct":false}]},{"q":"<p>Which of these request-level pieces of information cannot be exposed using the property <em>res.locals </em>considering the following Express.js code:</p>\n\n<pre class=\"prettyprint\"><code>\"app.use(function(req, res, next){\n  res.locals.user = req.user;\n  res.locals.authenticated = ! req.user.anonymous;\n  next();\n});\"</code></pre>\n\n<p> </p>","a":[{"id":724798,"option":"request path name","correct":false},{"id":724799,"option":"authenticated user","correct":false},{"id":724800,"option":"user settings","correct":false},{"id":724801,"option":"download path name","correct":true}]},{"q":"<p>You pass an error to next() and though you do not handle it in a custom error handler, it is handled and written to the client with a stack trace. Which of the following will you use to ensure that the stack trace does not occur?</p>","a":[{"id":718735,"option":"Set  NODE_ENV to testing","correct":false},{"id":718736,"option":"Set  NODE_ENV to development","correct":false},{"id":718737,"option":"Set  NODE_ENV to staging","correct":false},{"id":718738,"option":"Set  NODE_ENV to production","correct":true}]},{"q":"<p>What happens if you pass something other than the string '<strong>route</strong>' to the <strong>next()</strong> function when the route handler has invoked an asynchronous function?</p>","a":[{"id":718611,"option":"It will consider the current request an error.","correct":true},{"id":718612,"option":"It will skip any remaining error-handling routing and middleware.","correct":false},{"id":718613,"option":"Both of these","correct":false},{"id":718614,"option":"None of these","correct":false}]},{"q":"<p>Which of these commands will you use to enable debug statements for an Express app that was generated using the following command:</p>\n\n<pre class=\"prettyprint\"><code>$ express my-app</code></pre>\n\n<p> </p>","a":[{"id":712760,"option":" DEBUG=my-app:* node ./bin/www","correct":true},{"id":712761,"option":" DEBUG=my-app:* node index","correct":false},{"id":712762,"option":"DEBUG=http,express:* node index.js","correct":false},{"id":712763,"option":"None of these","correct":false}]},{"q":"<p>You want to modify the behavior of the app.param (name, callback) method in an Express 3 application by passing a function to app.param(). What will this function return after it has been modified?</p>","a":[{"id":712752,"option":"Middleware","correct":true},{"id":712753,"option":"Promise object","correct":false},{"id":712754,"option":"HttpResponse object","correct":false},{"id":712755,"option":"Callback method","correct":false}]},{"q":"<p>Which of the following will you use to map the SVG template to the .css files in an Express application?</p>\n\n<p> </p>\n\n<p> </p>","a":[{"id":712150,"option":"app.engine('Css', require('SVG').renderFile);","correct":true},{"id":712151,"option":"app.engine('Css', require('SVG').mapFile);","correct":false},{"id":712152,"option":"app.engine('Css', force('SVG').mapFile);","correct":false},{"id":712153,"option":"app.engine('Css', ext('SVG').mapFile);","correct":false}]},{"q":"<p>You are using the express.urlencoded([options]) middleware in your Express application. Which of the following will you use to raise an error if the number of parameters that are allowed in the URL-encoded data exceeds 10 parameters?</p>","a":[{"id":712142,"option":"parameterLimit","correct":true},{"id":712143,"option":"limit","correct":false},{"id":712144,"option":"type","correct":false},{"id":712145,"option":"extended","correct":false}]},{"q":"<p>Which of the following code snippets will you use to serve static images in two different directories named <strong>thisd</strong><strong> </strong>and <strong>thatd</strong>?</p>","a":[{"id":712082,"option":"app.use(express.static('thisd'))\r\napp.use(express.static('thatd'))","correct":true},{"id":712083,"option":"app.use(express.static('thisd',\"thatd\"))","correct":false},{"id":712084,"option":"app.use('static', express.static('thisd'))\r\napp.use('static', express.static('thatd'))","correct":false},{"id":712085,"option":"app.use('static', express.static('thisd',\"thatd\"))","correct":false}]},{"q":"<p>Which of the following commands will you use to install the Express command line tool?</p>","a":[{"id":712078,"option":"npm install express-cli -g","correct":false},{"id":712079,"option":"npm install generator -g","correct":false},{"id":712080,"option":"npm install express -g","correct":false},{"id":712081,"option":"npm install express-generator -g","correct":true}]},{"q":"<p>Which path string will you set to send requests to /items/$stuff?</p>","a":[{"id":712094,"option":"/items/$stuff","correct":false},{"id":712095,"option":"\"/items/[$]stuff\"","correct":false},{"id":712096,"option":"/items/\\$stuff","correct":false},{"id":712097,"option":"\"/items/[\\$]stuff\"","correct":true}]},{"q":"<p>Which of the following will you use as a replacement for the following code:    </p>\n\n<pre class=\"prettyprint\"><code>app.all('*', requireAuthentication);\napp.all('*', loadUser);</code></pre>\n\n<p> </p>","a":[{"id":712740,"option":"app.all('*', requireAuthentication, loadUser);","correct":true},{"id":712741,"option":"app.all('?', require(Authentication), loadUser);","correct":false},{"id":712742,"option":"app.all( require(Authentication('?')), loadUser);","correct":false},{"id":712743,"option":"app.all.require(Authentication('?'), loadUser));","correct":false}]},{"q":"<p>In a Windows environment, which of the following commands will you use to see all the internal logs in the DEBUG environment variable of an Express application?</p>","a":[{"id":712146,"option":"DEBUG=express:* node index.js","correct":false},{"id":712147,"option":"set DEBUG=express:* & node index.js","correct":true},{"id":712148,"option":"add DEBUG=express:* node index.js","correct":false},{"id":712149,"option":"put DEBUG=express:* ; node index.js","correct":false}]},{"q":"<p>In Express.js, which of the following web-servers would you use to enable the security feature that would prevent the sniffing attack and the man-in-the-middle attack in Ajax POST requests?</p>","a":[{"id":724762,"option":"nginx","correct":true},{"id":724763,"option":"frameguard","correct":false},{"id":724764,"option":"hpkp","correct":false},{"id":724765,"option":"None of these","correct":false}]},{"q":"<p>In Express.js, in order to prevent the cross-site scripting attacks and to deal with other security concerns, you have decided to use the <em><strong>helmet</strong></em> package. How does the use of this package prevent such attacks?</p>","a":[{"id":724754,"option":"It does so by setting the Content-Security-Policy header.","correct":true},{"id":724755,"option":"It does so by enabling the TLS.","correct":false},{"id":724756,"option":"It does so by removing the X-Powered-By header.","correct":false},{"id":724757,"option":"It does so by disabling client-side caching.","correct":false}]},{"q":"<p>In Express.js, if you want to implement response compression in the architecture of a high traffic website in production, then which of these is the most optimal way to do this?</p>","a":[{"id":724818,"option":"Implement the compression as a reverse proxy","correct":true},{"id":724819,"option":"Implement the compression as middleware","correct":false},{"id":724820,"option":"Implement the compression as a standalone service","correct":false},{"id":724821,"option":"None of these","correct":false}]},{"q":"<p>Which of the following HTTP request methods when directed to the route “/one” will result in the execution of the given handler:</p>\n\n<pre class=\"prettyprint\"><code>app.all('/one', function (req, res, next) {\n  console.log('Here ...')\n  next()\n})</code></pre>\n\n<ol>\n\t<li>POST</li>\n\t<li>PUT</li>\n\t<li>DELETE</li>\n</ol>","a":[{"id":712090,"option":"1","correct":true},{"id":712091,"option":"1, 2","correct":false},{"id":712092,"option":"2, 3","correct":false},{"id":712093,"option":"1, 2, 3","correct":false}]},{"q":"<p>The following code results in an error:</p>\n\n<pre class=\"prettyprint\"><code>app.get(\"/\", function (req, res) {\n  throw new Error(\"THISERROR\"); });</code></pre>\n\n<p>How will you ensure that Express catches and processes this error?</p>","a":[{"id":712764,"option":"No action required","correct":true},{"id":712765,"option":"Create a catch block","correct":false},{"id":712766,"option":"Pass the error to the next() function","correct":false},{"id":712767,"option":"Fix synchronous errors","correct":false}]},{"q":"<p>You are running route handlers and middleware in your Express application. Which of the following errors should Express identify:</p>\n\n<ol>\n\t<li>Errors that occur when route handlers are running.</li>\n\t<li>Errors that occur when middleware is running.</li>\n</ol>","a":[{"id":718607,"option":"Only 1","correct":false},{"id":718608,"option":"Only 2","correct":false},{"id":718609,"option":"Both of these","correct":true},{"id":718610,"option":"None of these","correct":false}]},{"q":"<p>In Express.js, if you are using the express-session middleware for cookie session maintenance, then which of these would you need to consider to use it for a production environment?</p>","a":[{"id":724782,"option":"You should never use it in a production environment.","correct":false},{"id":724783,"option":"You should use an in-memory store in the production environment.","correct":false},{"id":724784,"option":"You should set up a session store for the production environment.","correct":true},{"id":724785,"option":"No changes are necessary.","correct":false}]},{"q":"<p>In Express.js, which of the following commands will you use to see all the internal logs used if you are using the Windows OS?</p>","a":[{"id":724495,"option":"DEBUG=express:* node index.js","correct":false},{"id":724496,"option":"DEBUG=express:* & node index.js","correct":false},{"id":724497,"option":"set DEBUG=express:* & node index.js","correct":true},{"id":724498,"option":"set DEBUG=express:*; node index.js","correct":false}]},{"q":"<p>Which of these statements for the following Express.js code is true:</p>\n\n<pre class=\"prettyprint\"><code>\"req.get('Content-Type');\n// =&gt; \"\"text/plain\"\"\n\nreq.get('content-type');\n// =&gt; \"\"text/plain\"\"\n\nreq.get('Something');\n// =&gt; undefined\"</code></pre>\n\n<p> </p>","a":[{"id":724806,"option":"The request header field of the specified HTTP request is case-sensitive.","correct":true},{"id":724807,"option":"The referrer and referer fields are interchangeable.","correct":false},{"id":724808,"option":"Both of these","correct":false},{"id":724809,"option":"None of these","correct":false}]},{"q":"<p>In Express.js, which of these properties of the <em>options</em> parameters is of the boolean type:</p>\n\n<ol>\n\t<li>httpOnly</li>\n\t<li>secure</li>\n\t<li>path</li>\n\t<li>expires</li>\n</ol>","a":[{"id":724802,"option":"1 and 2","correct":true},{"id":724803,"option":"2 and 3","correct":false},{"id":724804,"option":"1, 2, and 3","correct":false},{"id":724805,"option":"All of these","correct":false}]},{"q":"<p>In Express.js, if your application suffers from Insecure Deserialization of requests and responses during a vulnerability test, then which of these types of attacks the application would be susceptible to?</p>\n\n<ol>\n\t<li>XXE</li>\n\t<li>Replay attacks</li>\n\t<li>Privilege escalation attacks</li>\n</ol>","a":[{"id":724849,"option":"1 and 2","correct":false},{"id":724850,"option":"1 and 3","correct":false},{"id":724851,"option":"2 and 3","correct":true},{"id":724852,"option":"All of these","correct":false}]},{"q":"<p>In Express.js, if you are constructing your cookie policy in order to maximize security, then which of these practices would you follow to ensure the maximum cookie security:</p>\n\n<ol>\n\t<li>You should set the cookie option as<em> httpOnly.</em></li>\n\t<li>You should never set the domain option path.</li>\n\t<li>You should never set the domain option domain.</li>\n</ol>","a":[{"id":724810,"option":"1","correct":true},{"id":724811,"option":"1 and 2","correct":false},{"id":724812,"option":"2 and 3","correct":false},{"id":724813,"option":"All of these","correct":false}]},{"q":"<p>In Express.js, assume that your application is vulnerable since there are attackers who detect apps running Express and subsequently launch custom tailored attacks. Which of the following actions would you take to prevent this?</p>","a":[{"id":724766,"option":"You will disable the X-Powered-By header.","correct":true},{"id":724767,"option":"You will set the Content-Security-Policy header.","correct":false},{"id":724768,"option":"You will hide the X-Content-Type-Options header.","correct":false},{"id":724769,"option":"All of these","correct":false}]},{"q":"<p>In Express.js, which of these features would you use to prevent the sniffing attack and the man-in-the-middle attack in Ajax POST requests?</p>","a":[{"id":724758,"option":"Enable SSL","correct":false},{"id":724759,"option":"Enable TLS","correct":true},{"id":724760,"option":"Disable server-side caching","correct":false},{"id":724761,"option":"Set the X-Frame-Options header","correct":false}]},{"q":"<p>In Express.js, assume that you have written multiple error-handling middleware functions. In the penultimate middleware function. you end up not calling the<em> next </em>function and also do not send the response. What will happen to your request in this case?</p>","a":[{"id":724491,"option":"The function next will automatically be called.","correct":false},{"id":724492,"option":"The request will be garbage collected.","correct":false},{"id":724493,"option":"The request will not be completed.","correct":true},{"id":724494,"option":"The final error-handling middleware response would be sent.","correct":false}]},{"q":"<p>In Express.js, if you encounter an error while streaming the response to the client and proceed to call<em> next()</em> with the error, then which of the following behavior is most likely to be exhibited?</p>","a":[{"id":724487,"option":"It will close the connection and the request will be failed.","correct":true},{"id":724488,"option":"It will cut-off the stream, but it will show that the request has succeeded.","correct":false},{"id":724489,"option":"It will finish sending the response, but the request will be failed.","correct":false},{"id":724490,"option":"It will continue with the expected behavior.","correct":false}]},{"q":"<p>In Express.js, assume that you are migrating your application from version 4 to version 5. If you face an issue while running the following signature after an upgrade, then which of these workarounds should be used instead in the Express 5 application:</p>\n\n<pre class=\"prettyprint\"><code>res.json(obj, status)</code></pre>\n\n<p> </p>","a":[{"id":724879,"option":"res.status(status).json(obj)","correct":true},{"id":724880,"option":"res.this.json(status)","correct":false},{"id":724881,"option":"res.json.obj(status)","correct":false},{"id":724882,"option":"res.obj=>json.status(status)","correct":false}]},{"q":"<p>In Express.js, an application running behind a proxy has the value of trust proxy enabled for it. Which of these impacts of making this configuration are valid:</p>\n\n<ol>\n\t<li>Value of req.hostname is derived from the value of the X-Forwarded-Host header that can be set by the client or by the proxy.</li>\n\t<li>Value of X-Forwarded-Proto is reflected in req.protocol.</li>\n\t<li>The req.ip and req.ips values are populated from addresses in X-Forwarded-For.</li>\n</ol>","a":[{"id":724786,"option":"1 and 2","correct":false},{"id":724787,"option":"2 and 3","correct":false},{"id":724788,"option":"1 and 3","correct":false},{"id":724789,"option":"All of these","correct":true}]},{"q":"<p>Which of the following middleware functions will you use to look up files in an application in the order in which the respective static directories were set in Express?</p>\n\n<p> </p>\n\n<p> </p>","a":[{"id":712098,"option":"express.static","correct":true},{"id":712099,"option":"express.lookup","correct":false},{"id":712100,"option":"express.find","correct":false},{"id":712101,"option":"express.seek","correct":false}]},{"q":"<p>In Express, you must use the following command to be able to serve static files.</p>\n\n<pre class=\"prettyprint\"><code>app.use('/static', express.static('mydir'))</code></pre>\n\n<p>Which of the following is a valid path to a file that can be loaded from the directory given in the command:</p>\n\n<ol>\n\t<li>http://localhost:3000/static/images/this.png</li>\n\t<li>http://localhost:3000/static/starting.html</li>\n</ol>","a":[{"id":712086,"option":"1","correct":false},{"id":712087,"option":"2","correct":false},{"id":712088,"option":"Both 1 and 2","correct":true},{"id":712089,"option":"Neither 1 nor 2","correct":false}]},{"q":"<p>In Express.js, if you are using the express-session middleware for the cookie session maintenance, then where can you find session data in this implementation?</p>","a":[{"id":724778,"option":"Server","correct":true},{"id":724779,"option":"Cookie","correct":false},{"id":724780,"option":"Both of these","correct":false},{"id":724781,"option":"None of these","correct":false}]},{"q":"<p>In Express.js, which of these options about the following statements is correct:</p>\n\n<ol>\n\t<li>A <em>mount</em> path in Express is stripped and will not be visible to the middleware function.</li>\n\t<li>The mounted middleware functions can operate without code changes regardless of their respective<em> prefix</em> pathname.</li>\n</ol>","a":[{"id":724794,"option":"Only 1 is true.","correct":false},{"id":724795,"option":"Only 2 is true.","correct":false},{"id":724796,"option":"Both 1 and 2 are true but 1 is not the valid justification for 2.","correct":false},{"id":724797,"option":"Both 1 and 2 are true and 1 is the valid justification for 2.","correct":true}]},{"q":"<p>Which of these statements for the following Express.js code is valid:</p>\n\n<pre class=\"prettyprint\"><code>app.on('mount', callback(parent))</code></pre>\n\n<p> </p>","a":[{"id":724790,"option":"Sub-apps will inherit the value of settings with a default value.","correct":false},{"id":724791,"option":"Sub-apps will not inherit the value of settings with a default value.","correct":false},{"id":724792,"option":"Both of these","correct":false},{"id":724793,"option":"None of these","correct":true}]},{"q":"<p>In Express.js, assume that you want to ensure that the usage of cookies does not lead to any vulnerabilities that can be exploited and you want to use a cookie session middleware that serializes the entire session to the cookie. Which of these would you use in Express 4.x to achieve this?</p>","a":[{"id":724770,"option":"express-session ","correct":false},{"id":724771,"option":"express.session","correct":false},{"id":724772,"option":"cookie-session ","correct":true},{"id":724773,"option":"express.cookieSession","correct":false}]},{"q":"<p>In Express.js, assume that you are using the serve-static module to serve static files and you want to set how the<em> serve-static</em> method treats dot files when they are encountered. Which of these options would you use if you need the method to return <em>403 </em>or call <em>next()</em> in case it encounters a dot file?</p>","a":[{"id":724750,"option":"allow","correct":false},{"id":724751,"option":"deny","correct":true},{"id":724752,"option":"ignore","correct":false},{"id":724753,"option":"pass","correct":false}]},{"q":"<p>Which of the following will you use to load a middleware function called 'demo' in your Express4 application?</p>","a":[{"id":712194,"option":"app.use(demo)","correct":true},{"id":712195,"option":"app.init(demo)","correct":false},{"id":712196,"option":"app.launch(demo)","correct":false},{"id":712197,"option":"app.engine(demo)","correct":false}]},{"q":"<p>In Express, which of the following will resolve a 404 response?</p>","a":[{"id":711714,"option":"Add a middleware function at the bottom of the stack","correct":true},{"id":711715,"option":"Add a middleware function at the top of the stack ","correct":false},{"id":711716,"option":"Add an error-handler middleware to handle the 404 response","correct":false},{"id":711717,"option":"None of these","correct":false}]},{"q":"<p>In Express.js, if you want to design a system that can ensure high availability of the application and can handle the case when the operating system itself crashes, then which of the following entities would you definitely need?</p>","a":[{"id":724845,"option":"Process manager","correct":false},{"id":724846,"option":"Init system","correct":true},{"id":724847,"option":"Any of these","correct":false},{"id":724848,"option":"Both of these","correct":false}]},{"q":"<p>In Express.js, if you want to ensure that the brute-force attacks are not effective against login endpoints, then which of these would you not use to block the authorization attempts?</p>","a":[{"id":724814,"option":"Number of consecutive failed attempts by the same user name and IP address","correct":false},{"id":724815,"option":"Number of failed attempts from an IP address in a fixed time period such as one day","correct":false},{"id":724816,"option":"Number of failed attempts from related IP addresses in a fixed time period such as one month","correct":true},{"id":724817,"option":"All of these are valid metrics","correct":false}]},{"q":"<p>In Express.js, which of these properties of an <em>options </em>parameters are of the boolean type:<br>\n<br>\n1) httpOnly<br>\n2) secure<br>\n3) path<br>\n4) expires</p>","a":[{"id":724861,"option":"Default behavior of the process will be changed","correct":true},{"id":724862,"option":"Process thread safety will be compromised","correct":false},{"id":724863,"option":"The security of the process variables will be compromised","correct":false},{"id":724864,"option":"The process will be susceptible to an infinite load problem","correct":false}]},{"q":"<p>Which of the following objects can be used as a mini-application that is capable of performing middleware?</p>","a":[{"id":712744,"option":"Events","correct":false},{"id":712745,"option":"Encoder","correct":false},{"id":712746,"option":"Router","correct":true},{"id":712747,"option":"Mountpath","correct":false}]},{"q":"<p>If you want to use a template engine that is compatible with <strong>Express</strong>, which of the following signatures should it conform to?</p>\n\n<p> </p>\n\n<p> </p>","a":[{"id":711467,"option":"path, locals, callback, scope","correct":false},{"id":711468,"option":"path, locals, callback","correct":true},{"id":711469,"option":"req, res, callback","correct":false},{"id":711470,"option":"statics, callback, scope","correct":false}]},{"q":"<p>Which of these is true about the following code:</p>\n\n<pre class=\"prettyprint\"><code>res.get('Content-Type');\n// =&gt; \"text/plain\"</code></pre>\n\n<ol>\n\t<li>The match is case-insensitive.</li>\n\t<li>Returns an HTTP response header if specified by field</li>\n</ol>","a":[{"id":712748,"option":"1","correct":false},{"id":712749,"option":"2","correct":false},{"id":712750,"option":"Both of these","correct":true},{"id":712751,"option":"None of these","correct":false}]}]
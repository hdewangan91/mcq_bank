[{"q":"<p>What is the output of the given Ruby code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>t = Thread.new do  \n  Thread.current['temp']=0   \n  8.times do |x|\n    Thread.current['temp']=x   \n    sleep 1   \n  end   \n  return nil   \nend   \nwhile t['temp'].to_i &lt; 3 and t['temp']!=nil  do   \n  puts \"#{t['temp']}\"   \n  sleep 0.5   \nend   \nputs \"End\"  </code></pre>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>End</code></pre>\n\n\t<p>&nbsp;</p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>0\n1\n1\n2\n2\nEnd</code></pre>\n\t</li>\n</ol>","a":[{"id":1770795,"option":"Error/Exception","correct":false},{"id":1770796,"option":"1","correct":true},{"id":1770797,"option":"2","correct":false},{"id":1770798,"option":"Purely depends on the compiler","correct":false}]},{"q":"<p>What is the output of the given Ruby code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>thr = Thread.new { }  \np thr.priority  </code></pre>","a":[{"id":1770791,"option":"Error","correct":false},{"id":1770792,"option":"5","correct":false},{"id":1770793,"option":"No output","correct":false},{"id":1770794,"option":"0","correct":true}]},{"q":"<p>You need to write a program to create a thread that has a method with the code of that thread say <em>func1()</em>. In that, you need to while loop with the sleep method of 1 sec and then increment value 'x' from 0 till 3 (inclusive). Then create an instance thread and start that. The Ruby code given is not correct:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>def func1\n   x = 0\n   while x &lt; 3\n      sleep(\"1sec\")\n   end\nend\n\nt = new func1(Thread)\nt.start</code></pre>\n\n<p>Which of the following option indicates the correct code:</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>def func1\n   x = 0\n   while x &lt; 3\n      sleep(1)\n      x = x + 1\n   end\nend\n\nt = Thread.new{func1()}\nt.start</code></pre>\n\n\t<p>&nbsp;</p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>def func1\n   x = 0\n   while x &lt;= 3\n      sleep(1)\n      x = x + 1\n   end\nend\n\nt = Thread.new{func1()}\nt.join</code></pre>\n\n\t<p>&nbsp;</p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>def func1\n   x = 0\n   while x &lt;= 3\n      sleep(\"1sec\")\n      x=x+1\n   end\nend\n\nt = new func1(Thread)\nt.join</code></pre>\n\n\t<p>&nbsp;</p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>def func1\n   x = 0\n   while x &lt;= 3\n      sleep(\"1sec\")\n   end\nend\n\nt = Thread.new{func1()}\nt.join</code></pre>\n\t</li>\n</ol>","a":[{"id":1770767,"option":"1","correct":false},{"id":1770768,"option":"2","correct":true},{"id":1770769,"option":"3","correct":false},{"id":1770770,"option":"4","correct":false}]},{"q":"<p>An Intrinsic lock is utilised to establish which of the following relationships between resources in order to maintain visibility in a Java 8 Environment ?</p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>happens-with</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>happens-before</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>has-to</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>alongwith</code></pre>\n\n<p> </p>","a":[{"id":1655921,"option":"1","correct":false},{"id":1655922,"option":"2","correct":true},{"id":1655923,"option":"3","correct":false},{"id":1655924,"option":"4","correct":false}]},{"q":"<p>In Java, you are working on Multithreading. If you have executed the code given below that contains three threads <strong>h1</strong>, <strong>h2, </strong>and<strong> h3,</strong> then which of the following statements is correct?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>class hack_thread extends Thread\n{  \n    public void run()\n    {  \n        for(int h=1;h&lt;=3;h++)\n        {  \n            try\n            {  \n                Thread.sleep(10);  \n                \n            }\n            catch(Exception hackerearth)\n            {\n                System.out.println(\"hello\");\n                \n            }  \n            System.out.print(h+\" \");  \n            \n        }  \n        \n    }  \n    public static void main(String args[])\n    {  \n        hack_thread h1=new hack_thread();  \n        hack_thread h2=new hack_thread();  \n        hack_thread h3=new hack_thread();  \n        \n        h1.setPriority(Thread.MAX_PRIORITY);\n        h2.setPriority(Thread.MIN_PRIORITY);\n        h3.setPriority(Thread.NORM_PRIORITY);\n        h1.start(); \n        \n        try\n        {  \n            h1.join();\n            h2.join();\n            \n        }\n        catch(Exception hackerearth)\n        {\n            System.out.println(\"hi\");\n            \n        }  \n        h2.start(); \n        h3.start();\n        \n    }  \n} </code></pre>\n\n<p> </p>\n\n<p><strong>Statements:</strong></p>\n\n<ol>\n\t<li>Thread h1 executes before thread h2 and thread h3 starts.<br>\n\t </li>\n\t<li>Thread h2 and thread h3 execute simultaneously<br>\n\t </li>\n\t<li>Thread h3 starts executing after h2 has completed its task.</li>\n</ol>","a":[{"id":1555033,"option":"1 and 2","correct":true},{"id":1555034,"option":"2 and 3","correct":false},{"id":1555035,"option":"1 and 3","correct":false},{"id":1555036,"option":"Only 1","correct":false}]},{"q":"<p>In C, you are working on Multithreading in the Ubuntu environment. You have created three threads and you use a mutex to control access to the shared resource by the threads as shown in the code given below. The code is saved in a file named <strong>thread.c</strong>. Now if the given code is executed using the Linux command given below then which of the following statements is correct?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>#include&lt;stdio.h&gt;\n#include&lt;pthread.h&gt;\n\n\nint hack;\npthread_mutex_t hack_lock;\npthread_t hack_id[3];\n\nvoid* hack_method(void *arg)\n{\n    pthread_mutex_lock(&amp;hack_lock);\n\n    hack = hack + 1;\n    \n    printf(\"hello %d \\n\", hack);\n    \n    printf(\"hackerearth %d \\n\", hack);\n\n    pthread_mutex_unlock(&amp;hack_lock);\n\n    return NULL;\n}\n\nint main()\n{\n    int h = 0;\n    int hack_error;\n\n    if (pthread_mutex_init(&amp;hack_lock, NULL) != 0)\n    {\n        return 1;\n    }\n\n    while(h &lt; 3)\n    {\n        hack_error = pthread_create(&amp;(hack_id[h]), NULL, &amp;hack_method, NULL);\n        if (hack_error != 0)\n            printf(\"hack_error occurred\");\n      \n        h++;\n    }\n\n    pthread_join(hack_id[0], NULL);\n    pthread_join(hack_id[1], NULL);\n    pthread_join(hack_id[2], NULL);\n    pthread_mutex_destroy(&amp;hack_lock);\n    \n    \n    return 0;\n\n}</code></pre>\n\n<p><br>\n<br>\n<strong>Command:</strong></p>\n\n<pre class=\"prettyprint\"><code>hackerearth@ubuntu:~/$ gcc thread.c -lpthread\n</code></pre>\n\n<p><br>\n<br>\n<strong>Statements:</strong></p>\n\n<ol>\n\t<li> The code performs thread synchronization with the use of mutex.<br>\n\t </li>\n\t<li> The mutex is destroyed after all the three threads have completed their tasks.<br>\n\t </li>\n\t<li> The code gives the following output-\n\t<pre class=\"prettyprint\"><code>hello 1 \nhackerearth 1 \nhello 2 \nhackerearth 2 \nhello 3 \nhackerearth 3 \n</code></pre>\n\t<br>\n\t </li>\n\t<li> The code gives the following output-\n\t<pre class=\"prettyprint\"><code>hello 1 \nhello 2  \nhello 3 \nhackerearth 3\nhackerearth 3\nhackerearth 3 \n</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1564198,"option":"1, 2 and 4","correct":false},{"id":1564199,"option":"1 and 2","correct":false},{"id":1564200,"option":"1, 2 and 3","correct":true},{"id":1564201,"option":"only 2","correct":false}]},{"q":"<p>You have executed the following shared C code to count 1000 numbers by using two threads that are provided in the code. Both the threads can access the code simultaneously such that the output is a different value at each execution. If you are required to lock the Critical section of the shared code such that only one thread can access the section till the section is executed and gets unlocked for another thread, then which of these following lines of code must be used to replace the commented lines in the code?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#include &lt;stdio.h&gt;\n#include &lt;pthread.h&gt;\n#include &lt;stdlib.h&gt;\n#define count 1000\n#define mythreads 2\n\nstatic pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;\nint i = 0;\nvoid *my_counting_func(void *arg)\n{\n    for(;;)\n    {\n        //comment 1 \n        if(i&gt;=count)\n        {\n            //comment 2\n            return NULL;\n        }\n        i++;   \n        //comment 3\n    }\n}\nint main(void)\n{\n    int i = 0;\n    pthread_t *thread_group = malloc(sizeof(pthread_t) *mythreads);\n    for(i=0;i&lt;mythreads; ++i)\n    {\n        pthread_create(&amp;thread_group[i], NULL, my_counting_func, NULL);\n    }\n    for(i=0;i&lt;mythreads;++i)\n    {\n        pthread_join(thread_group[i], NULL);\n    }\n}\n</code></pre>\n\n<p><strong>Line 1</strong></p>\n\n<pre class=\"prettyprint\"><code>pthread_mutex_lock(&amp;mutex);</code></pre>\n\n<p><strong>Line 2</strong></p>\n\n<pre class=\"prettyprint\"><code>pthread_mutex_unlock(&amp;mutex);</code></pre>\n\n<p><strong>Replacement patterns</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>Comment 1: Line 1\nComment 2: Line 2\nComment 3: Line 1</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>Comment 1: Line 1\nComment 2: Line 2\nComment 3: Line 2</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>Comment 1: Line 2\nComment 2: Line 2\nComment 3: Line 1</code></pre>\n\n<p> </p>","a":[{"id":1248977,"option":"1","correct":true},{"id":1248978,"option":"2","correct":false},{"id":1248979,"option":"3","correct":false},{"id":1248980,"option":"Mutex technique is already applied to this program","correct":false}]},{"q":"<p>In C#, you are working on Multithreading. If you have executed the code given below that contains two threads <strong>h1</strong> and <strong>h2,</strong> then which of the following statements is correct?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;  \nusing System.Threading;  \npublic class hackerearth \n{  \n    public static void Main()  \n    {  \n        hack_thread h = new hack_thread();  \n        Thread h1 = new Thread(new ThreadStart(h.hackerearth_thread));  \n        Thread h2 = new Thread(new ThreadStart(h.hackerearth_thread));  \n        h1.Start();  \n        h1.Join();  \n        h2.Start();  \n       \n    }  \n}  \npublic class hack_thread  \n{  \n    public void hackerearth_thread()  \n    {  \n        for (int hack = 0; hack &lt; 3; hack++)  \n        {  \n            Console.Write(hack + \" \");  \n            Thread.Sleep(10);  \n        }  \n    }  \n}  </code></pre>\n\n<p> </p>\n\n<p><strong>Statements:</strong></p>\n\n<ol>\n\t<li>Thread h2 starts executing after h1 has completed its task.<br>\n\t </li>\n\t<li>The code gives the output-<br>\n\t 0 1 2 0 1 2<br>\n\t </li>\n\t<li>Thread h1 and thread h2 executes simultaneously<br>\n\t </li>\n\t<li>The code gives the output-<br>\n\t 0 0 1 1 2 2</li>\n</ol>","a":[{"id":1419312,"option":"3 and 4","correct":false},{"id":1419313,"option":"1 and 2","correct":true},{"id":1419314,"option":"only 3","correct":false},{"id":1419315,"option":"only 1","correct":false}]},{"q":"<p>In C#, you are working on Data Parallelism. Consider the C# code snippet given below which uses thread-local variables to store and retrieve state in each separate task that is created by a For loop. Now, which of the following statements is correct about the given code?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nusing System.Threading.Tasks;\n\nclass Hack\n{\n    static void Main()\n    {\n        object _ = new object();\n        int num = 10000000;\n        double sumTotal = 0.0;\n        double progress = 1.0 / num ; \n        \n        Parallel.For(0, num , () =&gt; 0.0, (i, state, local) =&gt;\n        {\n            double x = (i + 0.5) * progress ;\n            return local + 4.0 / (1.0 + x * x);\n            \n        }, \n        local =&gt; \n        {\n            lock (_)\n            {\n                sumTotal += local;\n                \n            }\n            \n        });\n        Console.WriteLine(sumTotal * progress );\n    }\n}</code></pre>\n\n<p><br>\n<br>\n<strong>Statements</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>The lock section is used only once per thread, instead of once per iteration, increasing the synchronization overhead to a great extent.</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>The lock section is used only once per iteration, instead of once per thread, reducing the synchronization overhead to a great extent.</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Parallel is used only once per iteration, instead of once per thread, reducing the synchronization overhead to a great extent.</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>The lock section is used only once per thread, instead of once per iteration, reducing the synchronization overhead to a great extent.</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1419342,"option":"1","correct":false},{"id":1419343,"option":"2","correct":false},{"id":1419344,"option":"3","correct":false},{"id":1419345,"option":"4","correct":true}]},{"q":"<p>In Android, which of the following reponses is occured to the thread, that was previously created in a closed activity?</p>","a":[{"id":31453,"option":"Is killed automatically\r\n  ","correct":false},{"id":31454,"option":"Runs in the background\r\n  ","correct":false},{"id":31455,"option":"Runs in the foreground\r\n  ","correct":false},{"id":31456,"option":"None of these","correct":true}]},{"q":"<p>Which of these functions runs in a background thread in Android?</p>","a":[{"id":36571,"option":"onPreExecute","correct":false},{"id":36572,"option":"onPostExecute   ","correct":false},{"id":36573,"option":"doInBackground   ","correct":true},{"id":36574,"option":"onGetExecute","correct":false}]},{"q":"<p>In Android, which of these is available for activities and fragments?</p>","a":[{"id":36527,"option":"Loader   ","correct":true},{"id":36528,"option":"getactivity()   ","correct":false},{"id":36529,"option":"Both of these","correct":false},{"id":36530,"option":"None of these","correct":false}]},{"q":"<p>In Android, which of these monitors the source of data and delivers new results when content is changed?</p>","a":[{"id":36531,"option":"Listview","correct":false},{"id":36532,"option":"Button","correct":false},{"id":36533,"option":"Loader  ","correct":true},{"id":36534,"option":"None of these","correct":false}]},{"q":"<p>Which of the following is the main condition for a Handler in Android?</p>","a":[{"id":36117,"option":"It should be primary.","correct":false},{"id":36118,"option":"It must request a message token using the getMessage() method.","correct":false},{"id":36119,"option":"It must request a message token using the obtainMessage() method.    ","correct":true},{"id":36120,"option":"It should be secondary.   ","correct":false}]},{"q":"<p>How are threads executed in Android?</p>","a":[{"id":36121,"option":"Dependently","correct":true},{"id":36122,"option":"Independently                 ","correct":false},{"id":36123,"option":"Both of these","correct":false},{"id":634996,"option":"None of these","correct":false}]},{"q":"<p>Which of the following kinds of threading is used by Android?</p>","a":[{"id":36559,"option":"Multithreaded","correct":false},{"id":36560,"option":"Single threaded UI model   ","correct":true},{"id":36561,"option":"Both of these  ","correct":false},{"id":36562,"option":"None of these","correct":false}]},{"q":"<p>Which of these about handler in Android is true?</p>","a":[{"id":36109,"option":"A handler is used to schedule messages.","correct":false},{"id":36110,"option":"A handler is used to en-queue an action to be performed on another thread.","correct":false},{"id":36111,"option":"Both of these","correct":true},{"id":36112,"option":"None of these","correct":false}]},{"q":"<p>In Android, which of the following should be preferred to implement background functionality that relates with the acitvity?</p>","a":[{"id":31066,"option":"Shared Preference\r\n","correct":false},{"id":31067,"option":"Service\r\n","correct":true},{"id":31068,"option":"Thread\r\n","correct":false},{"id":31069,"option":"All of these\r\n","correct":false}]},{"q":"<p>Which of the following C# code snippets can you use to get the result from the Task given below:<br>\n<br>\n </p>\n\n<pre class=\"prettyprint\"><code>Task &lt; string &gt; task1 = Task.Run &lt; string &gt; (() =&gt; DateTime.Now.DayOfWeek.ToString() );</code></pre>\n\n<p> </p>\n\n<p><strong>Code Snippets</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Console.WriteLine(task1.Result);</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Console.WriteLine(task1.Result &lt; String &gt;);</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Console.WriteLine(String(task1.Result));</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Console.WriteLine(task1.Result, String);</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1419402,"option":"1","correct":true},{"id":1419403,"option":"2","correct":false},{"id":1419404,"option":"3","correct":false},{"id":1419405,"option":"4","correct":false}]},{"q":"<p>In System Analysis and Design, which of the following frameworks provides an <strong>async</strong> task to perform?</p>","a":[{"id":30594,"option":"ProgressDialogLoader\r\n ","correct":false},{"id":30595,"option":"AsyncLoader\r\n ","correct":false},{"id":30596,"option":"AsyncTaskLoader\r\n ","correct":true},{"id":30597,"option":"All of these","correct":false}]},{"q":"<p>Which of the following facilitates the interaction between Android threads?</p>","a":[{"id":36105,"option":"Database helper                   ","correct":false},{"id":36106,"option":"Handler objects","correct":true},{"id":36107,"option":"Service handler ","correct":false},{"id":36108,"option":"Database objects","correct":false}]},{"q":"<p>In Android, which of the following classes is implemented by the <strong>ThreadPoolExecutor</strong> class?</p>","a":[{"id":30974,"option":"Application context\r\n    ","correct":false},{"id":30975,"option":"BaseAdapter\r\n    ","correct":false},{"id":30976,"option":"ExecuterService\r\n    ","correct":true},{"id":30977,"option":"None of these\r\n    ","correct":false}]},{"q":"<p>In Android, which of these helps you send and process messages that are associated with a thread's message queue?</p>","a":[{"id":36431,"option":"Activity","correct":false},{"id":36432,"option":"Intent     ","correct":false},{"id":36433,"option":"Handler    ","correct":true},{"id":36434,"option":"Database handler    ","correct":false}]},{"q":"<p>In Java, you are working on Multithreading. If you have executed the code given below that contains two threads <em>h1</em> and <em>h2</em><strong>,</strong>&nbsp;then which of the following statements is correct?<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>class hack_thread extends Thread\n{  \n    public void run()\n    {  \n        for(int h=1;h&lt;=3;h++)\n        {  \n            try\n            {  \n                Thread.sleep(10);  \n                \n            }\n            catch(Exception hackerearth)\n            {\n                System.out.println(\"hello\");\n                \n            }  \n            System.out.print(h+\" \");  \n            \n        }  \n        \n    }  \n    public static void main(String args[])\n    {  \n        hack_thread h1=new hack_thread();  \n        hack_thread h2=new hack_thread();  \n        h1.setPriority(Thread.MAX_PRIORITY);\n        h2.setPriority(Thread.MIN_PRIORITY);\n        h1.start(); \n        \n        try\n        {  \n            h1.join();  \n            \n        }\n        catch(Exception hackerearth)\n        {\n            System.out.println(\"hi\");\n            \n        }  \n        h2.start();  \n        \n    }  \n} </code></pre>\n\n<p><strong>Statements</strong></p>\n\n<ol>\n\t<li>Thread h2 starts executing after h1 has completed its task.</li>\n\t<li>The code gives the following output:\n\t<pre class=\"prettyprint\"><code>1 2 3 1 2 3</code></pre>\n\t</li>\n\t<li>Thread h1 and thread h2 execute simultaneously</li>\n\t<li>Thread h1&nbsp;starts executing after h2&nbsp;has completed its task.</li>\n</ol>","a":[{"id":665214,"option":"1 and 2","correct":true},{"id":665215,"option":"2 and 4","correct":false},{"id":665216,"option":"only 3","correct":false},{"id":665217,"option":"None of these","correct":false}]},{"q":"<p>Which of the following statements about <strong>threads </strong>are true in Java:</p>\n\n<ol>\n\t<li>The multithreading mechanism in Java uses the polling<em> </em>method.</li>\n\t<li>Each object has its own, implicit monitor that is automatically entered when one of the object’s synchronized methods is called.</li>\n\t<li>A thread can be created by creating a class that extends the runnable<em> </em>interface.</li>\n\t<li>We can obtain a reference to the main thread by calling the currentThread()<em> </em>method.</li>\n</ol>","a":[{"id":691117,"option":"1, 2, and 3","correct":false},{"id":691118,"option":"1 and 2","correct":false},{"id":691119,"option":"2 and 4","correct":true},{"id":691120,"option":"None of these","correct":false}]},{"q":"<p>In Java, you are working on Multithreading. If you have executed the code given below that contains two threads <strong>h1</strong> and <strong>h2,</strong> then which of the following statements is correct?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>class hack_thread extends Thread\n{  \n    public void run()\n    {  \n        for(int h=1;h&lt;=3;h++)\n        {  \n            try\n            {  \n                Thread.sleep(10);  \n                \n            }\n            catch(Exception hackerearth)\n            {\n                System.out.println(\"hello\");\n                \n            }  \n            System.out.print(h+\" \");  \n            \n        }  \n        \n    }  \n    public static void main(String args[])\n    {  \n        hack_thread h1=new hack_thread();  \n        hack_thread h2=new hack_thread();  \n        h1.start();  \n        try\n        {  \n            h1.join();  \n            \n        }\n        catch(Exception hackerearth)\n        {\n            System.out.println(\"hi\");\n            \n        }  \n        h2.start();  \n        \n    }  \n} </code></pre>\n\n<p><br>\n<br>\n<strong>Statements:</strong></p>\n\n<ol>\n\t<li>Thread h1 and thread h2 execute simultaneously<br>\n\t </li>\n\t<li>The code gives the output-\n\t<pre class=\"prettyprint\"><code>1 1 2 2 3 3</code></pre>\n\t<br>\n\t </li>\n\t<li>Thread h2 starts executing after h1 has completed its task.<br>\n\t </li>\n\t<li>The code gives the output-\n\t<pre class=\"prettyprint\"><code>1 2 3 1 2 3</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":666735,"option":"3 and 4","correct":true},{"id":666736,"option":"1 and 2","correct":false},{"id":666737,"option":"only 3","correct":false},{"id":666738,"option":"only 1","correct":false}]},{"q":"<p>In Java, you are working on Multithreading. Now, if you have executed the code given below then which of the following statements is correct?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>class Hackerearth\n{\n    public static void main(String args[])\n    {  \n        hack_thread h=new hack_thread();   \n        h.start(); \n        while(h.isAlive())\n        {\n            try\n            {\n                h.sleep(10);\n                \n            }\n            \n            catch(Exception e)\n            {\n                System.out.println(\"hello\");\n                \n            }\n            System.out.println(\"hackerearth\");\n            \n        }\n        \n    }  \n}\nclass hack_thread extends Thread\n{  \n    public void run()\n    {  \n        System.out.println(\"hi\");          \n    }    \n}    </code></pre>\n\n<p><br>\n<br>\n<strong>Statements:</strong></p>\n\n<ol>\n\t<li>The code does not give a runtime error<br>\n\t </li>\n\t<li>The code produces the output - \n\t<pre class=\"prettyprint\"><code>hello\nhackerearth</code></pre>\n\t<br>\n\t </li>\n\t<li>The code produces the output - \n\t<pre class=\"prettyprint\"><code>hi\nhackerearth</code></pre>\n\t<br>\n\t </li>\n</ol>","a":[{"id":661989,"option":"1 and 3","correct":true},{"id":661990,"option":"1 and 2","correct":false},{"id":661991,"option":"only 1","correct":false},{"id":661992,"option":"None of these","correct":false}]}]
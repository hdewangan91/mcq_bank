[{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>geneExp = (m for m in range(6) if m % 5 == 0) \nfor m in geneExp: \n    print(m*m, end=\" \") \n</code></pre>\n\n<p> </p>","a":[{"id":1121889,"option":"5","correct":false},{"id":1121890,"option":"0 5","correct":false},{"id":1121891,"option":"25","correct":false},{"id":1121892,"option":"0 25 ","correct":true}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>import itertools\ntry:\n    print(tuple(itertools.repeat(5, 'a')))\nexcept Exception as e:\n    print(e)\n</code></pre>\n\n<p> </p>","a":[{"id":1121881,"option":"(5, 5, 5)","correct":false},{"id":1121882,"option":"[5, 5, 5]","correct":false},{"id":1121883,"option":"(a, a, a, a, a)","correct":false},{"id":1121884,"option":"Exception is raised","correct":true}]},{"q":"<p>In Python 3, which of the following represent types of infinite iterators:</p>\n\n<ol>\n\t<li>count(start, step)</li>\n\t<li>cycle(iterables)</li>\n\t<li>repeat(val, num)</li>\n</ol>","a":[{"id":1121865,"option":"1 and 2 ","correct":false},{"id":1121866,"option":"2 and 3","correct":false},{"id":1121867,"option":"1 and 3","correct":false},{"id":1121868,"option":"All of these","correct":true}]},{"q":"<p>In Python 3, which of the following statements about <strong>iterators</strong> is correct:</p>\n\n<ol>\n\t<li>They allow you to work with infinite sequences without having to reallocate the resources for every sequence.</li>\n\t<li>Not all itertool functions return iterators.</li>\n</ol>\n\n<p> </p>","a":[{"id":1121853,"option":"1","correct":true},{"id":1121854,"option":"2","correct":false},{"id":1121855,"option":"Both of these","correct":false},{"id":1121856,"option":"None of these","correct":false}]},{"q":"<p>In Python 3, which of the following statements about the <strong>__next__ </strong>method is correct:</p>\n\n<ol>\n\t<li>It returns the next value.</li>\n\t<li>It returns the StopIteration error if all the objects have been looped through.</li>\n\t<li>It can only be used while using the ‘for’ and ‘in’ keywords.</li>\n</ol>","a":[{"id":1121829,"option":"1","correct":false},{"id":1121830,"option":"1 and 2","correct":true},{"id":1121831,"option":"2 and 3","correct":false},{"id":1121832,"option":"1 and 3","correct":false}]},{"q":"<p>In Python 3, you want to create an iterator object. For this, you are required to implement two methods in your iterator class. Which of the following methods can you implement?</p>","a":[{"id":1121825,"option":"__iter__, __next__","correct":true},{"id":1121826,"option":"__iter__, StopIteration","correct":false},{"id":1121827,"option":"__next__, StopIteration","correct":false},{"id":1121828,"option":"__init__, __iter__","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>import itertools \ndata = ['apples', 2] \niter_data = itertools.cycle(data) \nfor i in range(3): \n    print(next(iter_data), end = \" \") \n</code></pre>\n\n<p> </p>","a":[{"id":1121869,"option":"apples 2","correct":false},{"id":1121870,"option":"apples 2 apples ","correct":true},{"id":1121871,"option":"apples 2 apples 2","correct":false},{"id":1121872,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>a = {1, 2, 3}\nb = iter(a)\nnext(b)\nprint(type(a))</code></pre>\n\n<p> </p>","a":[{"id":1121857,"option":"<class 'set'>","correct":true},{"id":1121858,"option":"<class 'dictionary'>","correct":false},{"id":1121859,"option":"<class 'list'>","correct":false},{"id":1121860,"option":"SyntaxError","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>t = (\"Python\", \"language\", \"test\")\niter_t = iter(t)\nprint(next(iter_t), end=' ')\nprint(next(iter_t), end=' ')\nprint(next(iter_t))</code></pre>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Python language test</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Python \nlanguage\ntest</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Python  \n\tlanguage test</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Python language\ntest</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1121849,"option":"1","correct":true},{"id":1121850,"option":"2","correct":false},{"id":1121851,"option":"3","correct":false},{"id":1121852,"option":"4","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>def Generator1(n):\n    for i in range(n):\n        yield i\ndef Generator2(x, y):\n    for j in range(x, y):\n        yield j\ndef Generator3(n, m):\n    yield from Generator1(n)\n    yield from Generator2(n, m+3)\nprint(tuple(Generator2(4, 10)))\n</code></pre>\n\n<p> </p>","a":[{"id":1121929,"option":"(4, 5, 6, 7, 8, 9)","correct":true},{"id":1121930,"option":"(4, 7, 10, 13, 16, 19)","correct":false},{"id":1121931,"option":"(4, 5, 6, 7, 8, 9, 10)","correct":false},{"id":1121932,"option":"TypeError","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>L = [\"HackerEarth\", \"Python\", \"Test\"]\niteraL = iter(L)\nnext(iteraL)\nprint(tuple(next(iteraL)))</code></pre>\n\n<p> </p>","a":[{"id":1121897,"option":"(‘HackerEarth’)","correct":false},{"id":1121898,"option":"(‘Python’)","correct":false},{"id":1121899,"option":"('P', 'y', 't', 'h', 'o', 'n')","correct":true},{"id":1121900,"option":"('H', 'a', 'c', 'k', 'e', 'r', 'E', 'a', 'r', 't', 'h')","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>def Num(x):\n    n = 0\n    while n &lt;= x:\n        yield n\n        n += 1 \nS = sum(Num(10))\nprint(S)\n</code></pre>\n\n<p> </p>","a":[{"id":1121877,"option":"45","correct":false},{"id":1121878,"option":"55","correct":true},{"id":1121879,"option":"40","correct":false},{"id":1121880,"option":"50","correct":false}]},{"q":"<p>In Python 3, which of the following represent the advantages of using <strong>iterators</strong>:</p>\n\n<ol>\n\t<li>Enables you to produce cleaner code</li>\n\t<li>Has the ability to work with infinite sequences</li>\n\t<li>Saves memory because, at a time, only one element is stored in the memory unlike in lists or tuples</li>\n</ol>","a":[{"id":1121833,"option":"1 and 2","correct":false},{"id":1121834,"option":"2 and 3","correct":false},{"id":1121835,"option":"1 and 3","correct":false},{"id":1121836,"option":"All of these","correct":true}]},{"q":"<p>In Python 3, which of the following statements about the <strong>yield </strong>keyword is correct:</p>\n\n<ol>\n\t<li>It turns a regular function into a generator.</li>\n\t<li>It can generate a sequence of values without destroying the local variable state.</li>\n</ol>","a":[{"id":1121841,"option":"1","correct":false},{"id":1121842,"option":"2","correct":false},{"id":1121843,"option":"Both of these","correct":true},{"id":1121844,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>def Task(p, i):\n    i = iter(i)\n    for x in i:\n        if not p(x):\n            yield x\n            break\n    for x in i:\n        yield x\na = Task(lambda x: x&lt;5, [4,-2, 0, 1, 3, -1, 10, 33])\nfor i in range(2):\n    print(next(a), end=' ')\n</code></pre>\n\n<p> </p>","a":[{"id":1121937,"option":"10 33","correct":true},{"id":1121938,"option":"43865","correct":false},{"id":1121939,"option":"33 10 4 -2","correct":false},{"id":1121940,"option":"StopIteration","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>def MainProgram(iterable, x):\n    sample = tuple(iterable)\n    n = len(sample)\n    if not n and x:\n        return\n    indices = [1] * x\n    yield tuple(sample[i] for i in indices)\n    while True:\n        for i in reversed(range(x)):\n            if indices[i] != n - 1:\n                break\n        else:\n            return\n        indices[i:] = [indices[i] + 1] * (x - i)\n        yield tuple(sample[i] for i in indices)\na = MainProgram('PYTHON', 3) \nprint(next(a))\n</code></pre>\n\n<p> </p>","a":[{"id":1121933,"option":"(‘P’, ‘P’, ‘P’)","correct":false},{"id":1121934,"option":"(‘P’, ‘Y’, ‘T’)","correct":false},{"id":1121935,"option":"(‘Y’, ‘Y’, ‘Y’)","correct":true},{"id":1121936,"option":"((‘P’, ‘Y’, ‘T’), (‘P’, ‘Y’, ‘T’), (‘P’, ‘Y’, ‘T’))","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>import itertools\ndef MainProg(items):\n    n = len(items)\n    count = 0\n    if n==0: yield []\n    else:\n        for i in range(len(items)):\n            for cc in MainProg(items[:i]+items[i+3:]):\n                yield [items[i]]+cc\n                count += 1\nfor i in MainProg(list(\"red\")): print(''.join(i) + \", \", end=\"\")\nresult = MainProg(['t','a','n'])\nnext(result)\nprint(next(result))  \n</code></pre>\n\n<p> </p>","a":[{"id":1121925,"option":"r, er, dr, der, ['t']","correct":false},{"id":1121926,"option":"r, er, dr, der, ['a', 't']","correct":true},{"id":1121927,"option":"r, er, dr, der, ['n', 'a', 't']","correct":false},{"id":1121928,"option":"StopIteration","correct":false}]},{"q":"<p>In Python 3, consider the following expressions. Which of these statements about these expressions are correct:</p>\n\n<p><strong>Expressions</strong></p>\n\n<pre class=\"prettyprint\"><code>a = [i*3 for n in range(150)]\nb = (i*3 for n in range(150))</code></pre>\n\n<p><strong>Statements</strong></p>\n\n<ol>\n\t<li>type(a) is a list and type(b) is a generator</li>\n\t<li>print(a[0:5:-2]) is [0] and print(b[0:5:-2]) is (18, 15, 12, 6, 3)</li>\n\t<li>a[4] gives 12 and b[4] throws a TypeError</li>\n\t<li>Expression 1 executes the operations immediately and returns a list whereas expression 2 returns an object that can be iterated over</li>\n</ol>","a":[{"id":1121913,"option":"1, 2, and 3","correct":false},{"id":1121914,"option":"2, 3, and 4","correct":false},{"id":1121915,"option":"1, 3, and 4","correct":true},{"id":1121916,"option":"All of these","correct":false}]},{"q":"<p>  What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>class fun: \n    def __init__(self, l): \n        self.l = l \n    def __iter__(self): \n        self.a = 15\n        return self\n    def __next__(self): \n        a = self.a \n        if a &gt; self.l: \n            raise StopIteration \n        self.a = a + 1; \n        return a \nfor i in fun(18): \n    print(i, end= ' ')</code></pre>\n\n<p> </p>","a":[{"id":1121861,"option":"16 17 18","correct":false},{"id":1121862,"option":"15 16 17 18","correct":true},{"id":1121863,"option":"15 16 17","correct":false},{"id":1121864,"option":"None","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>def MainProgram(n):\n    looping = False\n    while not looping:\n        try:\n            item = iter(n)\n            looping = True\n        except StopIteration:\n            looping = True\n    for i in n:\n        print(i, end = ' ')\nn = {4, 7, 0, 3}\nprint(MainProgram(n))\n</code></pre>\n\n<p> </p>","a":[{"id":1121901,"option":"[4, 7, 0, 3] None  ","correct":false},{"id":1121902,"option":"0 3 4 7 None","correct":true},{"id":1121903,"option":"4 7 0 3 None","correct":false},{"id":1121904,"option":"None ","correct":false}]},{"q":"<p>In Python 3, consider the provided code. Which of these outputs will be obtained if you perform the following function for the fourth time?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>iter_obj=iter([3,4,5])\nnext(iter_obj)   # first time</code></pre>\n\n<p><strong>Function</strong></p>\n\n<pre class=\"prettyprint\"><code>next(iter_obj)</code></pre>\n\n<p> </p>","a":[{"id":1121837,"option":"3","correct":false},{"id":1121838,"option":"5","correct":false},{"id":1121839,"option":"4","correct":false},{"id":1121840,"option":"StopIteration","correct":true}]},{"q":"<p>Which of the following are in-built iterables in Python 3:</p>\n\n<ol>\n\t<li>Lists</li>\n\t<li>Dictionaries</li>\n\t<li>Tuples</li>\n</ol>","a":[{"id":1121821,"option":"1 and 2","correct":false},{"id":1121822,"option":"2 and 3","correct":false},{"id":1121823,"option":"1 and 3","correct":false},{"id":1121824,"option":"All of these","correct":true}]}]
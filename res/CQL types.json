[{"q":"<p>Your organization is using Cassandra to handle big data workloads. Cassandra provides a CQL shell for executing CQL commands interactively. What is the scope of user-defined CQL type in Cassandra and how can you&nbsp;access a type&nbsp;outside its scope?</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>The scope of a user-defined type is the keyspace in which you define it and to access a type from a keyspace outside its scope: name of the type&nbsp;followed by a period followed the&nbsp;keyspace name</li>\n\t<li>The scope of a user-defined type is the global i.e. it can be accessed from any keyspace&nbsp;and to access a type from a keyspace outside its scope: type_name.keyspace_name&nbsp;</li>\n\t<li>The scope of a user-defined type is the global i.e. it can be accessed from any keyspace&nbsp;and to access a type from a keyspace outside its scope:&nbsp;keyspace_name.type_name&nbsp;</li>\n\t<li>The scope of a user-defined type is the keyspace in which you define it and to access a type from a keyspace outside its scope: keyspace name followed by a period followed the name of the type</li>\n</ol>","a":[{"id":1727663,"option":"1","correct":false},{"id":1727664,"option":"2","correct":false},{"id":1727665,"option":"3","correct":false},{"id":1727666,"option":"4","correct":true}]},{"q":"<p>Your organization is using Cassandra to handle big data workloads. Cassandra provides a CQL shell for executing CQL commands interactively. You want to perform the following commands on the&nbsp;table:</p>\n\n<ul>\n\t<li>Create a table collect_things with fields 'k' and 'v' as int type and tuple type with int, text, and float type respectively</li>\n\t<li>Insert values {0, (3, 'bar', 2.1)} into table collect_things&nbsp;</li>\n\t<li>Insert values {1, (4, 'candy', 6.0)} into table collect_things</li>\n\t<li>Insert values {2, (5, '\"chocolate', 4.6)} into table collect_things&nbsp;</li>\n\t<li>Filter a selection using tuple v where {3, 'bar', 2.1}</li>\n</ul>\n\n<p><em>//Note: Here k&nbsp;is the primary key</em></p>\n\n<p>Which of the following commands can be used to implement the given scenario?</p>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>&gt; CREATE TABLE collect_things (k int PRIMARY KEY, v tuple&lt;int, text, float&gt; );\n&gt; INSERT INTO collect_things (k, v) VALUES{0, &lt;3, 'bar', 2.1&gt;};\n&gt; INSERT INTO collect_things (k, v) VALUES{1, &lt;4, 'candy', 6.0&gt;};\n&gt; INSERT INTO collect_things (k, v) VALUES{2, &lt;5, '\"chocolate', 4.6&gt;};\n&gt; CREATE INDEX on collect_things (v) WHERE v = (3, 'bar', 2.1);</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>&gt; CREATE TABLE collect_things (k int PRIMARY KEY, v tuple(int, text, float) );\n&gt; INSERT INTO collect_things (k, v) VALUES{0, (3, 'bar', 2.1)};\n&gt; INSERT INTO collect_things (k, v) VALUES{1, (4, 'candy', 6.0)};\n&gt; INSERT INTO collect_things (k, v) VALUES{2, (5, '\"chocolate', 4.6)};\n&gt; CREATE INDEX on collect_things (v);\n&gt; SELECT * FROM collect_things WHERE v = (3, 'bar', 2.1);</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>&gt; CREATE TABLE collect_things (k int PRIMARY KEY, v tuple(int, text, float) );\n&gt; INSERT INTO collect_things (k, v) VALUES{0, (3, 'bar', 2.1)};\n&gt; INSERT INTO collect_things (k, v) VALUES{1, (4, 'candy', 6.0)};\n&gt; INSERT INTO collect_things (k, v) VALUES{2, (5, '\"chocolate', 4.6)};\n&gt; CREATE INDEX on collect_things (v) WHERE v = (3, 'bar', 2.1);</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>&gt; CREATE TABLE collect_things (k int PRIMARY KEY, v tuple&lt;int, text, float&gt; );\n&gt; INSERT INTO collect_things (k, v) VALUES(0, (3, 'bar', 2.1));\n&gt; INSERT INTO collect_things (k, v) VALUES(1, (4, 'candy', 6.0));\n&gt; INSERT INTO collect_things (k, v) VALUES(2, (5, '\"chocolate', 4.6));\n&gt; CREATE INDEX on collect_things (v);\n&gt; SELECT * FROM collect_things WHERE v = (3, 'bar', 2.1);</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1727659,"option":"1","correct":false},{"id":1727660,"option":"2","correct":false},{"id":1727661,"option":"3","correct":false},{"id":1727662,"option":"4","correct":true}]},{"q":"<p style=\"text-align: justify;\">Your organization is using Cassandra to handle big data workloads. Cassandra provides a CQL shell for executing CQL commands interactively. A blob type is suitable for storing a small image or short string. You want to perform the following on table bios:</p>\n\n<ul>\n\t<li style=\"text-align: justify;\">Create a table with username as varchar&nbsp;type and bio as blob type</li>\n\t<li style=\"text-align: justify;\">Insert values {'Ben', 3 } where 3 is added as bigintAsBlob</li>\n\t<li style=\"text-align: justify;\">Add a&nbsp;column \"id\" with bigint type</li>\n\t<li style=\"text-align: justify;\">Insert values {'Ben',0x0000000000000003} where '0x0000000000000003' is added as blobAsBigint&nbsp;into bios&nbsp;</li>\n\t<li style=\"text-align: justify;\">Display all the contents of the table bios</li>\n</ul>\n\n<p style=\"text-align: justify;\"><em>//Note: Here user_name is the primary key</em></p>\n\n<p style=\"text-align: justify;\">Which of the following commands can be used to implement the given scenario?</p>\n\n<p style=\"text-align: justify;\"><strong>Options</strong></p>\n\n<p style=\"text-align: justify;\">1.</p>\n\n<pre class=\"prettyprint\"><code>&gt; CREATE TABLE bios ( user_name varchar, bio blob);\n&gt; INSERT INTO bios (user_name, bigintAsBlob(bio)) VALUES ('Ben', 3);\n&gt; UPDATE TABLE bios ADD id bigint;\n&gt; INSERT INTO bios (user_name, blobAsBigint(id)) VALUES ('Ben', 0x0000000000000003);\n&gt; SELECT * FROM bios;</code></pre>\n\n<p style=\"text-align: justify;\">2.</p>\n\n<pre class=\"prettyprint\"><code>&gt; CREATE TABLE bios ( user_name varchar PRIMARY KEY, bio blob);\n&gt; INSERT INTO bios (user_name, bio) VALUES ('Ben', bigintAsBlob(3));\n&gt; UPDATE TABLE bios ADD id bigint;\n&gt; INSERT INTO bios (user_name, id) VALUES ('Ben', blobAsBigint(0x0000000000000003));\n&gt; SELECT * FROM bios;</code></pre>\n\n<p style=\"text-align: justify;\">3.</p>\n\n<pre class=\"prettyprint\"><code>&gt; CREATE TABLE bios ( user_name varchar PRIMARY KEY, bio blob);\n&gt; INSERT INTO bios (user_name, bio) VALUES ('Ben', bigintAsBlob(3));\n&gt; ALTER TABLE bios ADD id bigint;\n&gt; INSERT INTO bios (user_name, id) VALUES ('Ben', blobAsBigint(0x0000000000000003));\n&gt; SELECT * FROM bios;</code></pre>\n\n<p style=\"text-align: justify;\">4.</p>\n\n<pre class=\"prettyprint\"><code>&gt; CREATE TABLE bios ( user_name varchar, bio blob);\n&gt; INSERT INTO bios (user_name, bigintAsBlob(bio)) VALUES ('Ben', 3);\n&gt; ALTER TABLE bios ADD id bigint;\n&gt; INSERT INTO bios (user_name, blobAsBigint(id)) VALUES ('Ben', 0x0000000000000003);\n&gt; SELECT * FROM bios;</code></pre>","a":[{"id":1727651,"option":"1","correct":false},{"id":1727652,"option":"2","correct":false},{"id":1727653,"option":"3","correct":true},{"id":1727654,"option":"4","correct":false}]},{"q":"<p>Your organization is using Cassandra to handle big data workloads. Cassandra provides CQL shell for executing CQL commands interactively. If you have to create a map of key-value pairs both as string and named&nbsp;as <em>fav</em> in a table named as <em>users</em> with id as PRIMARY KEY.<br>\nWhich of the following commands can you use in order to implement the given scenario?</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>CREATE TABLE users(\nid text PRIMARY KEY,\nfavs ordered_map&lt;text,ascii&gt;\n);</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>CREATE TABLE users(\nid text PRIMARY KEY,\nfavs map&lt;text,text&gt;\n);</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>CREATE TABLE users(\nid text PRIMARY KEY,\nfavs ordered_map&lt;text,text&gt;\n);</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>CREATE TABLE users(\nid text PRIMARY KEY,\nfavs map&lt;text,ascii&gt;\n);</code></pre>\n\t</li>\n</ol>\n\n<p>&nbsp;</p>\n\n<p style=\"margin-left: 40px;\">&nbsp;</p>","a":[{"id":1724489,"option":"1","correct":false},{"id":1724490,"option":"2","correct":true},{"id":1724491,"option":"3","correct":false},{"id":1724492,"option":"4","correct":false}]},{"q":"<p>Your organization is using Cassandra to handle big data workloads. Cassandra provides a CQL shell for executing CQL commands interactively. In Cassandra, if you want to condense all the selected rows that share the same values for a set of columns into a single row then which command should you use?</p>","a":[{"id":1725823,"option":"GROUP BY","correct":true},{"id":1725824,"option":"ORDER BY","correct":false},{"id":1725825,"option":"LIMIT","correct":false},{"id":1725826,"option":"ALLOW FILTERING","correct":false}]},{"q":"<p>Your organization is using Cassandra to handle big data workloads. Cassandra provides a CQL shell for executing CQL commands interactively. If you have to create a set of unique values of a string and named them as tags in a table named as<strong> </strong><em>images</em> with name as PRIMARY KEY.<br>\nWhich of the following is the correct command for creating a table with information&nbsp;as mentioned in the given scenario?</p>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>CREATE TABLE users(\nname text PRIMARY KEY,\ntags set&lt;text&gt;\n);</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>CREATE TABLE users(\nname ascii PRIMARY KEY,\nfavs set&lt;text&gt;\n);</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>CREATE TABLE users(\nname text, \nfavs set&lt;varchar&gt;\n);</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>CREATE TABLE users(\nname text PRIMARY KEY, \nfavs set&lt;ascii&gt;\n);</code></pre>","a":[{"id":1724485,"option":"1","correct":true},{"id":1724486,"option":"2","correct":false},{"id":1724487,"option":"3","correct":false},{"id":1724488,"option":"4","correct":false}]},{"q":"<p style=\"text-align: justify;\">Your organization is using Cassandra to handle big data workloads. Cassandra provides a CQL shell for executing CQL commands interactively. You have to create a sorted collection of non-unique scores where each score are added&nbsp;there position in order in the list. Which of the following commands can you use in order to create a table with id (string) as the primary key.</p>\n\n<p style=\"text-align: justify;\"><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>CREATE TABLE users(\nname text PRIMARY KEY,\nscores set&lt;text&gt;\n);</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>CREATE TABLE users(\nname text PRIMARY KEY,\nscores list&lt;text&gt;\n);</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>CREATE TABLE users(\nname ascii PRIMARY KEY , \nscores set&lt;varchar&gt;\n);</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>CREATE TABLE users(\nname varchar PRIMARY KEY, \nscores list&lt;ascii&gt;\n);</code></pre>\n\t</li>\n</ol>","a":[{"id":1724300,"option":"1","correct":false},{"id":1724301,"option":"2","correct":true},{"id":1724302,"option":"3","correct":false},{"id":1724303,"option":"4","correct":false}]},{"q":"<p>Your organization is using&nbsp;<em>Cassandra</em> to handle big data workloads. Cassandra provides a CQL shell for executing CQL commands&nbsp;interactively. Which of the following CQL data type in Cassandra represent a constant hexadecimal number?</p>","a":[{"id":1720638,"option":"decimal","correct":false},{"id":1720639,"option":"inet","correct":false},{"id":1720640,"option":"double","correct":false},{"id":1720641,"option":"blob","correct":true}]},{"q":"<p>Your organization is using&nbsp;<em>Cassandra</em> to handle big data workloads. Cassandra provides a CQL shell for executing CQL commands&nbsp;interactively. Which of the following is not a <em>CQL Collection Datatype</em>?&nbsp;</p>","a":[{"id":1720634,"option":"Hash","correct":true},{"id":1720635,"option":"Set","correct":false},{"id":1720636,"option":"Map","correct":false},{"id":1720637,"option":"List","correct":false}]},{"q":"<p>Your organization is using&nbsp;<em>Cassandra</em> to handle big data workloads. Cassandra provides a CQL shell for executing CQL commands&nbsp;interactively. Which of the following is not a <em>CQL Datatype</em>?&nbsp;</p>","a":[{"id":1720630,"option":"ascii","correct":false},{"id":1720631,"option":"integer","correct":true},{"id":1720632,"option":"blob","correct":false},{"id":1720633,"option":"double","correct":false}]}]
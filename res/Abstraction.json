[{"q":"<p>Predict the output of the following code snippet.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>    abstract class Student {\n    protected abstract int marks(int a, int b);\n    public void percentage() {\n    }\n    }\n    class School extends Student {\n    int marks(int a, int b) {\n    return a/b;\n    }\n    }\n    public class Main {\n    public static void main(String[] args) {\n    School s = new School();\n    System.out.println(s.marks(10,1));\n    }\n    }</code></pre>\n\n<p> </p>","a":[{"id":1655777,"option":"10","correct":false},{"id":1655778,"option":"Compilation Error","correct":true},{"id":1655779,"option":"Runtime Error","correct":false},{"id":1655780,"option":"No Output","correct":false}]},{"q":"<p>Determine the output of the given code snippet.<br>\n<strong>  code:</strong></p>\n\n<pre class=\"prettyprint\"><code>    abstract class School{\n    abstract static class Student{\n    static int i = 0;\n    public void marks() {};\n    }\n    static void display(){\n    System.out.println(School.Student.i);\n    }\n    }\n    public class Main extends School.Student{\n    public void marks() {\n    i = 1;\n    }\n    public static void main(String[] args) {\n    School.Student stu = new Main();\n    stu.marks();\n    School.display();\n    }\n    }</code></pre>\n\n<p> </p>","a":[{"id":1655805,"option":"0","correct":false},{"id":1655806,"option":"1","correct":true},{"id":1655807,"option":"Compilation error","correct":false},{"id":1655808,"option":"Runtime Error","correct":false}]},{"q":"<p>Which of these lines in the below-given code snippet will throw a compilation error when executed?</p>\n\n<p><strong>code:</strong></p>\n\n<pre class=\"prettyprint\"><code> abstract class Student {   \n    private abstract void marks(); // Line 1\n    abstract void calculate(); //Line 2\n    public void percentage(){} //Line 3\n    }\n    public class School extends Student{ // Line 4   \n    void calculate() { // Line 5\n    }\n    }</code></pre>\n\n<p><br>\n    <br>\n   </p>","a":[{"id":1655781,"option":"Line 1","correct":true},{"id":1655782,"option":"Line 2","correct":false},{"id":1655783,"option":"Line 3","correct":false},{"id":1655784,"option":"Line 4","correct":false}]},{"q":"<p>What is the output of the C# code snippet given below?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nnamespace MyApplication\n{ \n    interface FirstInterface\n    { \n        void FirstMethod(); \n        \n    }\n    interface SecondInterface\n    { \n        void SecondMethod(); \n        \n    }\n    class Demo : FirstInterface, SecondInterface\n    { \n        public void FirstMethod()\n        { \n            Console.WriteLine(\"First piece of code\"); \n            \n        }\n        public void SecondMethod()\n        { \n            Console.WriteLine(\"Second piece of code\"); \n            \n        }\n        \n    }\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Demo myObj = new Demo();\n            myObj.FirstMethod();\n            myObj.SecondMethod(); \n            \n        } \n        \n    } \n    \n}</code></pre>\n\n<p> </p>\n\n<p><strong>Output:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Second piece of code\nFirst piece of code\n</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>First piece of code\n</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>First piece of code\nSecond piece of code\n</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Second piece of code</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1419102,"option":"1","correct":false},{"id":1419103,"option":"2","correct":false},{"id":1419104,"option":"3","correct":true},{"id":1419105,"option":"4","correct":false}]},{"q":"<p>What is the output of the following C# code snippet:<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nclass Rectangle : ImplementationInterface, DimensionsShape\n{\n    float x;\n    float y;\n    public Rectangle(float x, float y)\n    {\n        this.x=x;\n        this.y=y;\n        \n    }\n    float ImplementationInterface.X() =&gt; x;\n    float ImplementationInterface.Y() =&gt; y;\n    \n    float DimensionsShape.X() =&gt; x* 2.54f;\n    float DimensionsShape.Y() =&gt; y* 2.54f;\n    \n    static void Main()\n    {\n        Rectangle rect = new Rectangle(30.0f, 20.0f);\n        ImplementationInterface eDimensions = rect;\n        DimensionsShape mDimensions = rect;\n        Console.WriteLine(\"Length(in): {0}\", eDimensions.X());\n        Console.WriteLine(\"Width (in): {0}\", eDimensions.Y());\n        Console.WriteLine(\"Length(cm): {0}\", mDimensions.X());\n        Console.WriteLine(\"Width (cm): {0}\", mDimensions.Y());\n        \n    }\n}\ninterface ImplementationInterface\n{\n    float X();\n    float Y();\n}\ninterface DimensionsShape\n{\n    float X();\n    float Y();\n}\n</code></pre>\n\n<p> </p>\n\n<p><strong>Output</strong></p>\n\n<p> </p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Length(in): 30\nWidth (in): 20\nLength(cm): 76.2\nWidth (cm): 50.8</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Length(in): 30\nWidth (in): 20\nLength(cm): 76.2</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Length(in): 30\nWidth (in): 30\nLength(cm): 76.2\nWidth (cm): 76.8</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Length(in): 25\nWidth (in): 15\nLength(cm): 53.5\nWidth (cm): 35.3</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1419472,"option":"1","correct":true},{"id":1419473,"option":"2","correct":false},{"id":1419474,"option":"3","correct":false},{"id":1419475,"option":"4","correct":false}]},{"q":"<p>What will be the output of the C# code snippet given below?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\ninterface IDumpable\n{\n    string Name \n    { \n        get; \n        set; \n        \n    }\n    void Dump();\n}\n \nclass Student : IDumpable\n{\n    string stud_name;\n    public string stud_city;\n    public int stud_roll_no;\n    public Student(string stud_name, string stud_city, int stud_roll_no)\n    {\n        this.stud_name = stud_name; \n        this.stud_city = stud_city; \n        this.stud_roll_no = stud_roll_no;\n        \n    }\n    public string Name\n    {\n        get \n        { \n            return stud_name; \n            \n        }\n        set \n        { \n            stud_name = value; \n            \n        }\n        \n    }\n    public void Dump()\n    {\n        Console.WriteLine(\"Student Details : {0}, {1}, {2}\", stud_name, stud_city, stud_roll_no);\n        \n    }\n    \n}\n \nclass Student_Test\n{\n    static void Main(string[] arg)\n    {\n        IDumpable[] test = \n        {\n            new Student(\"John\", \"Boston\", 995566777),\n            new Student(\"Mary\", \"Seattle\", 998979899),\n            new Student(\"Bob\", \"Chicago\", 994469549)\n            \n        };\n        foreach (IDumpable h in test)\n        {\n            Console.Write(h.Name + \": \");\n            h.Dump();\n            \n        }\n        \n    }\n    \n}</code></pre>\n\n<p> </p>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>John: Student Details : John, Boston, 995566777\nMary: Student Details : Mary, Seattle, 998979899\nBob: Student Details : Bob, Chicago, 994469549\n</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>John\nMary\nBob\n</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Student Details : John, Boston, 995566777\nStudent Details : Mary, Seattle, 998979899\nStudent Details : Bob, Chicago, 994469549\n</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Student Details : John, Boston, 995566777\nMary, Seattle, 998979899\nBob, Chicago, 994469549\n</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1419597,"option":"1","correct":true},{"id":1419598,"option":"2","correct":false},{"id":1419599,"option":"3","correct":false},{"id":1419600,"option":"4","correct":false}]},{"q":"<p>In Java, which of these keywords will you use to create a class that represents a concept rather than objects?</p>\n\n<p> </p>","a":[{"id":673331,"option":"static ","correct":false},{"id":673332,"option":"final","correct":false},{"id":673333,"option":"abstract","correct":true},{"id":673334,"option":"None of these","correct":false}]},{"q":"<p>What will be the output of the following Java code?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>class Hackerearth\n{  \n    public static void main(String []args)\n    {  \n        hack2 h= new hack2();  \n        h.hack_method();  \n        h.hack_method2();  \n        \n    }  \n}  \nabstract class hack1\n{  \n    hack1()\n    {\n        System.out.println(\"hello\");\n        \n    }  \n   abstract void hack_method();  \n   \n   void hack_method2()\n   {\n       System.out.println(\"hi\");\n       \n   }  \n}   \nclass hack2 extends hack1\n{  \n    void hack_method()\n    {\n        System.out.println(\"hackerearth\");\n        \n    }  \n}  </code></pre>\n\n<p><br>\n<br>\n<strong>Output:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hello\nhackerearth\nhi\n</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hello\nhi\nhackerearth\n</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hackerearth\nhello\nhi\n</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":663036,"option":"3","correct":false},{"id":663037,"option":"1","correct":true},{"id":663038,"option":"2","correct":false},{"id":663039,"option":"The code gives a runtime error","correct":false}]},{"q":"<p>Which of the following statements about <strong>abstract classes </strong>in Java are true:</p>\n\n<ol>\n\t<li>An abstract class can contain only abstract methods.</li>\n\t<li>An abstract method cannot be declared static.</li>\n\t<li>An abstract method in a class can override an abstract method in its superclass without providing an implementation.</li>\n\t<li>You can declare a class as abstract even though it does not have any abstract methods.</li>\n</ol>","a":[{"id":673335,"option":"1, 3, and 4","correct":false},{"id":673336,"option":"1, 2, and 4","correct":false},{"id":673337,"option":"2, 3, and 4","correct":true},{"id":673338,"option":"1, 2, and 3","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include&lt;iostream&gt; \nusing namespace std; \n\nclass Base \n{ \n    int x; \n    public: \n        virtual void fun() = 0; \n        int getX() \n        { \n            return x; \n        } \n}; \n\nclass Derived: public Base \n{ \n\tint y; \n    public: \n\tvoid fun() \n    { \n        cout &lt;&lt; \"Hello HackerEarth!\"; \n    } \n}; \nint main(void) \n{ \n\tDerived d; \n\td.fun(); \n\treturn 0; \n} \n</code></pre>\n\n<p> </p>","a":[{"id":133314,"option":"Hello HackerEarth!","correct":true},{"id":133315,"option":"Prints nothing as an output","correct":false},{"id":133316,"option":"Compilation error","correct":false},{"id":133317,"option":"Runtime error","correct":false}]}]
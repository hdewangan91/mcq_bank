[{"q":"<p>Bob is writing code for software in which he wants to compose several objects which means&nbsp;one object wants to use features offered by another object. Which of these design patterns is best suited for this purpose?</p>","a":[{"id":1418727,"option":"Creational","correct":false},{"id":1418728,"option":"Structural","correct":true},{"id":1418729,"option":"Behavioural","correct":false},{"id":1418730,"option":"None of these","correct":false}]},{"q":"<p>Bob is planning to design a system for various possible shapes and he has implemented the following code to create objects for two shapes (circle and triangle) based on the input received from the user.</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>CLASS Shape\n  PUBLIC FUNCTION show()\n  RETURN\nENDCLASS\n\nCLASS Circle INHERITS Shape\n    PUBLIC FUNCTION show()\n\t\tPRINT \"circle\"\n\tRETURN\nENDCLASS\n\nCLASS Triangle INHERITS Shape\n    PUBLIC FUNCTION show() {\n\t\tPRINT \"triangle\";\n\tRETURN\nENDCLASS</code></pre>\n\n<p>Now, he wants to include more shapes in his design and for each new shape he is required to implement a new class and recompile his code which is a bad practice in software design, then which of the following idea can he use incorporate in his design to&nbsp;use the same common interface to create multiple new objects?</p>","a":[{"id":1939571,"option":"Creating a static method to create different shape objects.","correct":false},{"id":1939572,"option":"Creating an abstract class with static member function to create the object.","correct":true},{"id":1939573,"option":"Creating a new class for each type of shape object.","correct":false},{"id":1939574,"option":"Creating a new class for each type of object inheriting a public parent class. ","correct":false}]},{"q":"<p>The same type of data is repeating and you need to use a pattern to point to a single object and save space. Which of these patterns would you use in the given context?</p>","a":[{"id":1418842,"option":"Factory","correct":false},{"id":1418843,"option":"Flyweight","correct":true},{"id":1418844,"option":"Prototype","correct":false},{"id":1418845,"option":"Abstract","correct":false}]},{"q":"<p>The code given alongside has been reduced to the below given code:</p>\n\n<pre class=\"prettyprint\"><code>{\n public static void Main(string[] args)\n {\n var mailManager = new MailManager();\n mailManager.From(\"alan@developer.com\");\n mailManager.To(\"jonsmith@developer.com\");\n mailManager.Subject(\"Code sample\");\n mailManager.Body(\"This is an the email body!\");\n mailManager.Send();\n }\n}</code></pre>\n\n<p> </p>\n\n<pre class=\"prettyprint\"><code>public static void Main(string[] args)\n{\n new MailManager()\n .From(\"alan@developer.com\")\n .To(\"jonsmith@developer.com\")\n .Subject(\"Code sample\")\n .Body(\"This is an the email body!\")\n .Send();\n}\n</code></pre>\n\n<p><br>\nWhich type of design pattern was used to do so?</p>","a":[{"id":1418817,"option":"Mediator","correct":false},{"id":1418818,"option":"Composite","correct":false},{"id":1418819,"option":"Cascade","correct":true},{"id":1418820,"option":"Cascade-Lambda","correct":false}]},{"q":"<p>In Java, which of the following statements about a <strong>singleton </strong>application is correct?</p>","a":[{"id":613789,"option":"It has a design solution where an application has only one instance of a class in all the possible scenarios without any exceptional conditions.","correct":true},{"id":613790,"option":"It has a design solution where an application has one or more instances of any class in all the possible scenarios without any exceptional conditions.","correct":false},{"id":613791,"option":"Both of these","correct":false},{"id":613792,"option":"None of these","correct":false}]}]
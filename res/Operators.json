[{"q":"<p>You have been asked to write a code on logical operators that compare two integers. You want your input to execute the statement \"THIS: Condition is true\" for any input. You realized that this code doesn't execute that particular statement. How will you edit the code?</p>\n\n<pre class=\"prettyprint\"><code>#import &lt;Foundation/Foundation.h&gt;\nint main() {\nint a = 0; \nint b = 10; \nif ( a &amp;&amp; b ) \n{ \n  NSLog(@\"THIS:Condition is true\\n\" ); \n} \nelse \n{ \n  NSLog(@\"Condition is not true\\n\" ); \n} \nif ( !(a &amp;&amp; b) ) \n{ \n  NSLog(@\" Condition is true\\n\" ); \n} \n}</code></pre>","a":[{"id":1769732,"option":"By initializing a ≠ 0 and keeping b value unchanged.","correct":true},{"id":1769733,"option":"By initializing a <0 and keeping b value unchanged.","correct":false},{"id":1769734,"option":"By initializing a > 0 and keeping b value unchanged.","correct":false},{"id":1769735,"option":"By initializing a ≠ 0 and and b=0.","correct":false}]},{"q":"<p>You have been asked to write an Objective C code to check whether a given number is a prime or not. An optimum solution is to iterate through all numbers from 2 to and for every number check if it divides d. If we get any number that divides, we return false. Mention the different types of operators that you have to use in your code.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#import\nint main(int argc, const char * argv[])\n{\n  @autoreleasepool\n  {\n   int p, d;\n   BOOL isPrime;\n   for (p = 2; p &lt;= 50; p++)\n   {\n    isPrime = true;\n    for (d = 2; d &lt; p; d++)\n    {\n     if (p % d == 0)\n     isPrime = false;\n    }\n    if (isPrime == true)\n    NSLog(@\"%i\", p);\n    }\n   return 0;\n}</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p>1.&nbsp;Arithmetic Operator<br>\n&nbsp; &nbsp; Relational Operator<br>\n&nbsp; &nbsp; Logical Operator</p>\n\n<p>2.&nbsp;Arithmetic Operator<br>\n&nbsp; &nbsp; Relational Operator<br>\n&nbsp; &nbsp; Assignment Operator</p>\n\n<p>3.&nbsp;Arithmetic Operator<br>\n&nbsp; &nbsp; Relational Operator<br>\n&nbsp; &nbsp; Bitwise Operator</p>\n\n<p>4.&nbsp;Arithmetic Operator<br>\n&nbsp; &nbsp; Bitwise Operator<br>\n&nbsp; &nbsp; Logical Operator</p>","a":[{"id":1769724,"option":"1","correct":false},{"id":1769725,"option":"2","correct":true},{"id":1769726,"option":"3","correct":false},{"id":1769727,"option":"4","correct":false}]},{"q":"<p>What is the output to the following code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#import\n#include\n#include\nstd::iostream &amp;operator&lt;&lt;(std::ostream &amp;os, NSString *s) \n{\n os &lt;&lt; [s UTF8String];\n return os;\n}\nint main(int argc, const char * argv[])\n{\n @autoreleasepool \n{\n  int a = 20;\n  int b = 10;\n  int c = 15;\n  int d = 5;\n  int e;\n  e = (a + b) * c / d;\n  NSLog(@\"The value of e is %d\");\n}\n  return 0;\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1769712,"option":"The value of e is 90","correct":true},{"id":1769713,"option":"The value of e is 35","correct":false},{"id":1769714,"option":"The value of e is 40","correct":false},{"id":1769715,"option":"The value of 65","correct":false}]},{"q":"<p>Alice has written a code for checking a string is equal to the string that is reverse of the own string. The initial program is returning an error. Correct the given code to get suitable output.</p>\n\n<pre class=\"prettyprint\"><code>fun main(){\n  var x=100\n  var y=x.and(17)\n  var z=x.ushr(6)\n  println(z.inv())\n  println(z.and(y))\n}</code></pre>\n\n<p>As the code is giving the wrong output, which of the following options is the correct code?</p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1</strong></p>\n\n<pre class=\"prettyprint\"><code>fun main(){\n   val str1=\"noon\"\n   val str2=\"\"\n   var temp:Int=str1.length-1\n   while(temp!=-1){\n     str2+=str1[temp--]\n   }\n   if(str1!=str2){\n     print(\"No\")\n   }\n   else{\n     print(\"Yes\")\n   }\n}</code></pre>\n\n<p><strong>2</strong></p>\n\n<pre class=\"prettyprint\"><code>fun main(){\n   val str1=\"noon\"\n   var str2=\"\"\n   var temp:Int=0\n   while(temp!=1){\n     str2+=str1[temp--]\n   }\n   if(str1!=str2){\n     print(\"Yes\")\n   }\n   else{\n     print(\"No\")\n   }\n}</code></pre>\n\n<p><strong>3</strong></p>\n\n<pre class=\"prettyprint\"><code>fun main(){\n   val str1=\"noon\"\n   var str2=\"\"\n   var temp:Int=str1.length-1\n   while(temp!=-1){\n     str2+=str1[temp--]\n   }\n   if(str1==str2){\n     print(\"Yes\")\n   }\n   else{\n     print(\"No\")\n   }\n}</code></pre>\n\n<p><strong>4</strong></p>\n\n<pre class=\"prettyprint\"><code>fun main(){\n   val str1=\"noon\"\n   var str2=\"\"\n   var temp:Int=0\n   while(temp!=1){\n     str2+=str1[temp++]\n   }\n   if(str1==str2){\n     print(\"Yes\")\n   }\n   else{\n     print(\"No\")\n   }\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1764905,"option":"1","correct":false},{"id":1764906,"option":"2","correct":false},{"id":1764907,"option":"3","correct":true},{"id":1764908,"option":"4","correct":false}]},{"q":"<p>What is the output of the given code snippet:</p>\n\n<p><strong>Code snippet</strong></p>\n\n<pre class=\"prettyprint\"><code>fun main(){\n  var x=100\n  var y=x.and(17)\n  var z=x.ushr(6)\n  println(z.inv())\n  println(z.and(y))\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1764901,"option":"-1\r\n0","correct":false},{"id":1764902,"option":"-2\r\n0","correct":true},{"id":1764903,"option":"-3\r\n10","correct":false},{"id":1764904,"option":"-2\r\n10","correct":false}]},{"q":"<p>Alice has written a code for adding two numbers. One has string datatype and the other has int datatype. It should give the output as 30 but instead got concatenation \"1020\" as output.</p>\n\n<pre class=\"prettyprint\"><code>fun main(){\n   val x:String=\"10\"\n   val y:Int = 20\n   val z=x+y\n   print(z)\n}</code></pre>\n\n<p>As the code is giving the wrong output, which of the following option is the correct code?</p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1</strong></p>\n\n<pre class=\"prettyprint\"><code>fun main(){\n   val x:String=\"10\"\n   val y:Int = 20\n   val z=x.toInt()+y\n   print(z)\n}</code></pre>\n\n<p><strong>2</strong></p>\n\n<pre class=\"prettyprint\"><code>fun main(){\n   val x:String=\"10\"\n   val y:Int = 20\n   val z=x+y.toString()\n   print(z)\n}</code></pre>\n\n<p><strong>3</strong></p>\n\n<pre class=\"prettyprint\"><code>fun main(){\n   val x:String=\"10\"\n   val y:Int = 20\n   val z=toInt(x)+y\n   print(z)\n}</code></pre>\n\n<p><strong>4</strong></p>\n\n<pre class=\"prettyprint\"><code>fun main(){\n   val x:String=\"10\"\n   val y:Int = 20\n   val z=x+toString(y)\n   print(z)\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1764893,"option":"1","correct":true},{"id":1764894,"option":"2","correct":false},{"id":1764895,"option":"3","correct":false},{"id":1764896,"option":"4","correct":false}]},{"q":"<p>What is the output of the following Kotlin code snippet:</p>\n\n<pre class=\"prettyprint\"><code>fun main(args: Array&lt;String&gt;){\n     val x: Int = 20\n     val y: Int = 15\n     var z=x.and(y)\n     z=z.shr(2)\n     println(z)\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1747206,"option":"Error: z value cannot be reassigned","correct":false},{"id":1747207,"option":"4","correct":false},{"id":1747208,"option":"1","correct":true},{"id":1747209,"option":"16","correct":false}]},{"q":"<p>You were given a code snippet in Kotlin. In that, the variable 'a' is assigned a value, and the addition arithmetic operator is used to change the 'a' value. You have written the following code:</p>\n\n<pre class=\"prettyprint\"><code>fun main(){\n  var a=5\n  a == 10\n  println(a)\n}</code></pre>\n\n<p>The above code is giving an error. which of the following options is the correct code?</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>fun main(){\n  var a=5\n  a == 10\n  println(a)\n}</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>fun main(){\n  var a=5\n  a += 10\n  println(a)\n}</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>fun main(){\n  var a=5\n  a ++ 10\n  println(a)\n}</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>fun main(){\n  var a=5\n  a =++ 10\n  println(a)\n}</code></pre>\n\t</li>\n</ol>\n\n<p>&nbsp;</p>","a":[{"id":1747202,"option":"1","correct":false},{"id":1747203,"option":"2","correct":true},{"id":1747204,"option":"3","correct":false},{"id":1747205,"option":"4","correct":false}]},{"q":"<p>What is the output of the following code?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>var a = 5.0\nvar b = 3.0\na /= b\nprint(a)</code></pre>\n\n<p> </p>","a":[{"id":1656669,"option":"2","correct":false},{"id":1656670,"option":"Syntax Error","correct":false},{"id":1656671,"option":"1.7","correct":false},{"id":1656672,"option":"1.666","correct":true}]},{"q":"<p>What is the output of the following Swift code?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>var a=5;\nvar b=10;\nvar c=8;\nvar value=0;\nif (a &gt; b &amp;&amp; a &gt; c) {\n    value=a;\n}\nelse if (b &gt; a &amp;&amp; b &gt; c) {\n    value=b;\n}\nelse if (c &gt; a &amp;&amp; c &gt; b) {\n    value=c;\n}\nelse {\n    value=a;\n}\nprint(value);</code></pre>\n\n<p> </p>","a":[{"id":1656633,"option":"0","correct":true},{"id":1656634,"option":"10","correct":false},{"id":1656635,"option":"8","correct":false},{"id":1656636,"option":"5","correct":false}]},{"q":"<p>When the following code is implemented, what is the value of the variable result?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>import Foundation\nvar n0 = 2\nvar n1 = 3\nn1 = n1&lt;&lt;2\nvar result = Int()\nresult = n0&lt;&lt;n1</code></pre>\n\n<p> </p>","a":[{"id":1656489,"option":"8","correct":false},{"id":1656490,"option":"48","correct":false},{"id":1656491,"option":"512","correct":false},{"id":1656492,"option":"8192","correct":true}]},{"q":"<p>You have a collection 'property' in a database 'finances' as given below.<br>\n<strong>Collection:</strong> property<br>\n{ \"_id\" : 101, \"person\" : \"Lisa\", \"salary\" : 10000, \"expenditure\" : 15000, \"property\" : [ \"house\" ] }<br>\n{ \"_id\" : 102, \"person\" : \"Tom\", \"salary\" : 20000, \"expenditure\" : 18000, \"property\" : [ \"house\", \"car\" ] }<br>\n{ \"_id\" : 103, \"person\" : \"Shital\", \"salary\" : 25000, \"expenditure\" : 19000, \"property\" : [ \"house\", \"land\", \"car\" ] }<br>\n{ \"_id\" : 104, \"person\" : \"Kristen\", \"salary\" : 17000, \"expenditure\" : 20000, \"property\" : [ \"house\", \"land\" ] }<br>\n{ \"_id\" : 105, \"person\" : \"Mike\", \"salary\" : 12000, \"expenditure\" : 9000, \"property\" : [ \"car\" ] }</p>\n\n<p>You need to perform the following operations on a database:<br>\n1. Return all the documents in a such way that only the last element should be present in the 'property' array.<br>\n2. Find the people who don't own a house and the land.<br>\n3. Create an index on the field 'person'.<br>\n4. Find the document containing the name of a person as 'Shital'.</p>\n\n<p>Which of the following options will perform the above operations?</p>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>&gt; db.property.find( { property: { $nin: [ 1, 2 ] } } )\n&gt; db.property.find( { property: { $nq: [\"house\",\"land\"] } } )\n&gt; db.property.createIndex( { _id: person } )\n&gt; db.property.find( { $elmMatch: \"Shital\" } )</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>&gt; db.property.find( {}, { property: { $: [\"car\"] } } )\n&gt; db.property.find( { property: { $not: [\"house\",\"land\"] } } )\n&gt; db.property.createIndex( { person: 1 } )\n&gt; db.property.find( { $text: \"Shital\" } )</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>&gt; db.property.find( {}, { property: { $slice: [ 3 ] } } )\n&gt; db.property.find( { property: { $nq: [\"house\",\"land\"] } } )\n&gt; db.property.createIndex( { person: 1 } )\n&gt; db.property.find( { $text: { person: \"Shital\" } } )</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>&gt; db.property.find( {}, { property: { $slice: [ 1, 2 ] } } )\n&gt; db.property.find( { property: { $nin: [\"house\",\"land\"] } } )\n&gt; db.property.createIndex( { person: \"text\" } )\n&gt; db.property.find( { $text: { $search: \"Shital\" } } )</code></pre>\n\n<p> </p>","a":[{"id":1652541,"option":"1","correct":false},{"id":1652542,"option":"2","correct":false},{"id":1652543,"option":"3","correct":false},{"id":1652544,"option":"4","correct":true}]},{"q":"<p>You have a collection 'people' in a database 'finance' as given below.<br>\n<strong>Collection:</strong> people<br>\n{ \"_id\" : 101, \"person\" : \"Lisa\", \"salary\" : 10000, \"expenditure\" : 15000 }<br>\n{ \"_id\" : 102, \"person\" : \"Tom\", \"salary\" : 20000, \"expenditure\" : 18000 }<br>\n{ \"_id\" : 103, \"person\" : \"Shital\", \"salary\" : 25000, \"expenditure\" : 19000 }<br>\n{ \"_id\" : 104, \"person\" : \"Kristen\", \"salary\" : 17000, \"expenditure\" : 20000 }<br>\n{ \"_id\" : 105, \"person\" : \"Mike\", \"salary\" : 12000, \"expenditure\" : 9000 }</p>\n\n<p>You need to find the documents for the persons whose expenditure is more than their monthly salary. Choose the correct set of commands that will find the required results.</p>","a":[{"id":1652537,"option":"db.people.find( { $where: {$expenditure> $salary } } )","correct":false},{"id":1652538,"option":"db.people.find({$expr: {$gt: [\"$expenditure\",\"$salary\" ]}})","correct":true},{"id":1652539,"option":"db.people.find( { $expr: { $gt: [ \"$salary\" , \"$expenditure\" ] } } )","correct":false},{"id":1652540,"option":"db.people.find( { $gt: {\"$expenditure\",\"$salary\" } } )","correct":false}]},{"q":"<p>You have a collection 'employees' in a database 'company' as given below. <br>\n<strong>Collection</strong>: employees<br>\n{ \"_id\" : ObjectId(\"60d1bdd023275c561c3d8e7f\"), \"emp_id\" : 3209, \"emp_name\" : \"Lisa Davis\", \"salary\" : 50000 }<br>\n{ \"_id\" : ObjectId(\"60d1bdd023275c561c3d8e80\"), \"emp_id\" : 9012, \"emp_name\" : \"Tom Cook\", \"salary\" : 20000 }<br>\n{ \"_id\" : ObjectId(\"60d1bdd023275c561c3d8e81\"), \"emp_id\" : 1035, \"emp_name\" : \"Shital Aggarwal\", \"salary\" : 60000 }<br>\n{ \"_id\" : ObjectId(\"60d1bdd023275c561c3d8e82\"), \"emp_id\" : 5642, \"emp_name\" : \"Kristen Stokes\", \"salary\" : 17000 }<br>\n{ \"_id\" : ObjectId(\"60d1bdd023275c561c3d8e83\"), \"emp_id\" : 2465, \"emp_name\" : \"Mike Johnson\", \"salary\" : 40000 }<br>\nYou need to perform the given operation on the database. Find the 'emp_type' for every employee based on the following condition. If the salary of an employee is greater than or equal to 40000, then display 'emp_type' as 'full-time'. Otherwise, display it as 'part_time'. Return the fields 'emp_id' and 'emp_type' for all documents as the result set.<br>\nHow will you write a query to get the required results using the above condition?</p>\n\n<p><strong>Query</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>db.employees.find([ \n{ $aggregate: { $addField: { emp_id,  emp_type: { $if: { $salary:{ $gte:[ 40000 ]} ,\n\"fulltime\"}, else: \"part-time\" } } } }\n])</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>db.employees.addField([\n{ $aggregate:{ emp_id,\n emp_type:{ $cond: { $if: { $gte: [\"salary\", 40000 ] }, $then: \"full-time\", $else:\"part-time\" } } }}\n])</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>db.employees.aggregate([\n{ $project: {emp_id: 1, emp_type:{$cond:{ if:{$gte:[ \"$salary\", 40000]}, then:\"full-time\", else: \"part-time\" }}} }\n])</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>db.employees.find([\n{ $select: {emp_id: 1, emp_type:{ $cond:{{if:{ $gte:[ \"$salary\", 40000 ], true[\"full-time\"] }, else: \"part-time\"} } } }\n])</code></pre>\n\n<p> </p>","a":[{"id":1653097,"option":"1","correct":false},{"id":1653098,"option":"2","correct":false},{"id":1653099,"option":"3","correct":true},{"id":1653100,"option":"4","correct":false}]},{"q":"<p>In C, you are working with assignment operators.</p>\n\n<p>You are given two variables <em>a</em> and <em>b</em>. If you are required to perform various operations using these assignment operators, then which of the following statements about these operations are correct:</p>\n\n<ol>\n\t<li><em>a + = b</em> can also be written as <em>a + 1 = b</em></li>\n\t<li><em>a - = b</em> can also be written as <em>a = a - b</em></li>\n\t<li><em>a * = b</em> can also be written as <em>a *1 = b</em></li>\n\t<li><em>a / = b </em>can also be written as <em>a = a / b</em></li>\n</ol>","a":[{"id":1400540,"option":"1 and 3","correct":false},{"id":1400541,"option":"2 and 4","correct":true},{"id":1400542,"option":"All of these","correct":false},{"id":1400543,"option":"None of these","correct":false}]}]
[{"q":"<p>In an operating system, which of the following can be considered as a <em>logical resource</em>?</p>","a":[{"id":721065,"option":"Printers","correct":false},{"id":721066,"option":"Memory space","correct":false},{"id":721067,"option":"Semaphores","correct":true},{"id":721068,"option":"Tape drivers","correct":false}]},{"q":"<p>Ben is working with the Windows Forms application, and he received the following&nbsp;error while modifying the Auto Scaling logic with the&nbsp;UserPreferenceChanged event. Which of the following is the valid reason for the occurrence of this error?</p>\n\n<p><strong>Error:</strong></p>\n\n<pre class=\"prettyprint\"><code>ExternalException</code></pre>","a":[{"id":916692,"option":"System event notifications are not supported under the current context.","correct":false},{"id":916693,"option":"The attempt to create a system events window thread did not succeed.","correct":true},{"id":916694,"option":"The global system event notifications property is not set.","correct":false},{"id":916695,"option":"The settings provider is not configured properly.","correct":false}]},{"q":"<p>There is a sum of <em>T = 100</em> shares to be split between three processes, A, B, and C. A is allocated 50 shares, B is allocated 15 shares, and C is allocated 20 shares. In the event that another cycle D requested 30 shares, what would the confirmation regulator do?</p>","a":[{"id":1728689,"option":"Allot 30 shares to it ","correct":false},{"id":1728690,"option":"Deny section to D in the framework ","correct":true},{"id":1728691,"option":"All of the referenced ","correct":false},{"id":1728692,"option":"None of the referenced","correct":false}]},{"q":"<p>Bob while working on a project on the operating system, came across a file access strategy. From the&nbsp;accompanying options which clarify the consecutive file access strategy:</p>\n\n<ol>\n\t<li>Arbitrary access as per the given byte number&nbsp;</li>\n\t<li>Read bytes each in turn, in order</li>\n\t<li>Read/write consecutively by record</li>\n\t<li>Read/write randomly by record</li>\n</ol>","a":[{"id":1728170,"option":"1","correct":false},{"id":1728171,"option":"2","correct":false},{"id":1728172,"option":"3","correct":false},{"id":1728173,"option":"4","correct":true}]},{"q":"<p>While working on a project of Operating system, Bob had to backup a certain file in the file system. Now, he wants to access that file but is not sure about the extension used. Which of the below given filename&nbsp;extension suggests that the file is a backup copy of another file?</p>","a":[{"id":1728166,"option":"TXT","correct":false},{"id":1728167,"option":"BAS","correct":false},{"id":1728168,"option":"COM","correct":false},{"id":1728169,"option":"BAK","correct":true}]},{"q":"<p>Bob while working on a project on an operating system, which among the following is included in mount operation?</p>\n\n<ol>\n\t<li>Name of the network</li>\n\t<li>Name of the remote directory to be mounted</li>\n\t<li>Name of the server machine mounting it</li>\n\t<li>All of these</li>\n</ol>","a":[{"id":1728162,"option":"1","correct":false},{"id":1728163,"option":"2","correct":true},{"id":1728164,"option":"3","correct":false},{"id":1728165,"option":"4","correct":false}]},{"q":"<p>While working on a project on an Operating system, you came across a consistency checker. What does a consistency checker do other than attempting to fix any irregularities it finds:</p>\n\n<ol>\n\t<li>Compares the data in the secondary storage with the data in the cache</li>\n\t<li>Compares the data in the index structure with the data blocks on disk</li>\n\t<li>Compares the system created output and client required output</li>\n\t<li>All of the above</li>\n</ol>","a":[{"id":1728158,"option":"1","correct":false},{"id":1728159,"option":"2","correct":true},{"id":1728160,"option":"3","correct":false},{"id":1728161,"option":"4","correct":false}]},{"q":"<p>While working on a project of Operating system Bob came across the term mounting of the file system. From the options given below choose the best-suited explanation?</p>\n\n<ol>\n\t<li>Crafting of a file system</li>\n\t<li>Deleting&nbsp;of a file system</li>\n\t<li>Attaching portion of the file system into the directory structure</li>\n\t<li>Removing portion of the file system into the directory structure</li>\n</ol>","a":[{"id":1728154,"option":"1","correct":false},{"id":1728155,"option":"2","correct":false},{"id":1728156,"option":"3","correct":true},{"id":1728157,"option":"4","correct":false}]},{"q":"<p>An application loads 100 libraries at startup and stacking every library precisely one disk access is required. 10ms is the seek time of the disk to an arbitrary location and 6000rpm is the rotational speed of the disk. Disregard the time to move data from the disk block once the head has been situated at the beginning of the block. What will be the time taken by the application to stack all the libraries, if every one of the 100 libraries is stacked from a random location on the disk?</p>","a":[{"id":1728150,"option":"1.50s","correct":true},{"id":1728151,"option":"1.00s","correct":false},{"id":1728152,"option":"1.87s","correct":false},{"id":1728153,"option":"0.74s","correct":false}]},{"q":"<p>You are working on a project in the Operating system. In which method the file allocation table contains a separate one-level index for each file if the index has one entry for each portion allocated to the file?</p>","a":[{"id":1728142,"option":"Variable allocation","correct":false},{"id":1728143,"option":"Contiguous allocation","correct":false},{"id":1728144,"option":"Chained allocation","correct":false},{"id":1728145,"option":"Indexed allocation","correct":true}]},{"q":"<p>Which among&nbsp;the following are mostly used in applications where data are rarely processed exhaustively?</p>","a":[{"id":1728138,"option":"indexed file","correct":true},{"id":1728139,"option":"sequential file","correct":false},{"id":1728140,"option":"indexed sequential file","correct":false},{"id":1728141,"option":"pile","correct":false}]},{"q":"<p>What is the preallocation strategy using variable size portions where the file allocation table needs just a single entry for each file, showing the starting block and the length of the file?</p>","a":[{"id":1728134,"option":"Contiguous allocation","correct":true},{"id":1728135,"option":"Variable allocation","correct":false},{"id":1728136,"option":"Chained allocation","correct":false},{"id":1728137,"option":"Indexed allocation","correct":false}]},{"q":"<p>A CPU produces 32-bit virtual addresses. The page size is 4 KB. The processor has an interpretation look-aside buffer (TLB) which can hold an aggregate of 128-page table passages and is 4-way set affiliated. What is the base size of the TLB tag?</p>","a":[{"id":1727980,"option":"11 bits","correct":false},{"id":1727981,"option":"13 bits","correct":false},{"id":1727982,"option":"15 bits","correct":true},{"id":1727983,"option":"20 bits","correct":false}]},{"q":"<p>Bob while working on a project felt the need to increase the RAM of a computer. What are the reasons for the increment in performance?</p>\n\n<ol>\n\t<li>Virtual memory increases</li>\n\t<li>Larger RAMs are faster</li>\n\t<li>Fewer page faults occur</li>\n\t<li>Fewer segmentation faults occurs</li>\n</ol>\n\n<p>&nbsp;</p>","a":[{"id":1727992,"option":"1","correct":false},{"id":1727993,"option":"2","correct":false},{"id":1727994,"option":"3","correct":true},{"id":1727995,"option":"4","correct":false}]},{"q":"<p>While working on a project using an operating system Bob came across a situation that a multilevel page table is preferred in contrast to a single-level page table for making an interpretation of virtual address to a physical address. Which among the following options justify the given point?</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>It lessens the memory access time to read or write a memory area.&nbsp;</li>\n\t<li>It assists with decreasing the size of the page table expected to carry out the virtual address space of a process&nbsp;</li>\n\t<li>It is needed by the interpretation lookaside buffer.&nbsp;</li>\n\t<li>It assists with decreasing the number of page faults in page replacement algorithms.</li>\n</ol>","a":[{"id":1727996,"option":"1","correct":false},{"id":1727997,"option":"2","correct":true},{"id":1727998,"option":"3","correct":false},{"id":1727999,"option":"4","correct":false}]},{"q":"<p>Assume the time to service a page fault is on the normal 10 milliseconds, while a memory access takes 1 microsecond. Then, at that point, what is the normal memory access time at 99.99% hit ratio?</p>","a":[{"id":1728118,"option":"1.9999 milliseconds ","correct":false},{"id":1728119,"option":"1 millisecond ","correct":false},{"id":1728120,"option":"9.999 microseconds ","correct":false},{"id":1728121,"option":"1.9999 microseconds","correct":true}]},{"q":"<p>Bob was working on a project using an operating system when he came across memory management. The operating system uses various memory allocation mechanisms. Which among the following best describes the single memory allocation?</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>Relocation-register scheme is used to protect user processes from each other, and from changing operating-system code and data.</li>\n\t<li>Main memory is divided into a number of fixed-sized partitions where each partition should contain only one process</li>\n\t<li>In this, when a partition is free, a process is selected from the input queue and is loaded into the free partition</li>\n\t<li>When the process terminates, the partition becomes available for another process.</li>\n</ol>","a":[{"id":1728126,"option":"1","correct":true},{"id":1728127,"option":"2","correct":false},{"id":1728128,"option":"3","correct":false},{"id":1728129,"option":"4","correct":false}]},{"q":"<p>In Operating System, you are working on a project. Under OS memory management keeps track of each and every memory location. Which address will OS use while a compiler converts symbolic addresses into relative addresses?</p>","a":[{"id":1728130,"option":"Symbolic addresses","correct":false},{"id":1728131,"option":"Relative addresses","correct":false},{"id":1728132,"option":"Physical addresses","correct":true},{"id":1728133,"option":"Virtual addresses","correct":false}]},{"q":"<p>Utilizing producer consumer problem using Shared Memory Interprocess Communication using Bounded Buffer:&nbsp;</p>\n\n<ol>\n\t<li>There is a limit on the size of the buffer.&nbsp;</li>\n\t<li>There is fixed buffer size.&nbsp;</li>\n\t<li>The consumer should stand by if the buffer is empty, and the producer must pause if the buffer is full&nbsp;</li>\n\t<li>There is no practical limit on the size of the buffer. The consumer might need to hang tight for&nbsp;new items, but the producer can generally deliver new things.</li>\n</ol>","a":[{"id":1727908,"option":"1 and 2","correct":false},{"id":1727909,"option":"2 and 3","correct":true},{"id":1727910,"option":"3 and 4","correct":false},{"id":1727911,"option":"1 and 4","correct":false}]},{"q":"<p>Under direct communication, each process P and Q that needs to communicate must expressly name the beneficiary or sender of the communication. In this scheme, which of the following primitives are required:&nbsp;</p>\n\n<ol>\n\t<li>send(P, message)- Send a message to process P.&nbsp;</li>\n\t<li>receive(Q message)- Receive a message from process Q-&nbsp;</li>\n\t<li>receive(id, message)- Receive a message from any process&nbsp;</li>\n\t<li>send(id, message)- Send a message to any process</li>\n</ol>","a":[{"id":1727896,"option":"1 and 3 ","correct":false},{"id":1727897,"option":"2 and 4","correct":false},{"id":1727898,"option":"3 and 4","correct":false},{"id":1727899,"option":"1 and 2","correct":true}]},{"q":"<p>In the Operating system, under direct communication, deviation in addressing scheme is utilized. Select the correct option from the following:</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>send(P, message)- Send a message to process P.&nbsp;</li>\n\t<li>receive(Q message)- Receive a message from process Q.&nbsp;</li>\n\t<li>receive(id, message) - Receive a message from any process&nbsp;</li>\n\t<li>send(id, message) - Send a message to any process</li>\n</ol>","a":[{"id":1727892,"option":"1 and 3","correct":true},{"id":1727893,"option":"2 and 4","correct":false},{"id":1727894,"option":"3 and 4","correct":false},{"id":1727895,"option":"1 and 4","correct":false}]},{"q":"<p>While working on the Operating system you came across a process that is based on IPC mechanism which executes on different systems and can communicate with other processes using message-based communication. What is the process called?</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>Local Procedure Call</li>\n\t<li>Inter-Process Communication</li>\n\t<li>Remote Procedure Call</li>\n\t<li>Remote Machine Invocation</li>\n</ol>","a":[{"id":1727912,"option":"1","correct":false},{"id":1727913,"option":"2","correct":false},{"id":1727914,"option":"3","correct":true},{"id":1727915,"option":"4","correct":false}]},{"q":"<p>You are working on a project on an Operating system using IPC mechanisms. In Message-Passing Systems, a message-passing facility gives no less than two tasks. Which among the following options is correct?</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>send(message) and delete(message)&nbsp;</li>\n\t<li>delete(message) and receive(message)&nbsp;</li>\n\t<li>send (message) and receive(message)&nbsp;</li>\n\t<li>write(message) and delete(message)</li>\n</ol>","a":[{"id":1727900,"option":"1","correct":false},{"id":1727901,"option":"2","correct":false},{"id":1727902,"option":"3","correct":true},{"id":1727903,"option":"4","correct":false}]},{"q":"<p>While working on a project on an operating system you came across the concept of shared memory. In producer-consumer problems utilizing shared memory, select fitting proclamation from the given options:</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>We should have accessible a buffer of items that can be filled by the producer and exhausted by the consumer.&nbsp;</li>\n\t<li>The producer can consume through one item while the consumer is producing another thing&nbsp;</li>\n\t<li>No synchronization is needed between the producer and the consumer, so that the consumer doesn't attempt to consume a thing that has not yet been produced</li>\n\t<li>The buffer will live in a locale of memory that need not be shared by the producer and consumer processes</li>\n</ol>","a":[{"id":1727876,"option":"1","correct":true},{"id":1727877,"option":"2","correct":false},{"id":1727878,"option":"3","correct":false},{"id":1727879,"option":"4","correct":false}]},{"q":"<p>While working on a project on Operating systems you came across the concept of message passing. It gives a component to permit processes to communicate and to synchronize their activities. Which among the following options is correct?</p>","a":[{"id":1727888,"option":"by sharing the similar address space ","correct":false},{"id":1727889,"option":"without sharing the same address space","correct":true},{"id":1727890,"option":"by having a similar process number and Process Identifier ","correct":false},{"id":1727891,"option":"None of the above","correct":false}]},{"q":"<p>You are utilizing producer-consumer issues using Shared Memory Interprocess Communication using Unbounded Buffer. Which of the options is correct?&nbsp;</p>\n\n<ol>\n\t<li>There is a limit on the size of the buffer.&nbsp;</li>\n\t<li>Expect a fixed buffer size.&nbsp;</li>\n\t<li>The consumer should stand by if the buffer is empty, and the producer should wait if the buffer is full&nbsp;</li>\n\t<li>There is no practical limit on the size of the buffer. The consumer might need to sit tight for new items, however, the producer can generally create new things</li>\n</ol>","a":[{"id":1727880,"option":"1","correct":false},{"id":1727881,"option":"2","correct":false},{"id":1727882,"option":"3","correct":false},{"id":1727883,"option":"4","correct":true}]},{"q":"<p>You are working on a project on Networking. Which of the given options are two major models of interprocess communication:</p>\n\n<ol>\n\t<li>Shared memory</li>\n\t<li>Message passing</li>\n\t<li>Autonomous</li>\n\t<li>Cooperating</li>\n</ol>\n\n<p>&nbsp;</p>","a":[{"id":1727655,"option":"1, 2 ","correct":true},{"id":1727656,"option":"2, 3","correct":false},{"id":1727657,"option":"3, 4","correct":false},{"id":1727658,"option":"4, 1","correct":false}]},{"q":"<p>There are two processes P1 and P2, whose periods are 50 and 100 separately. P1 is assigned a higher priority than P2. The processing times are t1 = 20 for P1 and t2 = 35 for P2. Is it conceivable to plan these tasks so that each complies with its time constraint utilizing Rate monotonic scheduling?&nbsp;</p>","a":[{"id":1728581,"option":"indeed","correct":true},{"id":1728582,"option":"no","correct":false},{"id":1728583,"option":"perhaps","correct":false},{"id":1728584,"option":"none of the above","correct":false}]},{"q":"<p>If a set of processes cannot be scheduled by a rate monotonic scheduling algorithm, then which of the options are correct?</p>\n\n<ol>\n\t<li>They can be scheduled by EDF algorithm</li>\n\t<li>They cannot be scheduled by EDF algorithm</li>\n\t<li>They cannot be scheduled by any other algorithm</li>\n\t<li>None of the mentioned</li>\n</ol>","a":[{"id":1728393,"option":"1","correct":false},{"id":1728394,"option":"2","correct":false},{"id":1728395,"option":"3","correct":true},{"id":1728396,"option":"4","correct":false}]},{"q":"<p>In the Operating system, what rate monotonic scheduling assumes?</p>\n\n<ol>\n\t<li>The processing time of a periodic process is same for each CPU burst</li>\n\t<li>The processing time of a periodic process is different for each CPU burst</li>\n\t<li>Periods of all processes is the same</li>\n\t<li>None of these</li>\n</ol>\n\n<p>&nbsp;</p>","a":[{"id":1728385,"option":"1","correct":true},{"id":1728386,"option":"2","correct":false},{"id":1728387,"option":"3","correct":false},{"id":1728388,"option":"4","correct":false}]},{"q":"<p>In case there is an aggregate of T = 100 shares to be split between three processes, A, B, and C. A is assigned &nbsp;50 shares, B is appointed 15 shares, and C is relegated 20 shares. Determine the percent of the complete processor time of C?</p>","a":[{"id":1728381,"option":"20 ","correct":true},{"id":1728382,"option":"15","correct":false},{"id":1728383,"option":"50","correct":false},{"id":1728384,"option":"60","correct":false}]},{"q":"<p>A process <em>P1</em> has a time of 50 and a CPU burst of t1 = 25, P2 has a period of 80 and a CPU burst time of 35. Determine the complete CPU usage?</p>","a":[{"id":1728373,"option":"0.9 ","correct":false},{"id":1728374,"option":"0.74 ","correct":false},{"id":1728375,"option":"0.94","correct":true},{"id":1728376,"option":"0.8","correct":false}]},{"q":"<p>In priority scheduling, a priority number is associated with each process. The CPU is allocated to the process with the highest priority (smallest integer= highest priority). How can you resolve the problem of starvation of low-priority processes that may never execute?</p>","a":[{"id":1723237,"option":"Aging","correct":true},{"id":1723238,"option":"Semaphore","correct":false},{"id":1723239,"option":"Terminating the process","correct":false},{"id":1723240,"option":"Mutual Exclusion","correct":false}]},{"q":"<p>There are <em>10</em> unique processes running on a workstation. Inactive processes are sitting tight for an input event in the input queue. Occupied processes are planned with the Round-Robin time-sharing strategy. Which out of the accompanying quantum times is the best incentive for small response times, if the processes have a short runtime, for example under 10ms?</p>","a":[{"id":1723225,"option":"tQ = 15ms","correct":true},{"id":1723226,"option":"tQ = 45ms","correct":false},{"id":1723227,"option":"tQ = 30ms","correct":false},{"id":1723228,"option":"tQ = 20ms","correct":false}]},{"q":"<p>Mark while working with CPU scheduling algorithms in the operating system came across the term&nbsp;<em>Time Quantum</em><strong>.&nbsp;</strong>What is the other term for this scenario?</p>","a":[{"id":1723205,"option":"multilevel queue scheduling algorithm","correct":false},{"id":1723206,"option":"round-robin scheduling algorithm","correct":true},{"id":1723207,"option":"shortest job scheduling algorithm","correct":false},{"id":1723208,"option":"priority scheduling algorithm","correct":false}]},{"q":"<p>Bob while working on an operating system was using the concept of process synchronization. On which level can process synchronization&nbsp;be done?</p>","a":[{"id":1721719,"option":"hardware level","correct":false},{"id":1721720,"option":"software level","correct":false},{"id":1721721,"option":"both a and b","correct":true},{"id":1721722,"option":"none of the above","correct":false}]},{"q":"<p>In the Operating System, which one of the following is a synchronization tool?</p>","a":[{"id":1721715,"option":"thread","correct":false},{"id":1721716,"option":"pipe","correct":false},{"id":1721717,"option":"semaphore","correct":true},{"id":1721718,"option":"socket","correct":false}]},{"q":"<p>Bob is working on a high-priority task that is indirectly preempted by a medium priority task effectively inverting the relative priority of the two tasks. This is a certain scenario, what is it called?</p>\n\n<ol>\n\t<li>Priority inversion</li>\n\t<li>Priority removal</li>\n\t<li>Priority exchange</li>\n\t<li>Priority modification</li>\n</ol>","a":[{"id":1721499,"option":"1","correct":true},{"id":1721500,"option":"2","correct":false},{"id":1721501,"option":"3","correct":false},{"id":1721502,"option":"4","correct":false}]},{"q":"<p>There is a condition according to which infinite blocking may occur if we remove processes from the list associated with a semaphore in which order?</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>LIFO (Last In First Out)</li>\n\t<li>FIFO (First In First Out)</li>\n\t<li>LIFO and FIFO</li>\n\t<li>FILO (First In Last Out)</li>\n</ol>\n\n<p>&nbsp;</p>","a":[{"id":1717224,"option":"1","correct":true},{"id":1717225,"option":"2","correct":false},{"id":1717226,"option":"3","correct":false},{"id":1717227,"option":"4","correct":false}]},{"q":"<p>The following statements are given, what will be the most accurate statement regarding the mutex lock to prevent race conditions?</p>\n\n<ol>\n\t<li>A process must acquire the lock before entering a critical section</li>\n\t<li>A process need not require the lock before entering the critical section</li>\n\t<li>It releases the lock when enters the critical section</li>\n\t<li>A process must acquire&nbsp;the lock when it exits the critical section</li>\n</ol>\n\n<p>&nbsp;</p>","a":[{"id":1717220,"option":"1 and 3","correct":true},{"id":1717221,"option":"2 and 4","correct":false},{"id":1717222,"option":"3 and 4","correct":false},{"id":1717223,"option":"1 and 4","correct":false}]},{"q":"<p>Which of the following statements are required to provide support for the mutual exclusion?</p>\n\n<ol>\n\t<li>A process that halts in its noncritical section must do so without interfering with other processes.</li>\n\t<li>The assumption should be made about relative process speeds or the number of processors.</li>\n\t<li>A process remains inside its critical section for a finite time only</li>\n</ol>","a":[{"id":1713566,"option":"Only 1 and 2","correct":false},{"id":1713567,"option":"Only 2 and 3","correct":true},{"id":1713568,"option":"Only 1 and 3","correct":false},{"id":1713569,"option":"All 1, 2 and 3","correct":false}]},{"q":"<p>While working on a project there comes a situation that&nbsp;the parent process&nbsp;keeps executing, even after the child process has completed execution.What is the child process known as in this scenario?</p>","a":[{"id":1711289,"option":"Zombie process","correct":true},{"id":1711290,"option":"Orphan process","correct":false},{"id":1711291,"option":"Dead process","correct":false},{"id":1711292,"option":"Body process","correct":false}]},{"q":"<p>If a process is executing in its critical section, then no other processes can be executed in its critical section. What is such a condition called?</p>","a":[{"id":1711277,"option":"Mutual Exclusion","correct":true},{"id":1711278,"option":"Critical Exclusion","correct":false},{"id":1711279,"option":"Synchronous Exclusion","correct":false},{"id":1711280,"option":"Asynchronous Exclusion","correct":false}]},{"q":"<p>You are working on a project that involves operating system using process synchronization. While working on OS some processes get affected by another process in the system. What is the name of such a process?</p>","a":[{"id":1711273,"option":"Cooperating process","correct":true},{"id":1711274,"option":"Child process","correct":false},{"id":1711275,"option":"Patent process","correct":false},{"id":1711276,"option":"Init process","correct":false}]},{"q":"<p>Hackerearth group is working on a project of Operating System. While working on it they came across a situation that several processes access and manipulate the same data concurrently and the outcome of the execution depends on the particular order in which the access takes place. What is the name of the condition they have come across?</p>\n\n<p> </p>","a":[{"id":1711269,"option":"Shared Memory Segments","correct":false},{"id":1711270,"option":"Entry Section","correct":false},{"id":1711271,"option":"Race Condition","correct":true},{"id":1711272,"option":"Process Synchronization","correct":false}]}]
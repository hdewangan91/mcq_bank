[{"q":"<p>What is the output of the following C++ Code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\n\nclass HackClass1 \n{\n  public:\n    void hackfunc() \n    {\n      cout &lt;&lt; \"I love C++\" ;\n    }\n};\n\n\nclass HackClass2 : public HackClass1 \n{\n  public:\n    void hackfunc() \n    {\n      cout &lt;&lt; \"Hello World!\" ;\n    }\n};\n\nclass HackClass3 : public HackClass1 \n{\n  public:\n    void hackfunc() \n    {\n      cout &lt;&lt; \"Hi HackerEarth!\" ;\n    }\n};\n\nint main() \n{\n  HackClass3 myHackObj;\n  myHackObj.hackfunc();\n  return 0;\n}</code></pre>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>I love C++</code></pre>\n\n\t<p>&nbsp;</p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hello World!</code></pre>\n\n\t<p>&nbsp;</p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hi HackerEarth!</code></pre>\n\n\t<p>&nbsp;</p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>I love C++\nHello World!\nHi HackerEarth!</code></pre>\n\t</li>\n</ol>","a":[{"id":1758561,"option":"1","correct":false},{"id":1758562,"option":"2","correct":false},{"id":1758563,"option":"3","correct":true},{"id":1758564,"option":"4","correct":false}]},{"q":"<p>Predict the output of the code snippet given alongside.</p>\n\n<pre class=\"prettyprint\"><code>class Class1 {\n public static void show() {\n System.out.println(\"In Class1::show()\");\n }\n}\n \nclass Class2 extends Class1 {\n public static void show() {\n System.out.println(\"In Class2::show()\");\n }\n}\n \nclass Main {\n public static void main(String[] args) {\n Class1 b = new Class2();\n b.show();\n }\n}</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<p>In Class1::show()</p>\n\n<p><strong>2.</strong></p>\n\n<p>In Class2::show()</p>\n\n<p><strong>3.</strong></p>\n\n<p>Runtime error</p>\n\n<p><strong>4.</strong></p>\n\n<p>Compile error</p>","a":[{"id":1656001,"option":"1","correct":true},{"id":1656002,"option":"2","correct":false},{"id":1656003,"option":"3","correct":false},{"id":1656004,"option":"4","correct":false}]},{"q":"What output will be produced once you execute the code snippet given alongside?","a":[{"id":1655997,"option":"Students are good","correct":true},{"id":1655998,"option":"Teacher teaches student","correct":false},{"id":1655999,"option":"Compilation error at line 2","correct":false},{"id":1656000,"option":"Compilation error at line 5","correct":false}]},{"q":"<p>What is the output of the following C# code?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\nclass hack1\n\n{\n\tpublic void h()\n\t{\n\t\tConsole.WriteLine(\"hi\");\n\t}\n}\n\nclass hack2 : hack1\n{\n\t\n\tvirtual public void h()\n\t{\n\t\tConsole.WriteLine(\"hello\");\n\t}\n}\n\nclass Hack {\n\t\n\tpublic static void Main()\n\t{\n\t\t\n\t\thack1 h1 = new hack2();\n\t\t\n\t\th1.h();\n\t\t\n\t\th1 = new hack1();\n\t\t\n\t\th1.h();\n\t\t\n\t}\n}</code></pre>\n\n<p><br>\n </p>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hi\nhi</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hello\nhi</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hi\nhello</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hello\nhello\n</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1419657,"option":"4","correct":false},{"id":1419658,"option":"2","correct":false},{"id":1419659,"option":"3","correct":false},{"id":1419660,"option":"1","correct":true}]},{"q":"<p>If you have executed the C# code given below, then which of the following statements is correct?</p>\n\n<p><br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nclass Oven \n{ \n    public void DescribeOven() \n    { \n        Console.WriteLine(\"Used to bake cake and confectioneries\"); \n        ShowDetails(); \n    } \n    \n    public virtual void ShowDetails() \n    { \n        Console.WriteLine(\"Standard settings and temperature\"); \n        \n    } \n} \n \nclass MicrowaveOven : Oven \n{ \n    public new void ShowDetails() \n    { \n        Console.WriteLine(\"Used to reheat food\"); \n    } \n} \n \nclass OtgOven : Oven \n{ \n    public override void ShowDetails() \n    { \n        Console.WriteLine(\"Used to bake, toast and grill food\"); \n    } \n}\nclass Hack\n{\n    public static void Main()\n    {\n        OtgOven h=new OtgOven();\n        h.ShowDetails();\n    }\n}</code></pre>\n\n<p><br>\n<br>\n<strong>Statements:</strong></p>\n\n<ol>\n\t<li>The code prints the following-\n\t<pre class=\"prettyprint\"><code>Used to bake, toast and grill food</code></pre>\n\t</li>\n\t<li>The code gives a Compilation error<br>\n\t </li>\n\t<li>The code gives Runtime error</li>\n</ol>","a":[{"id":1419557,"option":"1","correct":true},{"id":1419558,"option":"2","correct":false},{"id":1419559,"option":"3","correct":false},{"id":1419560,"option":"None of these","correct":false}]},{"q":"<p>In C#, you are working on Polymorphism. What output will the code snippet given below produces when \"new\" is used in place of X?<br>\n<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nclass Hack_Base \n{ \n    public void hack1() \n    { \n        Console.WriteLine(\"Base - Method1\"); \n        \n    } \n} \nclass Hack_Derived : Hack_Base \n{ \n    public X void hack2() \n    { \n        Console.WriteLine(\"Derived - Method2\"); \n        \n    } \n} \nclass Hack\n{ \n    static void Main(string[] args) \n    { \n        Hack_Base h1 = new Hack_Base(); \n        Hack_Derived h2 = new Hack_Derived(); \n        Hack_Base h3 = new Hack_Derived(); \n        \n        h1.hack1(); \n        h2.hack1(); \n        h2.hack2(); \n        h3.hack1(); \n        \n    } \n}</code></pre>\n\n<p><br>\n<strong>Output</strong><br>\n </p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Base - Method1 \nBase - Method2 \nDerived - Method1 \nDerived - Method2 \nDerived - Method1 \nBase - Method2</code></pre>\n\t<br>\n\t </li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Base - Method1 \nBase - Method2 \nBase - Method1 \nBase - Method1</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Base - Method1 \nDerived - Method2 \nBase - Method1</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Base - Method1  \nBase - Method1 \nDerived - Method2 \nBase - Method1 </code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1419517,"option":"1","correct":false},{"id":1419518,"option":"2","correct":false},{"id":1419519,"option":"3","correct":false},{"id":1419520,"option":"4","correct":true}]},{"q":"<p>Which of the C# concepts is being implemented in the code snippet given below?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nnamespace Project\n{\n    public class ParentClass\n    { \n        public virtual void GetFunc()\n        {\n            Console.WriteLine(\"Hello World\"); \n            \n        } \n        \n    }\n    public class ChildClass: ParentClass\n    { \n        public override void GetFunc()\n        { \n            Console.WriteLine(\"Welcome to India\"); \n            \n        } \n        \n    }\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            ChildClass child = new ChildClass();\n            child.GetFunc();\n            ParentClass parent = new ParentClass();\n            parent.GetFunc();\n            \n        } \n        \n    } \n    \n}</code></pre>\n\n<p> </p>","a":[{"id":1419222,"option":"Run-Time Polymorphism","correct":true},{"id":1419223,"option":"Data Binding","correct":false},{"id":1419224,"option":"Compile-Time Polymorphism","correct":false},{"id":1419225,"option":"Abstraction","correct":false}]},{"q":"<p>In C#, you are working on Polymorphism. Which of the following should be used in place of X and Y in the code snippet given below to produce the output as follows?<br>\n<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\nclass Hack_Base \n{ \n    public X void hack1() \n    { \n        Console.WriteLine(\"Base - Method1\"); \n    } \n    public X void hack2() \n    { \n        Console.WriteLine(\"Base - Method2\"); \n    }\n    \n} \n \nclass Hack_Derived : Hack_Base\n{ \n    public Y void hack1() \n    { \n        Console.WriteLine(\"Derived - Method1\"); \n    } \n    \n    public  new void hack2() \n    { \n        Console.WriteLine(\"Derived - Method2\"); \n    } \n    \n} \nclass Hack \n{ \n    static void Main(string[] args) \n    { \n        Hack_Base h1 = new Hack_Base(); \n        Hack_Derived h2 = new Hack_Derived(); \n        Hack_Base h3 = new Hack_Derived();\n        \n        h1.hack1(); \n        h1.hack2();\n        h2.hack1(); \n        h2.hack2(); \n        h3.hack1(); \n        h3.hack2();\n        \n    } \n}\n</code></pre>\n\n<p><br>\n<br>\n<strong>Output</strong></p>\n\n<pre class=\"prettyprint\"><code>Base - Method1\nBase - Method2\nDerived - Method1\nDerived - Method2\nDerived - Method1\nBase - Method2</code></pre>\n\n<p> </p>\n\n<p> </p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>X: virtual\nY: override</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>X: override\nY: virtual</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>X: virtual\nY: virtual</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>X: new\nY:override</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1419522,"option":"1","correct":true},{"id":1419523,"option":"2","correct":false},{"id":1419524,"option":"3","correct":false},{"id":1419525,"option":"4","correct":false}]},{"q":"<p>In C++, which of the following mechanisms is also called as the compile-time <strong>polymorphism</strong>?</p>","a":[{"id":157687,"option":"Late interpretation","correct":false},{"id":157688,"option":"Late binding","correct":false},{"id":157689,"option":"Early binding","correct":true},{"id":157690,"option":"Overloading","correct":false}]},{"q":"<p>What is the output of the following C# code?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\nclass hack1\n\n{\n\tvirtual public void h()\n\t{\n\t\tConsole.WriteLine(\"hi\");\n\t}\n}\n\nclass hack2 : hack1\n{\n\t\n\t new public void h()\n\t{\n\t\tConsole.WriteLine(\"hello\");\n\t}\n}\n\nclass Hack {\n\t\n\tpublic static void Main()\n\t{\n\t\ttry\n\t\t{\n\t\t    hack2 h1 = new hack2();\n\t\t    \n\t\t    hack1 h4=h1;\n\t\t    \n\t\t    hack2 h3=(hack2)h4;\n\t\t    \n\t\t    h3.h();\n\t\t    \n\t\t}\n\t\tcatch(Exception e)\n\t\t{\n\t\t    Console.WriteLine(\"happy hacking\");\n\t\t}\n\t\t\n\t\tfinally \n\t\t{\n\t\t    hack1 h2 = new hack2();\n\t\t    h2.h();\n\t\t    \n\t\t}\n\t\t\n\t}\n}</code></pre>\n\n<p><br>\n </p>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hello\nhi\n</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>happy hacking\nhi\n</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hello\nhappy hacking\nhi\n</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hello\nhappy hacking\n</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1419437,"option":"2","correct":false},{"id":1419438,"option":"4","correct":false},{"id":1419439,"option":"3","correct":false},{"id":1419440,"option":"1","correct":true}]},{"q":"<p>If the following ASP.NET code runs in ASP.NET MVC, what is the output?</p>\n\n<pre class=\"prettyprint\"><code>namespace WebMVCOverloadActions.Controller { \n    public class ClientController: Controller { \n        public ActionResult GetClient() { \n            return Content(\"\"Client Name is Sam\"\"); \n        } \n        public ActionResult GetClient(String ClientCode ) { \n            return Content(\"\"Client Name is Frank\"\"); \n        } \n   } \n}</code></pre>\n\n<p> </p>","a":[{"id":498220,"option":"Compilation error","correct":false},{"id":498221,"option":"Compiled with warnings","correct":false},{"id":498222,"option":"Run with warnings","correct":false},{"id":498223,"option":"Runtime error","correct":true}]},{"q":"<p>In C++, which of the following are the types of polymorphism?</p>","a":[{"id":134165,"option":"Run-time polymorphism ","correct":false},{"id":134166,"option":"Compile time polymorphism ","correct":false},{"id":134167,"option":"Both of these ","correct":true},{"id":134168,"option":"None of these","correct":false}]},{"q":"<p>In C++, which of the following defines <strong>polymorphism</strong>?</p>","a":[{"id":132073,"option":"A class having two forms\r\n","correct":false},{"id":132074,"option":"A class having only a single form\r\n","correct":false},{"id":132075,"option":"A class having many forms\r\n\r\n","correct":true},{"id":132076,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following C# code?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\nclass hack1\n\n{\n\tvirtual public void h()\n\t{\n\t\tConsole.WriteLine(\"hi\");\n\t}\n}\n\nclass hack2 : hack1\n{\n\t\n\t new public void h()\n\t{\n\t\tConsole.WriteLine(\"hello\");\n\t}\n}\n\nclass Hack {\n\t\n\tpublic static void Main()\n\t{\n\t\t\n\t\thack2 h1 = new hack2();\n\t\t\n\t\th1.h();\n\t\t\n\t\thack1 h2 = new hack2();\n\t\t\n\t\th2.h();\n\t\t\n\t}\n}</code></pre>\n\n<p><br>\n<br>\n<strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hello\nhi\n</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hello\nhello\n</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hi\nhi</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1419347,"option":"2","correct":false},{"id":1419348,"option":"3","correct":false},{"id":1419349,"option":"1","correct":true},{"id":1419350,"option":"The code does not produce any output","correct":false}]},{"q":"<p>What is the output of the following C# code snippet?<br>\n<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\nclass hack1\n{\n    public hack1()\n    {\n        Console.WriteLine(\"Hi from Hackerearth\");\n        \n    }\n    public void hack_print()\n    {\n        Console.WriteLine(\"Hi\");\n        \n    }\n    \n}\nclass hack2 : hack1\n{\n    public hack2()\n    {\n        Console.WriteLine(\"Hello from Hackerearth\");\n        \n    }\n    public new void hack_print()\n    {\n        Console.WriteLine(\"Hello\");\n        \n    }\n    \n}\nclass Hackster\n{\n    public static void Main(string[] args)\n    {\n        hack2 h2 = new hack2();\n        hack1 h1 = h2;\n        h1.hack_print();\n    }\n    \n}\n</code></pre>\n\n<p><br>\n<strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hi from Hackerearth\nHi\nHello from Hackerearth\n</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hello from Hackerearth\nHi from Hackerearth\nHi</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hi from Hackerearth\nHello from Hackerearth\nHi</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hello from Hackerearth\nHello\nHi from Hackerearth</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1419332,"option":"1","correct":false},{"id":1419333,"option":"2","correct":false},{"id":1419334,"option":"3","correct":true},{"id":1419335,"option":"4","correct":false}]},{"q":"<p>What will be the output of the following Java code?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>class Hackerearth\n{  \n    int hack_method(int h1, int h2)\n    {\n        return h1 + h2;\n    }\n    int hack_method(int h1, int h2, int h3)\n    {\n        return h1 + h2 + h3;\n    }\n    void hack_opr()\n    {\n        System.out.println(hack_method(10, 10));\n    }\n    public static void main(String []args)\n    {   \n        new Hackerearth().hack_opr();\n        \n    }  \n}  \n</code></pre>\n\n<p> </p>","a":[{"id":662980,"option":"The code gives a compilation error","correct":false},{"id":662981,"option":"30","correct":false},{"id":662982,"option":"20","correct":true},{"id":662983,"option":"The code gives a runtime error","correct":false}]},{"q":"<p>In Java, which of the following statements about the <strong>overriding methods </strong>is true:</p>\n\n<ol>\n\t<li>The argument list passed to the overridden method in the base class must be the same as the argument list passed to the overriding method in the subclass.</li>\n\t<li>A derived class can override only non-final methods.</li>\n\t<li>An overridden method defined in the base class can be an abstract method or a non-abstract method.</li>\n\t<li>The name of the overridden method in the base class and the overriding method in the subclass can be different.</li>\n</ol>","a":[{"id":693620,"option":"1, 2, and 4","correct":false},{"id":693621,"option":"1, 2, and 3","correct":true},{"id":693622,"option":"1, 3, and 4","correct":false},{"id":693623,"option":"All of these","correct":false}]},{"q":"<p>What will be the output of the following Java code?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>class hackerearth\n{\n    public static void main(String[] args)\n    {\n        hack1 h1 =  new hack2();\n        hack2 h2 =  new hack2();\n        hack1 h;\n        h = h1;\n        h.hack_method();\n        \n    }\n\n}\n\nclass hack1\n{\n    hack1() \n    {\n        System.out.println(\"hello\");\n    \n    }\n    void hack_method()\n    {\n        System.out.println(\"hackerearth\");\n\n    }\n\n} \n\nclass hack2 extends hack1\n{ \n    hack2()\n    {\n        System.out.println(\"hi\");\n    }\n\n    void hack_method()\n    {\n        System.out.println(\"hello world\");\n\n    }\n} </code></pre>\n\n<p><br>\n<br>\n<strong>Output:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hello\nhi\nhello\nhi\nhackerearth</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hello\nhi\nhello world</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hello\nhi\nhello\nhi\nhello world</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hello\nhi\nhackerearth</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":669729,"option":"4","correct":false},{"id":669730,"option":"3","correct":true},{"id":669731,"option":"1","correct":false},{"id":669732,"option":"2","correct":false}]},{"q":"<p>What will be the output of the following Java code?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>class hack1\n{  \n    void hack_method()throws Exception\n    {\n        System.out.println(\"hackerearth\");\n        \n    }  \n}  \n  \nclass hack2 extends hack1\n{\n    void hack_method()throws Exception\n    {\n        System.out.println(\"hacker\");\n        \n    }  \n    \n    public static void main(String args[])\n    {  \n        hack2 h=new hack2();  \n        try\n        {  \n            h.hack_method();  \n            \n        }\n        catch(Exception e)\n        {\n            System.out.print(\"hello\");\n            \n        }  \n        finally \n        {\n            System.out.println(\"hi\");\n            \n        }\n        \n    }  \n}  </code></pre>\n\n<p><br>\n<strong>Output:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hello\nhi</code></pre>\n\t<br>\n\t </li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hackerearth\nhi</code></pre>\n\t<br>\n\t </li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>hacker\nhi</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":662020,"option":"2","correct":false},{"id":662021,"option":"3","correct":true},{"id":662022,"option":"1","correct":false},{"id":662023,"option":"The code gives a compilation error","correct":false}]},{"q":"<p>In object-oriented programming, which of these concepts is represented in the following two code statements:</p>\n\n<pre class=\"prettyprint\"><code>double max2 = MathUtil.max(10.34, 2.89);</code></pre>\n\n<pre class=\"prettyprint\"><code>int max1 = MathUtil.max(10, 23);</code></pre>\n\n<p> </p>","a":[{"id":669793,"option":"Method overloading","correct":true},{"id":669794,"option":"Inheritence","correct":false},{"id":669795,"option":"Method overriding","correct":false},{"id":669796,"option":"Abstraction","correct":false}]},{"q":"<p>In OOP, which of these helps the compiler process objects differently based on their data type or class?</p>\n\n<p>In Object-Oriented Programming, which of the following is used by the compiler process objects based on the data type or class?</p>","a":[{"id":51092,"option":"Inheritance","correct":false},{"id":51093,"option":"Polymorphism","correct":true},{"id":51094,"option":"Abstraction\t","correct":false},{"id":51095,"option":"Encapsulation","correct":false}]}]
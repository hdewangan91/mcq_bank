[{"q":"<p>In React Native, you require an appropriate layout that provides consistent layouts for different screens. Which of the following combinations of the Flexbox properties allows you to perform this task:</p>\n\n<ol>\n\t<li>flexDirection</li>\n\t<li>alignItems</li>\n\t<li>justifyContent</li>\n</ol>","a":[{"id":916478,"option":"1 and 3","correct":false},{"id":916479,"option":"2 and 3","correct":false},{"id":916480,"option":"1 and 2","correct":false},{"id":916481,"option":"All of these","correct":true}]},{"q":"<p>In React Native, which of the following exceptions must be added that allows you to fetch data from a <strong>cleartext</strong> URL while working on an iOS system?</p>","a":[{"id":916470,"option":"App Transport Security","correct":true},{"id":916471,"option":"CORS","correct":false},{"id":916472,"option":"XSS","correct":false},{"id":916473,"option":"Network","correct":false}]},{"q":"<p>In Android, alerts can be dismissed by clicking outside of the alert box by default. This event can be handled by using the <strong>onDismiss </strong>callback property. Which of the following syntaxes is the correct representation of the <strong>onDismiss</strong> callback property?</p>","a":[{"id":916458,"option":"{ onDismiss: () => 0 }","correct":false},{"id":916459,"option":"{ onDismiss: () }","correct":false},{"id":916460,"option":"{ onDismiss: {} }","correct":false},{"id":916461,"option":"{ onDismiss: () => {} }","correct":true}]},{"q":"<p>In React Native, you are styling a component such that it expands and shrinks dynamically based on the space available. The component must fill all the available space that it shares equally among the components that have the same parent. Determine the value of the <strong>flex </strong>dimension.</p>","a":[{"id":916402,"option":"flex : 1","correct":true},{"id":916403,"option":"flex : 10","correct":false},{"id":916404,"option":"flex : 5","correct":false},{"id":916405,"option":"flex : 0","correct":false}]},{"q":"<p>In React Native, which of the following components utilizes text-specific styles such as <strong>fontSizewhile </strong>styling?</p>","a":[{"id":916374,"option":"<Text>","correct":true},{"id":916375,"option":"<Flat List>","correct":false},{"id":916376,"option":"<Section List>","correct":false},{"id":916377,"option":" <TouchableHighlight>","correct":false}]},{"q":"<p>Which of the following configurations is used to prevent each keyframe from being calculated in the JavaScript thread while working with the Animated API in the React Native application?</p>","a":[{"id":916358,"option":"useNativeDriver: true","correct":true},{"id":916359,"option":"usePrecompute: true","correct":false},{"id":916360,"option":"useLocalDriver: true","correct":false},{"id":916361,"option":"useRender: true","correct":false}]},{"q":"<p>In React Native, assume that you are using the <strong>FlatList </strong>component which is rendering slow. Which of these ways can be used to improve the performance?</p>","a":[{"id":736756,"option":"Implement getItemLayout","correct":true},{"id":736757,"option":"Implement setItemLayout","correct":false},{"id":736758,"option":"Implement skipItemLayout","correct":false},{"id":736759,"option":"Implement preprocessItemLayout","correct":false}]},{"q":"<p>In React Native, you find that the scroll performance is bad for a large list added to a component. Which of these viable components can be used alternatively to resolve this issue?</p>","a":[{"id":736752,"option":"FlatList","correct":false},{"id":736753,"option":"SectionList","correct":false},{"id":736754,"option":"Both of these","correct":true},{"id":736755,"option":"None of these","correct":false}]},{"q":"<p>In React Native, which of these ways is used to use the Fetch API for adding a JSON object to the payload optimally?</p>","a":[{"id":736732,"option":"By stringifying the JSON object","correct":true},{"id":736733,"option":"By wrapping the JSON object in a BLOB wrapper ","correct":false},{"id":736734,"option":"By passing the Object to the DOM directly using JSONpayload() function","correct":false},{"id":736735,"option":"None of these","correct":false}]},{"q":"<p>In React Native, assume that the Chrome Developer Tools are inadequate for debugging the issues in your application and you want to launch a custom debugger. Which of these environment variables would you need to modify to do so?</p>","a":[{"id":736728,"option":"REACT_DEBUGGER","correct":true},{"id":736729,"option":"NATIVE_DEBUGGER","correct":false},{"id":736730,"option":"JSX_DEBUGGER","correct":false},{"id":736731,"option":"DEBUGGER_ENVIRONMENT","correct":false}]},{"q":"<p>In React Native, the following code uses the native method to determine the location on screen, width, and height of a view. However, due to a change in requirement, you need to obtain this requested data at a point before the native rendering completes. Which of these props can be used alternatively for this purpose:</p>\n\n<pre class=\"prettyprint\"><code>measure(callback)</code></pre>\n\n<p> </p>","a":[{"id":736688,"option":"onLayout","correct":true},{"id":736689,"option":"onInit","correct":false},{"id":736690,"option":"onMeasure","correct":false},{"id":736691,"option":"onStateChange","correct":false}]},{"q":"<p>In React Native, assume that frequent re-rendering of components is causing performance bottlenecks for a view. Which of these would you use to solve the issue?</p>","a":[{"id":736684,"option":"setNativeProps","correct":true},{"id":736685,"option":"setDomProps","correct":false},{"id":736686,"option":"cacheNativeProps","correct":false},{"id":736687,"option":"None of these","correct":false}]},{"q":"<p>In React Native, which of these exceptions needs to be added to use the Fetch API to get data from the following URL in iOS:</p>\n\n<pre class=\"prettyprint\"><code>http://example.com/react-native/ios.json</code></pre>\n\n<p> </p>","a":[{"id":736640,"option":"App Transport Security exception","correct":true},{"id":736641,"option":"CORS exception","correct":false},{"id":736642,"option":"Crypt exception","correct":false},{"id":736643,"option":"Resolver exception","correct":false}]},{"q":"<p>Which of these is the reason for the following React Native code being written inside <strong>App.js</strong>:</p>\n\n<pre class=\"prettyprint\"><code>import { Navigation } from 'react-native-navigation';\n\nimport HomeScreen from './screens/HomeScreen';\n\nNavigation.registerComponent('drawer.HomeScreen', () =&gt; HomeScreen);\n\nNavigation.startSingleScreenApp({\n  screen: {\n    screen: 'drawer.HomeScreen',\n    title: 'Home'\n  }</code></pre>\n\n<p> </p>","a":[{"id":736604,"option":"It is done to create the homescreen.js.","correct":false},{"id":736605,"option":"It is done to register the navigation component.","correct":true},{"id":736606,"option":"Both of these","correct":false},{"id":736607,"option":"It is done to import the navigation component.","correct":false}]},{"q":"<p>Which of these imported components is being registered in the following React Native code:</p>\n\n<pre class=\"prettyprint\"><code>import {AppRegistry} from 'react-native';\nimport App from './App';\nimport {name as appName} from './app.json';\n\nAppRegistry.registerComponent(appName, () =&gt; App);</code></pre>\n\n<p> </p>","a":[{"id":736592,"option":"This registers the imported component that serves as the app’s entry point.","correct":true},{"id":736593,"option":"This registers the imported component that serves as the app’s exit point.","correct":false},{"id":736594,"option":"This registers the imported component that serves as the app’s active registry.","correct":false},{"id":736595,"option":"This registers the imported component that serves as the app’s entry and exit point.","correct":false}]},{"q":"<p>Which of these actions take place in the following React Native code:</p>\n\n<pre class=\"prettyprint\"><code>import React, { Component } from 'react'; // 1\nimport {Platform, StyleSheet, Text, View} from 'react-native';\n\nconst instructions = Platform.select({ ... }); // 2\n\ntype Props = {};\nexport default class App extends Component&lt;Props&gt; { ... } // 3\n\nconst styles = StyleSheet.create({ ... }); // 4</code></pre>\n\n<p> </p>\n\n<ol>\n\t<li>Setting up a platform-specific display message</li>\n\t<li>Defining the component that represents the UI</li>\n\t<li>Creating a style object that controls the component’s layout</li>\n\t<li>Creating a style object that controls the component’s appearance</li>\n</ol>","a":[{"id":736588,"option":"1, 2, and 3","correct":false},{"id":736589,"option":"1, 3, and 4","correct":false},{"id":736590,"option":"2, 3, and 4","correct":false},{"id":736591,"option":"All of these","correct":true}]},{"q":"<p>In React Native, the unmounting of a component of an app causes fatal errors in the app due to timers firing after a component is unmounted. If you include <strong>TimerMixin</strong> to resolve this issue, then which of the following will you replace at the place of <strong>setTimeout(fn, 500)</strong>?</p>","a":[{"id":736415,"option":"setTimeout(500)","correct":false},{"id":736416,"option":"setTimeout(fn)","correct":false},{"id":736417,"option":"this.setTimeout(fn, 500)","correct":true},{"id":736418,"option":"this.setTimeout(fn, 0)","correct":false}]},{"q":"<p>In React Native, which of these can be the most appropriate reason if you are faced with the following error:</p>\n\n<pre class=\"prettyprint\"><code>&gt; Invariant Violation: Element type is invalid</code></pre>\n\n<p> </p>","a":[{"id":736411,"option":"This error occurs when you are trying to use a font that is not bundled with the platform.","correct":false},{"id":736412,"option":"This error occurs when the linking has not been completed.","correct":false},{"id":736413,"option":"This error occurs when you are missing some packages after a git pull.","correct":false},{"id":736414,"option":"This error occurs when you are trying to import a component that doesn't exist.","correct":true}]},{"q":"<p>In React Native, which of these statements about the <strong>components and containers</strong> is true:</p>\n\n<ol>\n\t<li>Each component from the React Native Elements has a container around it.</li>\n\t<li>The container is just a traditional &lt;View /&gt; from react native that has some styling on it.</li>\n\t<li>The default style must be altered in order to keep containers from colliding against each other.</li>\n</ol>","a":[{"id":736407,"option":"1 and 2","correct":true},{"id":736408,"option":"1 and 3","correct":false},{"id":736409,"option":"2 and 3","correct":false},{"id":736410,"option":"All of these","correct":false}]},{"q":"<p>In React Native, which of these components would you use for the following tasks:</p>\n\n<ol>\n\t<li>Load the data from the server after mounting the component</li>\n\t<li>Send GET request to the server, return JSON data, and log output to console</li>\n</ol>","a":[{"id":736395,"option":"componentMount lifecycle method","correct":false},{"id":736396,"option":"componentDidMount lifecycle method","correct":true},{"id":736397,"option":"flexMount method","correct":false},{"id":736398,"option":"renderMOUNT lifecycle method","correct":false}]},{"q":"<p>Which of these methods that are used for <strong>AsyncStorage </strong>and has an API similar to<strong> SecureStore</strong> is valid:</p>\n\n<ol>\n\t<li>AsyncStorage.getItem(key)</li>\n\t<li>AsyncStorage.setItem(key, value)</li>\n\t<li>AsyncStorage.removeItem(key)</li>\n</ol>","a":[{"id":736391,"option":"1 and 2","correct":false},{"id":736392,"option":"2 and 3","correct":false},{"id":736393,"option":"1 and 3","correct":false},{"id":736394,"option":"All of these","correct":true}]},{"q":"<p>Assume that you are running a React Native app that takes a snapshot of all the views using <strong>Xcode</strong>. You are inspecting its hierarchy using the navigator window. Which of the following can be used to see the coordinates of a view in this case?</p>","a":[{"id":736383,"option":"Size inspector","correct":true},{"id":736384,"option":"React DevTools","correct":false},{"id":736385,"option":"PanResponder","correct":false},{"id":736386,"option":"Nuclide","correct":false}]},{"q":"<p>In React Native, which of the following props takes a function that is called when a text is submitted?</p>","a":[{"id":736367,"option":"onSubmitEditing","correct":true},{"id":736368,"option":"SubmitEditing ","correct":false},{"id":736369,"option":"textEditing","correct":false},{"id":736370,"option":"onTextEditing","correct":false}]},{"q":"<p>In React Native, which of the following storage methods will return a Promise object?</p>","a":[{"id":736359,"option":"multiRemove()","correct":false},{"id":736360,"option":"multiMerge()","correct":false},{"id":736361,"option":"Both of these","correct":true},{"id":736362,"option":"None of these","correct":false}]},{"q":"<p>In React Native, which of the following is not supported by all the native implementations?</p>","a":[{"id":736355,"option":"getItem()","correct":false},{"id":736356,"option":"setItem()","correct":false},{"id":736357,"option":"removeItem()","correct":false},{"id":736358,"option":"mergeItem()","correct":true}]},{"q":"<p>In React Native, which of the following examples of props used in a picker is not valid?</p>","a":[{"id":736351,"option":"section","correct":true},{"id":736352,"option":"prompt","correct":false},{"id":736353,"option":"enabled","correct":false},{"id":736354,"option":"style","correct":false}]},{"q":"<p>In React Native, which of the following props defines how far away from the button your touch can start?</p>","a":[{"id":736347,"option":"hitSlop","correct":true},{"id":736348,"option":"touchSlop","correct":false},{"id":736349,"option":"startSlop","correct":false},{"id":736350,"option":"beatSlop","correct":false}]},{"q":"<p>In React Native, which of the following can be used to render the background dark for a view?</p>","a":[{"id":736339,"option":"TouchableHighlight","correct":true},{"id":736340,"option":"TouchableDark","correct":false},{"id":736341,"option":"TouchableDarkObject","correct":false},{"id":736342,"option":"TouchableDarkHighllight","correct":false}]},{"q":"<p>In React Native, what is the number of types of touchable components with the capability to capture the tapping functionality?</p>","a":[{"id":736327,"option":"1","correct":false},{"id":736328,"option":"2","correct":false},{"id":736329,"option":"3","correct":false},{"id":736330,"option":"4","correct":true}]},{"q":"<p>Which of the following must be installed to set up the environment for React Native?</p>","a":[{"id":736291,"option":"NodeJS ","correct":false},{"id":736292,"option":"NPM","correct":false},{"id":736293,"option":"Both of these","correct":true},{"id":736294,"option":"None of these","correct":false}]},{"q":"<p>In React Native, which of these values is not a valid component of<strong> justifyContent</strong> which is to be used for spreading the components evenly?</p>","a":[{"id":736287,"option":"space-around","correct":false},{"id":736288,"option":"space-evenly","correct":false},{"id":736289,"option":"space-between","correct":false},{"id":736290,"option":"space-across","correct":true}]},{"q":"<p>In React Native, if the full name of a font is <strong>myCustomFont</strong>, then what should be the the font’s file name?</p>","a":[{"id":736283,"option":"myCustomFont.tt","correct":false},{"id":736284,"option":"myCustomFont.ttf","correct":true},{"id":736285,"option":"myCustomFont.ttt","correct":false},{"id":736286,"option":"myCustomFont.ttff","correct":false}]},{"q":"<p style=\"margin-left: 0cm; margin-right: 0cm;\">In React Native, which of the following is used to display the data that is fetched from a server?</p>","a":[{"id":724951,"option":"ScrollView","correct":false},{"id":724952,"option":"ListView","correct":true},{"id":724953,"option":"Both of these","correct":false},{"id":725504,"option":"None of these","correct":false}]},{"q":"<p style=\"margin-left: 0cm; margin-right: 0cm;\">In React Native, which of these values is returned by the method <em><strong>shouldComponentUpdate()</strong></em> by default?</p>","a":[{"id":724945,"option":"True","correct":false},{"id":724946,"option":"False","correct":true},{"id":724947,"option":"Null","correct":false},{"id":725502,"option":"A floating-point number","correct":false}]},{"q":"<p style=\"margin-left: 0cm; margin-right: 0cm;\">In React Native, when is the React method <em><strong>componentWillMount() </strong></em>executed?</p>","a":[{"id":724941,"option":"Executed just before rendering takes place on the server-side","correct":false},{"id":724942,"option":"Executed just before rendering takes place on the client-side","correct":false},{"id":724943,"option":"Executed just before rendering takes place both on the client as well as server-side","correct":true},{"id":724944,"option":"None of these","correct":false}]},{"q":"<p style=\"margin-left: 0cm; margin-right: 0cm;\">In React Native, which of the following statements about the V<strong>irtual DOM </strong>is true?</p>\n\n<ol>\n\t<li>DOM manipulation is very easy and fast.</li>\n\t<li>It cannot directly update HTML.</li>\n\t<li>No memory wastage</li>\n\t<li>Creates a new DOM if an element updates</li>\n</ol>","a":[{"id":724875,"option":"1, 2, and 3","correct":true},{"id":724876,"option":"2, 3, and 4","correct":false},{"id":724877,"option":"1, 3, and 4","correct":false},{"id":724878,"option":"None of these","correct":false}]},{"q":"<p style=\"margin-left: 0cm; margin-right: 0cm;\">In React Native, which of these props is used in touchable components to detect when a user presses and holds a view for a set amount of time?</p>","a":[{"id":724872,"option":"onLongWait","correct":false},{"id":724873,"option":"onLongPress","correct":true},{"id":724874,"option":"onLongHold","correct":false},{"id":725497,"option":"None of these","correct":false}]},{"q":"<p style=\"margin-left: 0cm; margin-right: 0cm;\">In React Native, which of these are two props of the <strong><em>FlatList</em> </strong>component?</p>","a":[{"id":724869,"option":"data and renderRow","correct":false},{"id":724870,"option":"dataSource and renderItem","correct":false},{"id":724871,"option":"data and renderItem","correct":true},{"id":725496,"option":"None of these","correct":false}]},{"q":"<p style=\"margin-left: 0cm; margin-right: 0cm;\">In React Native, which of these components is used for the spinning wheel animation which is displayed while the data is being loaded?</p>","a":[{"id":724499,"option":"WaitIndicator","correct":false},{"id":724500,"option":"ActivityIndicator","correct":true},{"id":724501,"option":"DataIndicator","correct":false},{"id":724502,"option":"None of these","correct":false}]},{"q":"<p style=\"margin-left: 0cm; margin-right: 0cm;\">In React Native, which of these components can be used if there is a contact list with all the contacts sorted alphabetically?</p>","a":[{"id":724098,"option":"FlatList","correct":false},{"id":724099,"option":"SectionList","correct":true},{"id":724100,"option":"ScrollView","correct":false},{"id":724101,"option":"None of these","correct":false}]},{"q":"<p style=\"margin-left: 0cm; margin-right: 0cm;\">In React Native, what is the disadvantage of rendering a <em><strong>ScrollView</strong></em> container?</p>\n\n<p> </p>","a":[{"id":724094,"option":"All components of the ScrollView container are rendered regardless of whether they are shown on the screen currently.","correct":false},{"id":724095,"option":"It is inefficient for a large number of components.","correct":false},{"id":724096,"option":"It cannot be used for section-wise list.","correct":false},{"id":724097,"option":"All of these","correct":true}]},{"q":"<p style=\"margin-left: 0cm; margin-right: 0cm;\">In React Native, what is the function of the property<em><strong> alignItems</strong></em>?</p>\n\n<p> </p>","a":[{"id":724090,"option":"It is used to specify if elements are aligned vertically or horizontally.","correct":false},{"id":724091,"option":"It is used to determine how the elements will be distributed inside the container.","correct":false},{"id":724092,"option":"It is used to determine how the elements will be distributed inside the container along the secondary axis.","correct":true},{"id":724093,"option":"All of these","correct":false}]},{"q":"<p style=\"margin-left: 0cm; margin-right: 0cm;\">In React Native, which of these sets of values can be used for the property <strong><em>justifyContent</em></strong>?</p>","a":[{"id":724087,"option":"center, flex-start, flex-end, space-between","correct":true},{"id":724088,"option":"center, flex-start, flex-end, stretched, space-around","correct":false},{"id":724089,"option":"center, flex-start, flex-end, stretched","correct":false},{"id":725471,"option":"None of these","correct":false}]},{"q":"<p style=\"margin-left: 0cm; margin-right: 0cm;\">In React Native, when is the<em> getInitialState </em>method used?</p>","a":[{"id":724080,"option":"React.Component","correct":false},{"id":724081,"option":"React.createClass","correct":true},{"id":724082,"option":"Both of these","correct":false},{"id":724083,"option":"None of these","correct":false}]},{"q":"<p style=\"margin-left: 0cm; margin-right: 0cm;\">In React Native, in which of these forms the data is passed to a component which is not to be updated?</p>","a":[{"id":724073,"option":"Props","correct":true},{"id":724074,"option":"State","correct":false},{"id":724075,"option":"Any of these","correct":false},{"id":725264,"option":"None of these","correct":false}]},{"q":"<p style=\"margin-left: 0cm; margin-right: 0cm;\">In React Native, which of the following is mutable and can be updated?</p>","a":[{"id":724070,"option":"Props","correct":false},{"id":724071,"option":"State","correct":true},{"id":724072,"option":"Both of these","correct":false},{"id":725263,"option":"None of these","correct":false}]},{"q":"<p style=\"margin-left: 0cm; margin-right: 0cm;\">In React Native, which of these commands is used to create a new application?</p>","a":[{"id":724066,"option":"react-native init myNewApplication","correct":true},{"id":724067,"option":"react-native start myNewApplication","correct":false},{"id":724068,"option":"react-native run myNewApplication","correct":false},{"id":724069,"option":"None of these","correct":false}]},{"q":"<p style=\"margin-left: 0cm; margin-right: 0cm;\">In React Native, which of the following threads run?</p>","a":[{"id":724062,"option":"JavaScript thread","correct":false},{"id":724063,"option":"Main UI thread","correct":false},{"id":724064,"option":"Both of these","correct":true},{"id":724065,"option":"None of these","correct":false}]},{"q":"<p>In React Native, which of the following components is used to render separators between your items, multiple columns, infinite scroll loading, or any other features in the application? </p>","a":[{"id":916450,"option":"ScrollView","correct":false},{"id":916451,"option":"Slider","correct":false},{"id":916452,"option":"SectionList","correct":false},{"id":916453,"option":"FlatList","correct":true}]},{"q":"<p>In React Native, if you are using the <strong>TouchableWithoutFeedback</strong> API Touchable while building an android application, then which of the following methods can used to define how far away from the button your touch can start?</p>","a":[{"id":916446,"option":"hitSlop","correct":true},{"id":916447,"option":"PressOut","correct":false},{"id":916448,"option":"PressIn","correct":false},{"id":916449,"option":"accessibilityState","correct":false}]},{"q":"<p>In React Native, which of the following helpers is used to make an <strong>easing </strong>function symmetrical while building an application?</p>","a":[{"id":916430,"option":"in","correct":false},{"id":916431,"option":"Out","correct":false},{"id":916432,"option":"inOut","correct":true},{"id":916433,"option":"None of these","correct":false}]},{"q":"<p>In React Native, which of the following <strong>boilerplates</strong> is used for building a long-term production application?</p>","a":[{"id":916410,"option":"create-react-native-app","correct":false},{"id":916411,"option":"Expo","correct":false},{"id":916412,"option":"react-native init","correct":true},{"id":916413,"option":"react-native base","correct":false}]},{"q":"<p>In React Native, which of the following native classes is used to set up key events and handlers for TV remote events while writing the code for TV applications?</p>","a":[{"id":916386,"option":"ReactAndroidTVRootViewHelper","correct":true},{"id":916387,"option":"TVEventHandler","correct":false},{"id":916388,"option":" Touchable ","correct":false},{"id":916389,"option":"NativeRemoteEvents","correct":false}]},{"q":"<p>Which of the following are valid disadvantages of calling React Native functions from the native events in iOS applications is correct:</p>\n\n<ol>\n\t<li>spaghetti-style dependencies are introduced into the project</li>\n\t<li>Name collisions might be encountered</li>\n\t<li>Context of embedding is limited</li>\n</ol>","a":[{"id":916362,"option":"1 and 2","correct":false},{"id":916363,"option":"2 and 3","correct":false},{"id":916364,"option":"1 and 3","correct":false},{"id":916365,"option":"All of these","correct":true}]},{"q":"<p>In React Native, which of the following properties is used for caching and as the React key for tracking the reordering of items? </p>\n\n<p> </p>","a":[{"id":916346,"option":"keyExtractor","correct":true},{"id":916347,"option":"react-native-fast-image","correct":false},{"id":916348,"option":"getItemLayout","correct":false},{"id":916349,"option":"None of these","correct":false}]},{"q":"<p>Assume that you have React Native component in an Android application. This component shows sluggish transition due to the extensive wait time for the <strong>DrawFrame</strong>. Which of the following steps taken to mitigate the issue is valid?</p>","a":[{"id":736780,"option":"renderToHardwareTextureAndroid is used to investigate complex, static content that is animated.","correct":false},{"id":736781,"option":"Ensure that needsOffscreenAlphaCompositing is enabled.","correct":false},{"id":736782,"option":"Both of these","correct":true},{"id":736783,"option":"None of these","correct":false}]},{"q":"<p>Assume that you would like to import a calendar called \"CalManager\" in iOS using calendar API in React Native. After importing, you would like to access some methods of \"CalManager\" using JavaScript. Which of the following macros will you use to achieve this?</p>","a":[{"id":736736,"option":"RCT_CALL_METHOD()","correct":false},{"id":736737,"option":"RCT_IMPORT_MODULE()","correct":false},{"id":736738,"option":"RCT_EXPORT_METHOD()","correct":true},{"id":736739,"option":"None of these","correct":false}]},{"q":"<p>In React Native, assume that you have built an iOS application using objective C and added some enhancements to the features of this application in a component. If you want to add this component to the existing application, then which of these containers would you need to specify for the React component?</p>","a":[{"id":736696,"option":"RCTRootView","correct":true},{"id":736697,"option":"NATIVEView","correct":false},{"id":736698,"option":"PropRootView","correct":false},{"id":736699,"option":"ComponentRootView","correct":false}]},{"q":"<p>What is the output of the following React Native code:</p>\n\n<pre class=\"prettyprint\"><code>render: function() {\n    if (!this.state.loaded) {\n      return this.renderLoadingView();\n    }\n\n    return (\n      &lt;ListView\n        dataSource={this.state.dataSource}\n        renderRow={this.renderMovie}\n        style={styles.listView}\n      /&gt;\n    );\n  },</code></pre>\n\n<p> </p>","a":[{"id":736612,"option":"It renders a single movie.","correct":false},{"id":736613,"option":"It renders a ListView of movies.","correct":true},{"id":736614,"option":"It renders a ListView of movies and styles.","correct":false},{"id":736615,"option":"It does not render anything.","correct":false}]},{"q":"<p>What is the output of the following React Native code which is inserted inside the screens folder:</p>\n\n<pre class=\"prettyprint\"><code>import React, { Component } from 'react';\nimport { View, Text } from 'react-native';\n\nexport default class AnalyticsScreen extends Component {\n  render() {\n    return (\n      &lt;View&gt;\n        &lt;Text&gt; Your AnalyticsScreen &lt;/Text&gt;\n      &lt;/View&gt;\n    )\n  }\n}</code></pre>\n\n<p> </p>","a":[{"id":736608,"option":"It creates one more screen.","correct":true},{"id":736609,"option":"It removes one screen.","correct":false},{"id":736610,"option":"It creates one screen and removes one screen at the same time.","correct":false},{"id":736611,"option":"It creates one screen and one analytics screen.","correct":false}]},{"q":"<p>What is the output of the following React Native code:</p>\n\n<pre class=\"prettyprint\"><code>import { createStackNavigator, createAppContainer } from \"\"react-navigation\"\";\nimport Home from './screens/Home';\n\nconst AppNavigator = createStackNavigator({\n Home: {\n   screen: Home\n }\n});\n\nexport default createAppContainer(AppNavigator);</code></pre>\n\n<p> </p>","a":[{"id":736600,"option":"Empty navigation bar","correct":true},{"id":736601,"option":"Navigation bar with custom font","correct":false},{"id":736602,"option":"Splash screen","correct":false},{"id":736603,"option":"Splash screen with custom font","correct":false}]},{"q":"<p>In React Native, if you are creating a react element using native <strong>createElement </strong>method, then what does <strong>\"p\"</strong> stands for in the following method description:</p>\n\n<pre class=\"prettyprint\"><code>var P = React.createElement(\"p\",\n{ className: \"paragraph\" },\n\"Hello from React.\"\n});</code></pre>\n\n<p> </p>","a":[{"id":736584,"option":"ElementAttributes","correct":false},{"id":736585,"option":"ElementName","correct":false},{"id":736586,"option":"ElementContent","correct":true},{"id":736587,"option":"ElementType","correct":false}]},{"q":"<p>Which of the following cases for React Native View is valid?</p>","a":[{"id":736423,"option":"View supports synthetic touch events, which can be useful for different purposes.","correct":false},{"id":736424,"option":"View can be used as a container element when you need to wrap your elements inside a container.","correct":false},{"id":736425,"option":"Both of these","correct":true},{"id":736426,"option":"None of these","correct":false}]},{"q":"<p>In React Native, which of the following shortcuts is used for the opening inspector to find information about the components?</p>","a":[{"id":736275,"option":"Command + I","correct":true},{"id":736276,"option":"Command + In","correct":false},{"id":736277,"option":"Command + I + C","correct":false},{"id":736278,"option":"Command + Ins","correct":false}]},{"q":"<p style=\"margin-left: 0cm; margin-right: 0cm;\">In React Native, which of the following components can be used for allowing the user to zoom the content?</p>","a":[{"id":724948,"option":"ScrollView","correct":true},{"id":724949,"option":"FlatList","correct":false},{"id":724950,"option":"Both of these","correct":false},{"id":725503,"option":"None of these","correct":false}]},{"q":"<p style=\"margin-left: 0cm; margin-right: 0cm;\">In React Native, which of the following statements about the <strong>State </strong>are true:</p>\n\n<ol>\n\t<li>Receives initial value from the parent component </li>\n\t<li>Parent component can change the value </li>\n\t<li>Changes inside the child component </li>\n\t<li>Sets the initial value for child components </li>\n</ol>","a":[{"id":724883,"option":"1, 2, and 3","correct":false},{"id":724884,"option":"1, 2, and 4","correct":false},{"id":724885,"option":"1 and 4","correct":true},{"id":724886,"option":"All of these","correct":false}]},{"q":"<p style=\"margin-left: 0cm; margin-right: 0cm;\">In React Native, what should be the value of the flex in the following component’s style so that the component fills all the available space shared evenly amongst other components with the same parent:</p>\n\n<pre class=\"prettyprint\"><code>&lt;View style={{flex: ____}}&gt;</code></pre>\n\n<p> </p>","a":[{"id":724865,"option":"flex: 2","correct":false},{"id":724866,"option":"flex: 1","correct":true},{"id":724867,"option":"flex: 0","correct":false},{"id":724868,"option":"flex: 3","correct":false}]},{"q":"<p style=\"margin-left: 0cm; margin-right: 0cm;\">In React Native, which of these algorithms is used for specifying a constant layout on the devices with different screen sizes?</p>\n\n<p> </p>","a":[{"id":724507,"option":"AlignPage","correct":false},{"id":724508,"option":"FlexBox","correct":true},{"id":724509,"option":"AlignText","correct":false},{"id":725476,"option":"None of these","correct":false}]},{"q":"<p style=\"margin-left: 0cm; margin-right: 0cm;\">Which of the following properties is used to specify if the elements would be aligned vertically or horizontally?</p>\n\n<p> </p>","a":[{"id":724084,"option":"flexDirection","correct":true},{"id":724085,"option":"justifyContent","correct":false},{"id":724086,"option":"alignItems","correct":false},{"id":725466,"option":"None of these","correct":false}]},{"q":"<p style=\"margin-left: 0cm; margin-right: 0cm;\">In React Native, how many threads can run?</p>","a":[{"id":724058,"option":"One","correct":false},{"id":724059,"option":"Two","correct":true},{"id":724060,"option":"Three","correct":false},{"id":724061,"option":"Zero","correct":false}]},{"q":"<p>In React Native, you are required to use the <strong>Hermes </strong>engine while building an application for Android. Which of the following statements allows you to use the <strong>ProGuard </strong>tool<strong> </strong>in the implementation process? </p>\n\n<p> </p>\n\n<p> </p>","a":[{"id":916510,"option":"-keep class com.facebook.hermes.unicode.** { *; }","correct":true},{"id":916511,"option":"-keep class com.facebook.hermes.unicode.()=> { *; }","correct":false},{"id":916512,"option":"-keep class com.facebook.hermes.unicode.()=> { }","correct":false},{"id":916513,"option":"-keep class com.facebook.hermes.unicode.()=>:{;}","correct":false}]},{"q":"<p>In React Native, if you are required to build a button with the following feedback, then which of these <strong>Touchable </strong>components can be used:</p>\n\n<p><strong>Feedback</strong></p>\n\n<ol>\n\t<li>The view's background must be displayed in the dark mode on clicking the button or link on the web.</li>\n\t<li>The display ink surface reaction ripples that respond to the user's touch in the Android operating system.</li>\n\t<li>The tap gesture must be handled without displaying any feedback.</li>\n</ol>","a":[{"id":916494,"option":"1. TouchableOpacity\r\n2. TouchableNativeFeedback\r\n3. TouchableWithoutFeedback","correct":false},{"id":916495,"option":"1. TouchableHighlight\r\n2. TouchableWithoutFeedback\r\n3. TouchableNativeFeedback","correct":false},{"id":916496,"option":"1. TouchableHighlight\r\n2. TouchableNativeFeedback\r\n3. TouchableOpacity","correct":false},{"id":916497,"option":"1. TouchableHighlight\r\n2. TouchableNativeFeedback\r\n3. TouchableWithoutFeedback","correct":true}]},{"q":"<p>In React Native, you use the <strong>InteractionManager</strong> component to ensure long-running work is scheduled to start after any interactions or animations has completed. Which of the following alternatives can be used to run the code later without delaying the active animation?</p>\n\n<p> </p>\n\n<p> </p>\n\n<p> </p>\n\n<p> </p>\n\n<p> </p>\n\n<p> </p>","a":[{"id":916462,"option":"Use the runAfterInteractions() method","correct":true},{"id":916463,"option":"Use the requestAnimationFrame() method","correct":false},{"id":916464,"option":"Use the setImmediate() method","correct":false},{"id":916465,"option":"Use the setInterval() method","correct":false}]},{"q":"<p>In React Native, you are configuring the <strong>F</strong><strong>latList </strong>component. All the list item components have the same dimensions such as height and width. Which of the following properties is used to remove the need to manage async layout calculations in the <strong>FlatList </strong>component?</p>","a":[{"id":916350,"option":"getItemLayout ","correct":true},{"id":916351,"option":"precomputeItemLayout ","correct":false},{"id":916352,"option":"renderItemLayout ","correct":false},{"id":916353,"option":"autoItemLayout ","correct":false}]},{"q":"<p>In React Native, which of the following measures allows you to simplify the import of paths while working on a project?</p>","a":[{"id":916326,"option":"Configure directory aliases","correct":true},{"id":916327,"option":"Use only atomic components","correct":false},{"id":916328,"option":"Add Axios as a .Babelrc dependency","correct":false},{"id":916329,"option":"Add Axios as a .eslintrc.js dependency","correct":false}]},{"q":"<p>In React Native, assume that you receive the encoded image data from a REST API call in your application. Which of these ways will you use to be able to use these images?</p>","a":[{"id":736796,"option":"Using the 'data:' uri scheme","correct":true},{"id":736797,"option":"Using the 'asset:' uri scheme","correct":false},{"id":736798,"option":"Using the 'source:' uri scheme","correct":false},{"id":736799,"option":"None of these","correct":false}]},{"q":"<p>In React Native, assume that you have text with a transparent background positioned on top of an image in an Android application using the components. Which of the following can be used to improve the performance while moving the view on screen?</p>\n\n<p> </p>","a":[{"id":736764,"option":"renderToHardwareTextureAndroid","correct":true},{"id":736765,"option":"shouldRasterizeAndroid","correct":false},{"id":736766,"option":"preProcessTexture","correct":false},{"id":736767,"option":"rasterizeTexure","correct":false}]},{"q":"<p>Assume that you run into the following error code while trying to run the React Native package manager on Linux. Which of these terminal commands can be run to resolve this issue:</p>\n\n<pre class=\"prettyprint\"><code>Error \"code\":\"ENOSPC\",\"errno\":\"ENOSPC\"</code></pre>\n\n<p> </p>","a":[{"id":736748,"option":"echo fs.inotify.max_user_watches=582222 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p","correct":true},{"id":736749,"option":"sudo tee -a /etc/sysctl.conf","correct":false},{"id":736750,"option":"sudo sysctl -p","correct":false},{"id":736751,"option":"sudo inotify.user=59222","correct":false}]},{"q":"<p>Assume that you are building an iOS application with the help of React native components. Which of the following actions would you need to rebuild your app for changes to take effect?</p>","a":[{"id":736720,"option":"New resources is added to your native app's bundle.","correct":false},{"id":736721,"option":"Native code is modified.","correct":false},{"id":736722,"option":"Both of these","correct":true},{"id":736723,"option":"None of these","correct":false}]},{"q":"<p>Which of these statements about the React Native Animations API native driver is true?</p>","a":[{"id":736708,"option":"The native driver works with Animated.event.","correct":false},{"id":736709,"option":"When running an animation on a value using the native driver, you need to make sure that every animation on that value also uses the native driver.","correct":false},{"id":736710,"option":"Both of these","correct":true},{"id":736711,"option":"None of these","correct":false}]},{"q":"<p>In React Native, assume that a view component A has a child component B. Which of these handlers would A need to have to assure that A becomes the responder on a touch start?</p>","a":[{"id":736668,"option":"onStartShouldSetResponderCapture","correct":true},{"id":736669,"option":"onStartShouldSetBubblingCapture","correct":false},{"id":736670,"option":"onStartShouldSetParentCapture","correct":false},{"id":736671,"option":"None of these","correct":false}]},{"q":"<p>If the following code is used to detect which platform the React Native application is running on, then which of these alternative methods can be used for the same purpose:</p>\n\n<pre class=\"prettyprint\"><code>clickMe() {\n  var message = ‘';\n  if(Platform.OS == ‘ios') {\n    message = ‘Welcome to iOS!';\n  } else if(Platform.OS == ‘android') {\n    message = ‘Welcome to Android!';\n  }   \n  Alert.alert(message);\n}</code></pre>\n\n<p> </p>","a":[{"id":736387,"option":"Select method","correct":true},{"id":736388,"option":"Virtual DOM method","correct":false},{"id":736389,"option":"Render method","correct":false},{"id":736390,"option":"There is no alternative method.","correct":false}]},{"q":"<p>Which of the following components is not available in<strong> barStyle</strong> for a React Native component?</p>","a":[{"id":736311,"option":"dark-content","correct":false},{"id":736312,"option":"light-content","correct":false},{"id":736313,"option":"default","correct":false},{"id":736314,"option":"custom-content","correct":true}]},{"q":"<p style=\"margin-left: 0cm; margin-right: 0cm;\">What does the property value of<em><strong> justifyContent: ‘space-between’</strong></em> specify in the following line of React Native code?</p>\n\n<pre class=\"prettyprint\"><code>&lt;View style={{ flex: 1, flexDirection: 'column', justifyContent: 'space-between', }}&gt;</code></pre>\n\n<p> </p>","a":[{"id":724834,"option":"It is responsible for setting the justification to center.","correct":true},{"id":724835,"option":"It is responsible for setting the space between the components.","correct":false},{"id":724836,"option":"It will give an error as property is set to a wrong value.","correct":false},{"id":725495,"option":"None of these","correct":false}]},{"q":"<p style=\"margin-left: 0cm; margin-right: 0cm;\">Which of the following statements about React Native is true?</p>","a":[{"id":724830,"option":"In React Native, all dimensions have fixed unit, and are used for the representation of density-independent pixels.","correct":false},{"id":724831,"option":"In React Native, all dimensions have no unit, and are used for the representation of density-independent pixels.","correct":true},{"id":724832,"option":"In React Native, all dimensions have no unit, and are used for the representation of density-dependent pixels.","correct":false},{"id":724833,"option":"In React Native, all dimensions have fixed unit, and are used for the representation of density-dependent pixels.","correct":false}]},{"q":"<p style=\"margin-left: 0cm; margin-right: 0cm;\">In React Native, which of these touchable components cannot be used to customize the buttons and to capture tapping gestures for the iOS app?</p>\n\n<p> </p>","a":[{"id":724102,"option":"TouchableHighlight","correct":false},{"id":724103,"option":"TouchableNativeFeedback","correct":true},{"id":724104,"option":"TouchableOpacity","correct":false},{"id":724105,"option":"TouchableWithoutFeedback","correct":false}]},{"q":"<p>You are building an Android application by using the React Native framework. Which of the following permissions must be added to the <strong>Android APK</strong> by default for the <strong>debug</strong> mode:</p>\n\n<ol>\n\t<li>android.permission.INTERNET</li>\n\t<li>android.permission.SYSTEM_ALERT_WINDOW</li>\n\t<li>android.permission.READ_PHONE_STATE</li>\n</ol>","a":[{"id":916518,"option":"1 and 2","correct":true},{"id":916519,"option":"2 and 3","correct":false},{"id":916520,"option":"1 and 3","correct":false},{"id":916521,"option":"None of these","correct":false}]},{"q":"<p>In React Native, you are using the <strong>AccessibilityInfo </strong>API to query the <strong>screen reader</strong> state. Which of the following situations sets the <strong>reduceMotionChanged</strong> event to the <strong>true</strong> state:</p>\n\n<ol>\n\t<li>When a reduce motion is enabled</li>\n\t<li>When Transition Animation Scale in 'Developer options' is Animation off</li>\n\t<li>When Transition Animation Scale in 'Developer options' is Animation on</li>\n</ol>\n\n<p> </p>\n\n<p> </p>\n\n<p> </p>\n\n<p> </p>","a":[{"id":916502,"option":"1","correct":false},{"id":916503,"option":"2","correct":false},{"id":916504,"option":"3","correct":false},{"id":916505,"option":"1 and 2","correct":true}]},{"q":"<p>In React Native, you are building a project by using <strong>continuous integration</strong> systems. Which of the following folders is appropriate to store the <strong>FBSDK</strong> dependencies while performing the operation?</p>","a":[{"id":916490,"option":"ios/Framework","correct":true},{"id":916491,"option":"ios/utility","correct":false},{"id":916492,"option":"ios/assets","correct":false},{"id":916493,"option":"ios/Config","correct":false}]},{"q":"<p>In React Native, if the following error occurs in your system, then which of these commands can resolve this issue:</p>\n\n<p><strong>Error</strong></p>\n\n<pre class=\"prettyprint\"><code>npm WARN locking Error: EACCES</code></pre>","a":[{"id":916482,"option":"sudo chown -R $USER ~/.npm\r\nsudo chown -R $USER /usr/local/lib/node_modules","correct":true},{"id":916483,"option":"import React from 'react';\r\nimport Firebase from 'firebase';","correct":false},{"id":916484,"option":"echo fs.inotify.max_user_watches=582222 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p","correct":false},{"id":916485,"option":"None of these","correct":false}]},{"q":"<p>In React Native, which of the following <strong>StyleSheet API</strong> methods is used to lookup IDs that are returned by <strong>Stylesheet.register</strong>?</p>","a":[{"id":916434,"option":"flatten","correct":true},{"id":916435,"option":"compose","correct":false},{"id":916436,"option":"StyleAttributePreprocessor","correct":false},{"id":916437,"option":"getStyleAttributePreprocessor","correct":false}]},{"q":"<p>In React Native, which of the following events is used to trigger an accessibility event on a UI component while working with the <strong>sendAccessibiityEvent </strong>method:</p>\n\n<ol>\n\t<li>typeWindowStateChanged</li>\n\t<li>typeViewFocused</li>\n\t<li>typeViewClicked</li>\n</ol>\n\n<p> </p>","a":[{"id":916426,"option":"1 and 2","correct":false},{"id":916427,"option":"2 and 3","correct":false},{"id":916428,"option":"1 and 3","correct":false},{"id":916429,"option":"All of these","correct":true}]},{"q":"<p>In React Native, if you are required to create a native module, then which of the following tools is used to set up a <strong>boilerplate</strong> that represents the best practices?</p>","a":[{"id":916414,"option":"react-native new-library","correct":false},{"id":916415,"option":"create-react-native-module","correct":true},{"id":916416,"option":"create-react-native-project","correct":false},{"id":916417,"option":"create-react-native-library","correct":false}]},{"q":"<p>In React Native, which of the following <strong>Flexbox</strong> properties is used to determine the distribution of elements inside a container?</p>","a":[{"id":916366,"option":"flexDirection","correct":false},{"id":916367,"option":"justifyContent","correct":false},{"id":916368,"option":"alignItems","correct":true},{"id":916369,"option":"None of these","correct":false}]},{"q":"<p>Which of the following statements about React Native is correct:</p>\n\n<ol>\n\t<li>The src attribute is named source in React Native and it takes an object with a uri attribute.</li>\n\t<li>The object taken by the source in React native allows us to attach metadata to it.</li>\n</ol>","a":[{"id":736800,"option":"1","correct":false},{"id":736801,"option":"2","correct":false},{"id":736802,"option":"Both 1 and 2 are  true and 2 is the correct explanation for 1.","correct":true},{"id":736803,"option":"Both 1 and 2 are  true but 2 is not the correct explanation for 1.","correct":false}]},{"q":"<p>In React Native, assume that you want to make a request to a code that animates a view in your application such that the code is executed as soon as possible. Which of the following methods can be used to do so?   </p>","a":[{"id":736792,"option":"requestAnimationFrame(fn)","correct":false},{"id":736793,"option":"setTimeout(fn, 0)","correct":false},{"id":736794,"option":"Both of these","correct":true},{"id":736795,"option":"None of these","correct":false}]},{"q":"<p>In React Native, you are using an animated API. You find that if an animation in a group fails, then all subsequent animations are stopped altogether. Which of these options in Animated.parallel can be used to remedy this issue?</p>","a":[{"id":736700,"option":"stopTogether","correct":true},{"id":736701,"option":"skipInactive","correct":false},{"id":736702,"option":"skipResponse","correct":false},{"id":736703,"option":"skipFrame","correct":false}]},{"q":"<p>In React Native, assume that you are working on static non-image resources. Which of these resolver options in metro configuration would allow you to add support for a customized audio file type?</p>","a":[{"id":736660,"option":"assetType","correct":false},{"id":736661,"option":"includeAsset","correct":false},{"id":736662,"option":"assetAdd","correct":false},{"id":736663,"option":"assetExts","correct":true}]},{"q":"<p>In React Native, assume that your current application uses <strong>React.createElement </strong>to construct a simple UI, which React turns into the Native equivalent. The JavaScript code is perfectly readable in its present form but a more complex UI is suddenly nested. In which of these ways would you handle this case?</p>","a":[{"id":736596,"option":"You need to modify the body of render with JSX extension when the app is till running.","correct":true},{"id":736597,"option":"You need to modify the body of render with JSX extension when the app is not running.","correct":false},{"id":736598,"option":"You need to remove the body of render completely when the app is still running.","correct":false},{"id":736599,"option":"You need to remove the body of render completely when the app is not running.","correct":false}]},{"q":"<p>In React Native, assume that you have defined the initial state for text input. Which of these functions would you create to update state?</p>","a":[{"id":736403,"option":"handlePassword","correct":false},{"id":736404,"option":"handleEmail","correct":false},{"id":736405,"option":"Both of these","correct":true},{"id":736406,"option":"handleID\r\n","correct":false}]},{"q":"<p>Which of the following statements about React Native is true?</p>","a":[{"id":736343,"option":"Background determines the background drawable that is going to be displayed as feedback.","correct":false},{"id":736344,"option":"activeOpacity determines the opacity of wrapped view when it is touched.","correct":false},{"id":736345,"option":"Both of these","correct":true},{"id":736346,"option":"None of these","correct":false}]},{"q":"<p>In React Native, you are trying to use the <strong>gesture responder </strong>system. If a view returns the true state and attempts to become the responder, then which of the following events can occur:</p>\n\n<ol>\n\t<li>View.props.onResponderGrant: (evt) =&gt; {}</li>\n\t<li>View.props.onResponderReject: (evt) =&gt; {}</li>\n</ol>","a":[{"id":916506,"option":"1","correct":false},{"id":916507,"option":"2","correct":false},{"id":916508,"option":"Both of these","correct":true},{"id":916509,"option":"None of these","correct":false}]},{"q":"<p>In React Native, you are working with fetch and cookie-based authentication while building an application. Which of the following configurations cannot be used to avoid the known issues in the process:</p>\n\n<ol>\n\t<li>redirect:manual</li>\n\t<li>credentials:omit</li>\n</ol>","a":[{"id":916498,"option":"1","correct":false},{"id":916499,"option":"2","correct":false},{"id":916500,"option":"Both of these","correct":true},{"id":916501,"option":"None of these","correct":false}]},{"q":"<p>In React Native, if you are using the <strong>ducks modular </strong>approach to structure your project folder, then which of the following rules must be followed:</p>\n\n<ol>\n\t<li>A single folder must contain the entire logic for handling only one concept in the application.</li>\n\t<li>Code with a similar purpose must be included within the same file.</li>\n</ol>","a":[{"id":916486,"option":"1","correct":false},{"id":916487,"option":"2","correct":false},{"id":916488,"option":"Both of these","correct":true},{"id":916489,"option":"None of these","correct":false}]},{"q":"<p>In React Native, which of the following is the correct order of steps that must be followed while vending a view in Android:</p>\n\n<p><strong>Steps</strong></p>\n\n<ol>\n\t<li>Register the manager in the <strong>createViewManagers</strong> method of the applications package.</li>\n\t<li>Expose the setter of the view property by using the <strong>@ReactProp</strong> (or <strong>@ReactPropGroup</strong>) annotation.</li>\n\t<li>Create the <strong>ViewManager</strong> subclass.</li>\n\t<li>Implement the <strong>createViewInstance</strong> method.</li>\n\t<li>Implement the JavaScript module.<br>\n\t </li>\n</ol>","a":[{"id":916454,"option":"2 -> 3 -> 5 -> 4 -> 1","correct":false},{"id":916455,"option":"3 -> 4 -> 2 -> 1 -> 5","correct":false},{"id":916456,"option":"3 -> 4 -> 2 -> 5 -> 1","correct":true},{"id":916457,"option":"3 -> 4 -> 5 -> 2 -> 1","correct":false}]},{"q":"<p>In React Native, you are building an Android application. Which of the following properties is used to utilize the <strong>TalkBack </strong>voice reader<strong> </strong>to alert the end user when a component changes dynamically?</p>","a":[{"id":916422,"option":"AccessibilityViewIsModal","correct":false},{"id":916423,"option":"AccessibilityLiveRegion","correct":true},{"id":916424,"option":"AccessibilityVoiceAlert","correct":false},{"id":916425,"option":"AccessibilityDetectChange","correct":false}]},{"q":"<p>In React Native, which of the following custom functions is called whenever a user performs a double-tap with two fingers in an iOS application?</p>","a":[{"id":916418,"option":"onMagicTap ","correct":true},{"id":916419,"option":"onAccessibilityTap ","correct":false},{"id":916420,"option":"onModalTap","correct":false},{"id":916421,"option":"onDoubleTap","correct":false}]},{"q":"<p>In React Native, which of the following <strong>Flexbox </strong>properties is added to the style of a component to determine the distribution of children along the <strong>primary</strong> axis?</p>","a":[{"id":916398,"option":"styleParameter","correct":false},{"id":916399,"option":"flexDirection","correct":false},{"id":916400,"option":"justifyContent","correct":true},{"id":916401,"option":"alignItems","correct":false}]},{"q":"<p>In React Native, which of the following commands is used to type-check new <strong>TypeScript </strong>files?</p>","a":[{"id":916394,"option":"yarn tsc","correct":true},{"id":916395,"option":"yarn manifest","correct":false},{"id":916396,"option":"tsc bundle","correct":false},{"id":916397,"option":"tsc manifest","correct":false}]},{"q":"<p>You are using the modal component of the React Native framework. Which of the following callbacks functions are invoked when the user clicks the <strong>hardware back</strong> button on Android?</p>","a":[{"id":916390,"option":"onRequestClose","correct":true},{"id":916391,"option":"onRequestOpen","correct":false},{"id":916392,"option":"onRequestEmit","correct":false},{"id":916393,"option":"onRequestPropogate","correct":false}]},{"q":"<p>Which of the following code is used to check whether your React Native code is running on an <strong>Android TV</strong>?</p>","a":[{"id":916382,"option":"var Platform = require('Platform');\r\nvar running_on_android_tv = Platform.isTV;","correct":true},{"id":916383,"option":" <category android:name=\"android.intent.category.LEANBACK_LAUNCHER\"\r\nisRunning(intent)=true/>","correct":false},{"id":916384,"option":"var Platform= require('intent')\r\nintent.isRunning()=true;","correct":false},{"id":916385,"option":"\"var Platform= require('context')\r\ncontext.isSet()=true;\"","correct":false}]},{"q":"<p>Which of the following statements about the use of reducers in a React Native application are correct:</p>\n\n<ol>\n\t<li>You only connect a single reducer to your store.</li>\n\t<li>The return value by reducers is determined only by its input</li>\n\t<li>Reducers depend on deck information, therefore, its signature is exactly the same as <strong>decksReducer</strong>.</li>\n</ol>\n\n<p> </p>","a":[{"id":916378,"option":"1 and 2","correct":true},{"id":916379,"option":"2 and 3","correct":false},{"id":916380,"option":"1 and 3","correct":false},{"id":916381,"option":"All of these","correct":false}]},{"q":"<p>Which of the following environment variables is used to disable yellow boxes automatically while working in <strong>XCode </strong>on the React Native application?</p>","a":[{"id":916354,"option":"IS_TESTING ","correct":true},{"id":916355,"option":"IS_ALERT","correct":false},{"id":916356,"option":"HAS_ALERTS","correct":false},{"id":916357,"option":"IS_WARNING","correct":false}]},{"q":"<p>Which of the following folders is used to store the <strong>mixins</strong> option in a React Native Project?</p>","a":[{"id":916334,"option":"app/styles","correct":true},{"id":916335,"option":"app/utils","correct":false},{"id":916336,"option":"app/config","correct":false},{"id":916337,"option":"app/assets","correct":false}]},{"q":"<p>You are required to minimize the usage of <strong>../</strong>'s in the relative paths while working on a React Native project. Which of the following statements is the advantage of considering this design:</p>\n\n<ol>\n\t<li>You can easily refactor the project code.</li>\n\t<li>The understanding of the project increases.</li>\n\t<li>You can easily destructure objects.</li>\n</ol>","a":[{"id":916330,"option":"1 and 2","correct":true},{"id":916331,"option":"2 and 3","correct":false},{"id":916332,"option":"1 and 3","correct":false},{"id":916333,"option":"None of these","correct":false}]},{"q":"<p>In React Native, you are required to keep the styles outside the component file while building a project. Which of the following statements justifies this action?</p>","a":[{"id":916322,"option":"It helps you to maximize the reuse of code","correct":true},{"id":916323,"option":"It makes the debugging of the component logic easier","correct":false},{"id":916324,"option":"It helps you to minimize the component state","correct":false},{"id":916325,"option":"All of these","correct":false}]},{"q":"<p>Which of the following React Native component can be used to do the below mentioned things?<br>\n1. Display scrolling list of changing, but similarly structured, data.<br>\n2. Works for long lists of data, where the number of items might change over time.<br>\n3. Only renders elements that are currently showing on the screen, not all the elements at once.</p>\n\n<p> </p>\n\n<p>In React Native, which of the these components can perform the following tasks:</p>\n\n<ol>\n\t<li>Display scrolling list of changing, but similarly structured data</li>\n\t<li>Works for long lists of data, where the number of items might change over time</li>\n\t<li>Only renders elements that are currently showing on the screen, not all the elements at once</li>\n</ol>","a":[{"id":916466,"option":"1","correct":false},{"id":916467,"option":"2","correct":false},{"id":916468,"option":"1 and 3","correct":false},{"id":916469,"option":"All the above","correct":true}]},{"q":"<p>You want to detect when a user presses and holds a view for a set amount of time in a ReactJS<br>\nHow can these long presses be handled by using the Touchable components?</p>\n\n<p> </p>\n\n<p>In ReactJS, you want to detect when a user presses and holds a view for a set of time. In which of the following ways can the long presses be handled if you are using the Touchable components?</p>","a":[{"id":916474,"option":"By passing a function to the onLongPress props to the TouchableHighlight component.","correct":false},{"id":916475,"option":"By passing a function to the onLongPress props to any Touchable component","correct":true},{"id":916476,"option":"By passing a function to the onLongPress props to the TouchableNativeFeedback component.","correct":false},{"id":916477,"option":"By passing a function to the onLongPress props to the TouchableWithoutFeedback. component.","correct":false}]},{"q":"<p>In React Native, assume that you want to render content whose size is unknown to you and will be defined later dynamically. Which of these approaches to do so is valid?<br>\n </p>","a":[{"id":736784,"option":"Wrap your React Native view in a ScrollView component","correct":true},{"id":736785,"option":"Wrap your React Native view in a Blob and render it ","correct":false},{"id":736786,"option":"Wrap your React Native view in a ListView component","correct":false},{"id":736787,"option":"Wrap your React Native view in a FlatList component","correct":false}]},{"q":"<p>In React Native, assume that you want to identify the native module calls made by your application. Which of the following can be used to identify the native module calls:</p>\n\n<ol>\n\t<li>callJavaModuleMethod</li>\n\t<li>onBatchComplete</li>\n\t<li>DrawFrame</li>\n</ol>","a":[{"id":736776,"option":"1","correct":false},{"id":736777,"option":"2","correct":false},{"id":736778,"option":"1 and 3","correct":false},{"id":736779,"option":"1 and 2","correct":true}]},{"q":"<p>Assume that you are making a React Native component to be used in an application and you are asked not to use any cross-language properties. Which of these is a valid drawback of cross-language properties that can be a reason for such a request?</p>","a":[{"id":736768,"option":"Cross-language properties do not support callbacks.","correct":true},{"id":736769,"option":"Cross-language properties are not serializable.","correct":false},{"id":736770,"option":"Cross-language properties do not allow native methods to be used in the component.","correct":false},{"id":736771,"option":"Cross-language properties do not allow event capture to take place in the associated component.","correct":false}]},{"q":"<p>Assume that you need to present an interruptible animation in a React Native component. Which of the following can be used for this purpose?</p>","a":[{"id":736760,"option":"LayoutAnimation","correct":false},{"id":736761,"option":"Animated","correct":false},{"id":736762,"option":"Both of these","correct":true},{"id":736763,"option":"None of these","correct":false}]},{"q":"<p>In React Native, which of these is used to fix the following exception:</p>\n\n<pre class=\"prettyprint\"><code>ShellCommandUnresponsiveException exception </code></pre>\n\n<p> </p>","a":[{"id":736744,"option":"Downgrading gradle version","correct":true},{"id":736745,"option":"Reinstalling Bable","correct":false},{"id":736746,"option":"Adding the React Native component to .Bablerc","correct":false},{"id":736747,"option":"None of these","correct":false}]},{"q":"<p>Which of these statements about React Native is correct:</p>\n\n<ol>\n\t<li>The animation will always run a frame behind the gesture in the absence of Native driver support for Animated.event.</li>\n\t<li>The React Native is async in nature.<br>\n\t </li>\n</ol>","a":[{"id":736712,"option":"1","correct":false},{"id":736713,"option":"2","correct":false},{"id":736714,"option":"Both 1 and 2 are correct but 2 is not the correct explanation for 1.","correct":false},{"id":736715,"option":"Both 1 and 2  are correct and 2 is the correct explanation for 1.","correct":true}]},{"q":"<p>In React Native, you are extrapolating an output range. Which of the following can be used to ensure that the extrapolation values do not exceed the output range provided by you?</p>","a":[{"id":736704,"option":"clamp","correct":true},{"id":736705,"option":"extend","correct":false},{"id":736706,"option":"include","correct":false},{"id":736707,"option":"restrict","correct":false}]},{"q":"<p>Which of these factors is used to determine the exact behavior of the following React Native method:</p>\n\n<pre class=\"prettyprint\"><code>focus()</code></pre>\n\n<p> </p>","a":[{"id":736692,"option":"Platform used","correct":false},{"id":736693,"option":"Type of view","correct":false},{"id":736694,"option":"Both of these","correct":true},{"id":736695,"option":"None of these","correct":false}]},{"q":"<p>In React Native, which of these negotiation methods can be used for a view to be enquired whether it wants to be responder at the start of touch?</p>","a":[{"id":736648,"option":"View.props.onStartShouldSetResponder: (evt) => true,","correct":true},{"id":736649,"option":"View.props.onMoveShouldSetResponder: (evt) => true,","correct":false},{"id":736650,"option":"Both of these","correct":false},{"id":736651,"option":"None of these","correct":false}]},{"q":"<p>In React Native, if you have set <strong>myStyle</strong> as a property of the state for styling an element inside <strong>PresentationalAnimationComponent</strong>, then which of these functions will you create which will have a linear preset?</p>","a":[{"id":736431,"option":"expandElement","correct":false},{"id":736432,"option":"collapseElement","correct":true},{"id":736433,"option":"defineElement","correct":false},{"id":736434,"option":"createElement","correct":false}]},{"q":"<p>In React Native, if you have set <strong>myStyle</strong> as a property of the state for styling an element inside <strong>PresentationalAnimationComponent</strong>, then which of these functions will you create which will have a spring preset?</p>","a":[{"id":736427,"option":"expandElement","correct":true},{"id":736428,"option":"collapseElement","correct":false},{"id":736429,"option":"defineElement","correct":false},{"id":736430,"option":"createElement","correct":false}]},{"q":"<p>In React Native, assume that you are adding alignment to a component's style to determine the alignment of children along the secondary axis. If you have chosen the <strong>alignItems</strong> as '<strong>stretch</strong>', then which of the following components will allow the stretch to have an effect?</p>","a":[{"id":736419,"option":"Children having a fixed dimension along the secondary axis","correct":false},{"id":736420,"option":"Children not having a fixed dimension along the secondary axis","correct":true},{"id":736421,"option":"Children having a fixed dimension along the primary axis","correct":false},{"id":736422,"option":"Children having a variable dimension along the primary axis","correct":false}]},{"q":"<p>In React Native, you see margins and padding when you tap on an animated gif in a view. Which of the following can be used to make live changes to styles in this case:</p>\n\n<ol>\n\t<li>Built-in inspector</li>\n\t<li>Hot reloading</li>\n\t<li>React inspector</li>\n</ol>","a":[{"id":736379,"option":"1 and 2","correct":false},{"id":736380,"option":"2 and 3","correct":true},{"id":736381,"option":"1 and 3","correct":false},{"id":736382,"option":"All of these","correct":false}]},{"q":"<p>In React Native, which of the following is the simplest way to set the dimensions of a component?</p>","a":[{"id":736319,"option":"Flexible height and width","correct":false},{"id":736320,"option":"Set height and width","correct":true},{"id":736321,"option":"Set height and flexible width","correct":false},{"id":736322,"option":"Set width and flexible height","correct":false}]},{"q":"<p>In React Native, which of the following layout properties is used to determine how elements should be distributed inside the container along the secondary axis?</p>","a":[{"id":736271,"option":"flexDirection","correct":false},{"id":736272,"option":"justifyContent","correct":false},{"id":736273,"option":"alignItems","correct":true},{"id":736274,"option":"positionElement","correct":false}]},{"q":"<p>In React Native, which of these statements justifies the reason for the occurrence of the following error:</p>\n\n<pre class=\"prettyprint\"><code>ReactButton.qml non-existent property \"elide\" error upon startup</code></pre>\n\n<p><strong>Statements</strong></p>\n\n<ol>\n\t<li>QtWebEngine components are not installed</li>\n\t<li>QT5WebKit is not built locally</li>\n\t<li>web3 package is not installed</li>\n</ol>","a":[{"id":916514,"option":"1","correct":true},{"id":916515,"option":"2","correct":false},{"id":916516,"option":"3","correct":false},{"id":916517,"option":"None of these","correct":false}]},{"q":"<p>In React Native, which of the following Systrace methods is used to register values to the <strong>profileName </strong>in a <strong>Systrace </strong>timeline?</p>","a":[{"id":916438,"option":"counterEvent()","correct":true},{"id":916439,"option":"beginEvent()","correct":false},{"id":916440,"option":"isEnabled()","correct":false},{"id":916441,"option":"beginEvent()","correct":false}]},{"q":"<p>If you are configuring the <strong>ESLint</strong> rules for the React Native project, then which of the following rules must be configured that cannot allows lexical declarations in the <strong>case</strong> clauses?</p>","a":[{"id":916406,"option":"no-case-declarations","correct":true},{"id":916407,"option":"no-clause-declarations","correct":false},{"id":916408,"option":"no-extend-native","correct":false},{"id":916409,"option":"no-lexical-native","correct":false}]},{"q":"<p>In React Native, which of the following components is enabled by the <strong>Fast Refresh</strong> feature that preserves the <strong>local preserve</strong> state:</p>\n\n<ol>\n\t<li>Class </li>\n\t<li>Function</li>\n\t<li>Hooks</li>\n</ol>","a":[{"id":916342,"option":"1 and 2","correct":false},{"id":916343,"option":"2 and 3","correct":true},{"id":916344,"option":"1 and 3","correct":false},{"id":916345,"option":"All of these","correct":false}]},{"q":"<p>In React Native, which of the following statements about the <strong>F</strong><strong>ast Refresh </strong>feature is correct:</p>\n\n<ol>\n\t<li>It preserves the React local state in a function.</li>\n\t<li>The console.log string or debugger cannot be inserted into the components that are edited during a <strong>Fast Refresh</strong> session.</li>\n</ol>","a":[{"id":916338,"option":"1","correct":true},{"id":916339,"option":"2","correct":false},{"id":916340,"option":"Both of these","correct":false},{"id":916341,"option":"None of these","correct":false}]},{"q":"<p>In React Native, assume that you have a large Android application with multiple screens all of which will not be required in all sessions that take place. Which of these ways can you use to optimize the performance of the React Native components by using the RAM bundle format?</p>","a":[{"id":736788,"option":"By editing your android/app/build.gradle file","correct":true},{"id":736789,"option":"By editing the build phase","correct":false},{"id":736790,"option":"By editing the bable preset used in packaging","correct":false},{"id":736791,"option":"None of these","correct":false}]},{"q":"<p>Assume that you are using several instances of the same React Native component and need to distinguish each of these instances from the perspective of an event. Which of the following in the native view can be used as an identifier?</p>","a":[{"id":736772,"option":"reactTag","correct":true},{"id":736773,"option":"reactCallbackId","correct":false},{"id":736774,"option":"reactTypeId","correct":false},{"id":736775,"option":"reactEventId","correct":false}]},{"q":"<p>In React Native, assume that you have used the required syntax for statically including a video in a view. Which of these limitations will this approach suffer from?</p>","a":[{"id":736680,"option":"Video will have to use absolute positioning.","correct":true},{"id":736681,"option":"Video will have to use flexGrow.","correct":false},{"id":736682,"option":"Video will not be able to support gestures for play and pause.","correct":false},{"id":736683,"option":"None of these","correct":false}]},{"q":"<p>In React Native, assume that you are working with the Fetch API. Which of these methods can you use to return a promise that can be resolved to an array buffer representation of the request body?</p>","a":[{"id":736620,"option":"Body.arrayBuffer()","correct":true},{"id":736621,"option":"Request.arrayBuffer()","correct":false},{"id":736622,"option":"Resolver.arrayBuffer ()","correct":false},{"id":736623,"option":"Resolver.bodyType()","correct":false}]},{"q":"<p>In React Native, which of these statements about the <strong>touchable highlights</strong> is true?</p>","a":[{"id":736399,"option":"When a user presses the touchable highlight, it will get lighter and the underlying color will show through.","correct":false},{"id":736400,"option":"When a user uses touchable native feedback, it will simulate ink animation.","correct":true},{"id":736401,"option":"Both of these","correct":false},{"id":736402,"option":"None of these","correct":false}]},{"q":"<p>In React Native, which of the following would you use to debug a touch related code?</p>","a":[{"id":736375,"option":"Debugger","correct":false},{"id":736376,"option":"console.log","correct":true},{"id":736377,"option":"Both of these","correct":false},{"id":736378,"option":"None of these","correct":false}]},{"q":"<p>Which of the following object type props can be used anywhere in React Native?</p>","a":[{"id":736335,"option":"activeOpacity","correct":false},{"id":736336,"option":"tvParallaxProperties","correct":true},{"id":736337,"option":"underlayColor","correct":false},{"id":736338,"option":"onShowUnderlay","correct":false}]},{"q":"<p>In React Native, which of the following props for the switch component is valid?</p>","a":[{"id":736323,"option":"trackColor","correct":false},{"id":736324,"option":"tintColor","correct":false},{"id":736325,"option":"Both of these","correct":true},{"id":736326,"option":"None of these","correct":false}]},{"q":"<p>In React Native, you are creating a simple picker with two available options. Which of these functions will be triggered when a user is picked in this case?</p>","a":[{"id":736299,"option":"updateUser","correct":true},{"id":736300,"option":"this.state.user","correct":false},{"id":736301,"option":"the.user","correct":false},{"id":736302,"option":"updateStateUser","correct":false}]},{"q":"<p>If you are required to use the <strong>image </strong>view in JavaScript while building an Android application, then which of the following annotations can be used to expose the view property setters:</p>\n\n<ol>\n\t<li>@ReactProp</li>\n\t<li>@ReactPropGroup</li>\n\t<li>@ReactComponent</li>\n</ol>\n\n<p> </p>","a":[{"id":916442,"option":"1 and 2","correct":false},{"id":916443,"option":"2 and 3","correct":false},{"id":916444,"option":"1 and 3","correct":false},{"id":916445,"option":"All of these","correct":true}]},{"q":"<p>In React Native, you are required to import a stylesheet and assign it to the styles constant to create an Android application. Which of the following commands cannot be used for styling?</p>","a":[{"id":916370,"option":"px","correct":false},{"id":916371,"option":"%","correct":false},{"id":916372,"option":"camelCase","correct":true},{"id":916373,"option":"None of these","correct":false}]},{"q":"<p>In React Native, what would be the number of toggle functions that will get triggered by the <strong>onValueChange </strong>prop after a user presses the switch?</p>","a":[{"id":736315,"option":"1","correct":false},{"id":736316,"option":"2","correct":false},{"id":736317,"option":"3","correct":false},{"id":736318,"option":"4","correct":true}]}]
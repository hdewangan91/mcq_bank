[{"q":"<p>You have included a tracking column in your database to enable concurrency conflicts detection in the Entity Framework.<br>\nWhich of these would be a valid way to achieve the same?</p>","a":[{"id":1673235,"option":"Marking all primary-key properties in the entity by adding the ConcurrencyCheck attribute to them.","correct":false},{"id":1673236,"option":"Adding a non-tracking property in the database model to incorporate migration.","correct":false},{"id":1673237,"option":"Configuration of the entity framework to include the original values of every column in the table in the WHERE clause of UPDATE and DELETE commands.","correct":true},{"id":1673238,"option":"Remove the added controller and views and then test further to validate the effectiveness.","correct":false}]},{"q":"<p>You want to use Entity Framework core in your application to perform raw SQL queries.<br>\nWhich of these applications can you use Entity Framework core with in order to achieve this?</p>","a":[{"id":1673227,"option":"ASP.NET Core Razor Pages","correct":false},{"id":1673228,"option":"ASP.NET Core MVC ","correct":true},{"id":1673229,"option":"Both 1 and 2","correct":false},{"id":1673230,"option":"Neither 1 nor 2","correct":false}]},{"q":"<p>In Entity Framework, you are working on the <strong>DbContext</strong> API. You have created an <strong>Employees</strong> database that contains the name and the date of enrollment of an employee in your organization. If you are required to create details of a new employee Alice and register the same to the database, then which of these methods must replace '<strong>x</strong>' and '<strong>y</strong>' in the following C# code:</p>\n\n<pre class=\"prettyprint\"><code>private static void AddEmployee() \n{\n   using (var context = new UniContext()) \n   {\n      var employee = new Employee \n      {\n         Name = \"Alice\", \n         EnrollmentDate = y; \n      };\n      x;\n      context.SaveChanges();\n   }\n}</code></pre>\n\n<p> </p>","a":[{"id":1136433,"option":"x : DateTime(\"2020-06-04\");\r\ny : context.Employees.Add(employee);","correct":false},{"id":1136434,"option":"x : DateTime.format(\"2020-06-04\");\r\ny : context.Employees.Add(employee);","correct":false},{"id":1136435,"option":"x : context.Employees.Add(employee);\r\ny : DateTime.format(\"2020-06-04\");","correct":false},{"id":1136436,"option":"x : context.Employees.Add(employee);\r\ny : DateTime.parse(\"2020-06-04\");","correct":true}]},{"q":"<p>You are working on a .NET implementation that uses Entity framework 6 along with Web API 2. In the given scenario, which of the following snippets can be used for tracing the SQL generated by the Entity framework in the relational database?</p>","a":[{"id":1418867,"option":"this.Database.Log = s => System.Diagnostics.Debug.WriteLine(s);","correct":true},{"id":1418868,"option":"System.Diagnostics.console.log()","correct":false},{"id":1418869,"option":"this.System.Diagnostics.console.log()","correct":false},{"id":1418870,"option":"this.System.Diagnostics.console.log=> s.debug()","correct":false}]},{"q":"<p>In Entity Framework, you are working on the entity data model. Which of the following model layers represents the schematic implementation of the backend datastore?</p>\n\n<p> </p>","a":[{"id":1154164,"option":"Conceptual Schema Definition Layer (CSDL)","correct":false},{"id":1154165,"option":"Storage Schema Definition Layer (SSDL)","correct":true},{"id":1154166,"option":"Mapping Schema Definition Layer (MSDL)","correct":false},{"id":1154167,"option":"Entity type Schema Definition Layer (ESDL)","correct":false}]},{"q":"<p>The code snippet given alongside is generated when adding a code based migration in .NET Entity Framework 6.<br>\nWhat can be used in place of XXX to specify a default value of 3 for Blog.Rating in this context?</p>\n\n<pre class=\"prettyprint\"><code>namespace MigrationsAutomaticDemo.Migrations\n {\n using System;\n using System.Data.Entity.Migrations;\n\n public partial class AddBlogRating : DbMigration\n {\n public override void Up()\n {\n XXX \n}\n\n public override void Down()\n {\n DropColumn(\"Blogs\", \"Rating\");\n }\n }\n }</code></pre>\n\n<p> </p>","a":[{"id":1418757,"option":"AddColumn(\"Blogs\", \"Rating\", c => c.Int(nullable: false, defaultValue: 3))","correct":true},{"id":1418758,"option":"AddColumn(\"Blogs\", \"Rating\", c => c.Int(nullable: false, 3))","correct":false},{"id":1418759,"option":"AddColumn(\"Blogs\", \"Rating\", c.Int(nullable: false, defaultValue: 3))","correct":false},{"id":1418760,"option":"Either 1 or 3","correct":false}]},{"q":"<p>in Entity Framework 6, you want to execute a query while working with DbContext. In which of the following conditions will the query execute?<strong>Conditions</strong><br>\n1. If the query is enumerated by a collection operation.<br>\n2. If LINQ operators such as First or Any are specified in the outermost part of the query.<br>\n3. If the query is enumerated by a foreach statement.</p>","a":[{"id":1418712,"option":"Only 1 and 2","correct":false},{"id":1418713,"option":"Only 2 and 3","correct":false},{"id":1418714,"option":"Only 1 and 3","correct":false},{"id":1418715,"option":"All 1, 2 and 3","correct":true}]},{"q":"<p>Which of the following deductions are valid with respect to the code snippet given alongside?</p>\n\n<pre class=\"prettyprint\"><code>using (var context = new BloggingContext())\n{\n var blog = context.Blogs.Find(1);\n blog.Name = \"The New ADO.NET Blog\";\n\n bool saveFailed;\n do\n {\n saveFailed = false;\n\n try\n {\n context.SaveChanges();\n }\n catch (DbUpdateConcurrencyException ex)\n {\n saveFailed = true;\n\n // Update the values of the entity that failed to save from the store\n ex.Entries.Single().Reload();\n }\n\n } while (saveFailed);\n}</code></pre>\n\n<p>1. The values of the entity that failed to save from the store are updated<br>\n2. The Reload method is used here to overwrite the previously saved values of the entity</p>","a":[{"id":1418797,"option":"Only 1","correct":true},{"id":1418798,"option":"Only 2","correct":false},{"id":1418799,"option":"Both 1 and 3","correct":false},{"id":1418800,"option":"Neither 1 nor 2","correct":false}]},{"q":"<p>You have enabled a custom convention as given alongside when working with .Net Entity Framework 6.<br>\n<br>\nWhich of these code snippets can you use to configure all properties called Key to be the primary key of their entity only if they are an integer?</p>\n\n<pre class=\"prettyprint\"><code>public class ProductContext : DbContext\n {\n static ProductContext()\n {\n Database.SetInitializer(new DropCreateDatabaseIfModelChanges&lt;ProductContext&gt;());\n }\n\n public DbSet&lt;Product&gt; Products { get; set; }\n\n protected override void OnModelCreating(DbModelBuilder modelBuilder)\n {\n modelBuilder.Properties()\n .Where(p =&gt; p.Name == \"Key\")\n .Configure(p =&gt; p.IsKey());\n }\n }</code></pre>\n\n<p> </p>","a":[{"id":1418707,"option":"modelBuilder.Properties<int>()\r\n.Where(p => p.Name == \"Key\")\r\n.Configure(p => p.IsKey());","correct":true},{"id":1418708,"option":"modelBuilder.Properties<int>()\r\n.Where(x => x.Name == \"Key\")\r\n.Configure(x => x.IsKey().HasColumnOrder(1));","correct":false},{"id":1418709,"option":"modelBuilder.Properties<int>()\r\n.Configure(p => p.IsKey());\r\n.Where(p => p.Name == \"Key\")","correct":false},{"id":1418710,"option":"Either 1 or 2","correct":false},{"id":1418711,"option":"Either 2 or 3","correct":false}]}]
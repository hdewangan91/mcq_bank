[{"q":"<p>Lisa was working on a task given by her teacher. The task was to find out the maximum product value of&nbsp;the&nbsp;elements of&nbsp;all possible subarrays in an array of integers.</p>\n\n<p><strong>Example</strong><br>\nConsider an array <em>[2, 1, 3]</em><br>\nThe possible subarrays are<br>\n<em>[ 2 ] -&gt; product = 2<br>\n[ 1 ] -&gt; product = 1<br>\n[ 3 ] -&gt; product = 3<br>\n[ 2, 1 ] -&gt; product = 2 * 1 = 2<br>\n[ 1, 3 ] -&gt; product = 1 * 3 = 3<br>\n[ 2, 1, 3 ] -&gt; product = 2 * 1 * 3 = 6 -&gt;&nbsp;maximum product value</em><br>\nSo the maximum product of all the possible subarrays is <em>6</em>.<br>\nNow,&nbsp;she has implemented the following&nbsp;pseudocode where the function <em>Maximum_Product</em>&nbsp;returns the maximum product value of all the subarrays for a given array.</p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>FUNCTION Maximum_Product(arr, n)\n\n    minVal = arr[0]\n    maxVal = arr[0]\n    \n    ans = arr[0]\n    \n    FOR i -&gt; 1 to n-1\n        IF (arr[i] &lt; 0)\n            temp = maxVal\n            maxVal = minVal\n            minVal = temp\n        ENDIF\n    \n        // Line 11\n        // Line 12\n    \n        ans = max(ans, maxVal)\n    ENDFOR\n    \n    RETURN ans\n\nDECLARE arr = ARRAY[0,n-1] of {-1, -2, -5, 0, 6, 8, 10}\nn = 7\nPRINT Maximum_Product(arr, n)</code></pre>\n\n<p><em>Notes</em></p>\n\n<ol>\n\t<li>Do not consider empty subarray.</li>\n\t<li>The function max() returns the maximum element. Eg<em> max(2, 4)</em> returns <em>4</em></li>\n\t<li>The function min()<strong> </strong>returns the minimum element. Eg <em>min(2, 4)</em> returns <em>2</em></li>\n</ol>\n\n<p>She got stuck at Line 11 and<strong> </strong>Line 12. If you were asked to complete the above pseudocode then which of the following code snippets would you choose to replace Line 11<strong> </strong>and<strong> </strong>Line 12 such that the output of the pseudocode is <em>480</em>.</p>\n\n<p><strong>Code Snippets</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>maxVal = max(arr[i], minVal * arr[i])\nminVal = min(arr[i], maxVal * arr[i])</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>maxVal = max(arr[i], maxVal * arr[i])\nminVal = min(arr[i], minVal * arr[i])</code></pre>\n\n<p>3.&nbsp;</p>\n\n<pre class=\"prettyprint\"><code>maxVal = min(arr[i], maxVal * arr[i])\nminVal = max(arr[i], minVal * arr[i])</code></pre>\n\n<p>4.&nbsp;</p>\n\n<pre class=\"prettyprint\"><code>maxVal = min(arr[i], minVal * arr[i])\nminVal = max(arr[i], maxVal * arr[i])</code></pre>\n\n<ol>\n</ol>","a":[{"id":1556010,"option":"1","correct":false},{"id":1556011,"option":"2","correct":true},{"id":1556012,"option":"3","correct":false},{"id":1556013,"option":"4","correct":false}]},{"q":"<p>Alice is working as a cloud administrator in an organization. She wants to encrypt her data while sending it to her clients to make sure that the data is secured and uninterrupted. She had implemented the Data Encryption Standard (DES) algorithm earlier but she wanted an algorithm that is faster and better than DES. She wants to implement the Advanced Encryption Standard algorithm (AES)&nbsp;for this purpose. Now, which of the following sequences of steps does she needs to implement in this scenario:</p>\n\n<p><strong>Steps</strong></p>\n\n<ol>\n\t<li>Add the initial round key to the starting state array.</li>\n\t<li>Perform the tenth and final round of state manipulation.</li>\n\t<li>Derive the set of round keys from the cipher key.</li>\n\t<li>Initialize the state array with the block data (plaintext).</li>\n\t<li>Perform nine rounds of state manipulation.</li>\n\t<li>Copy the final state array out as the encrypted data (ciphertext).</li>\n</ol>\n\n<p><strong>Note:&nbsp;</strong>The block to be encrypted is just a sequence of 128 bits.&nbsp;</p>","a":[{"id":1708459,"option":"1 -> 2 -> 3 -> 4 -> 5 -> 6","correct":false},{"id":1708460,"option":"1 -> 3 -> 5 -> 2 -> 4 -> 6","correct":false},{"id":1708461,"option":"3 -> 4 -> 1 -> 5 -> 2 -> 6","correct":true},{"id":1708462,"option":"3 -> 4 -> 5 -> 2 -> 1 -> 6","correct":false}]},{"q":"<p>Consider you are working on Data Structures. You are given two strings <strong>s1</strong> and <strong>s2</strong>. Your task is to convert the string <strong>s1</strong> into <strong>s2 </strong>by <strong>inserting</strong> or <strong>removing</strong> or <strong>replacing</strong> any character any number of times.</p>\n\n<p><strong>Example - 1</strong><br>\nInput: <strong>s1</strong> = \"curs\", <strong>s2</strong> = \"car\"<br>\n<strong>Operations</strong></p>\n\n<ol>\n\t<li>Remove 's' from s1</li>\n\t<li>Replace 'u' with 'a'</li>\n</ol>\n\n<p>Output: Minimum number of operations required to convert string s1 to s2 is <strong>2</strong></p>\n\n<p> </p>\n\n<p><strong>Example - 2</strong><br>\nInput: <strong>s1</strong> = \"cars\", <strong>s2</strong> = \"car\"<br>\nWe can convert s1 into s2 by removing 's'.<br>\nOutput: Minimum number of operations required to convert string s1 to s2 is <strong>1</strong></p>\n\n<p> </p>\n\n<p>So you implemented a function <strong>Minimum_Operations</strong> that takes the <strong>s1</strong> and <strong>s2</strong> as input and <strong>n,m</strong> where <strong>n</strong> is the length of <strong>s1</strong>, <strong>m</strong> is the length of <strong>s2</strong> and returns the minimum number of operations required to convert String <strong>s1</strong> into <strong>s2</strong>. And also the function <strong>Minimum_Operations </strong>takes a 2 Dimensional array named <strong>dp </strong>of size <strong>n*m </strong>with each value<strong> -1.</strong></p>\n\n<p> </p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>FUNCTION Minimum_Operations(s1, s2, n, m, dp)\n    \n    IF (n == 0) :\n      RETURN m       \n    IF (m == 0) :\n      RETURN n\n                    \n    IF (dp[n][m] != -1)  :\n      RETURN dp[n][m];\n    \n    INT m1,m2,m3\n\n    IF (s1[n - 1] == s2[m - 1])        \n        IF (dp[n - 1][m - 1] == -1) \n            dp[n][m] = minDis(s1, s2, n - 1, m - 1, dp)   \n            RETURN dp[n][m]                  \n        ELSE \n            dp[n][m] = dp[n - 1][m - 1]\n            RETURN dp[n][m]\n        ENDIF\n    ELSE            \n        IF (dp[n - 1][m] != -1)   \n            m1 = dp[n - 1][m]     \n        ELSE \n            m1 = Minimum_Operations(s1, s2, n - 1, m, dp)\n        ENDIF\n        \n        IF (dp[n][m - 1] != -1)                \n            m2 = dp[n][m - 1]           \n        ELSE \n            m2 = Minimum_Operations(s1, s2, n, m - 1, dp)  \n        ENDIF\n        \n        IF (dp[n - 1][m - 1] != -1)    \n            m3 = dp[n - 1][m - 1]   \n        ELSE \n            m3 = Minimum_Operations(s1, s2, n - 1, m - 1, dp)\n        ENDIF\n        \n        dp[n][m] = 1 + min(m1, min(m2, m3))\n        RETURN dp[n][m]\n    ENDIF\n    \nENDFUN</code></pre>\n\n<p><strong>Note</strong> : </p>\n\n<ol>\n\t<li>We can perform any number of operations in any order.</li>\n\t<li>The function <strong>max()</strong> returns the maximum element. For Eg max(2,4) returns 4</li>\n\t<li>The function <strong>min() </strong>returns the minimum element. For Eg min(2,4) returns 2</li>\n\t<li>You can only convert <strong>s1</strong> into <strong>s2</strong></li>\n</ol>\n\n<p>What will be the Space and Time complexity of the above pseudocode?</p>\n\n<p> </p>","a":[{"id":1565800,"option":"Space complexity = O(m+n) , Time complexity = O(m+n)","correct":false},{"id":1565801,"option":"Space complexity = O(m+n) , Time complexity = O(m*n)","correct":false},{"id":1565802,"option":"Space complexity = O(m*n) , Time complexity = O(m+n)","correct":false},{"id":1565803,"option":"Space complexity = O(m*n) , Time complexity = O(m*n)","correct":true}]},{"q":"<p>Paul and John are friends and they always love to play games. Paul gives John a number <strong>N (N&gt;0) </strong>and a list of numbers <strong>[1,2,3,4,5,6]</strong>. Now John should figure out the total number of possibilities to choose numbers from the list such that sum of the chosen numbers should equal <strong>N</strong>.<br>\n </p>\n\n<p><strong>Example :</strong><br>\nIf <strong>N</strong>=3<br>\nAll possibilities are<br>\n[1,1,1] = 1+1+1 = 3<br>\n[1,2] = 1+2 = 3<br>\n[2,1] = 2+1 = 3<br>\n[3] = 3<br>\nTotal there are total 4 possibilities.<br>\n </p>\n\n<p><strong>Note :</strong> [1,2] and [2,1] both are considered.</p>\n\n<p><br>\nJohn wants to implement a function <em><strong>no_of_possibilities </strong></em>that takes <strong>N </strong>as input and returns the total number of possibilities. But John was confused at <strong>Line 5</strong>.</p>\n\n<p> </p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>FUNCTION no_of_possibilities( n )\n\tDECLARE p = ARRAY[0,6] of {0,1,2,4,8,16,32}\n\tFOR i -&gt; 7 to n\n\t\ts=sum_of_elements(p)    // It assigns the total sum of elements of the array to s\n\t\t    // Line 5   \n\tENDFOR\n    RETURN p[n%7]\nENDFUN</code></pre>\n\n<p> </p>\n\n<p>Which of the following code snippets will best fit in <strong>Line 5</strong> such that the function <em><strong>no_of_possibilities </strong></em>will always return the correct output for <strong>N</strong>?</p>\n\n<p> </p>\n\n<p><strong>Code snippets</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>p[i%6] = (s-p[i%6])</code></pre>\n\n<p><br>\n<strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>p[i%7] = (s+p[i%7])</code></pre>\n\n<p><br>\n<strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>p[i%6] = (s+p[i%6])</code></pre>\n\n<p><br>\n<strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>p[i%7] = (s-p[i%7])</code></pre>\n\n<p> </p>","a":[{"id":1532606,"option":"1","correct":false},{"id":1532607,"option":"2","correct":false},{"id":1532608,"option":"3","correct":false},{"id":1532609,"option":"4","correct":true}]},{"q":"<p>Mary wants to go home using local transport. The total amount of cost required to reach her home is <strong>N (N&gt;0)</strong>. She has <strong>coins</strong> and each <strong>coin </strong>has a value. The value of the <strong>coin </strong>can be anyone from the list<strong> [ 1, 2, 3 ].</strong> Eg : If you have 2 <strong>coins </strong>the values can be {1,1},{1,2},{1,3},{2,2},{2,3},{3,3}. Now Mary should choose few coins such that the sum of the values of the coins is <strong>N</strong>. So she found that there are so many possible ways such that the sum of the values of the <strong>coins </strong>would be <strong>N</strong>.</p>\n\n<p><strong>Example : </strong>For N=3 the possibleways can be<br>\n{1, 1, 1}<br>\n{1, 2}<br>\n{3}<br>\nThere are a total of 3 ways in which the sum of the chosen <strong>coins </strong>will be N(3).<br>\n </p>\n\n<p><strong>Note :</strong></p>\n\n<ul>\n\t<li>(1,2) and (2,1) are considered only under one set. Hence the set will be {1, 2}.</li>\n\t<li>Mary can choose any coin (from the list)  any number of times</li>\n</ul>\n\n<p>Mary was so curious to find out the total number of possible ways to select <strong>coins </strong>such that the sum of total <strong>coins </strong>selected would be N.<br>\nMary implemented a code to find out the total number of possible ways of choosing <strong>coins</strong>. But she was stuck in <strong>Line 14</strong>. Help her to write the code completely.</p>\n\n<p> </p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>FUNCTION total_ways(a,t,N)\n\tIF (N==0)\n\t\tRETURN 1\n\tENDIF\n\n\tIF (N&lt;0)\n\t\tRETURN 0\n\tENDIF\n\n\tIF (t&lt;=0 and N&gt;=1)\n\t\tRETURN 0\n\tENDIF\n\n\t\t// Line 14\n\nENDFUN\n \nDECLARE a = ARRAY[0,2] of {1,2,3}\nt = 3  // size of the list a\nN = 18\nPRINT total_ways(a,t,N)</code></pre>\n\n<p> </p>\n\n<p>Which of the following code snippets will best fit in <strong>Line 14</strong> so that the code's output will be <strong>37</strong>?</p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>RETURN total_ways( a, t, N ) + total_ways( a, t, N-a[t-1] );</code></pre>\n\n<p><br>\n<strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>RETURN total_ways( a, t-1, N ) + total_ways( a, t, a[t-1] );</code></pre>\n\n<p><br>\n<strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>RETURN total_ways( a, t, N ) + total_ways( a, t, a[t-1] );</code></pre>\n\n<p><br>\n<strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>RETURN total_ways( a, t-1, N ) + total_ways( a, t, N-a[t-1] );</code></pre>\n\n<p> </p>","a":[{"id":1529828,"option":"1","correct":false},{"id":1529829,"option":"2","correct":false},{"id":1529830,"option":"3","correct":false},{"id":1529831,"option":"4","correct":true}]},{"q":"<p>Mike was given a <strong>n*n</strong> matrix with distinct integers. He needs to find the length of the longest path such that all cells along the path are in increasing order with a difference of <strong>1</strong>. He can start from any cell and can only move in <strong>4</strong> directions. If the cell is currently at <strong>(i,j)</strong> then it can move to <strong>(i-1,j)</strong> or <strong>(i,j+1)</strong> or <strong>(i+1, j) </strong>or <strong>(i, j-1)</strong> with the condition that the adjacent cells should differ by <strong>1</strong>.</p>\n\n<p><strong>Example</strong> <br>\nConsider the matrix <strong>{{ 1, 2 },<br>\n                                 { 5, 3 },}</strong></p>\n\n<p>All possible longest paths from each cell are<br>\n<strong>1-2-3</strong> -&gt; lenght = <strong>3</strong><br>\n<strong>2-3</strong> -&gt; lenght = <strong>2</strong><br>\n<strong>3</strong> -&gt; lenght = <strong>1</strong><br>\n<strong>5</strong> -&gt; lenght = <strong>1</strong><br>\nThe length of the longest path is <strong>3</strong></p>\n\n<p>Mike wrote pseudocode to solve the above problem. He has implemented to functions <strong>Path</strong> and <strong>Max_Path. </strong>The function <strong>Path </strong>takes the parameters <strong>i and</strong><strong> j </strong>that are the indexes of the first cell of a path and <strong>mat</strong> matrix, <strong>dp</strong> table and <strong>n </strong>as input and calculates the possible paths. The function <strong>Max_Path</strong> takes matrix <strong>mat</strong> and <strong>n</strong> as input and returns the length of the longest path as output.</p>\n\n<p> </p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>FUNCTION Path( i,  j,  mat,  dp, n)\n    IF (i &lt; 0 || i &gt;= n || j &lt; 0 || j &gt;= n)\n        RETURN 0\n    ENDIF\n    \n    IF (dp[i][j] != -1)\n        RETURN dp[i][j]\n    ENDIF\n    \n    INT x = INT_MIN, y = INT_MIN, z = INT_MIN, w = INT_MIN\n\n    IF (Value_1 &amp;&amp; ((mat[i][j] + 1) == mat[i][j + 1]))   //  Line 9\n        x = 1 + Path(i, j + 1, mat, dp)\n    ENDIF\n\n    IF (Value_2 &amp;&amp; (mat[i][j] + 1 == mat[i][j - 1]))       //  Line 12\n        y = 1 + Path(i, j - 1, mat, dp)\n    ENDIF\n\n    IF (Value_3 &amp;&amp; (mat[i][j] + 1 == mat[i - 1][j]))      //  Line 15\n        z = 1 + Path(i - 1, j, mat, dp)\n    ENDIF\n\n    IF (Value_4 &amp;&amp; (mat[i][j] + 1 == mat[i + 1][j]))  //  Line 18\n        w = 1 + Path(i + 1, j, mat, dp)\n    ENDIF\n\n    RETURN dp[i][j] = max(x, max(y, max(z, max(w, 1))))\n    \nENDFUN\n\n\n\nFUNCTION Max_Path( mat, n)\n    INT ans = 1\n\n    DECLARE dp = ARRAY[n][n] of INT\n    FOR i -&gt; 0 to n-1\n        FOR j -&gt; 0 to m-1\n            dp[i][j]=-1\n        ENDFOR\n    ENDFOR\n\n    FOR i -&gt; 0 to n-1\n        FOR j -&gt; 0 to n-1\n            IF (dp[i][j] == -1)\n                Path(i, j, mat, dp)\n            ENDIF\n            \n            ans = max(ans, dp[i][j])\n        ENDFOR\n    ENDFOR\n\n    RETURN ans\n    \nENDFUN</code></pre>\n\n<p><strong>Note : </strong></p>\n\n<ol>\n\t<li><strong>INT_MIN</strong> is the minimum default value provided by the system</li>\n\t<li>The function <strong>max()</strong> returns the maximum element. For Eg max(2,4) returns 4</li>\n\t<li>The function <strong>min() </strong>returns the minimum element. For Eg min(2,4) returns 2</li>\n</ol>\n\n<p> </p>\n\n<p>But Mike was stuck at some points. To indicate where he got stuck he mentioned them as <strong>Value_1 </strong>at<strong> Line 9, Value_2 </strong>at<strong> Line 12, Value_3 </strong>at<strong> Line 15 </strong>and<strong> Value_4 </strong>at<strong> Line 18. </strong>Now if you are required to help Mike then which of the following options about the Values will you choose to replace such that the above Pseudocode always gives a correct output when executed?</p>\n\n<p> </p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1. </strong></p>\n\n<pre class=\"prettyprint\"><code>Value_1 = j&lt;n\nValue_2 = j&gt;0\nValue_3 = i&gt;0\nValue_4 = i&lt;n</code></pre>\n\n<p> </p>\n\n<p><strong>2. </strong></p>\n\n<pre class=\"prettyprint\"><code>Value_1 = j&gt;n\nValue_2 = j&lt;n\nValue_3 = i&lt;0\nValue_4 = i&gt;n</code></pre>\n\n<p> </p>\n\n<p><strong>3. </strong></p>\n\n<pre class=\"prettyprint\"><code>Value_1 = j&lt;n-1\nValue_2 = j&gt;0\nValue_3 = i&gt;0\nValue_4 = i&lt;n-1</code></pre>\n\n<p> </p>\n\n<p><strong>4. </strong></p>\n\n<pre class=\"prettyprint\"><code>Value_1 = j&gt;n-1\nValue_2 = j&lt;0\nValue_3 = i&lt;0\nValue_4 = i&gt;n-1</code></pre>\n\n<p> </p>\n\n<p> </p>\n\n<p> </p>","a":[{"id":1565865,"option":"1","correct":false},{"id":1565866,"option":"2","correct":false},{"id":1565867,"option":"3","correct":true},{"id":1565868,"option":"4","correct":false}]},{"q":"<p>Consider you are working on Data Structures. You are given two strings <strong>X</strong> and <strong>Y</strong>. You need to find the maximum length of the common subsequence both in <strong>X</strong> and <strong>Y</strong>. </p>\n\n<p><strong>Example</strong><br>\nConsider strings <strong>X</strong> = \"BHHUBC\" and <strong>Y</strong> = \"HYUYBZC\"<br>\nThe longest Common Subsequence is “HUBC” of length <strong>4</strong>.</p>\n\n<p>So you implemented a function <strong>Length</strong> that takes the <strong>X</strong> and <strong>Y</strong> as input and <strong>m,n</strong> where <strong>m</strong> is the length of <strong>X</strong>, <strong>n</strong> is the length of <strong>Y</strong> and returns the length of the Longest Common Subsequence.</p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>FUNCTION Length( X, Y, m, n )\n    DECLARE L = ARRAY[m+1][n+1] of INT\n    INT i\n    INT j\n    FOR i -&gt; 0 to m\n    \tFOR j -&gt; 0 to n\n        \tIF (i == 0 || j == 0)\n        \t\tL[i][j] = L[i-1][j-1] + 1             // Line 8\n        \tELSE IF (X[i-1] == Y[j-1])\n        \t\tL[i][j] = max(L[i-1][j], L[i][j-1])       // Line 10\n        \tELSE\n        \t\tL[i][j] = 0                           //  Line 12               \n        \tENDIF\n    \tENDFOR\n    ENDFOR\n    RETURN L[m][n]\nENDFUN</code></pre>\n\n<p><strong>Note:</strong> </p>\n\n<ul>\n\t<li>The function <strong>max()</strong> returns the maximum element. Eg max(2,4) returns 4</li>\n\t<li>In the above pseudocode, the String starts from index 1</li>\n</ul>\n\n<p>But the above pseudocode is not correct. But if you rearrange <strong>Lines 8, 10, 12 </strong>then the pseudocode will be correct basing on this scenario. Which of the following options is the correct representation of rearranging the code snippets at <strong>Lines 8, 10</strong> and <strong>12?</strong></p>\n\n<p> </p>","a":[{"id":1565639,"option":"8, 12, 10","correct":false},{"id":1565640,"option":"10, 12, 8","correct":false},{"id":1565641,"option":"12, 8, 10","correct":true},{"id":1565642,"option":"12, 10, 8","correct":false}]},{"q":"<p>Consider you are working on Data Structures. You are given a set of integers and your task is to partition the given set into two subsets such that the absolute difference of the sum of two subsets is minimum.</p>\n\n<p><strong>Example</strong><br>\nThe set of numbers is <strong>{1, 6, 8}</strong><br>\nthe possible Partitions are<br>\n<strong>{ 1 } , {6, 8}</strong> -&gt; Sums are 1, 14 -&gt; Absolute Difference is <strong>13</strong><br>\n<strong>{ 6 } , {1, 8}</strong> -&gt; Sums are 6, 9 -&gt; Absolute Difference is <strong>3</strong><br>\n<strong>{ 8 } , {1, 6}</strong> -&gt; Sums are 8, 7 -&gt; Absolute Difference is <strong>1</strong><br>\nThe minimum absolute difference after partitioning into 2 subsets is <strong>1.</strong></p>\n\n<p>So you have implemented a function <strong>Min_Abs_Diff</strong>  that takes array <strong>arr</strong> of integers and <strong>n</strong> the total number of integers in the array as input and returns the minimum absolute difference of the sum of two subsets as output.</p>\n\n<p> </p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>FUNCTION Min_Abs_Diff( arr,  n)\n\tINT sum = 0\n\tFOR i -&gt; 0 to n-1\n\t\tsum += arr[i]\n\tENDFOR\n\n\tDECLARE dp = ARRAY[n+1][sum+1] of BOOL\n\n\tFOR i -&gt; 0 to n\n\t\tdp[i][0] = TRUE\n\tENDFOR\n\n\tFOR i -&gt; 1 to sum\n\t\tdp[0][i] = FALSE\n\tENDFOR\n\n\tFOR i -&gt; 1 to n\n\t\tFOR j -&gt; 1 to sum\n\t\t\tdp[i][j] = dp[i-1][j]\n\t\t\t\n\t\t\tIF (arr[i-1] &lt;= j)\n\t\t\t\tdp[i][j] |= dp[i-1][j-arr[i-1]]            \n\t\t\tENDIF\n\t\tENDFOR\n\tENDFOR\n\n\tINT d = INT_MAX\n\n\tFOR j -&gt; X to 0           // Line 22\n\t\tIF (dp[n][j] == TRUE)\n\t\t\td = sum-Y         // Line 24\n\t\t\tBREAK;\n\t\tENDIF\n\tENDFOR\n\t\n\tRETURN d\n\t\nENDFUN</code></pre>\n\n<p><strong>Note : </strong></p>\n\n<ol>\n\t<li><strong>INT_MAX</strong> is the maximum default value provided by the system</li>\n\t<li>You need to consider all the elements i.e merging the 2 subsets should give the complete set of integers</li>\n\t<li>Don't consider NULL subset i.e <strong>{ }</strong></li>\n\t<li>The total number of elements in the set would be greater than 1</li>\n</ol>\n\n<p> </p>\n\n<p>In the above pseudocode what should be the values of <strong>X</strong> and <strong>Y </strong>at <strong>Lines 22</strong> and <strong>24</strong> such that the pseudocode always gives the correct output when executed?</p>\n\n<p> </p>","a":[{"id":1565816,"option":"X = sum*2, Y = j*2","correct":false},{"id":1565817,"option":"X = sum*2, Y = j/2","correct":false},{"id":1565818,"option":"X = sum/2, Y = j/2","correct":false},{"id":1565819,"option":"X = sum/2, Y = j*2","correct":true}]},{"q":"<p>Paul and Lisa are best friends and always love to play games. Paul gives a Dice to Lisa. But the dice has <strong>F </strong>number of faces numbered from <strong>[1,2,....., F]</strong>. To make the game a little challenging Paul restricts the number of throws to <strong>N </strong>i.e Lisa should throw the dice only <strong>N </strong>times, not less than or greater than <strong>N </strong>times. And Lisa should find the number of times the sum of faces of <strong>N </strong>throws is equal to the given sum <strong>S</strong>.<br>\n </p>\n\n<p><strong>Example : </strong><br>\n<strong>N </strong>= 2<br>\n<strong>F </strong>= 3<br>\n<strong>S </strong>= 4<br>\nThe possibilities are <br>\n[ 2, 2 ] = 2 + 2 = 4<br>\n[ 1, 3 ] = 1 + 3 = 4<br>\n[ 3, 1 ] = 3 + 1 = 4<br>\nThe total number of possibilities are 3<br>\n </p>\n\n<p><strong>Note :</strong> [1,3] and [3,1] both are considered</p>\n\n<p><br>\nLisa implemented a function <em><strong>count_ways</strong></em> that takes <strong>N, F, S</strong> as input and returns the total number of possibilities. But Lisa was stuck at <strong>Line 11</strong>.</p>\n\n<p> </p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>FUNCTION count_ways( N, F, S )\n\tIF N==0 AND S==0\n\t\tRETURN 1\n\tELES IF N==0\n\t\tRETURN 0\n\tELSE IF S&lt;0 OR F*N&lt;F OR N&gt;S\n\t\tRETURN 0\n\tENDIF\n\tans = 0\n\tFOR i -&gt; 1 to F\n\t\t   //  Line 11\n\t\n\tRETURN ans\nENDFUN</code></pre>\n\n<p> </p>\n\n<p>Which of the following code snippets will best fit in <strong>Line 11</strong> so that function always returns the correct output.</p>\n\n<p> </p>\n\n<p><strong>Code snippets</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>ans = ans + count_ways( N-1, F-1, S-i )</code></pre>\n\n<p><br>\n<strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>ans = ans + count_ways( N-1, F, S )</code></pre>\n\n<p><br>\n<strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>ans = ans + count_ways( N-1, F, S-i )</code></pre>\n\n<p><br>\n<strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>ans = ans + count_ways( N-1, F-1, S )</code></pre>\n\n<p> </p>","a":[{"id":1533965,"option":"1","correct":false},{"id":1533966,"option":"2","correct":false},{"id":1533967,"option":"3","correct":true},{"id":1533968,"option":"4","correct":false}]},{"q":"<p>Tara went to a shop to buy apples. In the shop, there is a machine that picks apples from the basket and gives them to the customer. In the machine, you need to select the total number of apples you need. Let's consider Tara selected <strong>N</strong> number of apples. But the machine doesn't pick <strong>N</strong> apples at a time. It either picks <strong>1</strong> or <strong>2</strong> apples at a time. It picks and gives you apples until the sum of the apples reach <strong>N</strong>. Tara figured out that there are so many possibilities that machine can give you apples. <br>\n </p>\n\n<p><strong>Example</strong> <br>\nIf <strong>N</strong>=3<br>\n[1, 2] -&gt; Machine can 1st pick 1 apple and then 2 apples at a time.<br>\n[2, 1] -&gt; Machine can also pick 2 apples at a time and then 1 apple.<br>\nSo for <strong>N</strong>=3, there are <strong>2 possibilities</strong>.</p>\n\n<p><strong>Note</strong> : Consider basket has an infinite number of apples.</p>\n\n<p>Tara has implemented the below pseudocode on function <strong>possibilities</strong> that take <strong>N</strong> as input and returns the total number of possibilities.</p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>FUNCTION possibilities( N )\n    a=1\n    b=1\n    FOR i -&gt; 2 to N\n        // Line 5    \n        // Line 6    \n    ENDFOR\n    \n    RETURN b\nENDFUN</code></pre>\n\n<p><br>\nBut Tara was stuck at <strong>Line 5</strong> and <strong>Line 6</strong>. If you are asked to complete the above pseudocode then which of the following code snippets would you choose to place at <strong>Line 5</strong> and <strong>Line 6</strong> such that the function <strong>possibilities</strong> always returns the correct output for <strong>N</strong>.</p>\n\n<p> </p>\n\n<p><strong>Code snippets</strong></p>\n\n<p><strong>1. </strong></p>\n\n<pre class=\"prettyprint\"><code>b = a - b\na = b + a</code></pre>\n\n<p> </p>\n\n<p><strong>2. </strong></p>\n\n<pre class=\"prettyprint\"><code>a = a + b\nb = b - a</code></pre>\n\n<p> </p>\n\n<p><strong>3. </strong></p>\n\n<pre class=\"prettyprint\"><code>b = a + b\na = b - a</code></pre>\n\n<p> </p>\n\n<p><strong>4. </strong></p>\n\n<pre class=\"prettyprint\"><code>a = a - b\nb = b + a</code></pre>\n\n<p> </p>","a":[{"id":1557552,"option":"1","correct":false},{"id":1557553,"option":"2","correct":false},{"id":1557554,"option":"3","correct":true},{"id":1557555,"option":"4","correct":false}]},{"q":"<p>Miller and Paul both like to play with dice. So they decided to play a game with dice. Paul gives a random number <strong>N</strong> such that Miller should find the total number of possible <strong><em>ways</em></strong> to reach the number <strong>N</strong> by rolling the dice. We can say that a <strong><em>way</em></strong> is possible when the sum of the value of the faces appears when the dice is rolled is equal to <strong>N</strong>. Eg : If a dice is rolled 3 times and the values of the faces are 1,2,1 then the sum would be 1+2+1 = 4. Hence, there's a way to reach 4.<br>\n </p>\n\n<p><strong>Example :</strong><br>\nIf N = 3, then the total possible ways are<br>\n1 + 1 + 1 = 3<br>\n1 + 2 = 3<br>\n2 + 1 = 3<br>\n3 = 3<br>\nthe total number of ways are 4<br>\n </p>\n\n<p><strong>Note :</strong> </p>\n\n<ul>\n\t<li>A dice consisting of 6 faces with values 1,2,3,4,5,6.</li>\n\t<li>You can roll the dice any number of times.</li>\n</ul>\n\n<p> </p>\n\n<p>Miller thought it would take him time to calculate it manually so he decided to implement a function (<strong><em>total_no_of_ways</em></strong>) that returns the total number of possible ways to reach <strong>N</strong>. Miller got stuck at <strong>Line 7</strong>. Please help him complete the code such that the output of the code should return <strong>1936</strong>.</p>\n\n<p> </p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>FUNCTION total_no_of_ways( n )\n\tDECLARE dp = ARRAY[0,n] of {0}\n\tdp[0] = 1\n    FOR i -&gt; 1 to n\n\t    FOR j -&gt; 1 to 6\n\t\t    IF (i-j)&gt;=0\n\t\t\t         //  Line 7\n\t\t    ENDIF\n\t    ENDFOR\n    ENDFOR\n\n\tRETURN dp[n]\nENDFUNCTION total_no_of_ways\n\nn = 12\nPRINT total_no_of_ways( n )</code></pre>\n\n<p><br>\nWhich of the following code snippets will best fit in the above code at <strong>Line 7</strong> :</p>\n\n<p> </p>\n\n<p><strong>Code snippets</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>dp[i] = dp[i] + dp[i+j]\n</code></pre>\n\n<p><br>\n<strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>dp[i] = dp[i-j]\n</code></pre>\n\n<p><br>\n<strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>dp[i] = dp[i] + dp[i-j]\n</code></pre>\n\n<p><br>\n<strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>dp[i] = dp[i+j]\n</code></pre>\n\n<p> </p>","a":[{"id":1527843,"option":"1","correct":false},{"id":1527844,"option":"2","correct":false},{"id":1527845,"option":"3","correct":true},{"id":1527846,"option":"4","correct":false}]},{"q":"<p>Mike wants to climb a tree using a ladder that has a total of <strong>7 </strong>steps. To use the ladder he can take any of the following actions at a time on the ladder</p>\n\n<p><strong>Actions :</strong></p>\n\n<ul>\n\t<li>Taking 1 step forward at a time. Eg: if he is at step 1 after taking action he will be at step 2</li>\n\t<li>Taking 2 steps forward at a time. Eg: if he is at step 1 after taking action he will be at step 3</li>\n</ul>\n\n<p>Mike wants to find the total number of ways to reach step 7, considering mike is initially at step 0 (ground). So he implemented a program that returns the total no of possible ways to reach step 7. In the below pseudocode what should be the values of <strong>x </strong>and <strong>y </strong>at <strong>lines 3 </strong>and <strong>4</strong> such that the function <strong>total_no_ways</strong> returns the output <strong>21</strong>?</p>\n\n<p> </p>\n\n<p><strong>Pseudocode :</strong></p>\n\n<pre class=\"prettyprint\"><code>FUNCTION total_no_ways(n)\n\tDECLARE dp = ARRAY[0,n] of {0}\n\tdp[0] = x  // Line 3\n\tdp[1] = y  // Line 4\n\t\n\tFOR i -&gt; 2 to n\n\t\tdp[i] = dp[i-1] + dp[i-2]\n    ENDFOR\n\tRETURN dp[n]\nENDFUNCTION total_no_ways\n\nn = 7\nPRINT total_no_ways(n)</code></pre>\n\n<p> </p>","a":[{"id":1525941,"option":"x=0, y=0","correct":false},{"id":1525942,"option":"x=1, y=0","correct":false},{"id":1525943,"option":"x=1, y=1","correct":true},{"id":1525944,"option":"x=1, y=0","correct":false}]},{"q":"<p>In Data Structures and Algorithms, you are given an undirected graph and an integer <span class=\"mathjax-latex\">\\(m\\)</span>. Now, you are required to determine if the graph can be colored with at most m colors such that no two adjacent vertices of the graph are colored with the same color. If you are implementing <strong>Breadth-First Search (BFS)</strong> traversing technique to perform this action, then which of the following sequences of steps in this scenario are correct:</p>\n\n<ol>\n\t<li>For each vertex connected to our node via an edge, check if the color of the nodes is the same. If they are the same, then increase the color of the other node (not the current) by one.</li>\n\t<li>For each vertex connected to our node via an edge, check if the node is visited or unvisited. If not visited, mark it as visited and push it in a queue. </li>\n\t<li>Check all edges of the given node.</li>\n\t<li>Check condition for maxColors. If it exceeds <span class=\"mathjax-latex\">\\(m\\)</span>, then return false. </li>\n\t<li>After visiting all nodes, return true.</li>\n</ol>","a":[{"id":1347154,"option":"1 -> 2 -> 3 -> 4 -> 5","correct":false},{"id":1347155,"option":" 2 -> 3 -> 1 -> 4 -> 5","correct":false},{"id":1347156,"option":"3 - > 1 -> 2 -> 4 -> 5","correct":true},{"id":1347157,"option":"3 -> 2 -> 1 -> 4 -> 5","correct":false}]},{"q":"<p>A queen in a chessboard can be moved to any number of unoccupied squares in a straight line vertically, horizontally, or diagonally. The queen captures by occupying the square on which the opponent’s piece is located. You are given a chessboard of size <span class=\"mathjax-latex\">\\(N \\times N\\)</span> with <span class=\"mathjax-latex\">\\(N\\)</span> queens. Now, you are required to arrange all these <span class=\"mathjax-latex\">\\(N\\)</span> queens in such a way that no queen occupies the other queen. If you are required to solve this problem by using the backtracking technique from the data structures and algorithms, then determine the worst-case time complexity to perform this action in this scenario?</p>","a":[{"id":1347150,"option":"O(N)","correct":false},{"id":1347151,"option":"O(1)","correct":false},{"id":1347152,"option":"O(log(N))","correct":false},{"id":1347153,"option":"O(N!)","correct":true}]},{"q":"<p>In data structures, what is the worst-case complexity of the following algorithm:</p>\n\n<pre class=\"prettyprint\"><code>SORT (A)\n{\n n ← length [A]\n  For i = 1 to n do\n Insert A[i] into list B[A[i]/b] ..(b&lt;- constant)\n  For i = 0 to n-1 do\n  Sort list B with Insertion sort\n \n Concatenate the lists B[0], B[1], . . B[n-1]..\n}</code></pre>\n\n<p> </p>","a":[{"id":708038,"option":"O(n+k)","correct":false},{"id":708039,"option":"O(nlogn)","correct":false},{"id":708040,"option":"O(n^2)","correct":true},{"id":708041,"option":"O(n^2logn)","correct":false}]},{"q":"<p>Which problem is realized  from the following Algorithm:</p>\n\n<p>'''</p>\n\n<p> </p>\n\n<pre class=\"prettyprint\"><code>.....SOURCE(G, s)\nfor i ← 1 to |V[G]| - 1\n do for each edge (u, v) -&gt; E[G]\n do RELAX(u, v, w)\n for each edge (u, v) -&gt; E[G]\n do if d[v] &gt; d[u] + w(u, v)\n then return FALSE\n\n return TRUE</code></pre>\n\n<p> </p>\n\n<p>'''</p>","a":[{"id":689293,"option":"Dijkstra's  Problem","correct":false},{"id":689294,"option":"LCS","correct":false},{"id":689295,"option":"Bellman Ford  Problem","correct":true},{"id":689296,"option":"None of these","correct":false}]},{"q":"<p>There is a goldfield of <span class=\"mathjax-latex\">\\((a \\times b)\\)</span> dimensions and <span class=\"mathjax-latex\">\\(n\\)</span> points. Each point has a positive number that denotes the amount of gold available. Bob is assigned to collect gold from this field. He is in the first column of the goldfield. He can be at any row. He can follow these directions to collect the gold from the field:</p>\n\n<ol>\n\t<li>He can move only to his right or to his right up or to his right down direction from his current cell.</li>\n\t<li>He can move diagonally up towards his right or diagonally down towards his right.</li>\n</ol>\n\n<p>If he is required to collect the maximum amount of gold in his path, then determine the best time complexity to perform this action in this scenario.</p>","a":[{"id":1347142,"option":"O(a+b)","correct":false},{"id":1347143,"option":"O(n)","correct":false},{"id":1347144,"option":"O(a*b^n)","correct":false},{"id":1347145,"option":"O(a*b)","correct":true}]},{"q":"<p>Which of these algorithms is inferred from the following code using greedy analysis:</p>\n\n<pre class=\"prettyprint\"><code>Greedy...(P, k) \n{\nG = empty\nfor each u in P do \nd[u] = INFINITY\nfor (i = 1 to k) \n{\nLet u be the point of P such that d[u] is maximum\nAdd u to G \nfor (each v in P)\n { \nd[v] = min(d[v], distance(v,u))\n}\nD = max_{v in P} d[v] \n}\nreturn (G, D) \n}</code></pre>\n\n<p> </p>","a":[{"id":684354,"option":"Prim's algorithm","correct":false},{"id":684355,"option":"Huffman analysis","correct":false},{"id":684356,"option":"k-center problem","correct":true},{"id":684357,"option":"Interval scheduling","correct":false}]},{"q":"<p>In data structures, consider an unbalanced tree (not necessarily a Binary Tree) of n nodes.<br>\nYou create a tree using an adjacency matrix that has the representation of the tree (tree[][]) to update the weight of the n1<sup>th</sup> edge to n2 and print the maximum edge weight on the path from node n1 to node n2. <br>\nWhich of the following algorithms to set up the subtree size, depth, and parent for each node is most appropriate?</p>","a":[{"id":721322,"option":"Breadth First Search","correct":false},{"id":721323,"option":"Depth First Search","correct":true},{"id":721324,"option":"Maximum Flow","correct":false},{"id":721325,"option":"Minimum Spanning Tree","correct":false}]},{"q":"<p>Which of the following statements about the <strong>minimum spanning tree</strong> algorithm is correct:</p>\n\n<ol>\n\t<li>\n\t<p style=\"margin-left: 0in; margin-right: 0in;\">Kruskal's algorithm will grow a solution from the cheapest edge by adding the next cheapest edge provided that it does not create a cycle.</p>\n\n\t<p style=\"margin-left: 0in; margin-right: 0in;\">Prim's algorithm will grow a solution from a random vertex by adding the next cheapest vertex i.e. the vertex that is not currently in the solution but connected to it by the cheapest edge.</p>\n\t</li>\n\t<li>\n\t<p style=\"margin-left: 0in; margin-right: 0in;\">When the algorithm is stopped in the middle, Prim's algorithm always generates a connected tree, but Kruskal, on the other hand, can give a disconnected tree or forest.</p>\n\t</li>\n\t<li>\n\t<p style=\"margin-left: 0in; margin-right: 0in;\">Prim's algorithm is better for dense graphs because we are primarily dealing with nodes rather than adding cycles and edges. Prim's is faster than Kruskal's in case of complex graphs.</p>\n\t</li>\n</ol>","a":[{"id":684006,"option":"2 and 3 ","correct":false},{"id":684007,"option":"Only 1","correct":false},{"id":684008,"option":"All of these","correct":true},{"id":684009,"option":"None of these","correct":false}]},{"q":"<p>Which of the following algorithms does not follow the divide and conquer strategy?</p>","a":[{"id":687093,"option":"Binary search","correct":false},{"id":687094,"option":"Quick sort","correct":false},{"id":687095,"option":"Insertion sort","correct":true},{"id":687096,"option":"Strassen’s algorithm","correct":false}]},{"q":"<p><img alt=\"\" src=\"Traversal\">Which of the following sorting algorithms can be realized from the worst case complexity of the following relation if the average case complexity is O(<span class=\"mathjax-latex\">\\(nlogn\\)</span>):</p>\n\n<p><span class=\"mathjax-latex\">\\(T(n)= T(n-1)+Cn\\)</span>  ,  <span class=\"mathjax-latex\">\\(n&gt;1\\)</span></p>\n\n<p><span class=\"mathjax-latex\">\\(T(1) = C1 \\)</span> , <span class=\"mathjax-latex\">\\(n=1\\)</span></p>","a":[{"id":687009,"option":"Merge sort ","correct":false},{"id":687010,"option":"Heap sort","correct":false},{"id":687011,"option":"Quick sort","correct":true},{"id":687012,"option":"Insertion sort","correct":false}]},{"q":"<p>In an operating system, which of the following statements defines the <strong>best-fit</strong> allocation algorithm? </p>","a":[{"id":723677,"option":"Search the entire list of available memory and allocate the first block that is big enough.","correct":false},{"id":723678,"option":"Search the entire list of available memory and allocate the smallest block that is big enough.","correct":true},{"id":723679,"option":"Search the entire list of available memory and allocate the largest block.","correct":false},{"id":723680,"option":"Search the entire list of available memory and allocate a random block.","correct":false}]},{"q":"<p>In Data structures, which of these solutions is represented by the following algorithm:</p>\n\n<pre class=\"prettyprint\"><code> Algorithm.... (v, w, n, W)  \n\nfor w = 0 to W do \n   c[0, w] = 0 \nfor i = 1 to n do \n   c[i, 0] = 0 \n   for w = 1 to W do \n      if wi ≤ w then \n         if vi + c[i-1, w-wi] then \n            c[i, w] = vi + c[i-1, w-wi] \n         else c[i, w] = c[i-1, w] \n      else \n         c[i, w] = c[i-1, w] </code></pre>\n\n<p> </p>\n\n<p>'''</p>","a":[{"id":689301,"option":"Palindrome partitioning","correct":false},{"id":689302,"option":"Matrix chain multiplication","correct":false},{"id":689303,"option":"Knapsack problem","correct":true},{"id":689304,"option":"None of these","correct":false}]},{"q":"<p>Which of the following scheduling algorithms uses<strong> Circular LinkedList </strong>as a data structure for the implementation?</p>","a":[{"id":686201,"option":"First Come First Serve","correct":false},{"id":686202,"option":"Shortest-Job-First Scheduling","correct":false},{"id":686203,"option":"Round Robin Scheduling","correct":true},{"id":686204,"option":"Priority Scheduling","correct":false}]},{"q":"<p>In Data structures, what is the best case and worst case complexity analysis for the following pseudocode in the insertion sort algorithm:</p>\n\n<pre class=\"prettyprint\"><code>final Node&lt;E&gt; sorted = null;\n    ........\n    Node&lt;E&gt; current = first;\n    while (current != NULL)\n    {\n        \n        Node&lt;E&gt; next = current.next;\n         Unlink(current); \n        sortedInsert(current.data); \n        current = next;\n      .......\n     .........\n    }</code></pre>\n\n<p> </p>","a":[{"id":685213,"option":"O(log n), O(n)","correct":false},{"id":685214,"option":"O(n^2), O(n^2)","correct":false},{"id":685215,"option":"O(n), O(n^2)","correct":true},{"id":685216,"option":"None of these","correct":false}]},{"q":"<p>In Data structures, what is the average case complexity analysis for the following code:</p>\n\n<pre class=\"prettyprint\"><code>public void sort(int[] arr) {\n\n      boolean swapped = true;\n\n      int j = 0;\n\n      int tmp;\n\n      while (swapped) {\n\n            swapped = false;\n\n            j++;\n\n            for (int i = 0; i &lt; arr.length - j; i++) {                                       \n\n                  if (arr[i] &gt; arr[i + 1]) {                          \n\n                        tmp = arr[i];\n\n                        arr[i] = arr[i + 1];\n\n                        arr[i + 1] = tmp;\n\n                        swapped = true;\n\n                  .........\n.....</code></pre>\n\n<p> </p>","a":[{"id":685516,"option":"O(N^2)","correct":true},{"id":685517,"option":"O(N)","correct":false},{"id":685518,"option":"O(NlogN)","correct":false},{"id":685519,"option":"O(logN)","correct":false}]},{"q":"<p>In an operating system, which of the following is not a <em>Page Replacement Algorithm</em>?</p>","a":[{"id":722522,"option":"First-In First-Out (FIFO)","correct":false},{"id":722523,"option":"Optimal Algorithm (OPT)","correct":false},{"id":722524,"option":"Round Robin (RR) Algorithm","correct":true},{"id":722525,"option":"Least Recently Used (LRU)","correct":false}]}]
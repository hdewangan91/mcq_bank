[{"q":"<p>Mike has developed a web application for food delivery services in his organization. Before sending this deployed project to production, he has decided to write some unit test cases for his application. If he is required to make bunch of few unit test cases and run it together by using JUnit, then which of the following annotations can be implemented to perform these suite tests in this scenario?</p>","a":[{"id":1763359,"option":"@RunWith annotation and @SuiteTest annotation","correct":false},{"id":1763360,"option":"@SuiteTest annotation and @Suite annotation","correct":false},{"id":1763361,"option":"@RunWith annotation and @Suite annotation","correct":true},{"id":1763362,"option":"None of these","correct":false}]},{"q":"<p>Suppose you are working on developing a spring boot application. You are working with AOP which you know is one of the key components of Spring Framework. You have a task that requires you to <em>share the state before and after a method is executed.</em> Which advice would you use for that keeping in mind it is best to use the least powerful form of advice that meets your requirements.</p>","a":[{"id":1655701,"option":"after-returning","correct":false},{"id":1655702,"option":"around","correct":true},{"id":1655703,"option":"after","correct":false},{"id":1655704,"option":"before","correct":false}]},{"q":"<p>You are working on developing a spring boot application. You are working with AOP which you know is one of the key components of Spring Framework. You have a <em>Pointcut signature and a Pointcut Expression</em>. Determine the correct option.</p>\n\n<p><em>A - @Pointcut(\"execution(* name(..))\")</em></p>\n\n<p><em>B - private void anymethod() {}</em></p>","a":[{"id":1655697,"option":"A - Expression\r\nB - Signature","correct":true},{"id":1655698,"option":"There is no such thing as Pointer Expression and/or Signature","correct":false},{"id":1655699,"option":"These are neither Pointers nor signatures","correct":false},{"id":1655700,"option":"A - Signature\r\nB - Expression","correct":false}]},{"q":"<p>You are working on developing a spring boot application. You are working with AOP which you know is one of the key components of Spring Framework. How would you go about <em>declaring an aspect</em>?</p>","a":[{"id":1655693,"option":"@AspectJ","correct":false},{"id":1655694,"option":"@Annotation.Aspect","correct":false},{"id":1655695,"option":"@Declare","correct":false},{"id":1655696,"option":"@Aspect","correct":true}]},{"q":"<p>Suppose you are working on developing a spring boot application. You are working with AOP which you know is one of the key components of Spring Framework. You know AOP can work with <em>5</em> types of advices, so when you see <em>6</em> types of advices, you know something is wrong. Determine the faulty type.</p>\n\n<ol>\n\t<li><em>before </em></li>\n\t<li><em>after </em></li>\n\t<li><em>during </em></li>\n\t<li><em>after-returning </em></li>\n\t<li><em>after-throwing </em></li>\n\t<li><em>around</em></li>\n</ol>","a":[{"id":1655689,"option":"3","correct":true},{"id":1655690,"option":"4","correct":false},{"id":1655691,"option":"5","correct":false},{"id":1655692,"option":"6","correct":false}]},{"q":"<p>Suppose you are working on developing a spring boot application. You want to use Spring Cloud bus as it links nodes of a distributed system. You and your colleague know that as long as Spring Cloud <em>Bus AMQP and RabbitMQ</em> are on the classpath any Spring Boot application will try to contact a RabbitMQ server on the default value of<em> spring.rabbitmq.addresses</em>. There is a however a small hitch in execution. Your colleague seems to have forgotten the address. What is the default value of spring.rabbitmq.address?</p>","a":[{"id":1655685,"option":"localhost:3448","correct":false},{"id":1655686,"option":"localhost:6572","correct":false},{"id":1655687,"option":"localhost:5672","correct":true},{"id":1655688,"option":"localhost:8000","correct":false}]},{"q":"<p>Suppose you are working on developing a spring boot application. While using Spring Cloud you come across a library called <em>Hystrix</em> which implements <em>circuit breakers pattern.</em> The circuit breakers decide when to open/close circuits. Which of these states allows all calls to pass through to supplier microservices and respond without any latency?</p>","a":[{"id":1655681,"option":"Open State","correct":false},{"id":1655682,"option":"Closed State","correct":true},{"id":1655683,"option":"Half Open State","correct":false},{"id":1655684,"option":"Half Close State","correct":false}]},{"q":"<p>Suppose you are working on developing a spring boot application. To provide security to the application, you decide to use Spring Security which provides its own tags for jsp pages. To secure the view layer of the application you use the <em>CsrfInput Tag</em>. Which is the best location to place CsrfInput Tag?</p>","a":[{"id":1655677,"option":"Inside the form tag","correct":true},{"id":1655678,"option":"Inside the footer tag","correct":false},{"id":1655679,"option":"Outside the form tag","correct":false},{"id":1655680,"option":"Inside the header tag","correct":false}]},{"q":"<p>Suppose you are working on developing a spring boot application. To provide security to the application, you decide to use Spring Security. It can be used to add security context to our test functions. Which of the following are <em>valid annotations</em>?</p>\n\n<p><em>1. @WithMockCandidate </em></p>\n\n<p><em>2. @WithMockDetails </em></p>\n\n<p><em>3. @WithSecurityContext</em></p>","a":[{"id":1655673,"option":"1,2,3","correct":false},{"id":1655674,"option":"2,3","correct":false},{"id":1655675,"option":"1,2","correct":false},{"id":1655676,"option":"Only 3","correct":true}]},{"q":"<p>Suppose you are working on developing a spring boot application. To provide security to the application you decide to use Spring Security, a framework that was started in 2003. You decide to use <em>JWT for authentication</em>. Where in the JWT header will you find information about the type of algorithm used?</p>","a":[{"id":1655669,"option":"algo","correct":false},{"id":1655670,"option":"alg","correct":true},{"id":1655671,"option":"typ","correct":false},{"id":1655672,"option":"type","correct":false}]},{"q":"<p>You have successfully finished building an application. You now decide that you want your class in a form to be executed from any location on the system. You have the following options to choose from to create such an executable form:</p>\n\n<ol>\n\t<li><em>./gradlew bootRun</em></li>\n\t<li><em>./mvnw build package</em></li>\n\t<li><em>./gradlew build</em></li>\n\t<li><em>./mvnw spring-boot:run</em></li>\n</ol>\n\n<p>Choose one to accomplish the mention task?</p>","a":[{"id":1655665,"option":"1","correct":false},{"id":1655666,"option":"2","correct":false},{"id":1655667,"option":"3","correct":true},{"id":1655668,"option":"4","correct":false}]},{"q":"<p>Suppose you have developed a Spring Boot application and it is now time to push it to production. You decide to take advantage of the Spring Boot Actuator which comes with a number of ready features. Since some endpoints may contain confidential information you want to manually make some changes. You have to expose everything over HTTP. For that, you have the following options to choose from.</p>\n\n<ol>\n\t<li><em>management.endpoints.web.exposure.include=all</em></li>\n\t<li><em>management.endpoints.http.exposure.include=*</em></li>\n\t<li><em>management.endpoints.http.exposure.exclude=*</em></li>\n\t<li><em>management.endpoints.web.exposure.include=*</em></li>\n</ol>\n\n<p>Choose the correct option to Accomplish the mentioned task?</p>","a":[{"id":1655661,"option":"1","correct":false},{"id":1655662,"option":"2","correct":false},{"id":1655663,"option":"3","correct":false},{"id":1655664,"option":"4","correct":true}]},{"q":"<p>Suppose you are working on developing spring boot applications. You want to use<em><strong> </strong>spring cloud framework</em>. But the application needs to handle heavy traffic. For this, you have to implement <em>load balancing</em>. From the above info, which method is used to implement it in the spring cloud?</p>","a":[{"id":1655657,"option":"Cloudload","correct":false},{"id":1655658,"option":"Netflix ribbon","correct":true},{"id":1655659,"option":"RR balancer","correct":false},{"id":1655660,"option":"Can't implement","correct":false}]},{"q":"<p>Suppose you are working on developing spring boot applications. The important part is to secure the application. Spring security does the work for us by customizing the authentication process with customized authentication filters and providers. Assume you have built a login page using spring boot and you want to <em>add security feature</em> to it. Which of the following features are provided by spring security?</p>\n\n<p><em>1. HTTP authorization </em></p>\n\n<p><em>2. Remember me </em></p>\n\n<p><em>3. Resource based authorization </em></p>\n\n<p><em>4. Web form authentication</em></p>","a":[{"id":1655653,"option":"1, 2, and 3","correct":false},{"id":1655654,"option":"1, 3, and 4","correct":false},{"id":1655655,"option":"1, 2, and 4","correct":true},{"id":1655656,"option":"All","correct":false}]},{"q":"<p>Suppose you are working on Spring data applications.<strong> </strong>In “Mydb” database, there are two tables. Let it be X and Y. In X, there are <em>4</em> columns i.e.;<strong> </strong>xid, xname, date, place. In<strong> </strong>Y, there are <em>5</em> columns i.e.; yid, name, date, place, xid. Here, xid and yid are primary keys and xid in Y is the foreign key of xid in X. So, for each xid in X, there can be any number of rows in Y. Based on this understanding, answer the following questions.</p>\n\n<ol>\n\t<li>Does the xid in Y table allow only unique values?</li>\n\t<li>Does the xid in X table allow null values?</li>\n</ol>","a":[{"id":1655649,"option":"1.False \r\n2.True","correct":false},{"id":1655650,"option":"1.False \r\n2.False","correct":false},{"id":1655651,"option":"1.True \r\n2.False","correct":true},{"id":1655652,"option":"1.True \r\n2.True","correct":false}]},{"q":"<p>Suppose you are new to Spring data applications. You want to start it with basics. First, you started understanding <em>JPQL methods</em> and how to write queries. Based on the understanding, answer the methods whose functions are mentioned below and tell if the statements are true or false.</p>\n\n<ol>\n\t<li><em>The method that helps to execute JPQL queries with the name. </em></li>\n\t<li><em>The method that helps to perform update or delete operations. </em></li>\n\t<li><em>JPQL is a platform-dependent language</em></li>\n</ol>\n\n<p> </p>\n\n<p> </p>","a":[{"id":1655645,"option":"1.createQuery() \r\n2.executeQuery() \r\n3.True","correct":false},{"id":1655646,"option":"1.createNamedQuery()\r\n2. executeUpdate() \r\n3.True","correct":false},{"id":1655647,"option":"1.createNamedQuery() \r\n2.executeQuery() \r\n3.False","correct":false},{"id":1655648,"option":"1.createNamedQuery() \r\n2.executeUpdate()\r\n3. False","correct":true}]},{"q":"<p>You were given a task to work on JPQL and provided a relational database. You have to work on<strong> </strong><em>“Student” table</em> which has <em>4</em> columns. The names of columns are<em><strong> studid, name, branch, address.</strong></em> From the above info, answer the below questions by picking up the correct answer.</p>\n\n<p><em>(i). Write a JPQL query using query annotation to get the names of all the students whose studid is in between 20 to 40 from the table “Student”. </em></p>\n\n<p><em>(ii). Which method is used in spring boot application to run this query?</em></p>\n\n<p><em>Select one of the following options:</em></p>\n\n<p><em>1. (i) SELECT name FROM Student where studid BETWEEN 20 and 40 </em></p>\n\n<p><em>    (ii) createQuery()</em></p>\n\n<p><em>2. (i) @Query(\"SELECT name FROM Student where studid BETWEEN 20 and 40”) </em></p>\n\n<p><em>    (ii) createQuery()</em></p>\n\n<p><em>3. (i) @Query(\"SELECT name FROM Student where studid BETWEEN 20 and 40”)</em></p>\n\n<p><em>    (ii) Query()</em></p>\n\n<p><em>4. (i) SELECT name FROM Student where studid BETWEEN 20 and 40 </em></p>\n\n<p><em>    (ii) Query()</em></p>","a":[{"id":1655641,"option":"1","correct":false},{"id":1655642,"option":"2","correct":true},{"id":1655643,"option":"3","correct":false},{"id":1655644,"option":"4","correct":false}]},{"q":"<p>Suppose you are working on spring data applications. You were asked to work on getting data from the storage. For this, you need to use <em>JPQL</em> (Java Persistence Query Language). There is a table called<strong> </strong><em>“Project”</em>. Columns available in that table are<em><strong> projectname, projectno, duration</strong></em>. From the above info, your task is to write a query to get the <em>project name</em> of all the projects from the table “Project”. Choose the correct query from the below options.</p>\n\n<p><em>1. @Query(\"SELECT projectname FROM Project”)</em></p>\n\n<p><em>2. @Query(\"SELECT projectno FROM Project”)</em></p>\n\n<p><em>3. @Query(\"SELECT duration FROM Project”)</em></p>\n\n<p><em>4. @Query(\"SELECT project FROM Project”)</em></p>","a":[{"id":1655637,"option":"1","correct":true},{"id":1655638,"option":"2","correct":false},{"id":1655639,"option":"3","correct":false},{"id":1655640,"option":"4","correct":false}]},{"q":"<p>Suppose you are working on building spring boot applications. Testing is an important step to find how the application is working. In your application, there is one package namely <em>“MyPackage”</em>. It has many classes and functions. Among them,<strong> </strong><em>“MainPage”</em> controller is the key class. From this page, everything is interconnected. Database testing is already done based on the logic. From the above info, your task is to only <em>test the “MainPage” controller</em> separately. You shouldn't have to call each and every class but only “MainPage”. For this, you might need to instantiate the class first. Choose the function from the below options to do this task.</p>\n\n<p>1. @SpringBootTest(MainPage.class)</p>\n\n<p>2. @ContextConfiguration(MainPage.class)</p>\n\n<p>3. @SpringBootStarterTest(MainPage.class)</p>\n\n<p>4. @WebMvcTest(MainPage.class)</p>","a":[{"id":1655633,"option":"1","correct":false},{"id":1655634,"option":"2","correct":false},{"id":1655635,"option":"3","correct":false},{"id":1655636,"option":"4","correct":true}]},{"q":"<p>Suppose you are working on building spring boot applications. As the last step, you need to<em><strong> </strong>test that application</em>. This application consists of various packages. In each package, there are a few classes written. The <em>methods present in each class is interlinked </em>and maybe called by a different class of the same package or any other package in the system. Based on the structure of the application, you need to test the application by each method or each class. You have to perform independently. What kind of testing do you want to use to do this process?</p>","a":[{"id":1655629,"option":"API testing","correct":false},{"id":1655630,"option":"Layer integration testing","correct":false},{"id":1655631,"option":"Unit testing","correct":true},{"id":1655632,"option":"No such type of testing","correct":false}]},{"q":"<p>Suppose you are working on testing spring boot applications. You have to test your application using a dependency called <strong>“</strong><em>Spring boot starter test</em><strong>”</strong> which will hold all the required elements for testing. Now, from the above info, you have to choose the correct statements from below.</p>\n\n<p>1. It is the primary dependency</p>\n\n<p>2. It has AssertJ as an inbuilt library</p>\n\n<p>3. Mockito framework is not supported</p>","a":[{"id":1655625,"option":"1, 2, and 3","correct":false},{"id":1655626,"option":"1, 2","correct":true},{"id":1655627,"option":"2, 3","correct":false},{"id":1655628,"option":"All are wrong","correct":false}]},{"q":"<p>Suppose you are working on testing spring boot applications. You have written code for <em>building application</em>. The built application has <em>many layers</em> in it.<em> Which testing method is useful to do in this case</em>?</p>","a":[{"id":1655621,"option":"SpringBootTest","correct":true},{"id":1655622,"option":"API testing","correct":false},{"id":1655623,"option":"Application testing","correct":false},{"id":1655624,"option":"JUnit test","correct":false}]},{"q":"<p>In Spring, a multi-module project is built from a parent pom that manages a group of submodules. Splitting the project into multiple modules is useful and easy to maintain. You are given <em>4</em> Statements about the usage of modules in Spring projects. According to you, which of those statements are true?</p>\n\n<p><strong>Statement 1</strong>: Core and beans modules provide the fundamental parts of the framework, including the Dependency injection feature.</p>\n\n<p><strong>Statement 2</strong>: The ORM module provides integration layers for popular object-relational mapping APIs, including JPA, JDO, Hibernate, and iBatis.</p>\n\n<p><strong>Statement 3</strong>: The Java Messaging Service JMS module contains features for producing and consuming messages.</p>\n\n<p><strong>Statement 4</strong>: The JDBC module provides a JDBC-abstraction layer that removes the need to do tedious JDBC-related coding.</p>","a":[{"id":1655617,"option":"Correct Statements are 1 & 2","correct":false},{"id":1655618,"option":"Correct Statements are 1 & 3","correct":false},{"id":1655619,"option":"Correct Statements are 1, 2, 3 & 4","correct":true},{"id":1655620,"option":"Correct Statements are 2, 3 & 4.","correct":false}]},{"q":"<p>During the development process, Mr. X wants to use <em>DispatcherServlet</em><strong> </strong>to handle all the <em>HTTP requests and responses </em>in the Spring Boot project. In which of the following files, must he define the DispatcherServlet?</p>","a":[{"id":1655613,"option":"Meta-inf/dispatcher.xml","correct":false},{"id":1655614,"option":"In Beans configuration file.","correct":false},{"id":1655615,"option":"Web-inf/ dispatcher.xml","correct":false},{"id":1655616,"option":"Web.xml file","correct":true}]},{"q":"<p>You work as an SDE in Z Studios. Your team has been assigned the task to develop a web app to upload and compress video files. Collectively, you decide to use the <em>Spring boot</em> framework to reduce development, unit test, and integration test time. While starting, you need to generate the structure of the Spring Boot Project. What web-based tool would you use to do so?</p>","a":[{"id":1655609,"option":"Spring Initializr","correct":true},{"id":1655610,"option":"Spring Initiator","correct":false},{"id":1655611,"option":"Spring Initializer","correct":false},{"id":1655612,"option":"Spring Acutator","correct":false}]},{"q":"<p>In <em>Spring</em>, while writing a program, you defined beans by annotating your class with the stereotype @Component annotation. According to you, what is the prototype scope with regards to beans?</p>","a":[{"id":1655605,"option":"This scopes the bean definition to a single instance per HTTP Application/ Global session.","correct":false},{"id":1655606,"option":"This scopes the bean definition to a single instance per Spring IoC container.","correct":false},{"id":1655607,"option":"This scopes a single bean definition to have any number of object instances","correct":true},{"id":1655608,"option":"This scopes a bean definition to an HTTP session.","correct":false}]},{"q":"<p>You are a freelancing web developer. You receive a contract to build a web-application for a company that facilitates the services of a payment portal. While writing the program, you want to use a method to register BeanPostProcessor. Which of the following is the correct method to do so?</p>","a":[{"id":1655601,"option":"registerBeanProcessors","correct":false},{"id":1655602,"option":"registerBeanPostProcessors","correct":false},{"id":1655603,"option":"addBeanProcessors","correct":false},{"id":1655604,"option":"addBeanPostProcessors","correct":true}]},{"q":"<p>You work as an SDE in Z Studios. Your team has been assigned the task to develop a web app to upload and compress video files. In <em>Spring</em>, beans are created with the configuration metadata that you supply to the container. According to you, which of the following is right about the scope of a stateful bean?</p>","a":[{"id":1655597,"option":"Singleton scope","correct":true},{"id":1655598,"option":"Multi-Scope","correct":false},{"id":1655599,"option":"Prototype scope","correct":false},{"id":1655600,"option":"Singleton and prototype scope","correct":false}]},{"q":"<p>Ben works as an SDE for ABC Pvt. Ltd. His company recently received a contract for the development of a real-time collaborative text editor that syncs across multiple connected devices. Users can join a room by scanning the QR code on the page and collectively make and share notes in real-time. Collectively, his team decided to use <em>Spring Boot</em> framework for the development of this web app as it provides an Opinionated Development approach. In Spring, beans are created with the configuration metadata that you supply to the container. According to you, what is the scope of bean in portlet context?</p>","a":[{"id":1655593,"option":"request","correct":false},{"id":1655594,"option":"prototype","correct":false},{"id":1655595,"option":"global-session","correct":true},{"id":1655596,"option":"session","correct":false}]},{"q":"<p>You work as an SDE in Z Studios. Your team has been assigned the task to develop a web app to upload and compress video files. Collectively, you decide to use the <em>Spring boot</em> framework to reduce development, unit test, and integration test time. During the development of the web app, you want to enable the specific class to autoconfigure with the existing application. Which annotation would you use to do so?</p>","a":[{"id":1655589,"option":"@EnableAutoConfiguration","correct":false},{"id":1655590,"option":"@ConditionalOnClass","correct":true},{"id":1655591,"option":"@Configure","correct":false},{"id":1655592,"option":"@ConfigureScan","correct":false}]},{"q":"<p>You are required to exclude a specific class from the database using <em>Spring Boot</em>. Which of these code snippets would he use to achieve this?</p>\n\n<p><strong>Code</strong></p>\n\n<p>1. </p>\n\n<pre class=\"prettyprint\"><code>@SpringBootApplication(exclude =={Address. class}) Public class Student{}</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>@SpringBootApplication(include !={Address. class})</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>@SpringBootApplication(!include ={Address. class})</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>@SpringBootApplication(exclude ={Address. class}) Public class Student{}</code></pre>\n\n<p> </p>","a":[{"id":1655585,"option":"1","correct":false},{"id":1655586,"option":"2","correct":false},{"id":1655587,"option":"3","correct":false},{"id":1655588,"option":"4","correct":true}]},{"q":"<p>Your team was given the task to develop a web application for a client in <em>Spring</em>. The functionalities and the schema has been specified by the client. You want to configure logging or debugging of errors in your application. How would you do so?</p>\n\n<p><strong>Option</strong></p>\n\n<p>1. By applying the following settings in application.yml file.  </p>\n\n<pre class=\"prettyprint\"><code>logging.level.org.springframework.web: DEBUG logging.level.org.hibernate: ERROR</code></pre>\n\n<p>2. By applying the following settings in application.properties file.  </p>\n\n<pre class=\"prettyprint\"><code>logging.level.org.springframework.web: ERROR logging.level.org.hibernate: DEBUG</code></pre>\n\n<p>3. By applying the following settings in application.properties file.</p>\n\n<pre class=\"prettyprint\"><code>logging.level.org.springframework.web: LOG logging.level.org.hibernate: DEBUG\n</code></pre>\n\n<p>4. By applying the following settings in application.properties file.  </p>\n\n<pre class=\"prettyprint\"><code>logging.level.org.springframework.web: ERROR logging.level.org.hibernate: LOG</code></pre>\n\n<p> </p>","a":[{"id":1655581,"option":"1","correct":true},{"id":1655582,"option":"2","correct":false},{"id":1655583,"option":"3","correct":false},{"id":1655584,"option":"4","correct":false}]},{"q":"<p>While writing the code for a web application using <em>Spring Boot</em>, John wanted to disable a particular auto-configuration class. How would he do so?</p>","a":[{"id":1655577,"option":"Using exclude attribute of @EnableAutoConfiguration","correct":true},{"id":1655578,"option":"Using include attribute of @DisableAutoconfiguration","correct":false},{"id":1655579,"option":"Using not exclude attribute of @DisabaleAutoConfiguration","correct":false},{"id":1655580,"option":"Using not include attribute of @EnableAutoConfiguration","correct":false}]},{"q":"<p>Ben is a developer who in order to enable auto configuration in <em>Spring Boot</em>, wants to use all the three annotations of <strong>@SpringBootApplication</strong> separately. Which one of the following would he NOT use?</p>","a":[{"id":1655573,"option":"@ComponentScan","correct":false},{"id":1655574,"option":"@EnableAutoConfiguration","correct":false},{"id":1655575,"option":"@PathVariable","correct":true},{"id":1655576,"option":"@Configuration","correct":false}]},{"q":"<p>Alice wants to implement IoC in his program to configure the object. She knows that the IoC container is responsible to instantiate, configure and assemble the objects. Which of the following statements is NOT true about IoC in <em>Spring</em>?</p>\n\n<p><strong>Statements</strong></p>\n\n<p>1. If we have spring bean configuration xml file in a standalone application, then we can use AnnotationConfigApplicationContext to load the file and get the container object.</p>\n\n<p>2. Spring IoC is the mechanism to achieve loose-coupling between Objects dependencies.</p>\n\n<p>3. Spring IoC container is the program that injects dependencies into an object and makes it ready for our use.</p>\n\n<p>4. If we are using Spring in standalone Java applications and using annotations for Configuration, then we can use AnnotationConfigApplicationContext to initialize the container and get the bean objects.</p>","a":[{"id":1655569,"option":"1","correct":true},{"id":1655570,"option":"2","correct":false},{"id":1655571,"option":"3","correct":false},{"id":1655572,"option":"4","correct":false}]},{"q":"<p>Ben wants to use the ApplicationContext<strong> </strong><em>IoC Container</em> in one of his programs during development. What classes would can he use for the implementation of ApplicationContext?</p>\n\n<p> </p>","a":[{"id":1655565,"option":"AdvancedApplicationContext, FileApplicationContext","correct":false},{"id":1655566,"option":"FileSystemXmlApplicationContext, ClassPathXmlApplicationContext, WebXmlApplicationContext","correct":true},{"id":1655567,"option":"FileSystemApplicationContext, ClassPathApplicationContext","correct":false},{"id":1655568,"option":"FileSystemApplicationContext, ClassPathApplicationContext, WebApplicationContext","correct":false}]},{"q":"<p>Alice wanted to use IoC containers to assemble the dependencies between the objects. Which of the following are correct IoC containers that she can use in <em>Spring</em>?</p>","a":[{"id":1655561,"option":"BeanFactory, ApplicationContext, IocContextFactory","correct":false},{"id":1655562,"option":"BeanFactory, BeanContext, IocContextFactory","correct":false},{"id":1655563,"option":"BeanFactory, ApplicationContext","correct":true},{"id":1655564,"option":"BeanFactory, ApplicationContext, BeanContext","correct":false}]},{"q":"<p>Your team decided to use the<em><strong> </strong>Spring Boot</em> framework for the development of the web app because of its advantageous features. You want to implement inversion of control in your program. Which of these techniques would you not use to do so?</p>","a":[{"id":1655557,"option":"an interface injection","correct":false},{"id":1655558,"option":"using a service locator pattern","correct":false},{"id":1655559,"option":"a constructor injection","correct":false},{"id":1655560,"option":"using a function locator pattern","correct":true}]},{"q":"<p>During the development of a <em>Spring Boot</em> application, Bob wants to declare a JNDI Object reference. Which of these will he use?</p>","a":[{"id":1655553,"option":"JndiObject","correct":false},{"id":1655554,"option":"JndiObjectFactory","correct":false},{"id":1655555,"option":"JndiObjectFactoryBean","correct":true},{"id":1655556,"option":"JndiFactoryBean","correct":false}]},{"q":"<p>During development, you often perform dependency injection as it makes our code loosely coupled and easier for testing. Which of the following statements would you say is false about Dependency Injection?</p>\n\n<p><strong>Statements</strong></p>\n\n<ol>\n\t<li>With Dependency Injection, objects are expected to acquire their dependencies on their own.</li>\n\t<li>Dependency Injection decreases system maintainability because logic changes in the domain affect the modules.</li>\n\t<li>Dependency Injection helps in decoupling application objects from each other.</li>\n\t<li>With Dependency Injection, objects are given their dependency by some third party that coordinates each object in the system.</li>\n</ol>","a":[{"id":1655549,"option":"1","correct":false},{"id":1655550,"option":"2","correct":true},{"id":1655551,"option":"3","correct":false},{"id":1655552,"option":"4","correct":false}]},{"q":"<p>Ben's team wants to DI (Dependency Injection) using the <em>Spring</em> framework. How will they implement this?</p>","a":[{"id":1655545,"option":"By Abstract factory pattern","correct":false},{"id":1655546,"option":"By  Service locator pattern","correct":true},{"id":1655547,"option":"By Singleton pattern","correct":false},{"id":1655548,"option":"By Factory pattern","correct":false}]},{"q":"<p>You need to use the <em>Spring</em> module that provides the capability of Dependency Injection. Which one of these would you go for?</p>","a":[{"id":1655541,"option":"Spring Web","correct":false},{"id":1655542,"option":"Data Access","correct":false},{"id":1655543,"option":"Core Container","correct":true},{"id":1655544,"option":"AOP","correct":false}]},{"q":"<p>Ben works as an SDE for ABC Pvt. Ltd. His company recently received a contract for the development of a real-time collaborative text editor that syncs across multiple connected devices. Users can join a room by scanning the QR code on the page and collectively make and share notes in real-time. In <em>Spring,</em> Dependency Injection is a design pattern that removes the dependency from the programming code. Which of these is NOT a feature of Spring Dependency Injection that makes it so useful?</p>","a":[{"id":1655537,"option":"It stores object states in file system.","correct":true},{"id":1655538,"option":"It makes the programming code loosely coupled","correct":false},{"id":1655539,"option":"It makes the code easier to test","correct":false},{"id":1655540,"option":"It helps in decoupling application objects from each other.","correct":false}]},{"q":"<p>During development of a web-app using Spring Boot framework, Alice comes across the following code written by his colleague. Which of the following is true about this code?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>@RestController \n@RequestMapping(\"/home\")\npublic class InCon \n{ \n   @RequestMapping(value = \"/fetch/{id}\", method = RequestMethod.GET) \n   String getDynamicUriValue(@PathVariable String id) \n   { \n      System.out.println(\"The ID is \" + id); \n      return \"The Dynamic URI parameter was fetched\"; \n   } \n   @RequestMapping(value = \"/fetch/{id:[a-z]+}/{name}\", method = RequestMethod.GET) \n   String getDynamicUriValueRegex(@PathVariable(\"name\") String name) \n   {\n      System.out.println(\"The Name is \" + name);\n      return \"Dynamic URI parameter fetched using regex\";\n   } \n}</code></pre>\n\n<p> </p>","a":[{"id":1655533,"option":"A request to /home will be handled by the default() method as the annotation does not specify any value.","correct":false},{"id":1655534,"option":"A request to /home will be handled by the @RequestMapping method as the annotation does not specify any value.","correct":false},{"id":1655535,"option":"A request to /home will be handled by the @RequestMapping method as the annotation does specify a specific value.","correct":false},{"id":1655536,"option":"The method getDynamicUriValue() will execute for a request to localhost:8080/home/fetch/10.","correct":true}]},{"q":"<p>While working on a Spring Boot application, you are required to use annotations to provide supplemental information about a program. Which of these statements is true about @Autowired annotation?</p>\n\n<p><strong>Statements</strong></p>\n\n<ol>\n\t<li>The @Autowired annotation can be used to autowire bean on the setter method.</li>\n\t<li>This annotation provides more fine-grained control over where and how autowiring should be accomplished.</li>\n\t<li>This annotation indicates that bean property is required while saving the bean data to database.</li>\n\t<li>This annotation indicates that bean property is required while serializing the bean.</li>\n</ol>","a":[{"id":1655529,"option":"1","correct":false},{"id":1655530,"option":"2","correct":true},{"id":1655531,"option":"3","correct":false},{"id":1655532,"option":"4","correct":false}]},{"q":"<p>You are given the task to develop a Spring boot based web application for a client. The functionalities and the schema has been specified by the client. How can you achieve annotation-based auto-wiring in the application?</p>","a":[{"id":1655525,"option":"By providing @Autowired annotation","correct":true},{"id":1655526,"option":"By providing @Selfwired annotation","correct":false},{"id":1655527,"option":"By providing @Wired-auto annotation","correct":false},{"id":1655528,"option":"By providing @Automaticwired annotation","correct":false}]},{"q":"<p>You want to transparently expose your services using a lightweight binary HTTP-based protocol. Which of these Spring remoting technologies can be used to achieve this?</p>","a":[{"id":1655989,"option":"Burlap","correct":false},{"id":1655990,"option":"Hessian","correct":true},{"id":1655991,"option":"Ribbon","correct":false},{"id":1655992,"option":"Caucho","correct":false}]},{"q":"<p>You want to manually create a client from your service interface while working with CXF in your spring implementation.<br>\nWhich of these beans can be utilized to do so?</p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>JaxWsProxyFactory bean</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>JaxRsProxyFactory bean</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>JaxProxyFactory bean</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>JaxRsProxy bean</code></pre>\n\n<p> </p>","a":[{"id":1655981,"option":"1","correct":true},{"id":1655982,"option":"2","correct":false},{"id":1655983,"option":"3","correct":false},{"id":1655984,"option":"4","correct":false}]},{"q":"<p>A FlowHandlerAdapter encounters the following exception when executing a web flow from a Spring MVC web application.</p>\n\n<pre class=\"prettyprint\"><code>NoSuchFlowExecutionException</code></pre>\n\n<p>Which of these are likely to occur in this scenario?</p>","a":[{"id":1655977,"option":"Exception is propagated to the dispatcher","correct":false},{"id":1655978,"option":"Flow Execution is Terminated","correct":false},{"id":1655979,"option":"The default handler tries to start over a new execution","correct":true},{"id":1655980,"option":"None of these","correct":false}]},{"q":"<p>You want your spring boot application to watch out for changes using the spring.devtools.restart.additional paths property.<br>\nYou would need to use which of these properties to control the behaviour changes triggered by the additional paths configuration while doing so?</p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>spring.devtools.restart.config</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>spring.devtools.restart.exclude</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>spring.devtools.restart.propertypath</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>spring.devtools.restart.mode</code></pre>\n\n<p> </p>","a":[{"id":1655973,"option":"1","correct":false},{"id":1655974,"option":"2","correct":true},{"id":1655975,"option":"3","correct":false},{"id":1655976,"option":"4","correct":false}]},{"q":"<p>You are using the @AspectJ annotations in your Spring configuration to declare aspects.<br>\n<br>\nIn the given scenario, which of these annotations should you use to enable @AspectJ support with the Java @Configuration annotation?</p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>@EnableAspectJ</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>@EnableAspectJAutoProxy</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>@EnableAspectJAutoProxyAgent</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>@EnableAspectJAutoProxyConfig</code></pre>\n\n<p> </p>","a":[{"id":1655969,"option":"1","correct":false},{"id":1655970,"option":"2","correct":true},{"id":1655971,"option":"3","correct":false},{"id":1655972,"option":"4","correct":false}]},{"q":"<p>You want to be able to omit the transaction-manager attribute in the transactional advice in Spring.<br>\n<br>\nIn order to be able to do so, what should the bean name of the PlatformTransactionManager be?</p>","a":[{"id":1655965,"option":"AopManager","correct":false},{"id":1655966,"option":"transactionManager","correct":true},{"id":1655967,"option":"iocManager","correct":false},{"id":1655968,"option":"platformManager","correct":false}]},{"q":"<p>You want to use a pointcut expression such that it matches if a method execution join point represents the execution of any public method.<br>\n<br>\nWhich of these expression will you use in the given scenario?</p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>@Pointcut(\"execution(public * (*))\")</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>@Pointcut(\"execution(public *(..))\")</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>@Pointcut(\"execution(public * *(..))\")</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>@Pointcut(\"execution(* public (..))\")</code></pre>\n\n<p> </p>","a":[{"id":1655961,"option":"1","correct":false},{"id":1655962,"option":"2","correct":false},{"id":1655963,"option":"3","correct":true},{"id":1655964,"option":"4","correct":false}]},{"q":"<p>Which of the following AOP framework objects can be used to execute aspect contracts in the Spring framework?<br>\n<br>\n1. JDK dynamic proxy<br>\n2. CGLIB proxy</p>","a":[{"id":1655957,"option":"Only 1","correct":false},{"id":1655958,"option":"Only 2","correct":false},{"id":1655959,"option":"Both 1,2","correct":true},{"id":1655960,"option":"Neither 1 nor 2","correct":false}]},{"q":"<p>Read the below given statements carefully and choose the correct option.<br>\n<br>\n<strong>Statement 1</strong>: Spring MVC provides specific annotations that easily redirect the page.<br>\n<strong>Statement 2</strong>: Spring MVC framework allows to use existing business objects in your implementation</p>","a":[{"id":1655953,"option":"Both statements are true","correct":true},{"id":1655954,"option":"Both statements are false","correct":false},{"id":1655955,"option":"Statement 1 is true and statement 2 is false","correct":false},{"id":1655956,"option":"Statement 1 is false and statement 2 is true","correct":false}]},{"q":"<p>In which of the below given cases would you expect the @Transactional annotation applied on an interface to work as expected?<br>\n<strong>Options</strong><br>\n1. The interface is declared as abstract<br>\n2. You are using interface-based proxies</p>","a":[{"id":1655949,"option":"Only 1","correct":false},{"id":1655950,"option":"Only 2","correct":true},{"id":1655951,"option":"Both 1,2","correct":false},{"id":1655952,"option":"None of these","correct":false}]},{"q":"<p>You want to add awareness of Spring-managed transactions to a datasource. Which of the following classes would you use to wrap the datasource in this scenario?</p>","a":[{"id":1655945,"option":"TransactionAwareDataSourceProxy","correct":true},{"id":1655946,"option":"DataSourceProxy","correct":false},{"id":1655947,"option":"TransactionProxy","correct":false},{"id":1655948,"option":"TransactionAwareSource","correct":false}]},{"q":"<p>Which of the following can be used to trigger transaction synchronization while working in Spring?</p>","a":[{"id":1655941,"option":"PlatformTransactionManager","correct":true},{"id":1655942,"option":"STSTransactionManager.","correct":false},{"id":1655943,"option":"RoleAcessManager","correct":false},{"id":1655944,"option":"DaoManager","correct":false}]},{"q":"<p>You want to define a bean for RmiProxyFactoryBean in the xml file given below.<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; \n&lt;beans xmlns=\" \" \n xmlns:xsi=\" \" \n xsi:schemaLocation=\"\"&gt; \n \n&lt;bean&gt; \n&lt;property&gt;&lt;/property&gt; \n\n&lt;/bean&gt; \n&lt;/beans&gt; </code></pre>\n\n<p><br>\nWhich of the properties given alongside will you need to define in order to achieve this?</p>\n\n<p><strong>Options</strong></p>\n\n<p>(I) serviceUrl</p>\n\n<p>(II) registryPort</p>\n\n<p>(III) serviceName</p>\n\n<p>(IV) serviceInterface</p>\n\n<p>(V) replaceExistingBinding</p>","a":[{"id":1655937,"option":"Both I and III","correct":false},{"id":1655938,"option":"Both I and IV","correct":true},{"id":1655939,"option":"Both II and V","correct":false},{"id":1655940,"option":"Both I, III and IV","correct":false}]},{"q":"<p>Analyze the snippet given alongside and determine the mapping facilities that will be utilized to expose DemoService.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>&lt;bean name=\"/Demo\" class=\"org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter\"&gt;\n &lt;property name=\"service\" ref=\"DemoService\"/&gt;\n &lt;property name=\"serviceInterface\" value=\"example.DemoService\"/&gt;\n&lt;/bean&gt;</code></pre>\n\n<p> </p>","a":[{"id":1655933,"option":"ServiceExporter","correct":false},{"id":1655934,"option":"DemoExporter","correct":false},{"id":1655935,"option":"DispatcherServlet","correct":true},{"id":1655936,"option":"None of these","correct":false}]},{"q":"<p>You want to protect all methods on beans declared in the application context whose classes are in the com.mycompany package and whose class names end in \"Test\".<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>&lt;global-method-security&gt;\n &lt;X expression=\"execution(* com.mycompany.*Test.*(..))\"\n access=\"ROLE_USER\"/&gt;\n &lt;/global-method-security&gt;</code></pre>\n\n<p><br>\nIn the given context, which of the following would be valid values of X?</p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>protect-pointcut</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>protect-aspect</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>protect-advice</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>AspectJ-Protect</code></pre>\n\n<p> </p>","a":[{"id":1655929,"option":"1","correct":true},{"id":1655930,"option":"2","correct":false},{"id":1655931,"option":"3","correct":false},{"id":1655932,"option":"4","correct":false}]},{"q":"<p>You want to enable AspectJ support in your Spring application.<br>\nWhich of the following code snippets should you use to achieve this?</p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>Include &lt;aop:aspectj-alpha-proxy&gt; in the Spring configuration.</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>Include &lt;aop:aspectj-autoproxy&gt; in the Spring configuration.</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>Import cg-aspectjlib module while writing the program.</code></pre>\n\n<p><strong>4.</strong></p>","a":[{"id":1655925,"option":"1","correct":false},{"id":1655926,"option":"2","correct":true},{"id":1655927,"option":"3","correct":false},{"id":1655928,"option":"Both 1 and 3","correct":false}]},{"q":"<p>What should you do to instantiate beans using XML-based configuration metadata?</p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<p>Specify the name of object that is to be instantiated in the class attribute of the bean element</p>\n\n<p><strong>2.</strong></p>\n\n<p>Specify the id of object that is to be instantiated in the class attribute of the bean element</p>\n\n<p><strong>3.</strong></p>\n\n<p>Specify the type of object that is to be instantiated in the class attribute of the bean element</p>\n\n<p><strong>4.</strong></p>\n\n<p>Specify the class containing the static factory method</p>","a":[{"id":1655885,"option":"1","correct":false},{"id":1655886,"option":"2","correct":false},{"id":1655887,"option":"3","correct":true},{"id":1655888,"option":"4","correct":false}]},{"q":"<p>You have a class 'A' that requires an instance of class 'B' through constructor injection. Also, class 'B' requires an instance of class 'A' through constructor injection.<br>\nWhat will the Spring IoC container do if you configure beans for classes 'A' and 'B' to be injected into each other?</p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<p>It will throw a BeanCurrentlyInCreationException.</p>\n\n<p><strong>2.</strong></p>\n\n<p>It will start using setter injection instead for both classes</p>\n\n<p><strong>3.</strong></p>\n\n<p>It will start using setter injection instead for one of the classes</p>\n\n<p><strong>4.</strong></p>\n\n<p>None of these</p>","a":[{"id":1655881,"option":"1","correct":true},{"id":1655882,"option":"2","correct":false},{"id":1655883,"option":"3","correct":false},{"id":1655884,"option":"4","correct":false}]},{"q":"<p>You want to create new instances every time a particular bean is requested. Which of these Spring bean scopes should be used in order to achieve this?</p>\n\n<p> </p>","a":[{"id":1655877,"option":"Singleton","correct":false},{"id":1655878,"option":"Session","correct":false},{"id":1655879,"option":"Prototype","correct":true},{"id":1655880,"option":"Request","correct":false}]},{"q":"<p>You want to disable some unnecessary auto-configuration classes applied to a SpringBoot application that are not present on the classpath.<br>\n<br>\nWhat should you do to achieve this?</p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<p>Exclude the attribute of @EnableAutoConfiguration annotation</p>\n\n<p><strong>2.</strong></p>\n\n<p>Autoconfigure the exclude property of @EnableAutoConfiguration annotation</p>\n\n<p><strong>3.</strong></p>\n\n<p>Autoconfigure the excludeClass attribute of the @EnableAutoConfiguration annotation</p>\n\n<p><strong>4.</strong></p>\n\n<p>Enable the excludeName attribute of the @EnableAutoConfiguration annotation</p>","a":[{"id":1655873,"option":"1","correct":false},{"id":1655874,"option":"2","correct":true},{"id":1655875,"option":"3","correct":false},{"id":1655876,"option":"4","correct":false}]},{"q":"<p>John is working on an in-memory database named <strong>H2 database</strong> for his Spring Boot application. Now, he has configured the H2 database to utilize in his application by adding the following dependency to the <strong>pom.xml</strong> file. Now, assume that he has configured the data source URL<strong>, </strong>driver class name<strong>, </strong>username<strong>,</strong> and password of the H2 database. He is required to persist the data in the H2 database. Alice has asked him to store the data in a file named <strong>hackmyh2db</strong> to perform this action. In order to store the data in that file, which of the following actions John must perform in this scenario:</p>\n\n<p><strong>Dependency in pom.xml file</strong></p>\n\n<pre class=\"prettyprint\"><code>&lt;dependency&gt;  \n&lt;groupId&gt;com.h2database&lt;/groupId&gt;  \n&lt;artifactId&gt;h2&lt;/artifactId&gt;  \n&lt;scope&gt;runtime&lt;/scope&gt;  \n&lt;/dependency&gt;  </code></pre>\n\n<p> </p>","a":[{"id":1582554,"option":"Change the datasource URL property","correct":true},{"id":1582555,"option":"Change the driver class name property","correct":false},{"id":1582556,"option":"Change the destination on configuration file","correct":false},{"id":1582557,"option":"Change the username and the password properties","correct":false}]},{"q":"<p>You are building a web application using Spring Boot to display details of a Student. To access the database containing the details of students you use Spring Data. There are various fields associated with the Student object i.e. roll number, class, section, date of birth. Now, which of the following annotations of Spring Data JPA can you use to mark the \"<strong>section</strong>\" field to be transient for the mapping framework?<br>\n<strong>Annotations:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>@Skip</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>@Ignore</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>@JsonIgnore</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>@Transient</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1499359,"option":"1","correct":false},{"id":1499360,"option":"2","correct":false},{"id":1499361,"option":"3","correct":false},{"id":1499362,"option":"4","correct":true}]},{"q":"<p>Lisa was trying to access Relational Data using JDBC with Spring. Lisa has some issues and doesn't know how to handle them. But Lisa made a little research and realised the Spring provides a template class called <strong>JdbcTemplate. </strong>This template makes it easier to work with SQL relational databases and JDBC. But Lisa doesn't whether all of her issues can be handled by <strong>JdbcTemplate </strong>or not. So if you are required to help Lisa then which of the following issues of Lisa will be automatically taken care of <strong>JdbcTemplate.</strong></p>\n\n<p><strong>Issues</strong></p>\n\n<ol>\n\t<li>Connection management</li>\n\t<li>Exception handling</li>\n</ol>\n\n<p> </p>\n\n<p> </p>","a":[{"id":1580971,"option":"1","correct":false},{"id":1580972,"option":"2","correct":false},{"id":1580973,"option":"Both 1 and 2","correct":true},{"id":1580974,"option":"None of these","correct":false}]},{"q":"<p>Tara was working on SpringBoot. She wants to establish a connection to the H2 dataBase. She wanted to connect to the MySQL database and interact with the in-memory DB. What are the things she should be aware of while doing these tasks?</p>\n\n<p><strong>Statements</strong></p>\n\n<ol>\n\t<li>If you connect to the MySQL database, SpringBoot automatically set up the database and tables.</li>\n\t<li>If you connect to the MySQL database, we should manually set up the database and tables.</li>\n\t<li>While interacting with an in-memory DB, it automatically checks the entities and then creates the database and tables.</li>\n\t<li>While interacting with an in-memory DB, we should manually create a database and tables.</li>\n</ol>\n\n<p> </p>\n\n<p> </p>","a":[{"id":1580967,"option":"1 and 3","correct":false},{"id":1580968,"option":"2 and 3","correct":true},{"id":1580969,"option":"1 and 4","correct":false},{"id":1580970,"option":"2 and 4","correct":false}]},{"q":"<p>Anita was working on Spring Boot annotations. She made a list of annotations.</p>\n\n<p><strong>Annotations</strong></p>\n\n<ol>\n\t<li><strong>@Controller</strong></li>\n\t<li><strong>@RequestMapping</strong></li>\n\t<li><strong>@Request</strong></li>\n</ol>\n\n<p> </p>\n\n<p>Anita gave these annotations to her friend and asked him to send the definitions of them. But Anita friend sent these as statements without mapping them to the required annotations.</p>\n\n<p><strong>Statements</strong></p>\n\n<p><strong>A.</strong> It maps HTTP request with a path to a controller method.<br>\n<strong>B.</strong> It marks the class as a web controller, capable of handling the requests.<br>\n<strong>C.</strong> This annotation does not exist</p>\n\n<p>Which of the following options map the annotations with the correct statements?</p>\n\n<p> </p>\n\n<p> </p>\n\n<p> </p>\n\n<p> </p>","a":[{"id":1580975,"option":"1 - A, 2 - B, 3 - C","correct":false},{"id":1580976,"option":"1 - B, 2 - A, 3 - C","correct":true},{"id":1580977,"option":"1 - A, 2 - C, 3 - B","correct":false},{"id":1580978,"option":"1 - B, 2 - C, 3 - A","correct":false}]},{"q":"<p>You are working on Spring and you have created a REST controller. Consider the code given below. Which of the following statement is correct?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>@RestController\n@RequestMapping(\"student-data\")\npublic class student_controller \n{\n    \n    @GetMapping(\"/{roll_no}\")\n    public Student getStudent_data(@PathVariable int roll_no) \n    {\n        return getStudentbyroll_no(roll_no);\n    }\n\n    private Student getStudentbyroll_no(int roll_no) \n    {\n        // some code\n    }\n}</code></pre>\n\n<p> </p>\n\n<p><strong>Statements:</strong></p>\n\n<ol>\n\t<li><strong>GET</strong> operation does not modify the resource at the server<br>\n\t </li>\n\t<li><strong>GET </strong>is not an idempotent operation.<br>\n\t </li>\n\t<li>The response format of the <strong>getStudent_data </strong>method is JSON.</li>\n</ol>","a":[{"id":1565557,"option":"1 and 2","correct":false},{"id":1565558,"option":"2 and 3","correct":false},{"id":1565559,"option":"1 and 3","correct":true},{"id":1565560,"option":"All of these","correct":false}]},{"q":"<p>You are working on Spring and you have created a REST controller. Now consider the code given below. Which of the following statements is correct?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>@RestController\n@RequestMapping(\"/hackerearth\")\nclass Hackerearth_controller \n{\n  @RequestMapping(method = RequestMethod.GET)\n  String hack_method1()\n  {\n    return \"hack_method1\";                  \n  }\n  @RequestMapping(method = RequestMethod.DELETE)\n  String hack_method2()\n  {\n    return \"hack_method2\";\n  }\n  @RequestMapping(method = RequestMethod.POST)\n  String hack_method3()\n  {\n    return \"hack_method3\";\n  }\n  @RequestMapping(method = RequestMethod.PUT)\n  String hack_method4()\n  {\n    return \"hack_method4\";\n  }\n}</code></pre>\n\n<p> </p>\n\n<p><strong>Statements:</strong></p>\n\n<ol>\n\t<li>The RequestMethod HEAD is an unsafe operation<br>\n\t </li>\n\t<li>The RequestMethod PUT is an idempotent operation<br>\n\t </li>\n\t<li>The <strong>@RequestMapping</strong> annotation is used to map requests to the controller methods.</li>\n</ol>","a":[{"id":1565193,"option":"1 and 2","correct":false},{"id":1565194,"option":"2 and 3","correct":true},{"id":1565195,"option":"1 and 3","correct":false},{"id":1565196,"option":"All of these","correct":false}]},{"q":"<p>In Spring you have a class named <strong>Student</strong> and you have created a REST controller to fetch details of a student from the student database. Now if you have implemented the code given below then which of the following statements is correct?<br>\n<br>\n<em><strong>Note</strong>: </em>Assume http://localhost:8080/ as the host URL.<br>\n </p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>@RestController\n@RequestMapping(\"student-data\")\npublic class student_controller \n{\n    \n    @GetMapping(\"/{roll_no}\", produces = \"application/json\")\n    public Student getStudent_data(@PathVariable int roll_no) \n    {\n        return getStudentbyroll_no(roll_no);\n    }\n\n    private Student getStudentbyroll_no(int roll_no) \n    {\n        // some code\n    }\n}</code></pre>\n\n<p><br>\n </p>\n\n<p><strong>Statements:</strong></p>\n\n<ol>\n\t<li>The method <strong>getStudent_data</strong> returns data in JSON format.<br>\n\t </li>\n\t<li>The method <strong>getStudent_data</strong> requires the annotation <strong>@ResponseBody.</strong><br>\n\t </li>\n\t<li>The objects returned by the <strong>getStudent_data</strong> method are serialized into HttpResponse.<br>\n\t </li>\n\t<li>The  URI for the mapping in the given code can be -  <strong>http://localhost:8080/student-data/{roll_no}</strong></li>\n</ol>","a":[{"id":1565125,"option":"1, 2 and 3","correct":false},{"id":1565126,"option":"1, 3 and 4","correct":true},{"id":1565127,"option":"1 and 4","correct":false},{"id":1565128,"option":"All of these","correct":false}]},{"q":"<p style=\"text-align: justify;\">You are building a web application using the Spring framework. You are required to implement Spring Cloud GCP to utilize Google Cloud Platform from your Spring application. Spring Cloud GCP provides various starter dependencies through Maven to depend on different modules of the library where each starter contains all the dependencies and transitive dependencies needed to begin using their corresponding Spring Cloud GCP module. Now, which of the following statements about these starters in this scenario are correct:</p>\n\n<p style=\"text-align: justify;\"> </p>\n\n<p><strong>Statements</strong></p>\n\n<ol>\n\t<li>The <strong>Security - IAP</strong> starter extracts IAP (Identity-Aware Proxy) identity information from applications deployed to Google Cloud.<br>\n\t </li>\n\t<li> The <strong>Trace</strong> starter enables instrumentation with Google Stackdriver Tracing<br>\n\t </li>\n\t<li> The <strong>Cloud Datastore</strong> starter provides integrations with Google Cloud Storage and Spring Resource.</li>\n</ol>","a":[{"id":1499531,"option":" 1 and 2","correct":false},{"id":1499532,"option":"2 and 3","correct":false},{"id":1499533,"option":"1 and 3","correct":false},{"id":1499534,"option":"All of these","correct":true}]},{"q":"<p>Alice is working on her Spring Boot application that uses various annotations to configure the dependency injection. If she has implemented the following two Java code snippets that have  <strong>@Bean</strong> annotation and <strong>@Component</strong> annotation respectively, then which of the following statements about these annotations in this scenario are correct?<br>\n </p>\n\n<p><strong>Code I</strong></p>\n\n<pre class=\"prettyprint\"><code>package spring.hackerearth;\nimport org.springframework.context.annotation.*;\n\n@Configuration\npublic class hackerearth_configuration \n{\n    @Bean \n    public Hack hackerearth()\n    {\n      return new Hack();\n        \n    }\n}</code></pre>\n\n<p> </p>\n\n<p><strong>Code II</strong></p>\n\n<pre class=\"prettyprint\"><code>package spring.hackerearth;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class Hack_Component \n{\n    // your code goes here\n}</code></pre>\n\n<p><br>\n<br>\n<strong>Statements</strong></p>\n\n<ol>\n\t<li>A method annotated with <strong>@Bean</strong> annotation indicates that the method produces a bean to be managed by the Spring container.</li>\n\t<li>A class annotated with <strong>@Component</strong> annotation indicates that the class is a \"component\" and it can be considered as a candidate for auto-detection when using annotation-based configuration and classpath scanning.</li>\n\t<li>The <strong>@Bean</strong> annotation is preferred over <strong>@Component</strong> annotation if you are using a third-party class or Java ARchive (JAR) file.<br>\n\t </li>\n\t<li><strong>@Component</strong> annotation is a method-level annotation</li>\n</ol>","a":[{"id":1499355,"option":"1, 2, and 4","correct":false},{"id":1499356,"option":"2, 3, and 4","correct":false},{"id":1499357,"option":"1, 2, and 3","correct":true},{"id":1499358,"option":"All of these","correct":false}]},{"q":"<p>You are working on a Spring Boot application that has an Auto - Configuration feature that automatically configures the application based on the jar dependencies added. Now, if you are required to disable auto-configuration for the class <strong>DataSourceAutoConfiguration.class</strong>, then which of the following syntaxes can you use to perform this action?</p>\n\n<p> </p>\n\n<p><strong>Syntaxes</strong></p>\n\n<p> </p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>@Configuration\n@EnableAutoConfiguration(exclude={DataSourceAutoConfiguration.class})\npublic class Hackerearth {\n}</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>@Configuration\n@DisableAutoConfiguration(skip={DataSourceAutoConfiguration.class})\npublic class Hackerearth {\n}</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>@Configuration\n@EnableAutoConfiguration(ignore={DataSourceAutoConfiguration.class})\npublic class Hackerearth {\n}</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>@Configuration\n@DisableAutoConfiguration(exclude={DataSourceAutoConfiguration.class})\npublic class Hackerearth {\n}</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1498943,"option":"1","correct":true},{"id":1498944,"option":"2","correct":false},{"id":1498945,"option":"3","correct":false},{"id":1498946,"option":"4","correct":false}]},{"q":"<p>While working on Spring Boot,  Alice comes across a situation where she wants to push Spring Boot Integration Test to roll back updates to the data source upon completion. Which of the following ways can she use to perform this action?</p>\n\n<p> </p>\n\n<ol>\n\t<li>Injecting the EntityManager into the Test Class and call rollback.<br>\n\t </li>\n\t<li>Manually deleting the entities before the end of the test. <br>\n\t </li>\n\t<li>Annotating the Test Class with @Transactional which will automatically roll back each test's transaction.</li>\n</ol>","a":[{"id":1473970,"option":"1 and 3","correct":false},{"id":1473971,"option":"2 and 3","correct":false},{"id":1473972,"option":"only 3","correct":true},{"id":1473973,"option":"None of these","correct":false}]},{"q":"<p>Alice is working on Spring, when building a service abstraction which of the following ways can she use to make the bean available for Spring Dependency Injection?</p>\n\n<p> </p>\n\n<ol>\n\t<li>annotating the class<br>\n\t </li>\n\t<li>Maven Configuration<br>\n\t </li>\n\t<li>Java Config</li>\n</ol>","a":[{"id":1473962,"option":"1 and 3","correct":true},{"id":1473963,"option":"2 and 3","correct":false},{"id":1473964,"option":"1 and 2","correct":false},{"id":1473965,"option":"All of these","correct":false}]},{"q":"<p>Alice is learning Spring Data and is confused with the behavior of Spring Data Repositories at runtime. Which of the following defines the process through which the behavior of Spring Data Repositories is added to the runtime based on the interface defined in the runtime?</p>\n\n<p> </p>\n\n<ol>\n\t<li>Aspecting<br>\n\t </li>\n\t<li>Maven Packaging<br>\n\t </li>\n\t<li>Introspection</li>\n</ol>","a":[{"id":1473874,"option":"1 and 2","correct":false},{"id":1473875,"option":"2 and 3","correct":false},{"id":1473876,"option":"only 1","correct":true},{"id":1473877,"option":"All of these","correct":false}]},{"q":"<p>Bob is working on Spring Data and he wants to define a remote database. Which of the following is/are required from the configuration perspective? </p>\n\n<p> </p>\n\n<ol>\n\t<li>Database IOPS<br>\n\t </li>\n\t<li>Database Type<br>\n\t </li>\n\t<li>Database URL<br>\n\t </li>\n\t<li>Database Username</li>\n</ol>","a":[{"id":1473870,"option":"1, 2, and 3","correct":false},{"id":1473871,"option":"2, 3, and 4","correct":true},{"id":1473872,"option":"1, 3, and 4","correct":false},{"id":1473873,"option":"1, 2, and 4","correct":false}]},{"q":"<p>You are building a web application using Spring Boot that creates a One-To-Many relationship between a Customer and an Order such that one customer can make more than one order. You are given the following two Java code snippets named <strong>Code I</strong> and <strong>Code II</strong> that performs the following actions:<br>\n<br>\n<strong>Actions</strong></p>\n\n<ol>\n\t<li>Code I indicates a One-To-Many association by using Generics.</li>\n</ol>\n\n<p>       2. Code II indicates a unidirectional One-To-Many association by using a foreign key mapping.</p>\n\n<p>Now, which of the following statements about these code snippets are correct:<br>\n </p>\n\n<p><strong>Code I</strong></p>\n\n<pre class=\"prettyprint\"><code>@OneToMany(cascade={CascadeType.REFRESH, CascadeType.MERGE}, mappedBy=\"customer\") \npublic Set&lt;Order&gt; getOrders() \n{ \n    return orders; \n    \n}</code></pre>\n\n<p> </p>\n\n<p><strong>Code II</strong></p>\n\n<pre class=\"prettyprint\"><code>@OneToMany(orphanRemoval=true)\n@JoinColumn(name=\"Customer_ID\") \npublic Set&lt;Order&gt; getOrders() \n{\n    return orders;\n    \n}</code></pre>\n\n<p> </p>\n\n<p> </p>\n\n<p><strong>Statements</strong></p>\n\n<ol>\n\t<li> In <strong>CascadeType.REFRESH</strong> operation, if the parent entity is refreshed in the current persistence context, the related entity will also be refreshed.<br>\n\t </li>\n\t<li> In <strong>CascadeType.MERGE</strong> operation, if the parent entity is merged into the persistence context, the related entity will also be merged.<br>\n\t </li>\n\t<li> The <strong>mappedBy</strong> element is not required in a Unidirectional relationship.<br>\n\t </li>\n\t<li> The <strong>orphanRemoval</strong> element is a boolean type that specifies whether to apply the CascadeType.REFRESH operation to   the entities that have been removed from the relationship and to cascade the remove operation to those entities<br>\n\t </li>\n</ol>","a":[{"id":1499483,"option":"1, 2, and 4","correct":false},{"id":1499484,"option":"2, 3, and 4","correct":false},{"id":1499485,"option":"1, 2, and 3","correct":true},{"id":1499486,"option":"All of these","correct":false}]},{"q":"<p>You are working on a web application using the Spring framework. Now your application consists of multiple beans that are instantiated, assembled, and are managed by the Spring IoC Container. If you are required to configure a  class as a Spring Bean, then which of the following syntaxes can be used to perform this action:</p>\n\n<p> </p>\n\n<p><strong>Syntaxes</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>&lt;bean id=\"hackBean\" class=\"hackerearth.hack.spring.HackBean\" factory-method=\"createInstance\"/&gt;</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>&lt;bean name=\"hackerearthBean\" class=\"spring.hackerearth.hackBeans\"/&gt;</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>package spring.hackerearth;\nimport org.springframework.context.annotation.*;\n\n@Configuration\n@ComponentScan(value=\"spring.hackerearth.hack.main\")\npublic class hackerearth_configuration \n{\n    @Bean \n    public Hack hackerearth()\n    {\n      return new Hack();\n        \n    }\n}</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>&lt;bean id=\"hackBean\" class=\"spring.hackerearth.HackerearthBeans\"&gt;\n&lt;/bean&gt;\n\n&lt;bean id=\"beanHackerearth\" factory-bean=\"hackBean\" factory-method=\"createInstance\"/&gt;\n</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1498539,"option":"1, 2 and 4","correct":false},{"id":1498540,"option":"only 3","correct":false},{"id":1498541,"option":"1 and 2","correct":false},{"id":1498542,"option":"All of these","correct":true}]},{"q":"<p>You are working on a web application using the Spring framework and to handle requests coming from the client you have a controller class. Now, which of the following annotations can you use to respond to a <strong>@RequestMapping</strong> call in order to map the web requests to the Spring Controller Methods present in the controller class?</p>\n\n<p> </p>\n\n<p><br>\n<strong>Annotations -</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>@HandleMapping</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>@GetMapping</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>@GetResponse</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>@GetRequest</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1498523,"option":"1 and 3","correct":false},{"id":1498524,"option":"3 and 4","correct":false},{"id":1498525,"option":"1 and 4","correct":false},{"id":1498526,"option":"only 2","correct":true}]},{"q":"<p>In Spring, in which version was the <strong>Java 5 </strong>feature introduced?</p>","a":[{"id":46408,"option":"2.5 ","correct":false},{"id":46409,"option":"3.0 ","correct":true},{"id":46410,"option":"2.0 ","correct":false},{"id":46411,"option":"4.0  ","correct":false}]},{"q":"<p>In Spring, if handler mapping beans are not found, then which of the following mapping implementations is created and used by the <strong>DispatcherServlet</strong> class?</p>\n\n<p> </p>\n\n<p> </p>","a":[{"id":734487,"option":"BeanNameUrlHandlerMapping and DefaultAnnotationHandlerMapping","correct":true},{"id":734488,"option":"ControllerBeanNameHandlerMapping and DefaultAnnotationHandlerMapping","correct":false},{"id":734489,"option":"BeanNameUrlHandlerMapping and SimpleUrlHandlerMapping","correct":false},{"id":734490,"option":"ControllerBeanNameHandlerMapping and  SimpleUrlHandlerMapping","correct":false}]},{"q":"<p>Which of the following <em>AspectJ pointcut designators</em> are supported in <em>Spring AOP</em>?</p>\n\n<p>i. @args</p>\n\n<p>ii. execution()</p>\n\n<p>iii. @within</p>\n\n<p>iv. within</p>","a":[{"id":732221,"option":"i, and iii","correct":false},{"id":732222,"option":"ii, and iv","correct":false},{"id":732223,"option":"i, ii, and iv","correct":false},{"id":732224,"option":"All of these","correct":true}]},{"q":"<p>Identify the valid statements about the concept of <em>Weaving </em>in <em>Spring AOP</em>?</p>\n\n<p>i. Weaving is the process of applying aspects to a target object to create a new proxied object.</p>\n\n<p>ii. Weaving can be done at compile time, load time or at runtime.</p>\n\n<p>iii. Runtime weaving is done using the AspectJ compiler.</p>\n\n<p>iv. During load time weaving, aspects are woven in when the target class is loaded into the JVM.</p>","a":[{"id":732217,"option":"i, ii, and iii","correct":false},{"id":732218,"option":"i, ii and iv","correct":true},{"id":732219,"option":"i, iii, and iv","correct":false},{"id":732220,"option":"All of these","correct":false}]},{"q":"<p>Under which of the following situations <em>Spring </em>provides <em>Programmatic Transaction Management?</em></p>","a":[{"id":730680,"option":"With the TransactionTemplate class","correct":true},{"id":730681,"option":"With the TransactionService class","correct":false},{"id":730682,"option":"using the @Transactional bean post processor","correct":false},{"id":730683,"option":"using the @TransactionalTemplate bean post processor","correct":false}]},{"q":"<p>What is <em>Weaving </em>in Spring AOP ?</p>","a":[{"id":730636,"option":" Weaving is the process of linking an aspect with other application types or objects to create an advised object","correct":true},{"id":730637,"option":"It is an expression that is matched with join points to determine whether advice needs to be executed or not","correct":false},{"id":730638,"option":"It is the process of creating an object after applying advice to the target object.","correct":false},{"id":730639,"option":"None of these","correct":false}]},{"q":"<p>Select the valid <em>Spring Security modules</em> in Spring MVC?</p>\n\n<p>i. ACL (Access Control List)</p>\n\n<p>ii. Core</p>\n\n<p>iii. LDAP (Lightweight Directory Access Protocol)</p>\n\n<p>iv. OpenID</p>","a":[{"id":735608,"option":"i, and ii","correct":false},{"id":735609,"option":"i, iii, and iv","correct":false},{"id":735610,"option":"only ii","correct":false},{"id":735611,"option":"All of these","correct":true}]},{"q":"<p>In which of the following versions of Spring was the Expression Language or SpEL introduced?</p>","a":[{"id":46044,"option":"1.0","correct":false},{"id":46045,"option":"2.0","correct":false},{"id":46046,"option":"3.0","correct":true},{"id":46047,"option":"4.0","correct":false}]},{"q":"<p>In Spring, which of the following terms is related to a <strong>DataInputStream</strong>?</p>","a":[{"id":45356,"option":"Output stream","correct":false},{"id":45357,"option":"I/O stream","correct":false},{"id":45358,"option":"Filtered stream","correct":true},{"id":45359,"option":"File stream","correct":false}]},{"q":"<p>In Spring, which of the following is provided by the <strong>structs</strong> in contradiction to <strong>MVC</strong>?</p>","a":[{"id":45360,"option":"Model","correct":false},{"id":45361,"option":"View","correct":true},{"id":45362,"option":"Controller","correct":false},{"id":45363,"option":"None of these","correct":false}]},{"q":"<p>In Spring, in which of the following options are the variables and methods that are common to specific types of objects defined?    </p>","a":[{"id":45234,"option":"Object","correct":false},{"id":45235,"option":"Class","correct":true},{"id":45236,"option":"Method","correct":false},{"id":45237,"option":"Real data type","correct":false}]},{"q":"<p>In Spring, which of the following ways for using the <strong>idref</strong> attribute is correct?</p>","a":[{"id":46433,"option":"Setter method","correct":false},{"id":46434,"option":"Constructor argument ","correct":true},{"id":46435,"option":"Both of these","correct":false},{"id":46436,"option":"Arguments","correct":false}]},{"q":"<p>In Spring, which of the following is not a return type?</p>","a":[{"id":45254,"option":"boolean ","correct":false},{"id":45255,"option":"void ","correct":false},{"id":45256,"option":"public ","correct":true},{"id":45257,"option":"button ","correct":false}]},{"q":"<p>In Spring, which of these is not a special <strong>bean</strong>?</p>","a":[{"id":50104,"option":"Locale resolver ","correct":false},{"id":50105,"option":"Theme resolver ","correct":false},{"id":50106,"option":"Multipart file ","correct":false},{"id":50107,"option":"Resolver","correct":true}]},{"q":"<p>In Spring, which of the following methods will you use to write your own controller?</p>","a":[{"id":50120,"option":"handleRequestInternal(HttpServletRequest, HttpServletResponse)","correct":true},{"id":50121,"option":"handleRequestExternal(HttpServletRequest, HttpServletResponse) ","correct":false},{"id":50122,"option":"handleInternal(HttpServletRequest, HttpServletResponse) ","correct":false},{"id":50123,"option":"handleexternal(HttpServletRequest, HttpServletResponse) ","correct":false}]},{"q":"<p>Which of the following statements are correct about <strong>bean scoping</strong><em> </em>in Spring MVC:</p>\n\n<ol>\n\t<li>By default, all Spring beans are <strong>singleton</strong> scoped in nature.</li>\n\t<li>By setting a bean's <strong>scope</strong><em> </em>attribute to <strong>prototype</strong>,<em> a </em>bean definition is scoped to have only two object instances.</li>\n\t<li>By setting a bean's <strong>scope</strong><em> </em>attribute to <strong>request</strong>,<em> </em>a bean definition is scoped to an HTTP request.<em> </em></li>\n\t<li>By setting a bean's <strong>scope</strong><em> </em>attribute to <strong>session</strong>, a bean definition is scoped to an HTTP session.</li>\n</ol>\n\n<p> </p>\n\n<p> </p>","a":[{"id":730722,"option":"1, 2, and 4","correct":false},{"id":730723,"option":"1, 3, and 4","correct":false},{"id":730724,"option":"1, 2, and 3","correct":true},{"id":730725,"option":"All of these","correct":false}]},{"q":"<p>In Spring, which of the following defines the <strong>IoC container</strong> and the dependency injection?</p>","a":[{"id":46094,"option":"Design pattern","correct":true},{"id":46095,"option":"Framework","correct":false},{"id":46096,"option":"Java module","correct":false},{"id":46097,"option":"ORM framework","correct":false}]},{"q":"<p>Select the correct statements about the <em>Spring Security</em>?</p>\n\n<p>i. It is a customizable framework that provides extensive support for both Authentication and Authorization to Java Applications.</p>\n\n<p>ii. Servlet API integration Optional integration with Spring Web MVC.</p>\n\n<p>iii. It provides protections against Cross Site Request Forgery, SQL injections, Click Jacking.</p>\n\n<p>iv. It does not provide any protection against Session Fixation.</p>","a":[{"id":735556,"option":"i, ii, and iii","correct":true},{"id":735557,"option":"i, iii, and iv","correct":false},{"id":735558,"option":"i, ii, and iv","correct":false},{"id":735559,"option":"All of these","correct":false}]},{"q":"<p>What is the use of the <em>DefaultAnnotationHandlerMapping </em>in Spring MVC?</p>","a":[{"id":734483,"option":"Maps controllers to URLs by using the controllers’ class names as the basis for their URLs","correct":false},{"id":734484,"option":"Maps request to controller and controller methods that are annotated with @RequestMapping.","correct":true},{"id":734485,"option":"Maps controllers to URLs that are based on the controllers’ bean names.","correct":false},{"id":734486,"option":"None of these","correct":false}]},{"q":"<p>Which among the following is not a <em>Spring's Data Access </em>exception?</p>","a":[{"id":732701,"option":"DataAccessException","correct":false},{"id":732702,"option":"CannotAcquireLockException","correct":false},{"id":732703,"option":"ConcurrencyFailureException","correct":false},{"id":732704,"option":"SQLException","correct":true}]},{"q":"<p>Which of the following statements are true about <em>Pointcuts </em>in <em>Spring AOP </em>?</p>\n\n<p>i. Pointcuts help narrow down the join points advised by an aspect.</p>\n\n<p>ii. A pointcut definition matches one or more join points at which advice should be woven.</p>\n\n<p>iii. Pointcuts can be specified through regular expressions that define matching class and method name patterns.</p>\n\n<p>iv. AOP frameworks do not allow for the creation of dynamic pointcuts.</p>","a":[{"id":732137,"option":"i, ii, and iv","correct":false},{"id":732138,"option":"i, ii, and iii","correct":true},{"id":732139,"option":"i, iii, and iv","correct":false},{"id":732140,"option":"Al of these","correct":false}]},{"q":"<p>Which of the following can be considered as a <em>Join Point </em>in <em>Spring AOP </em>?</p>","a":[{"id":732097,"option":"A method being called","correct":false},{"id":732098,"option":"An exception being thrown","correct":false},{"id":732099,"option":"None of these","correct":false},{"id":732100,"option":"Both of these","correct":true}]},{"q":"<p>Which of the following are valid <em>Propagation Behaviour Constants</em> in Spring MVC?</p>\n\n<p>i. PROPAGATION_NESTED</p>\n\n<p>ii. PROPAGATION_ REQUIRED</p>\n\n<p>iii. PROPAGATION_SUPPORTS</p>\n\n<p>iv. PROPAGATION_NEVER</p>\n\n<p> </p>","a":[{"id":731093,"option":"i, ii, and iv","correct":false},{"id":731094,"option":"i, iii, and iv","correct":false},{"id":731095,"option":"i, and iii","correct":false},{"id":731096,"option":"All of these","correct":true}]},{"q":"<p>Which interfaces should a bean class implement to define the <em>init </em>and <em>destroy </em>methods for a bean?</p>\n\n<p> </p>","a":[{"id":731085,"option":"InitializingBean and DisposableBean interfaces","correct":true},{"id":731086,"option":"InitializeBean and DisposableBean interfaces","correct":false},{"id":731087,"option":"InitializingBean and DisposeBean interfaces","correct":false},{"id":731088,"option":"None of these","correct":false}]},{"q":"<p>Which of the following is used to map exceptions in <em>Spring MVC</em>?</p>","a":[{"id":730696,"option":"Using @ExceptionHandler at the class level","correct":false},{"id":730697,"option":"Using @ControllerAdvice to catch global exceptions thrown by all controllers","correct":false},{"id":730698,"option":"Both of these","correct":true},{"id":730699,"option":"None of these","correct":false}]},{"q":"<p>Which of the following statements are valid about <em>DispatcherServlet</em>?</p>\n\n<p>i. Used to handle all incoming requests and route them through Spring.</p>\n\n<p>ii. Uses customizable logic to determine which controllers should handle which requests.</p>\n\n<p>iii. Forwards all responses to through view handlers to determine the correct views to route responses to.</p>\n\n<p>iv. Exposes all beans defined in Spring to controllers for dependency injection.</p>","a":[{"id":730676,"option":"i, ii, and iii","correct":false},{"id":730677,"option":"i, ii, and iv","correct":false},{"id":730678,"option":"i, iii, and iv","correct":false},{"id":730679,"option":"i, ii, iii, and iv","correct":true}]},{"q":"<p>Which is the default <em>implementation class</em> in <em>Spring framework</em> for <em>Exception Handling</em>?</p>","a":[{"id":729514,"option":"SimpleMappingExceptionResolver","correct":true},{"id":729515,"option":"HandlerExceptionResolver","correct":false},{"id":729516,"option":"MappingExceptionResolver","correct":false},{"id":729517,"option":"None of these","correct":false}]},{"q":"<p>Which of the following <em>events </em>are provided by the <em>Spring Framework</em>?</p>\n\n<p>i. ContextRefreshedEvent</p>\n\n<p>ii. ContextStartedEvent</p>\n\n<p>iii. RequestHandledEvent</p>\n\n<p>iv. RequestClosedEvent</p>","a":[{"id":729510,"option":"i, ii, and iii","correct":true},{"id":729511,"option":"i, ii, and iv","correct":false},{"id":729512,"option":"i, iii, and iv","correct":false},{"id":729513,"option":"i, ii, iii, and iv","correct":false}]},{"q":"<p>Which of the following grants are provided by OAuth specification for acquiring an access token?</p>\n\n<p>i. Authorization code grant</p>\n\n<p>ii. Implicit grant</p>\n\n<p>iii. Resource owner credentials grant</p>\n\n<p>iv. Client credentials grant</p>","a":[{"id":735568,"option":"i, and ii","correct":false},{"id":735569,"option":"i, iii, and iv","correct":false},{"id":735570,"option":"i, ii, and iv","correct":false},{"id":735571,"option":"All of these","correct":true}]},{"q":"<p>Identify the modules associated with <em>Spring Security 3.0</em>?</p>\n\n<p>i. ACL (Access Control List)</p>\n\n<p>ii. CAS (Central Authentication Service) Client</p>\n\n<p>iii. LDAP (Lightweight Directory Access Protocol)</p>\n\n<p>iv. Core</p>","a":[{"id":735616,"option":"i, ii, and iii","correct":false},{"id":735617,"option":"i, iii, and iv","correct":false},{"id":735618,"option":"i, ii, and iv","correct":false},{"id":735619,"option":"All of these","correct":true}]},{"q":"<p>Which of the following meta data does a <em>BeanDefinition</em> object contain?</p>\n\n<p>i. A package-qualified class name</p>\n\n<p>ii. Configuration elements, which state how the bean should behave in the container.</p>\n\n<p>iii. Bean Dependencies</p>\n\n<p>iv. The number of connections to use in a bean that manages a connection pool</p>","a":[{"id":729444,"option":"i, ii, and iii","correct":false},{"id":729445,"option":"i, ii, and iv","correct":false},{"id":729446,"option":"i, iii, and iv","correct":false},{"id":729447,"option":"All of these","correct":true}]},{"q":"<p>Which of the following <em>controller </em>autopopulates a form bean from the request?</p>","a":[{"id":729174,"option":"AbstractFormController","correct":true},{"id":729175,"option":"FormController","correct":false},{"id":729176,"option":"AbstractController","correct":false},{"id":729177,"option":"None of these","correct":false}]},{"q":"<p>In Spring, which of these do the bean definition metadata objects contain?</p>","a":[{"id":50216,"option":"Class","correct":false},{"id":50217,"option":"Scope ","correct":false},{"id":50218,"option":"Constructor arguments ","correct":false},{"id":50219,"option":"All of these","correct":true}]},{"q":"<p>In Spring, which of these byte sizes for declaring a numeric data type is not correct?</p>","a":[{"id":45274,"option":"8","correct":false},{"id":45275,"option":"4","correct":false},{"id":45276,"option":"2","correct":false},{"id":45277,"option":"6","correct":true}]},{"q":"<p>In Spring, which of the following specifies the two entities of a value of the <strong>double</strong> data type?</p>","a":[{"id":45238,"option":"Significant digits, Exponent","correct":true},{"id":45239,"option":"Length, Denominator","correct":false},{"id":45240,"option":"Mode, Numerator","correct":false},{"id":45241,"option":"None of these","correct":false}]},{"q":"<p>In Spring, what are the types of advice?</p>","a":[{"id":45912,"option":"then, after, after-returning, after-throwing and around","correct":false},{"id":45913,"option":"when, after, after-returning and around","correct":false},{"id":45914,"option":"where, after, after-returning, after-throwing and around","correct":false},{"id":45915,"option":"before, after, after-returning, after-throwing and around","correct":true}]},{"q":"<p>In Spring, which of the following keywords describes the <strong>ACID</strong> term?</p>","a":[{"id":45926,"option":"Accurate, Controlled, Isolation, and Durability","correct":false},{"id":45927,"option":"Atomicity, Consistency, Independent, and Done","correct":false},{"id":45928,"option":"Atomicity, Consistency, Isolation, and Durability","correct":true},{"id":45929,"option":"Accurate, Controlled, Independent, and Done","correct":false}]},{"q":"<p>In Spring, which of the following conversions of a <strong>decimal</strong> number <strong>44</strong> into the <strong>binary</strong> number is correct?</p>","a":[{"id":45764,"option":"101100","correct":true},{"id":45765,"option":"101010","correct":false},{"id":45766,"option":"111000","correct":false},{"id":45767,"option":"10100","correct":false}]},{"q":"<p>In Spring, which of the following formats of a <strong>comment</strong> is correct?</p>","a":[{"id":45780,"option":"// single line, ** block lines, /*/ documentation","correct":false},{"id":45781,"option":"// single line, /*...*/ block lines, /**...*/ documentation","correct":true},{"id":45782,"option":"/ single line, /* block lines, ** documentation","correct":false},{"id":45783,"option":"// single line, //...// block lines, //*...*// documentation","correct":false}]},{"q":"<p>In the Spring framework, what is the number of<strong> proxies </strong>available?</p>","a":[{"id":46182,"option":"One","correct":false},{"id":46183,"option":"Two","correct":true},{"id":46184,"option":"Three","correct":false},{"id":46185,"option":"Four","correct":false}]},{"q":"<p>In Spring, which of the following classes is used to call the <strong>stored procedures</strong>?</p>","a":[{"id":45948,"option":"SPHelper","correct":false},{"id":45949,"option":"JdbcTemplateCall","correct":false},{"id":45950,"option":"JdbcTemplate","correct":false},{"id":45951,"option":"SimpleJdbcCall","correct":true}]},{"q":"<p>In Spring, which of the following is a part of the <strong>Data Access</strong> <strong>Layer</strong>?</p>","a":[{"id":46012,"option":"Beans","correct":false},{"id":46013,"option":"Aspects","correct":false},{"id":46014,"option":"JMS","correct":true},{"id":46015,"option":"Context","correct":false}]},{"q":"<p>In Spring, which of the following methods is used to close the <strong>IoC container</strong> in a non-web application?</p>","a":[{"id":46467,"option":"shutdownNow()","correct":false},{"id":46468,"option":"registerShutdownHook()","correct":true},{"id":46469,"option":"Both of these","correct":false},{"id":46470,"option":"None of these","correct":false}]},{"q":"<p>In Spring, which of the following has <strong>Bytecode</strong> as its machine language?</p>","a":[{"id":45768,"option":"Java Bytecode Compiler","correct":false},{"id":45769,"option":"Java Bytecode Interpreter","correct":false},{"id":45770,"option":"Java Virtual Machine","correct":true},{"id":45771,"option":"Java Memory Machine","correct":false}]},{"q":"<p>In Spring, which of the following options about the scope of a <strong>stateful bean</strong> is correct?</p>","a":[{"id":46471,"option":"Singleton scope ","correct":false},{"id":46472,"option":"Prototype scope ","correct":true},{"id":46473,"option":"Both of these","correct":false},{"id":51610,"option":"None of these","correct":false}]},{"q":"<p>In the Spring MVC framework, which of the following statements about the request processing workflow of the <strong>DispatcherServlet </strong>are correct:</p>\n\n<ol>\n\t<li>After receiving an HTTP request, DispatcherServlet interacts with the <strong>ViewResolver</strong> component to call the relevant controller that takes the request and calls the appropriate service methods based on the used <strong>GET</strong> or <strong>POST</strong> method.</li>\n\t<li>The service method that is called by the controller sets the model data based on the defined business logic and returns the view name to the DispatcherServlet.</li>\n\t<li>The DispatcherServlet interacts with the <strong>ViewResolver</strong> component to pick up the defined view for the request.</li>\n\t<li>Once the view is finalized, the DispatcherServlet passes the model data to the view, that is finally rendered on the browsers.</li>\n</ol>\n\n<p> </p>","a":[{"id":729166,"option":"1, 2, and 3","correct":false},{"id":729167,"option":"2, 3, and 4","correct":true},{"id":729168,"option":"1, 3, and 4","correct":false},{"id":729169,"option":"All of these","correct":false}]},{"q":"<p>Which exception is thrown if an attempt is made to use a AspectJ designator which is not supported in Spring AOP?</p>","a":[{"id":732225,"option":"IllegalArgumentException","correct":true},{"id":732226,"option":"ClassNotFoundException","correct":false},{"id":732227,"option":"NullException","correct":false},{"id":732228,"option":"None of these","correct":false}]},{"q":"<p>Which of the following modules constitute the <em>Spring Framework</em>?</p>\n\n<p>i. Spring AOP</p>\n\n<p>ii. Spring Core</p>\n\n<p>iii. Spring ORM</p>\n\n<p>iv. Spring OOP</p>\n\n<p> </p>","a":[{"id":729436,"option":"i, iii, and iv","correct":false},{"id":729437,"option":"i, ii, and iii","correct":true},{"id":729438,"option":"i, ii, and iv","correct":false},{"id":729439,"option":"All of these","correct":false}]},{"q":"<p>Which among the following is responsible for rendering output to the user in Spring MVC?</p>","a":[{"id":734491,"option":"Model","correct":false},{"id":734492,"option":"View","correct":true},{"id":734493,"option":"Controller","correct":false},{"id":734494,"option":"None of these","correct":false}]},{"q":"<p>Which of the following are <em>Spring's Transaction Manager(s) </em>?</p>\n\n<p>i. DataSource Transaction Manager</p>\n\n<p>ii. Hibernate Transaction Manager</p>\n\n<p>iii. Jpa Transaction Manager</p>\n\n<p>iv. Jta Transaction Manager</p>","a":[{"id":733648,"option":"i, and ii","correct":false},{"id":733649,"option":"iii, and iv","correct":false},{"id":733650,"option":"None of these","correct":false},{"id":733651,"option":"All of these","correct":true}]},{"q":"<p>Select the statement that defines the concept of <em>Pointcut </em>in Spring AOP?</p>","a":[{"id":730644,"option":"This is a set of one or more join points where an advice should be executed.","correct":true},{"id":730645,"option":"It is the process of linking aspects with other application types or objects to create an advised object","correct":false},{"id":730646,"option":"It is the code to execute at a join point","correct":false},{"id":730647,"option":"None of these","correct":false}]},{"q":"<p>Which annotation is used with <em>@Configuration </em>class to have the Spring Security configuration defined ?</p>","a":[{"id":729538,"option":"@EnableWebSecurity","correct":true},{"id":729539,"option":"@EnableSecurity","correct":false},{"id":729540,"option":"@WebSecurity","correct":false},{"id":729541,"option":"None of these","correct":false}]},{"q":"<p>Which among the following is not valid <strong>Spring Core Framework</strong> annotation ?</p>","a":[{"id":729530,"option":"@PreDestroy","correct":false},{"id":729531,"option":"@PostConstruct","correct":false},{"id":729532,"option":"@PropertySource","correct":false},{"id":729533,"option":"@ComponentSource","correct":true}]},{"q":"<p>What is an <em>After Throwing Advice</em>?</p>","a":[{"id":729526,"option":"Advice that could throw an exception","correct":false},{"id":729527,"option":"Advice to be executed if a method exits by throwing an exception","correct":true},{"id":729528,"option":"Advice that executes before a join point","correct":false},{"id":729529,"option":"Spring does not provide this type of advice","correct":false}]},{"q":"<p>Which of the following statements are true about Event Handling in Spring MVC ?</p>\n\n<p>i. Event handling in the <em>ApplicationContext</em> is provided through the <em>ApplicationEvent</em> class and <em>ApplicationListener</em> interface.</p>\n\n<p>ii. Spring's event handling is multi-threaded.</p>\n\n<p>iii. By default, spring events are asynchronous.</p>\n\n<p>iv. The listener to an event has to be a bean which implements the <em>ApplicationListener</em> interface</p>","a":[{"id":729522,"option":"i, ii, and iii","correct":false},{"id":729523,"option":"ii, and iv","correct":false},{"id":729524,"option":"i, iii, and iv","correct":false},{"id":729525,"option":"i, and iv","correct":true}]},{"q":"<p>Which among the following is a web-specific event informing all beans that an HTTP request has been serviced ?</p>","a":[{"id":729518,"option":"RequestHandledEvent","correct":true},{"id":729519,"option":"RequestServicedEvent","correct":false},{"id":729520,"option":"ContextClosedEvent","correct":false},{"id":729521,"option":"None of these","correct":false}]},{"q":"<p>Which of the following annotations are provided by Spring MVC for handling exceptions?</p>\n\n<p>i. @ExceptionHandler</p>\n\n<p>ii. @ControllerAdvice</p>\n\n<p>iii. @HandlerExceptionResolver</p>\n\n<p>iv. @ExceptionResolver</p>","a":[{"id":729506,"option":"i, ii, and iii\r\n","correct":true},{"id":729507,"option":"i, ii, and iv\r\n","correct":false},{"id":729508,"option":"i, and ii","correct":false},{"id":729509,"option":"iii, and iv","correct":false}]},{"q":"<p>Select the correct statements about <em>Spring JDBC Template</em>?</p>\n\n<p>i. It provides methods to write the query directly.</p>\n\n<p>ii. It does not automatically cleans up the resources.</p>\n\n<p>iii. It converts the standard JDBC SQLExceptions into RuntimeExceptions</p>\n\n<p>iv. It simplifies database access handling and eliminates the problems of JDBC API.</p>","a":[{"id":735552,"option":"i, ii, and iii","correct":false},{"id":735553,"option":"i, iii, and iv","correct":true},{"id":735554,"option":"i, ii, and iv","correct":false},{"id":735555,"option":"All of these","correct":false}]},{"q":"<p>Which tag is used to encode password by Spring Security?</p>","a":[{"id":735560,"option":"<password-encoder/>","correct":true},{"id":735561,"option":"<encoder/>","correct":false},{"id":735562,"option":"<pass-encoder/>","correct":false},{"id":735563,"option":"None of these","correct":false}]},{"q":"<p>Which tag is used to manage sessions in <em>Spring Security </em>?</p>","a":[{"id":735564,"option":"<session-management> tag","correct":true},{"id":735565,"option":"<session> tag","correct":false},{"id":735566,"option":"<session-manage> tag","correct":false},{"id":735567,"option":"None of the above","correct":false}]},{"q":"<p>Using the Spring AOP framework, what are the join point methods of the following pointcut expressions?<br>\n<em><strong>execution(public * *(..))</strong></em></p>","a":[{"id":735612,"option":"The execution of all public method","correct":true},{"id":735613,"option":"The execution of all public method returning a value","correct":false},{"id":735614,"option":"The execution of all public method having at least one parameter","correct":false},{"id":735615,"option":"The execution of all public method in class belonging to the default java package","correct":false}]},{"q":"<p>Which of the following Collection elements are available in Spring MVC?</p>\n\n<p>i. &lt;list&gt;</p>\n\n<p>ii. &lt;set&gt;</p>\n\n<p>iii. &lt;map&gt;</p>\n\n<p>iv. &lt;props&gt;</p>","a":[{"id":731089,"option":"i, ii, and iii","correct":false},{"id":731090,"option":"i, ii, and iv","correct":false},{"id":731091,"option":"i, iii, and iv","correct":false},{"id":731092,"option":"i, ii, iii, and iv","correct":true}]},{"q":"<p>In Spring, which of the following keywords is used to execute the threads consecutively?</p>","a":[{"id":45348,"option":"synchronize ","correct":true},{"id":45349,"option":"synchronizable","correct":false},{"id":45350,"option":"final","correct":false},{"id":45351,"option":"asynchronized","correct":false}]},{"q":"<p>In Spring, which of the following can be extended to create a custom event?</p>","a":[{"id":45992,"option":"SpringEvent ","correct":false},{"id":45993,"option":"Event ","correct":false},{"id":45994,"option":"ApplicationEvent ","correct":true},{"id":45995,"option":"Application","correct":false}]},{"q":"<p>In Spring, which of the following is the classification of different types of<strong> autowire</strong>?</p>","a":[{"id":46086,"option":"byName , byType, destructor, and autodetect","correct":false},{"id":46087,"option":"byName , byMethod, constructor, and autodetect","correct":false},{"id":46088,"option":"byName , byType, constructor, and autocorrect","correct":false},{"id":46089,"option":"byName , byType, constructor, and autodetect","correct":true}]},{"q":"<p>In Spring, what is the scope of a <strong>stateless</strong> bean?</p>","a":[{"id":46048,"option":"global session","correct":false},{"id":46049,"option":"singleton","correct":true},{"id":46050,"option":"prototype","correct":false},{"id":46051,"option":"request","correct":false}]},{"q":"<p>In Spring, what is the use of an <strong>ApplicationContextAware</strong> interface?</p>","a":[{"id":46453,"option":"Performing the dependency injection","correct":false},{"id":46454,"option":"Makes a bean aware of the container","correct":true},{"id":46455,"option":"Both of these","correct":false},{"id":46456,"option":"None of these","correct":false}]},{"q":"<p>In Spring, which of the following is used to combine multiple requests handling methods into a single controller?</p>","a":[{"id":50136,"option":"UrlFilenameViewController","correct":false},{"id":50137,"option":"MultiActionController","correct":true},{"id":50138,"option":"CommandController","correct":false},{"id":50139,"option":"MultiRequestController","correct":false}]},{"q":"<p>In Spring, which of the following interfaces is used to map a database row to a Java object?</p>","a":[{"id":45856,"option":"ResultSet","correct":false},{"id":45857,"option":"RowMapper","correct":true},{"id":45858,"option":"RowSetMapper","correct":false},{"id":45859,"option":"ResultSetMapper","correct":false}]},{"q":"<p>In Spring, which of the following methods is not supported by the <strong>Thread</strong> class?</p>","a":[{"id":45344,"option":"public void run()","correct":false},{"id":45345,"option":"public void start()","correct":false},{"id":45346,"option":"public void exit()","correct":true},{"id":45347,"option":"public final int getPriority()","correct":false}]},{"q":"<p>Which of the following is an inheritance class of the <strong>Spring controller</strong>?</p>","a":[{"id":50116,"option":"AbstractController ","correct":true},{"id":50117,"option":"AbstractGetController ","correct":false},{"id":50118,"option":"AbstractAddController ","correct":false},{"id":50119,"option":"AbstractClass","correct":false}]},{"q":"<p>Which interface represents the <em>Spring IoC</em> container?</p>","a":[{"id":729440,"option":"org.springframework.context.ApplicationContext","correct":true},{"id":729441,"option":"org.springframework.context.Application","correct":false},{"id":729442,"option":"org.springframework.ApplicationContext","correct":false},{"id":729443,"option":"None of these","correct":false}]},{"q":"<p>Which of the following are valid <em>Spring's AOP configuration</em> elements?</p>\n\n<p>i. &lt;aop:advisor&gt;</p>\n\n<p>ii. &lt;aop:around&gt;</p>\n\n<p>iii. &lt;aop:aspect&gt;</p>\n\n<p>iv. &lt;aop:after-returning&gt;</p>","a":[{"id":729452,"option":"i, ii, and iii","correct":false},{"id":729453,"option":"i, ii, and iv","correct":false},{"id":729454,"option":"i, iii, and iv","correct":false},{"id":729455,"option":"All of these","correct":true}]},{"q":"<p>Which of the following are valid <em>bean scopes</em> in Spring MVC?</p>\n\n<p>i. singleton</p>\n\n<p>ii. prototype</p>\n\n<p>iii. request</p>\n\n<p>iv. global-session</p>","a":[{"id":729542,"option":"i, and iii","correct":false},{"id":729543,"option":"i, ii, and iv","correct":false},{"id":729544,"option":"i, iii, and iv","correct":false},{"id":729545,"option":"All of these","correct":true}]},{"q":"<p>Which among the following correctly defines the <em>@Autowired </em>annotations ?</p>","a":[{"id":729534,"option":"It provides a simple declarative mechanism for adding a property source to Spring’s Environment.","correct":false},{"id":729535,"option":"Configures component scanning directives for use with @Configuration classes.","correct":false},{"id":729536,"option":" It is used for automatic injection of beans.","correct":true},{"id":729537,"option":"None of these","correct":false}]},{"q":"<p>Identify the valid statements about the <strong>Spring Bean Life Cycle </strong>?</p>\n\n<p>i. The <em>@PostConstruct </em>and @<em>PreDestroy </em>annotations are used for defining <em>post-init</em> and <em>pre-destroy</em> methods.</p>\n\n<p>ii. For pre-destroy, the <em>DisposableBean </em>interface needs to be implemented.</p>\n\n<p>iii. The method annotated with <em>@PostConstruct</em> is called after bean instantiation and before properties setting of the bean.</p>\n\n<p>iv. The method <em>@PreDestroy </em>of a prototype bean is called when the bean is garbage collected</p>","a":[{"id":729502,"option":"i, ii, and iv","correct":false},{"id":729503,"option":"i, iii, and iv","correct":false},{"id":729504,"option":"i, ii, and iii","correct":true},{"id":729505,"option":"i, ii, iii, and iv","correct":false}]},{"q":"<p>Which of the following statements are true about the <strong>MVC(Model-View-Controller) </strong>pattern?</p>\n\n<p>i. The <em>Controller </em>facilitates data exchange between the <em>Model</em> and the <em>View.</em></p>\n\n<p>ii. The <em>View </em>is responsible for rendering the data passed on to it.</p>\n\n<p>iii. For making any change in the <em>View</em>, the <em>Model </em>also needs to be changed.</p>\n\n<p>iv. The <em>Model </em>handles the business logic and has no knowledge of the <em>View.</em></p>\n\n<p> </p>","a":[{"id":729170,"option":"i, ii, and iii","correct":false},{"id":729171,"option":"i, ii, and iv","correct":true},{"id":729172,"option":"i, iii, and iv","correct":false},{"id":729173,"option":"All of these","correct":false}]},{"q":"<p>Arrange the following <em>Spring MVC Processing Sequence </em>in the correct order.</p>\n\n<p>i.<strong>  DispatcherServlet </strong>dispatches the rendering process to returned <strong>View. </strong></p>\n\n<p>ii. <strong>HandlerAdapter</strong> calls the business logic process of<strong> Controller </strong>.</p>\n\n<p>iii. <strong>DispatcherServlet</strong> receives the request.</p>\n\n<p>iv. <strong>View </strong>renders <strong>Model </strong>data and returns the response.</p>","a":[{"id":729432,"option":"ii, iii, i, and iv","correct":false},{"id":729433,"option":"i, iii, ii, and iv","correct":false},{"id":729434,"option":"iii, ii, i, and iv","correct":true},{"id":729435,"option":"iii, ii, iv, and i","correct":false}]},{"q":"<p>In Spring, which of these is the full form of <strong>MVC</strong>?</p>","a":[{"id":46186,"option":"Model-View-Controller","correct":true},{"id":46187,"option":"Middle-View-Controller","correct":false},{"id":46188,"option":"Module-View-Controller","correct":false},{"id":46189,"option":"None of these","correct":false}]},{"q":"<p>In Spring, which of the following methods is used to shut down the <strong>IoC</strong> container?</p>","a":[{"id":46078,"option":"shutdownHook()","correct":false},{"id":46079,"option":"shutdownHandler()","correct":false},{"id":46080,"option":"registerHook()","correct":false},{"id":46081,"option":"registerShutdownHook()","correct":true}]},{"q":"<p>Which of the following commands is used to shut down a Spring Boot application?</p>","a":[{"id":655784,"option":"curl -X GET localhost:port/actuator/shutdown","correct":false},{"id":655785,"option":"curl -X GET localhost:port/actuator/kill","correct":false},{"id":655786,"option":"curl -X POST localhost:port/actuator/terminate","correct":false},{"id":655787,"option":"curl -X POST localhost:port/actuator/shutdown","correct":true}]},{"q":"<p>In Spring Boot, which of the following open-source projects is used to publish and subscribe to the messages based on the fault-tolerant messaging system?</p>","a":[{"id":655780,"option":"Twilio","correct":false},{"id":655781,"option":"Apache Kafka","correct":true},{"id":655782,"option":"Hystrix","correct":false},{"id":655783,"option":"Rabbit MQ","correct":false}]},{"q":"<p>Which of these is the correct order to create a deployable war file in Spring Boot?</p>\n\n<p>1. Mark the embedded servlet container dependency as provided.<br>\n2. Extend SpringBootServletInitializer and override its configuration method.<br>\n3. Change the packing type to war in pom.xml or in build.gradle.</p>","a":[{"id":655768,"option":"1 -> 2 -> 3","correct":false},{"id":655769,"option":"1 -> 3 -> 2","correct":false},{"id":655770,"option":"2 -> 3 -> 1","correct":true},{"id":655771,"option":"2 -> 1 -> 3","correct":false}]},{"q":"<p>Which of the following are valid ways to configure a class as <em>Spring Bean</em>?</p>\n\n<p>i. By using the <em>@Bean </em>annotation with <em>@Configuration </em>class.</p>\n\n<p>ii. By using <em>@Component </em>annotation</p>\n\n<p>iii. By using <em>@Service</em> annotations</p>\n\n<p>iv. By using <em>@Repository</em> annotations</p>","a":[{"id":731097,"option":"i, ii, and iii","correct":false},{"id":731098,"option":"i, ii, and iv","correct":false},{"id":731099,"option":"only i","correct":false},{"id":731100,"option":"i, ii, iii, and iv","correct":true}]},{"q":"<p>Which among the following classes is considered as an entry point to an Spring Web MVC project?</p>","a":[{"id":729178,"option":"DispatcherServlet","correct":true},{"id":729179,"option":"DispatchServlet","correct":false},{"id":729180,"option":"SpringDispatcherServlet","correct":false},{"id":729181,"option":"SpringDispatchServlet","correct":false}]},{"q":"<p>In Spring Boot, which of the following is a special starter that makes Maven or Gradle dependency-management easier by adding jars to the classpath?</p>","a":[{"id":655796,"option":"spring-boot-starter-data-jpa","correct":false},{"id":655797,"option":"spring-boot-starter-parent","correct":true},{"id":655798,"option":"spring-boot-starter-web","correct":false},{"id":655799,"option":"spring-boot-starter-dependency","correct":false}]},{"q":"<p>While working with interceptors in Spring Boot, which of the following methods is used to perform operations before sending the response to the client?</p>","a":[{"id":655776,"option":"preHandle()","correct":false},{"id":655777,"option":"postHandle()","correct":true},{"id":655778,"option":"afterCompletion()","correct":false},{"id":655779,"option":"None of these","correct":false}]},{"q":"<p>In Spring Boot, what are the steps followed to connect to an external database like My SQL?</p>\n\n<ol>\n\t<li>Remove H2 dependency from pom.xml</li>\n\t<li>Add dependency for MySQL connector to pom.xml</li>\n\t<li>Configure your connection to MySQL Database</li>\n\t<li>Setup MySQL Database</li>\n</ol>","a":[{"id":655792,"option":"1->2->3->4","correct":false},{"id":655793,"option":"2->1->4->3","correct":true},{"id":655794,"option":"2->1->3->4","correct":false},{"id":655795,"option":"1->2->4->3","correct":false}]},{"q":"<p>Which of the following design patterns are used in the Spring framework:</p>\n\n<ol>\n\t<li>Singleton Pattern</li>\n\t<li>Proxy Pattern</li>\n\t<li>Adapter Pattern</li>\n\t<li>Model View Controller</li>\n</ol>","a":[{"id":729448,"option":"1 and 3","correct":false},{"id":729449,"option":"1, 2, and 3","correct":false},{"id":729450,"option":"1, 3, and 4","correct":false},{"id":729451,"option":"All of these","correct":true}]},{"q":"<p>Which of the following codes is a dependency for Spring Boot starter web?</p>","a":[{"id":656520,"option":"<bean>\r\n    <dependency>org.springframework.boot</dependency>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</bean>","correct":false},{"id":656521,"option":"<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>","correct":true},{"id":656522,"option":"<bean>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <dependency>spring-boot-starter-web</dependency>\r\n</bean>","correct":false},{"id":656523,"option":"<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <bean>spring-boot-starter-web</bean>\r\n</dependency>","correct":false}]},{"q":"<p>In Spring Boot, which of the following codes is used to disable specific auto-configuration classes?</p>","a":[{"id":656528,"option":"@Configuration\r\n@EnableAutoConfiguration(exclude={DataSourceAutoConfiguration.class})\r\npublic class CustomConfiguration {\r\n}","correct":true},{"id":656529,"option":"@Configuration\r\n@DisableAutoConfiguration(exclude={DataSourceAutoConfiguration.class})\r\npublic class CustomConfiguration {\r\n}","correct":false},{"id":656530,"option":"@Config\r\n@EnableConfiguration(exclude={DataSourceAutoConfiguration.class})\r\npublic class CustomConfiguration {\r\n}","correct":false},{"id":656531,"option":"@Config\r\n@AutoConfiguration(exclude={DataSourceAutoConfiguration.class})\r\npublic class CustomConfiguration {\r\n}","correct":false}]},{"q":"<p>In Spring, you have developed a banking-based web application for which users need to sign-up their information to log in to the website. Now, you are working on the Spring MVC validation to&nbsp;restrict the input provided by the user. You are required to apply constraints on the object model by using various annotations. For this, you wanted to implement the Bean validation API. Now, which of the following statements about these annotations from this API are correct in this scenario:</p>\n\n<p><strong>Statements</strong></p>\n\n<ol>\n\t<li>The annotation&nbsp;<em>@NotNull</em><strong>&nbsp;</strong>determines that the value can't be null.</li>\n\t<li>The annotation&nbsp;<em>@Size</em><strong>&nbsp;</strong>determines that the size must be equal to the specified value.</li>\n\t<li>The annotation&nbsp;<em>@Max&nbsp;</em>determines that the number must be equal to or less than the specified value.</li>\n\t<li>The annotation&nbsp;<em>@RegExp&nbsp;</em>determines that the sequence follows the specified regular expression.</li>\n</ol>","a":[{"id":1763355,"option":"1, 2, and 3","correct":true},{"id":1763356,"option":"2, 3, and 4","correct":false},{"id":1763357,"option":"1, 3, and 4","correct":false},{"id":1763358,"option":"All of these","correct":false}]}]
[{"q":"<p>What is the output to the following code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#import &lt;Foundation/Foundation.h&gt;\n\nint main () {\n   \n   \n   double a[4] = {15.0,16.0,3.0, 25.0};\n   double *pointer;\n   int i;\n\n   pointer = a;\n \n    for ( i = 0; i &lt; 4; i++ ) {\n      NSLog(@\"*(p + %d) : %f\\n\",  i, *(pointer + i) );\n   }\n\n  for ( i = 0; i &lt; 5; i++ ) {\n      NSLog(@\"*(balance + %d) : %f\\n\",  i, *(a + i) );\n   }\n \n   return 0;\n}</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<p>*(p + 0) : 15.000000<br>\n&nbsp;*(p + 1) : 16.000000<br>\n&nbsp;*(p + 2) : 3.000000<br>\n&nbsp;*(p + 3) : 25.000000<br>\n&nbsp;*(balance + 0) : 15.000000<br>\n&nbsp;*(balance + 1) : 16.000000<br>\n*(balance + 2) : 3.000000<br>\n&nbsp;*(balance + 3) : 25.000000</p>\n\n<p><strong>2.</strong></p>\n\n<p>*(p + 0) : 15.000000<br>\n&nbsp;*(p + 1) : 16.000000<br>\n&nbsp;*(p + 2) : 3.000000<br>\n&nbsp;*(p + 3) : 25.000000<br>\n&nbsp;*(balance + 0) : 15.000000<br>\n&nbsp;*(balance + 1) : 16.000000<br>\n*(balance + 2) : 3.000000<br>\n&nbsp;*(balance + 3) : 25.000000<br>\n*(balance + 4) : 0.000000</p>\n\n<p><strong>3.</strong></p>\n\n<p>Compilation error</p>\n\n<p><strong>4.</strong></p>\n\n<p>Syntax error</p>","a":[{"id":1769383,"option":"1","correct":false},{"id":1769384,"option":"2","correct":true},{"id":1769385,"option":"3","correct":false},{"id":1769386,"option":"4","correct":false}]},{"q":"<p>What is the output to the following code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#import &lt;Foundation/Foundation.h&gt;\n \nconst int maximum = 3;\n \nint main () {\n   int  a[] = {10, 100, 200};\n   int i, *ptr[maximum];\n \n   for ( i = 0; i &lt; maximum; i++) {\n      ptr[i] = &amp;a[i];  \n   }\n   for ( i = 0; i &lt; maximum; i++) {\n      NSLog(@\"value of a[%d] = %d\\n\", i, *ptr[i] );\n   }\n   return 0;\n}</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<p>Value of a[0] = 10<br>\n&nbsp;Value of a[1] = 100<br>\n&nbsp;Value of a[2] = 200</p>\n\n<p><strong>2.</strong></p>\n\n<p>Value of a[0] = 10<br>\n&nbsp;Value of a[1] = 10<br>\n&nbsp;Value of a[2] = 200</p>\n\n<p><strong>3.</strong></p>\n\n<p>Value of a[2] = 10<br>\n&nbsp;Value of a[1] = 100<br>\n&nbsp;Value of a[0] = 200</p>\n\n<p><strong>4.</strong></p>\n\n<p>No output</p>","a":[{"id":1769399,"option":"1","correct":true},{"id":1769400,"option":"2","correct":false},{"id":1769401,"option":"3","correct":false},{"id":1769402,"option":"4","correct":false}]},{"q":"<p>What is the output to the following code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#import &lt;Foundation/Foundation.h&gt;\n \nint main () {\n   int  num;\n   int  *pointer;\n   int  **ppointer;\n\n   num = 5000;\n\n   \n   pointer = &amp;num;\n\n   \n   ppointer = &amp;pointer;\n\n  \n   NSLog(@\"Value of num = %d\\n\", num );\n   NSLog(@\"Value available at *pointer = %d\\n\", *pointer );\n   NSLog(@\"Value available at **ppointer= %d\\n\", **ppointer);\n\n   return 0;\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1769371,"option":"Value of num = 5000\r\n Value available at *pointer = 5000\r\nValue available at **ppointer= 5000","correct":true},{"id":1769372,"option":"Syntax error","correct":false},{"id":1769373,"option":"Value of num = 5000 \r\nValue available at *pointer = null\r\n Value available at **ppointer= 5000","correct":false},{"id":1769374,"option":"Compilation error","correct":false}]},{"q":"<p>What is the output to the following code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#import\nconst int maximum= 3;\nint main () {\n int a[] = {10, 100, 200};\n int i, *pointer;\n pointer= a;\n i = 0;\n while ( ptr &lt;= &amp;a[maximum - 1] ) {\n  NSLog(@\"Address of a[%d] = %x\\n\", i, pointer );\n  NSLog(@\"Value of a[%d] = %d\\n\", i, *pointer );\n  pointer++;\n  i++;\n }\nreturn 0;\n}</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>Address of a[0] = b65123a0\nValue of a[0] = 10\n Address of a[1] =b65123a4\nValue of a[1] = 100\nAddress of a[2] = b65123a8\n Value of a[2] = 200</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>syntax error</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>Address of a[0] = b65123a0 \nValue of a[0] = 20\n Address of a[1] =b65123a4 \nValue of a[1] = 10 \nAddress of a[2] = b65123a8 \nValue of a[2] = 200</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1769656,"option":"1","correct":true},{"id":1769657,"option":"2","correct":false},{"id":1769658,"option":"3","correct":false},{"id":1769659,"option":"Compilation error","correct":false}]},{"q":"<p>What will be the output for the following C++ code?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass test\n{\n\tint num[5];\n\npublic:\n\n\ttest(int p, int q, int r, int s, int t)\n\t\t: num{ p, q, r, t} {};\n\t\t\n\tvoid modify()\n\t{\n\t\t\n\t\tfor (int j = 0; j &lt; 4; j++)\n\t\t\t*(num+j)+=2;\n\t}\n\n\tvoid display()\n\t{\n\t\t\n\t\tfor (int j = 0; j &lt; 4; j++)\n\t\t\tcout &lt;&lt; *(num + j) &lt;&lt;\"\\n\";\n\t}\n};\n\n\nint main()\n{\n\ttest t(8, 13, 15, 6, 1);\n\tt.modify();\n\tt.display();\n\treturn 0;\n}</code></pre>\n\n<p> </p>\n\n<p> </p>\n\n<p><strong>Output:</strong></p>\n\n<p>1. </p>\n\n<pre class=\"prettyprint\"><code>10\n15\n17\n3</code></pre>\n\n<p> </p>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>8\n13\n15\n1</code></pre>\n\n<p> </p>\n\n<p>3. </p>\n\n<pre class=\"prettyprint\"><code>10\n15\n17\n8</code></pre>\n\n<p> </p>","a":[{"id":1488700,"option":"1","correct":true},{"id":1488701,"option":"2","correct":false},{"id":1488702,"option":"3","correct":false},{"id":1488703,"option":"none of these","correct":false}]},{"q":"<p>What will be the output for the following C++ code?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass test \n{\t\n\tint a;\n\tint b;\n\t\t\n\tpublic:\n\ttest(int A, int B)\n\t: a(B)\n\t, b(A)\n\t{\n\t\t    \n\t}\n\t\n\tvoid modify()\n\t{\n\t    int *t = &amp;a;\n\t    int *s = &amp;b;\n\t    \n\t    a = a + *s;\n\t    b = *t - b;\n\t}\n\t\n\tvoid display() \n\t{ \n\t    cout &lt;&lt; a &lt;&lt; \" \" &lt;&lt; b; \n\t    \n\t}\n};\n\ntest func(int a, int b)\n{\n\t\n\treturn { a, b };\n}\n\nint main()\n{\n\ttest t = func(21, 22);\n\tt.modify();\n\tt.display();\n\treturn 0;\n}</code></pre>\n\n<p> </p>\n\n<p> </p>\n\n<p><strong>Output</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>43 22</code></pre>\n\n<p><br>\n2.</p>\n\n<pre class=\"prettyprint\"><code>21 22\n</code></pre>\n\n<p><br>\n3.</p>\n\n<pre class=\"prettyprint\"><code>22 43</code></pre>\n\n<p> </p>","a":[{"id":1488755,"option":"1","correct":true},{"id":1488756,"option":"2","correct":false},{"id":1488757,"option":"3","correct":false},{"id":1488758,"option":"None of these","correct":false}]},{"q":"<p>In C++, which of the following is the size of<strong> </strong>the<strong> generic pointer</strong>?</p>","a":[{"id":146360,"option":"2 bits","correct":false},{"id":146361,"option":"4 bits","correct":true},{"id":146362,"option":"8 bits","correct":false},{"id":280717,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\nvoid fun(int a) \n{ \n\tcout&lt;&lt;a;\n} \n\nint main ()\n{\n    void (*fun_ptr)(int) = &amp;fun; \n\t(*fun_ptr)(10); \n\treturn 0; \n}</code></pre>\n\n<p> </p>","a":[{"id":146587,"option":"10","correct":false},{"id":146588,"option":"0","correct":false},{"id":146589,"option":"Compilation error","correct":true},{"id":146590,"option":"Runtime error","correct":false}]},{"q":"<p>What is the output of the following C code:</p>\n\n<pre class=\"prettyprint\"><code>    #include&lt;stdio.h&gt;\n     int fun();\n    int main()\n    {\n        int (*p)() = fun;\n        (*p)();\n        return 0;\n    }\n    int fun()\n    {\n        printf(\"Hacker\\n\");\n        return 0;\n    }\n</code></pre>","a":[{"id":124708,"option":"Compilation error","correct":false},{"id":124709,"option":"Run-time error","correct":false},{"id":124710,"option":"Hacker","correct":true},{"id":124711,"option":"Garbage value","correct":false}]},{"q":"<p>What is the output of the following C code:</p>\n\n<pre class=\"prettyprint\"><code>#include&lt;stdio.h&gt;\n\nvoid main()\n{\nint const *p=5; \nprintf(\"%d\",++(*p));\n}\n</code></pre>","a":[{"id":604081,"option":"5","correct":false},{"id":604082,"option":"6","correct":false},{"id":604083,"option":"Compilation error","correct":true},{"id":604084,"option":"Runtime error","correct":false}]},{"q":"<p>What is the output of the following C code:</p>\n\n<pre class=\"prettyprint\"><code>#include&lt;stdio.h&gt;\n\nvoid main()\n{\nchar s[]={'ab','\\n','c','\\0'};\nchar *p,*str,*str1;\np=&amp;s[3];\nstr=p;\nstr1=s;\nprintf(\"%d\",++*p + ++*str1-32);\n}</code></pre>","a":[{"id":603296,"option":"68","correct":true},{"id":603297,"option":"0","correct":false},{"id":603298,"option":"97","correct":false},{"id":603299,"option":"75","correct":false}]},{"q":"<p>What is the output of the following C code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;stdio.h&gt;\n\nvoid main()\n{\nint arr[20],i, sum=0;\nint *p = arr;\nfor(i=0;i&lt;20;i++)\n{\n    *(p+i) = 1;\n}\nfor(i=0;i&lt;20;i+=4)\n{\n    sum+=*(p+i);\n    printf(\" %d \",sum);\n}\n\n}</code></pre>","a":[{"id":603284,"option":"5","correct":false},{"id":603285,"option":"1 2 3 4 5","correct":true},{"id":603286,"option":"Compilation error","correct":false},{"id":603287,"option":"Runtime error","correct":false}]},{"q":"<p>In C, which of the following statements about <strong>untyped </strong>pointers<strong> </strong>is correct:</p>\n\n<ol>\n\t<li>It can point to any type of data.</li>\n\t<li>It can be declared by using the <strong>void *</strong> syntax.</li>\n\t<li>It is also referred to as <strong>generic </strong>pointers.</li>\n\t<li>It can point to only int and float data types.</li>\n</ol>","a":[{"id":603030,"option":"1, 2, and 3","correct":true},{"id":603031,"option":"2, 3, and 4","correct":false},{"id":603032,"option":"2 and 4","correct":false},{"id":603033,"option":"3 and 4","correct":false}]},{"q":"<p>What is the output of the following C code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;stdio.h&gt;\n\nint main()\n{\nint *ptr = NULL;\nprintf(\" %u\",ptr);\nreturn 0;\n}\n</code></pre>","a":[{"id":600447,"option":"0","correct":true},{"id":600448,"option":"NULL","correct":false},{"id":600449,"option":"Garbage value","correct":false},{"id":600450,"option":"Runtime error","correct":false}]},{"q":"<p>What is the output of the following C code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;stdio.h&gt;\nvoid main()\n{\n   int num1, *num2, **num3;\n   num1 = 4;\n   num2 = &amp;num1;\n   num3 = &amp;num2;\n   calc_sum(num1,num2,num3);\n}\n\nvoid calc_sum(int ptr1, int *ptr2, int **ptr3)\n{\n  int y, z;\n  **ptr3 += 1;\n   z  = **ptr3;\n  *ptr2 += 2;\n   y = *ptr2;\n   ptr1+= 3;\n   printf(\"%d\",ptr1 + y + z);\n}\n\n\n\n</code></pre>","a":[{"id":600326,"option":"15","correct":false},{"id":600327,"option":"19","correct":true},{"id":600328,"option":"Runtime error","correct":false},{"id":600329,"option":"Compilation error","correct":false}]},{"q":"<p>What is the output of the following C code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;stdio.h&gt;\n#include &lt;conio.h&gt;\nvoid main()\n{\nint index,*pt1,*pt2;\nindex = 39;\npt1 = &amp;index;\npt2 = pt1;\nprintf(\"%d %d %d\\n\",index,*pt1,*pt2);\n*pt1 = 13;\nprintf(\"%d %d %d\\n\",index,*pt1,*pt2);\ngetch();\n}\n</code></pre>\n\n<p> </p>","a":[{"id":598949,"option":"39 39 39\r\n13 13 13","correct":true},{"id":598950,"option":"39 39 39\r\n39 13 39","correct":false},{"id":598951,"option":"39 0 39\r\n13 13 0","correct":false},{"id":598952,"option":"Runtime error","correct":false}]},{"q":"<p>What is the output of the following C code:</p>\n\n<pre class=\"prettyprint\"><code>    #include&lt;stdio.h&gt;\n    int main()\n    {\n        char *p;\n        p=\"hack\";\n        printf(\"%s\\n\",*&amp;*&amp;*&amp;p);\n        return 0;\n    }\n</code></pre>","a":[{"id":124888,"option":"Compilation error","correct":false},{"id":124889,"option":"Run-time error","correct":false},{"id":124890,"option":"hack ","correct":true},{"id":124891,"option":"h","correct":false}]},{"q":"<p>In C, which of the following statements about pointers is correct?</p>","a":[{"id":606572,"option":"The value of a pointer is always 32 bits","correct":false},{"id":606573,"option":"The values of pointers are always stored in machine registers","correct":true},{"id":606574,"option":"A Pointer to one type may not be cast to a pointer of another type","correct":false},{"id":606575,"option":"All of these","correct":false}]},{"q":"<p>What is the output of the following C code:</p>\n\n<pre class=\"prettyprint\"><code>#include&lt;stdio.h&gt;\nint main(void)\n{\n char data[3] ={'A','B','C'};\n char *ptr = NULL;\n ptr = data;\n printf(\"%c \",*++ptr);\n return 0;\n}</code></pre>","a":[{"id":604387,"option":"A","correct":false},{"id":604388,"option":"B","correct":true},{"id":604389,"option":"C","correct":false},{"id":604390,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following C code?</p>\n\n<pre class=\"prettyprint\"><code>#include&lt;stdio.h&gt;\n#include&lt;conio.h&gt;\n\nmain()\n{\nchar *p;\np=\"Pointers\";\nprintf(\"%c\",*&amp;*p);\ngetch();\n}\n</code></pre>","a":[{"id":604085,"option":"P","correct":true},{"id":604086,"option":"o","correct":false},{"id":604087,"option":"Runtime error","correct":false},{"id":604088,"option":"Garbage value","correct":false}]},{"q":"<p>What is the output of the following C code:</p>\n\n<pre class=\"prettyprint\"><code>#include&lt;stdio.h&gt;\nvoid main()\n{\nchar str[]=“Hello C”;\ndisplay(str);\n}\nvoid display(char *string)\n{\nprintf(“%s”,string);\n}</code></pre>","a":[{"id":603292,"option":"Hello C","correct":false},{"id":603293,"option":"Garbage value","correct":false},{"id":603294,"option":"Compilation error","correct":true},{"id":603295,"option":"Runtime error","correct":false}]},{"q":"<p>In Go, which of the following statements about a pointer is correct:</p>\n\n<ol>\n\t<li>It is used to define a variable.</li>\n\t<li>It is used to assign an address to a variable.</li>\n\t<li>It is used to access the value that is stored in the address of a variable</li>\n</ol>","a":[{"id":600002,"option":"1 and 2","correct":false},{"id":600003,"option":"1 and 3","correct":false},{"id":600004,"option":"All of these","correct":true},{"id":600005,"option":"None of these","correct":false}]},{"q":"<p>Which of the following symbols is used to represent a pointer in Go?</p>","a":[{"id":579481,"option":"#","correct":false},{"id":579482,"option":"*","correct":true},{"id":579483,"option":"!","correct":false},{"id":579484,"option":"None of these","correct":false}]},{"q":"<p>In C, which of the following operations is valid on a <strong>char</strong> pointer?</p>","a":[{"id":124172,"option":"Input through %s","correct":false},{"id":124173,"option":"Generation of multi-dimensional array","correct":false},{"id":124174,"option":"Changing the address to point to another location","correct":true},{"id":124175,"option":"All of these","correct":false}]},{"q":"<p>What is the output of the following C code:</p>\n<pre class=\"prettyprint\"><code>    #include &lt;stdio.h&gt;\n    int main()\n    {\n        int a[4] = {1, 2, 3, 4};\n        int *ptr  =  &amp;a[2];\n        float n = 1;\n        ptr = ptr + n;\n        printf(\"%d\\n\", *ptr);\n    }\n</code></pre>","a":[{"id":123940,"option":"4","correct":false},{"id":123941,"option":"3","correct":false},{"id":123942,"option":"2","correct":true},{"id":123943,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following C code:</p>\n<pre class=\"prettyprint\"><code>     #include &lt;stdio.h&gt;\n        int main()\n        {\n            int i = 2;\n            int *p = &amp;i;\n            printf(\"%d\\n\", (++*p)++);\n        }\n</code></pre>","a":[{"id":122764,"option":"2","correct":false},{"id":122765,"option":"3","correct":false},{"id":122766,"option":"4","correct":false},{"id":122767,"option":"Compilation error","correct":true}]},{"q":"<p>What is the output of the following C code:</p>\n<pre class=\"prettyprint\"><code>       #include &lt;stdio.h&gt;\n        void main()\n        {\n            char *a= \"hack\";\n            char *b = a;\n            printf(\"%c%c\", 2*[a+1], 0*[b]);\n        }\n</code></pre>","a":[{"id":122316,"option":"a , h","correct":false},{"id":122317,"option":"h , a","correct":false},{"id":122318,"option":"h, h","correct":false},{"id":122319,"option":"Compilation error","correct":true}]},{"q":"<p>What is the output of the following C code:</p>\n<pre class=\"prettyprint\"><code>    #include&lt;stdio.h&gt;\n    int main()\n    {\n        char str[] = \"Good Coding\";\n        char *s = str;\n        printf(\"%s\\n\", s-- +4);\n        return 0;\n    }\n</code></pre>","a":[{"id":124880,"option":"Coding ","correct":true},{"id":124881,"option":"d Coding","correct":false},{"id":124882,"option":"Compilation errpr","correct":false},{"id":124883,"option":"Good","correct":false}]},{"q":"<p>What is the output of the following C code:</p>\n\n<pre class=\"prettyprint\"><code>    #include &lt;stdio.h&gt;\n    int main()\n    {\n        char *str = \"hack,world\";\n        char *str1 = \"hack,world\";\n        if (strcmp(str, str1))\n            printf(\"equal\");\n        else\n            printf(\"unequal\");\n    }\n</code></pre>","a":[{"id":125924,"option":"equal","correct":false},{"id":125925,"option":"unequal","correct":true},{"id":125926,"option":"Compilation error","correct":false},{"id":125927,"option":"Run-time error","correct":false}]},{"q":"<p>What is the output of the following C code:</p>\n\n<pre class=\"prettyprint\"><code>    #include &lt;stdio.h&gt;\n    int main()\n    {\n        char *p[1] = {\"hackerearth\"};\n        printf(\"%s\", (p)[1]);\n        return 0;\n    }\n</code></pre>\n\n<p> </p>","a":[{"id":124212,"option":"Hackerearth","correct":false},{"id":124213,"option":"Null","correct":true},{"id":124214,"option":"Compilation error","correct":false},{"id":124215,"option":"Run-time error","correct":false}]},{"q":"<p>What is the output of the following PHP code:</p>\n\n<pre class=\"prettyprint\"><code>&lt;?php    \n    function testhack(&amp;$b)\n    {    \n        $b = $b + 5;    \n    }   \n    $val = 8;  \n    testhack($val);   \n    echo $val;\n?&gt;\n</code></pre>","a":[{"id":61594,"option":"13 ","correct":true},{"id":61595,"option":"12 ","correct":false},{"id":61596,"option":"8 ","correct":false},{"id":61597,"option":"Error","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include&lt;iostream&gt;\nusing namespace std;\n\nint main(){\n    int a = 7;\n    int &amp;b = a;\n    cout &lt;&lt; &amp;a &lt;&lt; \" \" &lt;&lt; &amp;b &lt;&lt; endl;\n    return 0;\n}\n</code></pre>","a":[{"id":132169,"option":"It will print different address for a and b","correct":false},{"id":132170,"option":"It will print the same address for a and b","correct":true},{"id":132171,"option":"7 7","correct":false},{"id":132172,"option":"Compilation error","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n{\n        int* p = new int[10];\n        for ( int i = 0; i &lt; 10; i++ )\n        {\n                p[i] = i;\n        }\n\n        for ( int i = 0; i &lt; 10; i++ )\n        {\n                cout &lt;&lt; p[i] &lt;&lt;\" \";\n        }\n        return 0;\n}\n</code></pre>","a":[{"id":251775,"option":"Compilation error","correct":false},{"id":251776,"option":"0 1 2 3 4 5 6 7 8 ","correct":false},{"id":251777,"option":"1 2 3 4 5 6 7 8 9 10","correct":false},{"id":251778,"option":"0 1 2 3 4 5 6 7 8 9","correct":true}]},{"q":"<p>In C++, which of the following is equivalent to *<strong>ptr++</strong>?</p>","a":[{"id":157308,"option":"ptr++","correct":false},{"id":157309,"option":"*ptr","correct":false},{"id":157310,"option":"++*ptr","correct":false},{"id":157311,"option":"None of these","correct":true}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include&lt;iostream&gt;\nusing namespace std;\n\nint main(){\n    int a = 7;\n    int &amp;b = a;\n    cout &lt;&lt; a &lt;&lt; \" \" &lt;&lt; b &lt;&lt; endl;\n    return 0;\n}\n</code></pre>","a":[{"id":132165,"option":"Run-time error","correct":false},{"id":132166,"option":"7 7","correct":true},{"id":132167,"option":"Compilation error","correct":false},{"id":132168,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following C code:</p>\n\n<pre class=\"prettyprint\"><code>#include&lt;stdio.h&gt;\nint main()\n{\nputs(func1());\nputs(func2());\n}\nchar *func1()\n{\nchar temp[] = \"program\";\nreturn temp;\n}\nchar *func2()\n{\nchar temp[] = {'p','r','o','g','r','a','m'};\nreturn temp;\n}</code></pre>\n\n<p> </p>","a":[{"id":606560,"option":"program\r\nprogram","correct":false},{"id":606561,"option":"Garbage value","correct":true},{"id":606562,"option":"Compilation error","correct":false},{"id":606563,"option":"Runtime error","correct":false}]},{"q":"<p>In C, which of the following statements about generic pointers is correct:</p>\n\n<ol>\n\t<li>It cannot be dereferenced.</li>\n\t<li>The <strong>sizeof</strong><strong>()</strong> operator cannot be used to find the size of a dangling pointer.</li>\n\t<li>It can only hold integer pointers.</li>\n\t<li>It can be held by any types of pointers without implementing the typecasting process.</li>\n</ol>","a":[{"id":600443,"option":"1 and 4","correct":true},{"id":600444,"option":"1, 2 and 4","correct":false},{"id":600445,"option":"2, 3, and 4","correct":false},{"id":600446,"option":"2 and 3","correct":false}]},{"q":"<p>In C, which of the following syntaxes is used to declare a <strong>float </strong>pointer?            </p>","a":[{"id":600318,"option":"float *pointer_name;","correct":true},{"id":600319,"option":"*float pointer_name;","correct":false},{"id":600320,"option":"float $pointer_name;","correct":false},{"id":600321,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following C code:</p>\n\n<pre class=\"prettyprint\"><code>    #include&lt;stdio.h&gt;\n    int main()\n    {\n        char str[20] = \"Hackerearth\";\n        char * p=str;\n        *(p+4)='e';\n        printf(\"%s\\n\", str);\n        return 0;\n    }\n</code></pre>","a":[{"id":124816,"option":"Compilation error","correct":false},{"id":124817,"option":"Run-time error","correct":false},{"id":124818,"option":"Hackerearth","correct":true},{"id":124819,"option":"Haceerearth","correct":false}]},{"q":"<p>What is the output of the following C code snippet:</p>\n<pre class=\"prettyprint\"><code>    #include &lt;stdio.h&gt;\n        int main()\n        {\n            char *c=\"Hack\";\n            printf(\"%c\",*(*&amp;(c)+1));\n        }\n</code></pre>","a":[{"id":122268,"option":"H","correct":false},{"id":122269,"option":"a","correct":true},{"id":122270,"option":"Compilation error","correct":false},{"id":122271,"option":"Random address","correct":false}]},{"q":"<p>What is the output of the following C code:</p>\n<pre class=\"prettyprint\"><code>    #include&lt;stdio.h&gt;\n    int main()\n    {\n        char str[] = \"HACKEREARTH\";\n        char *s = str;\n        printf(\"%s\\n\", s++ +3);\n        return 0;\n    }\n</code></pre>","a":[{"id":124876,"option":"HAC","correct":false},{"id":124877,"option":"KEREARTH","correct":true},{"id":124878,"option":"EREARTH","correct":false},{"id":124879,"option":"Compilation error","correct":false}]},{"q":"<p>What is the output of the following C code:</p>\n<pre class=\"prettyprint\"><code>#include &lt;stdio.h&gt;\n    void main()\n    {\n        char *s= \"hacker\";\n        char *p = s;\n        printf(\"%c\\t%c\", *(p + 3),  s[1]);\n    }\n</code></pre>","a":[{"id":123848,"option":"e    a","correct":false},{"id":123849,"option":"k\ta","correct":true},{"id":123850,"option":"Compilation fails","correct":false},{"id":123851,"option":"Runtime error","correct":false}]},{"q":"<p>What is the output of the following C code:</p>\n\n<pre class=\"prettyprint\"><code>    #include&lt;stdio.h&gt;\n    void main(){\n        static int a=2,b=0,c=8;\n        static int *arr1[2]={&amp;a,&amp;b};\n        static int *arr2[2]={&amp;b,&amp;c};\n        int* (*arr[2])[2]={&amp;arr1,&amp;arr2};\n        printf(\"%d\\t\",*(*arr[0])[1]);\n    }\n</code></pre>","a":[{"id":125752,"option":"2","correct":false},{"id":125753,"option":"0","correct":true},{"id":125754,"option":"8","correct":false},{"id":125755,"option":"Compilation error","correct":false}]},{"q":"<p>What is the output of the following C code:</p>\n<pre class=\"prettyprint\"><code>    int fun(char *str1)\n    {\n        char *str2 = str1;\n        while(*++str1);\n        return (str1-str2);\n    }\n    int main()\n    {\n        char *str = \"hackerearth\";\n        printf(\"%d\", fun(str));\n    }\n</code></pre>","a":[{"id":126260,"option":"10","correct":false},{"id":126261,"option":"12","correct":false},{"id":126262,"option":"11","correct":true},{"id":126263,"option":"Compilation error","correct":false}]},{"q":"<p>What is the output of the following C code:</p>\n<pre class=\"prettyprint\"><code>    #include &lt;stdio.h&gt;\n    void main()\n    {\n        char *s= \"hackerearth\";\n        char *p = s + 2;\n        printf(\"%c\\t%c\", *p, s[1]);\n    }\n</code></pre>","a":[{"id":123920,"option":"c\th","correct":false},{"id":123921,"option":"k      h","correct":false},{"id":123922,"option":"c\ta","correct":true},{"id":123923,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following C code:</p>\n<pre class=\"prettyprint\"><code>    #include&lt;stdio.h&gt;\n    int main()\n    {\n        int a, b=3;\n        a = (b++*b++*b++);\n        printf(\"%d, %d\\n\", a, b);\n    }\n</code></pre>","a":[{"id":125524,"option":"27,  4","correct":false},{"id":125525,"option":"60,  6","correct":true},{"id":125526,"option":"27,  6","correct":false},{"id":125527,"option":"60,  5","correct":false}]},{"q":"<p>What is the output of the following C code:</p>\n<pre class=\"prettyprint\"><code>    #include&lt;stdio.h&gt;\n    int main()\n    {\n        char str[20] = \"Mack\";\n        char *const p=str;\n        *p='H';\n        printf(\"%s\\n\", str);\n        return 0;\n    }\n</code></pre>","a":[{"id":124804,"option":"Mack","correct":false},{"id":124805,"option":"Hack","correct":true},{"id":124806,"option":"Compilation error","correct":false},{"id":124807,"option":"Runtime error","correct":false}]},{"q":"<p>In C++, which of the following is the use of a <strong>pointer</strong>?</p>","a":[{"id":132781,"option":"Generating a multidimensional array   ","correct":false},{"id":132782,"option":"Changing the address of a variable to point at another location   ","correct":false},{"id":132783,"option":"Both of these","correct":true},{"id":132784,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include&lt;iostream&gt;\nusing namespace std;\n\nint main(){\n    int x = 10;\n    int &amp;ptr = x;\n    int &amp;ptr1 = ptr;\n    cout &lt;&lt; ptr1 &lt;&lt; endl;\n}\n</code></pre>","a":[{"id":132185,"option":"Compilation error","correct":false},{"id":132186,"option":"10","correct":true},{"id":132187,"option":"Run-time error","correct":false},{"id":132188,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    char* ptr;\n    char Str[] = \"HackerEarth\";\n    ptr = Str;\n    ptr += 5;\n    cout &lt;&lt; ptr;\n    return 0;\n}\n</code></pre>","a":[{"id":143167,"option":"Hacker","correct":false},{"id":143168,"option":"EarthH","correct":false},{"id":143169,"option":"rEarth","correct":true},{"id":143170,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    char *ptr;\n    ptr = \"hello\";\n    cout&lt;&lt;*ptr;\n}</code></pre>","a":[{"id":157963,"option":"h","correct":true},{"id":157964,"option":"hello","correct":false},{"id":157965,"option":"Error","correct":false},{"id":157966,"option":"None of these","correct":false}]},{"q":"<p>In C or C++, which of the following statements is the valid definition of <strong>pointers</strong>?</p>","a":[{"id":597108,"option":"Pointers are variables that stores the address of another variable.","correct":true},{"id":597109,"option":"Pointers are variables that stores the value of another variable.","correct":false},{"id":597110,"option":"Pointers are variables that stores the data type of another variable.","correct":false},{"id":597111,"option":"Pointers are variables that stores the state of another variable.","correct":false}]},{"q":"<p>In C++, which of the following is the correct syntax to declare a pointer?</p>","a":[{"id":597124,"option":"datatype *pointer_name;","correct":true},{"id":597125,"option":"datatype &pointer_name;","correct":false},{"id":597126,"option":"datatype #pointer_name;","correct":false},{"id":597127,"option":"None of these","correct":false}]},{"q":"<p>In C and C++, which of the following statements about the function <strong>memcpy() </strong>are true?</p>\n\n<ol>\n\t<li>It is used to copy a memory block from one location to another.</li>\n\t<li>It is declared in the string.h header file.</li>\n\t<li>It does not check for overflow.</li>\n</ol>","a":[{"id":606662,"option":"1 and 2","correct":false},{"id":606663,"option":"1 and 3","correct":false},{"id":606664,"option":"2 and 3","correct":false},{"id":606665,"option":"All of these","correct":true}]},{"q":"<p>What is the output of the following C code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n     char *a= \"hack\";\n     char *b = a;\n     printf(\"%c\\t%c\", *(a-0), *(b-0));\n}\n</code></pre>","a":[{"id":122308,"option":"Compilation error","correct":false},{"id":122309,"option":"h    h","correct":true},{"id":122310,"option":"k    k","correct":false},{"id":122311,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following C code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;stdio.h&gt;\nvoid main()\n{\nchar str[40],one,two;\nstrcpy(str,\"This is a character string.\");\none = str[0];\ntwo = *str;\nprintf(\"%c %c\\n\",one,two);\none = str[8];\ntwo = *(str+8);\nprintf(\"%c %c\",one,two);\n}</code></pre>\n\n<p> </p>","a":[{"id":598953,"option":"T T\r\nc c","correct":false},{"id":598954,"option":"T T\r\na a","correct":true},{"id":598955,"option":"null null\r\na a","correct":false},{"id":598956,"option":"T null\r\na null","correct":false}]},{"q":"<p>In C, which of the following statements about <strong>dangling</strong> pointers is correct?</p>","a":[{"id":600439,"option":"It has no data type associated with it","correct":false},{"id":600440,"option":"It points to a memory location that has been deleted","correct":true},{"id":600441,"option":"It is not initialized","correct":false},{"id":600442,"option":"It can point to any type of data","correct":false}]},{"q":"<p>What is the output of the following C code?</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;stdio.h&gt;\n\nvoid main()\n{\nint x,y,z,w;\nint *pa, *pb, *pc;\nx=10,y=30, z= 15;\npa = &amp;x;\npb = &amp;y;\npc = pb;\nprintf(\"%d %d %d\", *pb, *pb, *pa);\n}</code></pre>","a":[{"id":603280,"option":"10 30 30 ","correct":false},{"id":603281,"option":"10 30 10","correct":false},{"id":603282,"option":"30 30 10","correct":true},{"id":603283,"option":"Runtime error","correct":false}]},{"q":"<p>In C, which of the following statements is used to declare a pointer to an array of three integers?           </p>","a":[{"id":604383,"option":"int (*p)[3];","correct":true},{"id":604384,"option":"int (*p)(3);","correct":false},{"id":604385,"option":"int [*p][3];","correct":false},{"id":604386,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following C code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;stdio.h&gt;\nvoid getValue(int *ptr)\n{\n    *ptr = 30;\n}\nint main()\n{\n  int y = 20;\n  getValue(&amp;y);\n  printf(\"%d\", y);\n  return 0;\n}</code></pre>","a":[{"id":599372,"option":"30","correct":true},{"id":599373,"option":"20","correct":false},{"id":599374,"option":"Compilation error","correct":false},{"id":599375,"option":"Runtime error","correct":false}]},{"q":"<p>What is the output of the following C code:</p>\n\n<pre class=\"prettyprint\"><code>#include&lt;stdio.h&gt;\nvoid main()\n{\nint a=10;\nvoid *ptr; \nptr=&amp;a; \nprintf(\"%d\",*((int*) ptr));\n}</code></pre>\n\n<p> </p>","a":[{"id":606658,"option":"10","correct":true},{"id":606659,"option":"Random memory address","correct":false},{"id":606660,"option":"Compilation error","correct":false},{"id":606661,"option":"Runtime error","correct":false}]},{"q":"<p>What is the output of the following C code:</p>\n<pre class=\"prettyprint\"><code>    #include &lt;stdio.h&gt;\n    void m(int *p)\n    {\n        int i = 0;\n        for(i = 0;i &lt;4; i++)\n        printf(\"%d\\t\", p[i]);\n    }\n    void main()\n    {\n        int a[5] = {6, 5, 3};\n        m(&amp;a);\n    }\n</code></pre>","a":[{"id":124140,"option":"Compilation fails","correct":false},{"id":124141,"option":"6 5 3 0","correct":true},{"id":124142,"option":"6 5 3\t","correct":false},{"id":124143,"option":"6 5 3 NULL","correct":false}]},{"q":"<p>What is the output of the following C code snippet:</p>\n<pre class=\"prettyprint\"><code>     #include &lt;stdio.h&gt;\n        int main()\n        {\n            int x=10;\n            int y=20;\n            int *y=&amp;x;\n            hack((&amp;x));\n        }\n        void hack(int *p)\n        {\n            printf(\"%d\\n\", *p);\n        }\n</code></pre>","a":[{"id":122264,"option":"10","correct":false},{"id":122265,"option":"20","correct":false},{"id":122266,"option":"Compilation error","correct":true},{"id":122267,"option":"Garbage value","correct":false}]},{"q":"<p>What will be the output of the following <strong>C#</strong> code?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\nclass Hackerearth\n{\n    static void Main()\n    {\n        unsafe\n        {\n            Hacker h1;\n            Hacker h2;\n                \n            Hacker* hr1 = &amp;h1;\n            Hacker* hr2 = &amp;h2;\n\n\t\t\t(*hr1).Hacks = 55;\n\t\t\t(*hr1).Hacker_name = \"Alice\";\n\t\t\t\n\t\t\t(*hr2).Hacks = (*hr1).Hacks;\n\t\t\t(*hr2).Hacker_name = \"alice\";\n\t\t\t\n\t\t\tConsole.WriteLine((*hr1).Hacks == (*hr2).Hacks);\n\t\t\tConsole.WriteLine((*hr1).Hacker_name == (*hr2).Hacker_name);  \n        }    \n    }    \n} \n    \n\nstruct Hacker\n{\n    public int Hacks\n    {\t\n        get;\n\t    set;\n\t}\n\tpublic string Hacker_name\n\t{\n\t    get;\n\t    set; \n\t}\n}; </code></pre>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>True\nFalse</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>True\nTrue</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>False\nFalse</code></pre>\n\t</li>\n</ol>","a":[{"id":1418982,"option":"1","correct":false},{"id":1418983,"option":"2","correct":false},{"id":1418984,"option":"3","correct":false},{"id":1418985,"option":"Compilation error","correct":true}]},{"q":"<p>In C or C++, which of the following characters is used to declare a <strong>pointer</strong> variable?</p>","a":[{"id":597116,"option":"&","correct":false},{"id":597117,"option":"*","correct":true},{"id":597118,"option":"#","correct":false},{"id":597119,"option":"%","correct":false}]},{"q":"<p>In C or C++, which of the following statements about <strong>pointers </strong>are correct:</p>\n\n<ol>\n\t<li>It is used to store the value of another variable.</li>\n\t<li>It is used to allocate memory dynamically to parameters.</li>\n\t<li>It can point to only integer variables.</li>\n\t<li>The value of a null pointer is 0</li>\n</ol>\n\n<p> </p>","a":[{"id":597112,"option":"2 and 4","correct":true},{"id":597113,"option":"1, 2, and 3\r\n","correct":false},{"id":597114,"option":"1, 3, and 4","correct":false},{"id":597115,"option":"1 and 3","correct":false}]},{"q":"<p>What is the output of the following C code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;stdio.h&gt;\nint main()\n{\n    int *ptr;\n    int x;\n\n    ptr = &amp;x;\n    *ptr = 0;\n\n    *ptr += 5;\n    (*ptr)++;\n    printf(\" x = %d\\n\", x);\n    printf(\" *ptr = %d\", *ptr);\n    return 0;\n}\n\n</code></pre>","a":[{"id":599376,"option":"x = 6 \r\n*ptr = 6","correct":true},{"id":599377,"option":"x = 0\r\n*ptr = 6","correct":false},{"id":599378,"option":"x = 5\r\n*ptr = 6","correct":false},{"id":599379,"option":"x = 5\r\n*ptr = 5","correct":false}]},{"q":"<p>In C, which of the following statements about the <strong>calloc() </strong>function is correct:</p>\n\n<ol>\n\t<li>It is used to allocate memory dynamically.</li>\n\t<li>The memory allocated by using the calloc() function is initialized with zero.</li>\n\t<li>It does not initialize the allocated memory.</li>\n\t<li>It takes two arguments.        </li>\n</ol>","a":[{"id":604391,"option":"1 and 3","correct":false},{"id":604392,"option":"1, 2, and 4\r\n","correct":true},{"id":604393,"option":"1, 3, and 4\r\n","correct":false},{"id":604394,"option":"1 and 2","correct":false}]},{"q":"<p>What is the output of the following C code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;stdio.h&gt;\n\nvoid main()\n{\n    int a[][3] = {10, 20, 30, 40, 50, 60, 70, 120};\n    int (*ptr)[5] = a;\n    printf(\"%d %d \", (*ptr)[0], (*ptr)[2]);\n    ++ptr;\n    printf(\"%d %d\", (*ptr)[1], (*ptr)[3]);\n}\n</code></pre>","a":[{"id":600306,"option":"10 20 30 40","correct":false},{"id":600307,"option":"10 30 70 0","correct":true},{"id":600308,"option":"0 30 20 50","correct":false},{"id":600309,"option":"Runtime error","correct":false}]},{"q":"<p>What is the output of the following C code:</p>\n\n<pre class=\"prettyprint\"><code>#include&lt;stdio.h&gt;\nmain()\n{\nstruct num\n{\n   int x=3;\n}\nstruct num *s=malloc(sizeof(struct num));\nprintf(\"%d\",s-&gt;x);\nreturn 0;\n}</code></pre>","a":[{"id":604403,"option":"3","correct":false},{"id":604404,"option":"0","correct":false},{"id":604405,"option":"Runtime error","correct":false},{"id":604406,"option":"Compilation error","correct":true}]},{"q":"<p>In C, which of the following functions is used to deallocate the dynamically-allocated memory?</p>","a":[{"id":604089,"option":"Clear()","correct":false},{"id":604090,"option":"Free()","correct":true},{"id":604091,"option":"Release()","correct":false},{"id":604092,"option":"Delete()","correct":false}]},{"q":"<p>In C, which of the following operators is used<strong> </strong>to retrieve the address of a variable?</p>","a":[{"id":600314,"option":"#","correct":false},{"id":600315,"option":"$","correct":false},{"id":600316,"option":"&","correct":true},{"id":600317,"option":"*","correct":false}]},{"q":"<p>What is the output of the following C code:</p>\n\n<pre class=\"prettyprint\"><code>  #include &lt;stdio.h&gt;\n    void m(int *p, int *q)\n    {\n        int temp = *p;\n        *p = *q;\n        *q = temp;\n    }\n    void main()\n    {\n        int a = 6, b = 5;\n        m(&amp;a, &amp;b);\n        printf(\"%d %d\\n\", a, b);\n    }\n</code></pre>","a":[{"id":124136,"option":"6 5","correct":false},{"id":124137,"option":"5 6","correct":true},{"id":124138,"option":"6 6","correct":false},{"id":124139,"option":"5 5","correct":false}]},{"q":"<p>What is the output of the following C code:</p>\n<pre class=\"prettyprint\"><code>    #include&lt;stdio.h&gt;\n    int main()\n    {\n        int a[2][3] = {2,0,3,2,30,40};\n        printf(\"%d %d \\n\", *(*(a+0)+0), *(*(a+0)+2));\n    }\n</code></pre>","a":[{"id":126352,"option":"2   2","correct":false},{"id":126353,"option":"2    3","correct":true},{"id":126354,"option":"2   30","correct":false},{"id":126355,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include&lt;iostream&gt;\nusing namespace std;\nint main()\n{\nint arr[10];\n\nint *i = &amp;arr[2], *j = &amp;arr[6];\nint d = j-i;\ncout&lt;&lt;d;\n}</code></pre>","a":[{"id":600322,"option":"4","correct":true},{"id":600323,"option":"-4","correct":false},{"id":600324,"option":"A memory address","correct":false},{"id":600325,"option":"Runtime error","correct":false}]},{"q":"<p>What is the output of the following C code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;stdio.h&gt;\n\nvoid main()\n{\nint *ptr,list[100],i;\nfor (i = 0;i &lt; 100;i++)\n{\n    list[i] = i + 10;\n}\nptr = list + 27;\nprintf(\"%d\\n\",list[27]);\nprintf(\"%d\\n\",*ptr);\n}</code></pre>\n\n<p> </p>","a":[{"id":598957,"option":"37\r\n37","correct":true},{"id":598958,"option":"27\r\n27","correct":false},{"id":598959,"option":"137\r\n137","correct":false},{"id":598960,"option":"Runtime error","correct":false}]},{"q":"<p>What is the output of the following C code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;stdio.h&gt;\n\nchar *names[] = {\"Alice\", \"Smith\", \"Jones\", \"Mike\"};\nchar **new_name[] = {names+3, names+2, names+1, names};\nchar ***final_str = new_name;\n\nint main()\n{\n    printf(\"%s \", **++final_str);\n    printf(\"%s \", *--*++final_str+3);\n    return 0;\n}\n</code></pre>","a":[{"id":600298,"option":"Jones ce","correct":true},{"id":600299,"option":"Smith ce","correct":false},{"id":600300,"option":"Jones Mike","correct":false},{"id":600301,"option":"Mike Jones","correct":false}]},{"q":"<p>What is the output of the following C code:</p>\n\n<pre class=\"prettyprint\"><code>#include&lt;stdio.h&gt;\n\nmain()\n{\nint c[ ]={2.8,3.4,4,6.7,5};\nint j, *q=c;\nfor(j=0;j&lt;5;j++)\n{\n    printf(\"%d \",*c);\n    ++q;\n}\n}</code></pre>","a":[{"id":603288,"option":"2 2 2 2 2 ","correct":true},{"id":603289,"option":"1 2 3 4 5 ","correct":false},{"id":603290,"option":"2 3 4 6 5 ","correct":false},{"id":603291,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following C code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;stdio.h&gt;\n#include &lt;conio.h&gt;\n#include &lt;stdlib.h&gt;\nvoid main()\n{\n    int i;\n    int *ptr = (int *) malloc(5 * sizeof(int));\n\n    for (i=4; i&gt;=0; i--)\n    {\n        *(ptr + i) = i+6;\n    }\n\n    printf(\"%d \", *ptr+4);\n    printf(\"%d \", (*ptr)++);\n    printf(\"%d \", *++ptr);\n    printf(\"%d \", ++*ptr);\n    getch();\n}\n</code></pre>","a":[{"id":600310,"option":"6 7 8 10","correct":false},{"id":600311,"option":"2 4 3 7","correct":false},{"id":600312,"option":"4 6 7 8","correct":false},{"id":600313,"option":"10 6 7 8","correct":true}]},{"q":"<p>In C, which of the following statements about the <strong>memchr() </strong>function<strong> </strong>is correct? </p>","a":[{"id":606666,"option":"It is used to locate a character in a block of memory.","correct":true},{"id":606667,"option":"It is used to fill a block of memory.","correct":false},{"id":606668,"option":"It is used to copy the characters from a string.","correct":false},{"id":606669,"option":"It is used to compare two blocks of memory.","correct":false}]},{"q":"<p>In C, which of the following statements is used to allocate memory to an array of 10 integers?</p>","a":[{"id":606584,"option":"int *ptr = (int *)malloc(10, sizeof(int));","correct":false},{"id":606585,"option":"int *ptr = (int *)malloc(10*sizeof(int));","correct":true},{"id":606586,"option":"int *ptr = (int *)calloc(10, sizeof(int));","correct":false},{"id":606587,"option":"int *ptr = (int )malloc(10, sizeof(int));","correct":false}]},{"q":"<p>What is the output of the following C code:</p>\n\n<pre class=\"prettyprint\"><code>    #include&lt;stdio.h&gt;\n    void f(int *p, int *q)\n    {\n        q=p;\n        *q= 2;\n    }\n    int i = 2, j = 1;\n    int main()\n    {\n        f(&amp;i, &amp;j);\n        printf(\"%d %d \\n\", i, j);\n    }\n</code></pre>","a":[{"id":126120,"option":"Compilation error","correct":false},{"id":126121,"option":"1  2 ","correct":false},{"id":126122,"option":"2  1 ","correct":true},{"id":126123,"option":"Run-time error","correct":false}]},{"q":"<p>What is the output of the following C code:</p>\n\n<pre class=\"prettyprint\"><code>    #include&lt;stdio.h&gt;\n    int main()\n    {\n        int ***r, **q, *p, i=5;\n        p = &amp;i;\n        q = &amp;p;\n        r = &amp;q;\n        printf(\"%d, %d, %d\\n\", *p, **q, ***r);\n        return 0;\n    }\n</code></pre>","a":[{"id":124820,"option":"Compilation fails","correct":false},{"id":124821,"option":"Run-time error","correct":false},{"id":124822,"option":"5,   5,   5","correct":true},{"id":124823,"option":"5,  5,  Garbage value","correct":false}]},{"q":"<p>What is the output of the following C code:</p>\n<pre class=\"prettyprint\"><code>    #include&lt;stdio.h&gt;\n    int f(int *a, int n)\n    {\n        if(n &lt;= 0) return 0;\n        else if(*a % 2 == 0)\n        return *a + f(a+1, n-1);\n        else return *a - f(a+1, n-1);\n        }\n    int main()\n    {\n        int a[] = {12, 7, 13, 4, 11,0};\n        printf(\"%d\", f(a, 6));\n    }\n</code></pre>","a":[{"id":126124,"option":"21","correct":true},{"id":126125,"option":"18","correct":false},{"id":126126,"option":"7","correct":false},{"id":126127,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    int a = 5, b = 10, c = 15;\n    int* arr[] = { &amp;a, &amp;b, &amp;c };\n    cout &lt;&lt; arr[1];\n    return 0;\n}\n</code></pre>","a":[{"id":143147,"option":"5\r\n","correct":false},{"id":143148,"option":"10","correct":false},{"id":143149,"option":"15","correct":false},{"id":143150,"option":"Memory address of b is returned\r\n","correct":true}]},{"q":"<p>What is the output of the following C code: </p>\n\n<pre class=\"prettyprint\"><code>#include &lt;stdio.h&gt;\n#include &lt;conio.h&gt;\nvoid main()\n{\n    int arr[ ] = { 10, 20, 30, 45, 67, 56, 74 } ;\n    int *i, *j ;\n    i = &amp;arr[1] ;\n    j = &amp;arr[5] ;\n    printf ( \"%d %d\", j - i, *j - *i ) ;\n    getch();\n}\n</code></pre>\n\n<p> </p>","a":[{"id":598965,"option":"4   36","correct":true},{"id":598966,"option":"36   4","correct":false},{"id":598967,"option":"4   4","correct":false},{"id":598968,"option":"36   36 ","correct":false}]},{"q":"<p>In C, which of the following is the correct syntax of the <strong>realloc() </strong>function?</p>","a":[{"id":604395,"option":"void *realloc(void *ptr, size_t size);","correct":true},{"id":604396,"option":"void realloc(void *ptr, size_t size);","correct":false},{"id":604397,"option":"int *realloc(void *ptr, size_t size);","correct":false},{"id":604398,"option":"void *realloc(size_t size);","correct":false}]},{"q":"<p>Which of the following statements about a nil pointer in Go is correct:</p>\n\n<ol>\n\t<li style=\"text-align: justify;\">A nil value is assigned during variable declaration.</li>\n\t<li style=\"text-align: justify;\">The Go compiler assigns a nil value to a pointer variable if there is no exact address to be assigned.</li>\n\t<li style=\"text-align: justify;\">A pointer that is assigned to nil is called a nil pointer.</li>\n</ol>","a":[{"id":600062,"option":"Statements 1 and 2 are correct \r\nStatement 3 is incorrect","correct":false},{"id":600063,"option":"Statements 1 and 3 are correct \r\nStatement 2 is incorrect","correct":false},{"id":600064,"option":"All of these","correct":false},{"id":600065,"option":"None of these","correct":true}]},{"q":"<p>What is the output of the following C code:</p>\n\n<pre class=\"prettyprint\"><code>    #include&lt;stdio.h&gt;\n    void main(){\n        int array[2][3]={5,10,15,20,25,30};\n        int (*ptr)[2][3]=&amp;array;\n        printf(\"%d\\t\",*(*(*ptr+1)+2));\n    }\n</code></pre>","a":[{"id":125748,"option":"5","correct":false},{"id":125749,"option":"15","correct":false},{"id":125750,"option":"30","correct":true},{"id":125751,"option":"Compilation error","correct":false}]},{"q":"<p>What is the output of the following C code:</p>\n\n<pre class=\"prettyprint\"><code>     #include &lt;stdio.h&gt;\n        void main()\n        {\n            char *a= \"hack\";\n            char *b = a;\n            printf(\"%c\\t%c\", a[3], b[0]);\n        }\n</code></pre>","a":[{"id":122300,"option":"Compilation error","correct":false},{"id":122301,"option":"Garbage value","correct":false},{"id":122302,"option":"k   h","correct":true},{"id":122303,"option":"Run-time error","correct":false}]},{"q":"<p>In C, what does the following declaration signify:</p>\n<pre class=\"prettyprint\"><code>    char *a[20];\n</code></pre>","a":[{"id":125656,"option":"a is an array of characters.","correct":false},{"id":125657,"option":"a is an array of 20 character pointers.","correct":true},{"id":125658,"option":"a is an array of function pointers.","correct":false},{"id":125659,"option":"a is a pointer to an array of characters.","correct":false}]},{"q":"<p>What is the output of the following C code snippet:</p>\n<pre class=\"prettyprint\"><code>    #include &lt;stdio.h&gt;\n        int main()\n        {\n            int a;\n            int *b=4;\n            printf(\"%d%d\",sizeof(a),sizeof(b));\n        }\n</code></pre>","a":[{"id":122280,"option":"Compilation error","correct":false},{"id":122281,"option":" 4 4","correct":false},{"id":122282,"option":"48","correct":true},{"id":122283,"option":"Random memory address","correct":false}]},{"q":"<p>In Java, which of the following data types are automatically implemented by using pointers:</p>\n\n<ol>\n\t<li>Integer</li>\n\t<li>Character</li>\n\t<li>Arrays</li>\n\t<li>Objects</li>\n</ol>","a":[{"id":597563,"option":"1 and 2","correct":false},{"id":597564,"option":"2 and 4","correct":false},{"id":597565,"option":"3 and 4","correct":true},{"id":597566,"option":"1 and 4","correct":false}]}]
[{"q":"<p>What is the output of the given Ruby code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>a=5\ni=0\nwhile i&lt;=a\n  j=1\n  while j&lt;=a-i\n    print \" \"\n    j+=1\n  end\n  j=0\n  while j&lt;=i\n    print \"*\"\n    j+=1\n  end\n  i+=1\n  puts\nend</code></pre>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>          *\n         **\n        ***\n       ****\n      *****\n     ******</code></pre>\n\n\t<p>&nbsp;</p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>*\n**\n***\n****\n*****</code></pre>\n\n\t<p>&nbsp;</p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>*****\n****\n***\n**\n*</code></pre>\n\t</li>\n</ol>","a":[{"id":1770835,"option":"1","correct":true},{"id":1770836,"option":"2","correct":false},{"id":1770837,"option":"3","correct":false},{"id":1770838,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the given Ruby code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>a=5\ni=0\nwhile i&lt;a\n  j=2*(a-i)\n  while j&gt;=0\n    print \"\"\n    j-=1\n  end\n  j=0\n  while j&lt;=i\n    print \"*\"\n    j+=1\n  end\n  i+=1\n  puts\nend</code></pre>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>          *\n         **\n        ***\n       ****\n      *****\n     ******</code></pre>\n\n\t<p>&nbsp;</p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>*\n**\n***\n****\n*****</code></pre>\n\n\t<p>&nbsp;</p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>*****\n****\n***\n**\n*</code></pre>\n\t</li>\n</ol>","a":[{"id":1770831,"option":"None of these","correct":false},{"id":1770832,"option":"1","correct":false},{"id":1770833,"option":"2","correct":true},{"id":1770834,"option":"3","correct":false}]},{"q":"<p>What is the output of the given Ruby code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>a=23\ni=0\nwhile i&lt;32\n  temp=(a&gt;&gt;i)&amp;1\n  temp1=(a&gt;&gt;(i+1))&amp;1\n  a=a-(temp&lt;&lt;i)-(temp1&lt;&lt;(i+1))+(temp&lt;&lt;(i+1))+(temp1&lt;&lt;i)\n  i=i+2\nend\nputs a</code></pre>","a":[{"id":1770763,"option":"83","correct":false},{"id":1770764,"option":"53","correct":false},{"id":1770765,"option":"33","correct":false},{"id":1770766,"option":"43","correct":true}]},{"q":"<p>What is the output of the given Ruby code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>a=20\ncount=0\nif a&lt;=0\n  count=1\nend\nwhile a!=1\n  if a%2!=0\n    count+=1\n    break\n  end\n  a=a/2\n  count+=1\nend\nif count%2==0\n  puts \"Block\"\nelse\n  puts count\nend</code></pre>","a":[{"id":1770759,"option":"3","correct":true},{"id":1770760,"option":"Block","correct":false},{"id":1770761,"option":"5","correct":false},{"id":1770762,"option":"1","correct":false}]},{"q":"<p>What is the output of the given Ruby code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>for i in 0..5\n   if i &gt; 2 then\n      break\n   end\n   puts \"#{i}\"\nend</code></pre>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Address of 0\nAddress of 1\nAddress of 2</code></pre>\n\n\t<p>&nbsp;</p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>0\n1\n2</code></pre>\n\n\t<p>&nbsp;</p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>3\n4</code></pre>\n\t</li>\n</ol>","a":[{"id":1770755,"option":"Error","correct":false},{"id":1770756,"option":"1","correct":false},{"id":1770757,"option":"2","correct":true},{"id":1770758,"option":"3","correct":false}]},{"q":"<p>What is the output of the following code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#import &lt;Foundation/Foundation.h&gt;\n \nint main () {\n   \n    while( 0==0) {\n      \n   }\n   return 0;\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1769363,"option":"It will run forever","correct":true},{"id":1769364,"option":"Syntax error","correct":false},{"id":1769365,"option":"Compilation error","correct":false},{"id":1769366,"option":"0","correct":false}]},{"q":"<p>What is the output to the following code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#import &lt;Foundation/Foundation.h&gt;\n\nint main (int argc, const char * argv[])\n{\n  NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init];\n NSString *l = @\"111\";\nNSInteger length = l.length;\nNSInteger half = (length / 2);\nint i;\n NSLog (@\"yes\");\nfor ( i = 0; i &lt; half; i++) {\n     if ([l characterAtIndex:i] != [l characterAtIndex:length - i - 1]) {\n       NSLog (@\"no\");\n        break;    }\n}\n [pool drain];\n   return 0;\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1769347,"option":"yes","correct":true},{"id":1769348,"option":"no","correct":false},{"id":1769349,"option":"111","correct":false},{"id":1769350,"option":"syntax error","correct":false}]},{"q":"<p>What is the output to the following code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#import &lt;Foundation/Foundation.h&gt;\n\nint main (int argc, const char * argv[])\n{\n   NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init];\n   int i;\n  for( i=0;i&lt;4;i++)  {\n      \n  \n   NSLog (@\"hello world\"+1);\n   }\n   [pool drain];\n   return 0;\n}</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<p>\"hello world\"1</p>\n\n<p><strong>2.</strong></p>\n\n<p>hello world<br>\nhello world<br>\nhello world<br>\nhello world</p>\n\n<p><strong>3.</strong></p>\n\n<p>Error</p>\n\n<p><strong>4.</strong></p>\n\n<p>hello world1<br>\nhello world1<br>\nhello world1<br>\nhello world1</p>","a":[{"id":1769335,"option":"1","correct":false},{"id":1769336,"option":"2","correct":false},{"id":1769337,"option":"3","correct":true},{"id":1769338,"option":"4","correct":false}]},{"q":"<p>You are programming a microcontroller with the help of embedded C language to check if the year entered is a leap year or not. The code used is given below. You are required to optimize the code into a code that uses a single if condition.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#include &lt;stdio.h&gt;\n \nint main()\n{\n  int year;\n \n  scanf(\"%d\", &amp;year);\n \n  if ( year%400 == 0)\n    printf(\"%d is a leap year.\\n\", year);\n  else if ( year%100 == 0)\n    printf(\"%d is not a leap year.\\n\", year);\n  else if ( year%4 == 0 )\n    printf(\"%d is a leap year.\\n\", year);\n  else\n    printf(\"%d is not a leap year.\\n\", year);  \n \n  return 0;\n}</code></pre>\n\n<p>Which of the following if conditions will produce the correct output for the given scenario:</p>\n\n<p><strong>If conditions</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>if(((year%4==0) &amp;&amp; (year%400==0)) &amp;&amp; (year%100!=0))\n     printf(\"%d is a leap year.\\n\", year);\nelse\n    printf(\"%d is not a leap year.\\n\", year);\n</code></pre>\n\n\t<p>&nbsp;</p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>if((year%4==0) || ((year%400==0) &amp;&amp; (year%100!=0)))\n     printf(\"%d is a leap year.\\n\", year);\nelse\n    printf(\"%d is not a leap year.\\n\", year);\n</code></pre>\n\n\t<p>&nbsp;</p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>if(((year%4==0) || (year%400==0)) || (year%100!=0))\n     printf(\"%d is a leap year.\\n\", year);\nelse\n    printf(\"%d is not a leap year.\\n\", year);\n</code></pre>\n\n\t<p>&nbsp;</p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code> if(((year % 4 == 0) &amp;&amp; (year % 100!= 0)) || (year%400 == 0))\n     printf(\"%d is a leap year.\\n\", year);\nelse\n    printf(\"%d is not a leap year.\\n\", year);\n</code></pre>\n\t</li>\n</ol>","a":[{"id":1768894,"option":"1","correct":false},{"id":1768895,"option":"2","correct":false},{"id":1768896,"option":"3","correct":false},{"id":1768897,"option":"4","correct":true}]},{"q":"<p>There is an array with a list of names of students in a class. You were asked to write a program for traversing the array and printing all the names of the array in Kotlin. But, the following code snippet is giving an error:</p>\n\n<pre class=\"prettyprint\"><code>for(name='';name&lt;size(students);name++){\n    println(name)\n}</code></pre>\n\n<p>Which of the following option is correct to get the desired output?</p>\n\n<p><em>Note: Name of the array is \"students\"</em></p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>for(name in students){\n   println(name) }</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>for(name in students){\n   println(students) }</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>for(name in 0..len(students)){\n   println(students[name]) }</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>for(name in 0..len(students)){\n   println(name) }</code></pre>\n\t</li>\n</ol>","a":[{"id":1747242,"option":"1","correct":true},{"id":1747243,"option":"2","correct":false},{"id":1747244,"option":"3","correct":false},{"id":1747245,"option":"4","correct":false}]},{"q":"<p>You are given the folllowing code to get occurences of character 'e' from the given text which is a string.</p>\n\n<pre class=\"prettyprint\"><code>fun main() {\n    val s = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\"\n//Block//\n    var counter=-1\n    for(i=0;i&lt;size(s);i++){\n       if(ch){\n          counter++\n       }\n    }\n//End of Block//\n    println(counter)\n}</code></pre>\n\n<p>But, the code is producing errors and giving incorrect output. Find the correct code snippet that can be replaced with the code in the block to get the desired output.</p>\n\n<p><strong>Code Snippet</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>var counter = 0\nvar ch='e'\nfor (c in len(s)){\n   if (c in ch) {\n      counter++ }\n}\n</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>var counter = 0\nvar ch='e'\nfor (c in len(s)){\n   if (c == ch) {\n      counter++ }\n}\n</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>var counter = 0\nvar ch='e'\nfor (c in s){\n   if (c == ch) {\n      counter++ }\n}\n</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>var counter = 0\nvar ch='e'\nfor (c in s){\n   if (c in ch) {\n      counter++ }\n}\n</code></pre>\n\t</li>\n</ol>\n\n<p>&nbsp;</p>","a":[{"id":1747238,"option":"1","correct":false},{"id":1747239,"option":"2","correct":false},{"id":1747240,"option":"3","correct":true},{"id":1747241,"option":"4","correct":false}]},{"q":"<p>You are given a pattern to be coded in Kotlin. The pattern is kind of pyramid as shown below.<br>\n<br>\n* * * * * * * * *<br>\n&nbsp; * * * * * * *<br>\n&nbsp; &nbsp; * * * * *<br>\n&nbsp; &nbsp; &nbsp; * * *<br>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;*<br>\nYou have written the following code in Kotlin:</p>\n\n<pre class=\"prettyprint\"><code>fun main(args: Array&lt;String&gt;) {\n    val x=5\n//BLOCK//\n    for(i in x downTo 1){\n      print(\"*\",\" *\")\n    }\n//END OF BLOCK//\n}</code></pre>\n\n<p>But the code mentioned above doesn't generate the pattern required. The //BLOCK// part in the code contains an error. Which of the following&nbsp;code snippet should be replaced with the //BLOCK// to get the desired output?</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>for(j in 1..x-i){\n    print(\" \")  }\nfor(k in i..2*i-1){\n    print(\"  * \") }\nfor(j in 0..i-1-1){\n     print(\"*\")   }\nprint()</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>for(j in 1..x-i){\n    print(\"  \") }\nfor(k in i..2*i-1){\n    print(\"* \")   }\nfor(j in 0..i-1-1){\n     print(\"* \")  }\nprintln()</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>for(j in 1..x){\n    print(\"  \")}\nfor(k in i..2*i){\n    print(\"*\")  }\nfor(j in 0..i-1-1){\n     print(\"*\")   }\nprint()</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>for(j in 1..x){\n    print(\"  \")}\nfor(k in i..2*i){\n    print(\"* \") }\nfor(j in 0..i-1-1){\n     print(\"* \")  }\nprintln()</code></pre>\n\t</li>\n</ol>\n\n<p>&nbsp;</p>","a":[{"id":1747234,"option":"1","correct":false},{"id":1747235,"option":"2","correct":true},{"id":1747236,"option":"3","correct":false},{"id":1747237,"option":"4","correct":false}]},{"q":"<p>What is the output of the given code snippet:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>fun main(args: Array&lt;String&gt;){\n     var x:Double=40.0\n     var q:Double\n     var s:Double=0.0\n     var a:Int=5\n     q=x\n     x=x*(3.1415/180)\n     var i=1\n     var j=1\n     while(i&lt;=a){\n       if(i%2!=0){\n         var f=1;\n      for(k in 1..j)\n      f=f*i;\n         s=s+Math.pow(x,j.toDouble())/f\n       }\n       else{\n         var f=1;\n      for(k in 1..j)\n      f=f*i;\n         s=s-Math.pow(x,j.toDouble())/f\n       }\n       i++\n       j=j+2\n      }\n      print(String.format(\"%.3f\", s))\n}\n</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1747230,"option":"0.342","correct":false},{"id":1747231,"option":"1","correct":false},{"id":1747232,"option":"0.87","correct":false},{"id":1747233,"option":"0.656","correct":true}]},{"q":"<p>What is the output of the given Kotlin code snippet:</p>\n\n<pre class=\"prettyprint\"><code>fun main(args: Array&lt;String&gt;){\n     val x=5\n     var p=0\n     var temp=0\n     var temp1=0\n     for(a in 1..x){\n        for(b in 1..x-a){\n           print(\"  \")\n           ++temp }\n        while(p!=2*a-1){\n           if(temp&lt;=x-1){\n              print((a+p).toString()+\" \")\n              ++temp  }\n           else{\n              ++temp1\n              print((a+p-2*temp1).toString() + \" \")  }\n           ++p  }\n        p=0\n        temp=p\n        temp1=temp\n        println() }\n}\n</code></pre>\n\n<p><strong>Output:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>        1 \n      2 3 2 \n    3 4 5 4 3 \n  4 5 6 7 6 5 4 \n5 6 7 8 9 8 7 6 5 </code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>        1 \n      1 3 1 \n    1 4 5 4 1 \n  1 5 6 7 6 5 1 \n1 6 7 8 9 8 7 6 1 </code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>        1 \n      2 3 2 \n    3 4 5 4 3 \n  4 5 6 8 6 5 4 \n5 6 7 8 8 8 7 6 5 </code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>        1 \n      1 3 1 \n    1 4 5 4 1 \n  1 5 6 8 6 5 1 \n1 6 7 8 8 8 7 6 1 </code></pre>\n\t</li>\n</ol>","a":[{"id":1747226,"option":"1","correct":true},{"id":1747227,"option":"2","correct":false},{"id":1747228,"option":"3","correct":false},{"id":1747229,"option":"4","correct":false}]},{"q":"<p>In C#, which of the following code snippets is a valid way to declare an embedded statement inside a foreach loop?<br>\n<br>\n<strong>Code Snippets:</strong><br>\n </p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>foreach (string s in System.IO.Directory.GetDirectories(\n    System.Environment.CurrentDirectory))\n    {\n        System.Console.WriteLine(s);\n        \n    }</code></pre>\n\n\t<p><br>\n\t<br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>foreach (string s in System.IO.Directory.GetDirectories(\n    System.Environment.CurrentDirectory))\n    System.Console.WriteLine(s);</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1419652,"option":"Only 1","correct":true},{"id":1419653,"option":"Only 2","correct":false},{"id":1419654,"option":"Both 1 and 2","correct":false},{"id":1419655,"option":"None of these","correct":false}]},{"q":"<p>If you have executed the C# code snippet given below, then which of the following statements is correct?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\n\npublic class Test\n{\n\tpublic static void Main()\n\t{\n\t    string s = \"Csharp Programming\";\n\t    \n\t    for (int i = 0; i &lt; s.Length; i++)\n\t    {\n\t        System.Console.Write(s[s.Length - i - 1]);\n\t        \n\t    }\n\t}\n}\n</code></pre>\n\n<p> </p>\n\n<p><strong>Statements:</strong></p>\n\n<ol>\n\t<li>The code gives a run time error.<br>\n\t </li>\n\t<li>The code gives a compile-time error.<br>\n\t </li>\n\t<li>The code produces the following output- \n\t<pre class=\"prettyprint\"><code>gnimmargorP prahsC</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1419487,"option":"1","correct":false},{"id":1419488,"option":"2","correct":false},{"id":1419489,"option":"3","correct":true},{"id":1419490,"option":"None of these","correct":false}]},{"q":"<p>In Shell Scripting, if you are required to implement the following command in your Linux terminal for the following bash script, then determine the output of the following script in this scenario:</p>\n\n<p><strong>Command</strong></p>\n\n<pre class=\"prettyprint\"><code>./hack.sh</code></pre>\n\n<p><strong>hack.sh</strong></p>\n\n<pre class=\"prettyprint\"><code>a=0\nwhile [ \"$a\" -lt 4 ]\ndo\n            b=\"$a\"\n            while [ \"$b\" -ge 0 ]\n            do\n                        echo -n \"$b \"\n                        b=`expr $b - 1`\n            done\n            echo\n            a=`expr $a + 1`\ndone\n</code></pre>\n\n<p>Note: Assume you have given the executable permissions for this file by using the command <strong>chmod +x hack.sh</strong> through your Linux terminal</p>\n\n<p><strong>Output</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>1\n1 2\n1 2 3</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>1 2 3 4</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>0\n0 1\n0 1 2\n0 1 2 3</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>0\n1 0\n2 1 0\n3 2 1 0</code></pre>","a":[{"id":1125211,"option":"1","correct":false},{"id":1125212,"option":"2","correct":false},{"id":1125213,"option":"3","correct":false},{"id":1125214,"option":"4","correct":true}]},{"q":"<p>What can be used in place of XXX to complete the C# code snippet given below?</p>\n\n<pre class=\"prettyprint\"><code>using System;\nusing System.Collections.Generic;\nclass Program\n{\n    private static void Main()\n    {\n        List&lt;double&gt; list = new List&lt;double&gt; { 1, 2, 3, 4, 5, 6};\n        double mean = 0;\n        double variance = 0;\n        double standard_deviation = 0;\n        double sum = 0;\n        double temp = 0;\n        int i= 0;\n        for (i = 0; i &lt; list.Count; i++)\n        { \n            sum += list[i]; \n            \n        }\n        mean = sum / (list.Count - 0);\n        for (i = 0; i &lt; list.Count; i++)\n        { \n            XXX \n            \n        }\n        variance=temp / (list.Count - 0);\n        standard_deviation = Math.Sqrt(variance);\n        Console.WriteLine(\"Mean: \" + mean );\n        Console.WriteLine(\"Variance : \" + variance );\n        Console.WriteLine(\"Standard deviation: \" + standard_deviation);\n        \n    }\n}</code></pre>\n\n<p> </p>","a":[{"id":1419272,"option":"temp += Math.Pow((list[i] + mean), 2);","correct":false},{"id":1419273,"option":"temp += Math.Pow((list[i] - mean), 2);","correct":true},{"id":1419274,"option":"sum += Math.Pow((list[i] - mean), 2);","correct":false},{"id":1419275,"option":"None of these","correct":false}]},{"q":"<p>The C# code given alongside is used to print Floyd's triangle. Which of the following syntaxes can be used in place of XXX to complete the code snippet given below?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nclass Hackerearth\n{\n    static void Main(string[] args)\n    {\n        int h1 = 1;\n        int h2 = 1;\n        int i = 1;\n        int j = 0;\n        Console.Write(\"Enter the number of rows: \");\n        j = int.Parse(Console.ReadLine());\n        \n        for (; h1 &lt;= j; h1 = h1 + 1)\n        {\n            XXX\n            {\n                Console.Write(i + \" \");\n                i = i + 1;\n                \n            }\n            Console.WriteLine();\n            \n        }\n        \n    }\n    \n}</code></pre>\n\n<p> </p>\n\n<p><strong>Syntaxes</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>for (h2 = 1; h2 &gt; h1 + 1; h2++)\n</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>for (h2 = 1; h2 &lt; h1 - 1; h2++)\n</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>for (h2 = 1; h2 &gt; h1 - 1; h2++)\n</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>for (h2 = 1; h2 &lt; h1 + 1; h2++)\n</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1419157,"option":"1","correct":false},{"id":1419158,"option":"2","correct":false},{"id":1419159,"option":"3","correct":false},{"id":1419160,"option":"4","correct":true}]},{"q":"<p>You are given the following Python 3 code. The actual output that you obtain does not match the expected output. Which of these statements represent the reason for this mismatch:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>value = 8\nanswer = 0\nfor x in range(1, 13):\n  answer = value * x\nprint(\"{0} times {1} is {2}\"\n     .format(x, value, answer))</code></pre>\n\n<p><strong>Actual output</strong></p>\n\n<pre class=\"prettyprint\"><code>12 times 8 is 96</code></pre>\n\n<p><strong>Expected output</strong></p>\n\n<pre class=\"prettyprint\"><code>1 times 8 is 8\n2 times 8 is 16\n3 times 8 is 24\n4 times 8 is 32\n5 times 8 is 40\n6 times 8 is 48\n7 times 8 is 56\n8 times 8 is 64\n9 times 8 is 72\n10 times 8 is 80\n11 times 8 is 88\n12 times 8 is 96</code></pre>\n\n<p><strong>Statements</strong></p>\n\n<ol>\n\t<li>The answer variable is 0.</li>\n\t<li>The range is provided in the code is 13. This causes an extra line of output.</li>\n\t<li>The indentation at line 6 is incorrect. After the for loop terminates, the program only prints a single line of output.</li>\n\t<li>The line of code '{0} times {1} is {2}' is printed 12 times.</li>\n</ol>","a":[{"id":730029,"option":"1","correct":false},{"id":730030,"option":"2","correct":false},{"id":730031,"option":"3","correct":true},{"id":730032,"option":"4","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>class party:\n    def __init__(self, v = {}):\n        self.v = {\"apple\":1, \"grapes\":2, \"mango\":3, \"pineapple\":4, \"watermelon\":5, \"orange\":6}\n    def cal_bill(self):\n        val = []\n        for i in range(len(self.v)//5):\n            for x in self.v.values():\n                val.append(x)\n        return val\n\na = party()\nprint(a.cal_bill())  </code></pre>\n\n<p> </p>","a":[{"id":730448,"option":"[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6]","correct":false},{"id":730449,"option":"[1, 2, 3, 4, 5, 6]","correct":true},{"id":730450,"option":"['apple', 'grapes', 'mango', 'pineapple', 'watermelon', 'orange']","correct":false},{"id":730451,"option":"['apple', 'grapes', 'mango', 'pineapple', 'watermelon', 'orange', 'apple', 'grapes', 'mango', 'pineapple', 'watermelon', 'orange']","correct":false}]},{"q":"<p>Which of the following statements is correct if the C# code snippet given below is given the input as \"num=260\"?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>using System;\nclass Program\n{\n    static void Main(string[] args)\n    {\n        int i = 0;\n        int digiCount = 0;\n        int num = 0;\n        int tNum = 0;\n        int []digiArray = new int[10];\n        double sum = 0;\n        tNum = num = int.Parse(Console.ReadLine());\n        while (num &gt; 0)\n        {\n            digiArray[i++] = num%10; \n            num = num / 10;\n            digiCount++;\n            \n        }\n        for(i=0;i&lt;digiCount;i++)\n        {\n            sum += Math.Pow(digiArray[i], digiCount);\n            \n        }\n        if (sum == tNum)\n        Console.WriteLine(\"Given Number is armstrong\");\n        else\n        Console.WriteLine(\"Given Number is not armstrong\");\n        \n    }\n }</code></pre>\n\n<p> </p>\n\n<p><strong>Statements:</strong><br>\n </p>\n\n<ol>\n\t<li>The code produces the output-<br>\n\tGiven Number is not armstrong<br>\n\t </li>\n\t<li> The code gives Compile Time Error<br>\n\t </li>\n\t<li> The code produces the output-<br>\n\t  Given Number is armstrong<br>\n\t </li>\n\t<li>The code does not print anything</li>\n</ol>","a":[{"id":1419277,"option":"1","correct":true},{"id":1419278,"option":"2","correct":false},{"id":1419279,"option":"3","correct":false},{"id":1419280,"option":"4","correct":false}]},{"q":"<p>Which of the following syntaxes can be used in place of XXX in the JavaScript code snippet given below to produce the output as follows?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>function* CharacterRange(a, b)\n{\n    for (let i = a; i &lt;= b; i += 1)\n    {\n        yield i;        \n    }    \n}\n\nfunction GenerateRange(a, b)\n{\n    if(typeof a === 'string')\n    {\n        let res = XXX\n        console.log(res);        \n    }\n    else \n    {\n        let res = [...CharacterRange(a, b)];\n        console.log(res);        \n    }    \n}\nGenerateRange(1, 5);\nGenerateRange('A', 'G');</code></pre>\n\n<p> </p>\n\n<p><strong>Output</strong></p>\n\n<pre class=\"prettyprint\"><code>[ 1, 2, 3, 4, 5 ]\n[\n  'A', 'B', 'C',\n  'D', 'E', 'F',\n  'G'\n]</code></pre>\n\n<p> </p>\n\n<p> </p>\n\n<p><strong>Syntaxes</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>[...GenerateRange(b.charCodeAt(), a.charCodeAt())].map(n =&gt; String.fromCharCode(n));</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>[...CharacterRange(b.charCodeAt(), a.charCodeAt())].map(n =&gt; String.fromCharCode(n));</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>[...GenerateRange(a.charCodeAt(i), b.charCodeAt(i))].map(n =&gt; String.fromCharCode(n));</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>[...CharacterRange(a.charCodeAt(), b.charCodeAt())].map(n =&gt; String.fromCharCode(n));</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1420412,"option":"1","correct":false},{"id":1420413,"option":"2","correct":false},{"id":1420414,"option":"3","correct":false},{"id":1420415,"option":"4","correct":true}]},{"q":"<p>What is the output of the following C code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;stdio.h&gt;\nint main()\n{\n    int i,j;\n    for (i = 0; i &lt;=10; i++)\n    {\n        for (j&lt;=4;j++;j=0)\n        {\n            for(i=j;i&lt;=j;i++)\n            {\n                j = myhackFunc(j);\n            }\n        } \n    }\n    printf(\"%d\",j);\n}\nint myhackFunc(int i)\n{\n    static int hackvar = 0;\n    hackvar = hackvar + i*i+i-i/i;\n    if(hackvar&gt;=i*i+i)\n    {\n        return(hackvar+i-i*i);\n    }\n    else\n    {\n        return(hackvar+i*i+i);\n    }\n}\n</code></pre>","a":[{"id":126096,"option":"10","correct":false},{"id":126097,"option":"1","correct":true},{"id":126098,"option":"0","correct":false},{"id":126099,"option":"Runtime error","correct":false}]},{"q":"<p>You are given the following Python 3 code. Determine the output.</p>\n\n<p><strong>Code</strong> </p>\n\n<pre class=\"prettyprint\"><code>start = [20, 10, 33, 12]\nend = [40, 11, 11, 4, 6]\n \nfor x in start:\n  if x//2&gt;10:\n    for j in end:\n        if(x % j==0):\n            print(x, end = ' ')\n  else:\n    print(x, end = ' ')</code></pre>\n\n<p> </p>","a":[{"id":730464,"option":"10 20 33 33 12 ","correct":false},{"id":730465,"option":"20 10 33 12 22 ","correct":false},{"id":730466,"option":"20 10 33 33 12 ","correct":true},{"id":730467,"option":"TypeError","correct":false}]},{"q":"<p>Ben has written the following Javascript code to split an array into smaller chunks, then which of the following code snippets can he use alternatively to achieve the same?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>function ArraySplit(arr, chunk)\n{\n    for (i=0; i &lt; arr.length; i += chunk)\n    {\n        let tempArr;\n        tempArr= arr.slice(i, i + chunk);\n        console.log(tempArr);        \n    }\n}\nconst FinalArray= [1, 2, 3, 4, 5, 6, 7, 8];\nconst chunk = 2;\nArraySplit(FinalArray, chunk);</code></pre>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>function ArraySplit(arr, chunk)\n{\n    while(arr.length &gt; 0) \n    {\n        let tempArr;\n        tempArr= arr.split(0, chunk);\n        console.log(tempArr);\n    }\n}\nconst FinalArray= [1, 2, 3, 4, 5, 6, 7, 8];\nconst chunk = 2;\nArraySplit(FinalArray, chunk);</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>function ArraySplit(arr, chunk)\n{\n    while(arr.length &gt; 0)\n    {\n        let tempArr;\n        tempArr= arr.splice(0, 0 + i);\n        console.log(tempArr);        \n    }    \n}\nconst FinalArray= [1, 2, 3, 4, 5, 6, 7, 8];\nconst chunk = 2;\nArraySplit(FinalArray, chunk);</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>function ArraySplit(arr, chunk) \n{\n    while(arr.length &gt; 0)\n    {\n        let tempArr;\n        tempArr= arr.split(0, chunk + i);\n        console.log(tempArr);        \n    }\n}\nconst FinalArray= [1, 2, 3, 4, 5, 6, 7, 8];\nconst chunk = 2;\nArraySplit(FinalArray, chunk);</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>function ArraySplit(arr, chunk)\n{\n    while(arr.length &gt; 0)\n    {\n        let tempArr;\n        tempArr= arr.splice(0, chunk);\n        console.log(tempArr);\n    }\n}\nconst FinalArray= [1, 2, 3, 4, 5, 6, 7, 8];\nconst chunk = 2;\nArraySplit(FinalArray, chunk);</code></pre>\n\t</li>\n</ol>","a":[{"id":1420397,"option":"1","correct":false},{"id":1420398,"option":"2","correct":false},{"id":1420399,"option":"3","correct":false},{"id":1420400,"option":"4","correct":true}]},{"q":"<p>Determine the output of the following Javascript code snippet.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>var hack = 5;\nvar hacker1 = [];\nfor (var h = 0; h &lt; hack; h++);\n{\n    hacker1.push(h + 1);\n}\n\nconsole.log(hacker1);</code></pre>\n\n<p> </p>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre>[ 6 ]\n\n</pre>\n\t</li>\n\t<li>\n\t<pre>[ 1, 2, 3, 4, 5 ]\n\n</pre>\n\t</li>\n\t<li>\n\t<pre>[ 5 ]</pre>\n\t</li>\n</ol>","a":[{"id":1420612,"option":"3","correct":false},{"id":1420613,"option":"1","correct":true},{"id":1420614,"option":"2","correct":false},{"id":1420615,"option":"The code gives a compilation error","correct":false}]},{"q":"<p>If the following is the input, then determine the output of the following C code:</p>\n\n<p><strong>Input</strong></p>\n\n<p>3 2 1 3</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#include&lt;stdio.h&gt;\nint main()\n{\n    int n,s[1001],i,t,j;\n    scanf(\"%d\",&amp;n);\n    for(i=0;i&lt;n;i++)\n    {\n        scanf(\"%d\",&amp;s[i]);\n    }\n    for(i=0;i&lt;n;i++)\n        for(j=i+1;j&lt;n;j++)\n            if(s[j]&lt;s[i])\n            {\n                t=s[j];\n                s[j]=s[i];\n                s[i]=t;\n            }\n    int c=n/2-1;\n    int d=(n+1)/2-1;\n    if(n%2!=0) \n        printf(\"%d\",s[d]);\n    else \n        printf(\"%d\",s[c]);\n}</code></pre>\n\n<p> </p>","a":[{"id":721554,"option":"2","correct":true},{"id":721555,"option":"1","correct":false},{"id":721556,"option":"3","correct":false},{"id":721557,"option":"Compilation error","correct":false}]},{"q":"<p>In PL/SQL, you are working on the control statements. Which of the statements about the FOR LOOP index are correct:<br>\n1. This index is implicitly declared as a variable of type PLS_INTEGER that is local to the loop.<br>\n2. The statements in the loop can read the value of the index and can change the value of the index.<br>\n3. Statements outside the loop cannot reference the index.</p>","a":[{"id":1139580,"option":"1 and 2","correct":false},{"id":1139581,"option":"2 and 3","correct":false},{"id":1139582,"option":"1 and 3","correct":true},{"id":1139583,"option":"All of these","correct":false}]}]
[{"q":"<p>In Spark Streaming, which of these statements about the following function are correct:</p>\n\n<p><strong>Function</strong></p>\n\n<pre class=\"prettyprint\"><code>groupByKeyAndWindow(windowDuration, slideDuration, [numTasks])</code></pre>\n\n<p><strong>Statement</strong></p>\n\n<ol>\n\t<li>When it is called on a DStream of (K, V) pairs, it returns a new DStream of (K, Seq[V]) pairs.</li>\n\t<li>The values for each key in the existing DStream pair are aggregated using a normal function.</li>\n\t<li>By default, it uses Spark's default number of parallel tasks to perform the grouping.</li>\n\t<li>You can pass only one numTasks argument to set a different number of tasks</li>\n</ol>\n\n<p> </p>","a":[{"id":1166913,"option":"1 and 2","correct":false},{"id":1166914,"option":"1 and 3","correct":true},{"id":1166915,"option":"1, 2, and 3","correct":false},{"id":1166916,"option":"2, 3, and 4","correct":false}]},{"q":"<p>In Spark Streaming, which of the following statements about transformations in <strong>DStream</strong> are correct:</p>\n\n<ol>\n\t<li>The stateless transformation includes common RDD transformations such as map(), filter(), reduceByKey(), etc.</li>\n\t<li>The stateful transformation uses the intermediate results from previous batches and then computes the result of the present batch.</li>\n\t<li>Stateless transformations can combine data from only one DStreams at an instance of time.</li>\n</ol>\n\n<p> </p>","a":[{"id":1166909,"option":"1 and 2","correct":false},{"id":1166910,"option":"2 and 3","correct":true},{"id":1166911,"option":"1 and 3","correct":false},{"id":1166912,"option":"All of these","correct":false}]},{"q":"<p>In Spark Streaming integrated with Kafka, which of these statements about the following code are correct:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>def function(): StreamingContext = {\n  val hack_ssc = new StreamingContext(...)   \n  val h_lines = hack_ssc.socketTextStream(...) \n  ...\n  hack_ssc.checkpoint(checkpointDirectory)   \n  hack_ssc\n}\nval hack_context = StreamingContext.getOrCreate(checkpointDirectory, function _)\nhack_context. ...\nhack_context.start()\nhack_context.awaitTermination()</code></pre>\n\n<p><strong>Statements </strong></p>\n\n<ol>\n\t<li>If the program starts for the first time, the <strong>StreamingContext.getOrCreate()</strong> function allows you to create a new StreamingContext class, set up all the streams, and then call <strong>stop()</strong>.</li>\n\t<li>If the program restarts after failure, then the <strong>StreamingContext.getOrCreate()</strong> function allows you to replace a StreamingContext from the checkpoint data in the checkpoint directory.</li>\n\t<li>If the checkpointDirectory exists, then the context is replaced from the checkpoint data.</li>\n\t<li>If the checkpoint directory does not exist, that is, running for the first time, then the <strong>functionToCreateContext </strong>function is called to create a new context and disable the DStreams.</li>\n</ol>","a":[{"id":1167886,"option":"1, 2, 3","correct":false},{"id":1167887,"option":"2, 3, 4","correct":false},{"id":1167888,"option":"1, 3, 4","correct":false},{"id":1167889,"option":"None of these","correct":true}]},{"q":"<p>In Spark Streaming integrated with Kafka, how many input <strong>DStreams</strong> are created in the following code:</p>\n\n<pre class=\"prettyprint\"><code>val numInputDStreams = 5.5\nval kafkaDStreams = (2 to numInputDStreams).map { _ =&gt; KafkaUtils.createStream(...) }</code></pre>\n\n<p> </p>","a":[{"id":1166779,"option":"1","correct":false},{"id":1166780,"option":"3","correct":false},{"id":1166781,"option":"5","correct":false},{"id":1166782,"option":"None of these","correct":true}]},{"q":"<p>In Spark Streaming integrated with Kafka, RDD actions inside the DStream output operations force the processing of the data that is received. If you used the <strong>dstream.foreachRDD()</strong> artifact without any RDD actions inside them, then which of the following statements about the given scenario is correct:</p>\n\n<ol>\n\t<li>The system receives the data and discards it, and therefore, there is no execution.</li>\n\t<li>The system does not receive any data.</li>\n\t<li>The system receives and processes the data and the execution runs successfully.</li>\n\t<li>The system receives no data, and therefore, there is no execution.</li>\n</ol>","a":[{"id":1167810,"option":"1","correct":true},{"id":1167811,"option":"2","correct":false},{"id":1167812,"option":"3","correct":false},{"id":1167813,"option":"4","correct":false}]}]
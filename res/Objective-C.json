[{"q":"<p>What is the output to the following code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#import &lt;Foundation/Foundation.h&gt;\n\nint main () {\n   NSString *string1 = @\"Objective\";\n   NSString *string2 = @\"C\";\n   NSString *string3;\n   int  len ;\n\n   NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init];\n\n   len = [string1 length];\n   NSLog(@\"Length of String3 :  %d\\n\", len );\n\n   string3 = [[NSString alloc] initWithFormat:@\"%@ %@\",string1,string2];        \n   NSLog(@\" %@\\n\", string3 );\n   [pool drain];\n\n   return 0;\n}</code></pre>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>","a":[{"id":1769391,"option":"Length of String3 :  9\r\n Objective ","correct":false},{"id":1769392,"option":"Syntax error","correct":false},{"id":1769393,"option":"Length of String3 :  9\r\n Objective C","correct":true},{"id":1769394,"option":"Length of String3 :  NULL\r\n Objective C","correct":false}]},{"q":"<p>What is the output to the following code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#import &lt;Foundation/Foundation.h&gt;\n\nint main () {\n   \n   \n   double a[4] = {15.0,16.0,3.0, 25.0};\n   double *pointer;\n   int i;\n\n   pointer = a;\n \n    for ( i = 0; i &lt; 4; i++ ) {\n      NSLog(@\"*(p + %d) : %f\\n\",  i, *(pointer + i) );\n   }\n\n  for ( i = 0; i &lt; 5; i++ ) {\n      NSLog(@\"*(balance + %d) : %f\\n\",  i, *(a + i) );\n   }\n \n   return 0;\n}</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<p>*(p + 0) : 15.000000<br>\n&nbsp;*(p + 1) : 16.000000<br>\n&nbsp;*(p + 2) : 3.000000<br>\n&nbsp;*(p + 3) : 25.000000<br>\n&nbsp;*(balance + 0) : 15.000000<br>\n&nbsp;*(balance + 1) : 16.000000<br>\n*(balance + 2) : 3.000000<br>\n&nbsp;*(balance + 3) : 25.000000</p>\n\n<p><strong>2.</strong></p>\n\n<p>*(p + 0) : 15.000000<br>\n&nbsp;*(p + 1) : 16.000000<br>\n&nbsp;*(p + 2) : 3.000000<br>\n&nbsp;*(p + 3) : 25.000000<br>\n&nbsp;*(balance + 0) : 15.000000<br>\n&nbsp;*(balance + 1) : 16.000000<br>\n*(balance + 2) : 3.000000<br>\n&nbsp;*(balance + 3) : 25.000000<br>\n*(balance + 4) : 0.000000</p>\n\n<p><strong>3.</strong></p>\n\n<p>Compilation error</p>\n\n<p><strong>4.</strong></p>\n\n<p>Syntax error</p>","a":[{"id":1769383,"option":"1","correct":false},{"id":1769384,"option":"2","correct":true},{"id":1769385,"option":"3","correct":false},{"id":1769386,"option":"4","correct":false}]},{"q":"<p>What is the output to the following code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#import &lt;Foundation/Foundation.h&gt;\n\nint main (int argc, const char * argv[])\n{\n    @autoreleasepool {\n        float answer;\n\n        answer = multiply( 10,35 );\n    }\n    return 0;\n}\n\nfloat multiply (int g, int l)\n{\n        return g * l;\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1769379,"option":"Compilation error","correct":true},{"id":1769380,"option":"350","correct":false},{"id":1769381,"option":"30","correct":false},{"id":1769382,"option":"Syntax error","correct":false}]},{"q":"<p>What is the output to the following code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#import &lt;Foundation/Foundation.h&gt;\nint main(void){\n    NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];\n    // Your code here!\n    \n  \n   NSString *i = @\"objectivec\";\n    NSString *j = @\"hello\";\n\n   NSLog(@\" %@ %@ \\n\", i,j);\n\n  \n    [pool release];\n    return 0;\n}</code></pre>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>","a":[{"id":1769395,"option":"objectivec hello","correct":true},{"id":1769396,"option":"hello objectivec","correct":false},{"id":1769397,"option":"hello","correct":false},{"id":1769398,"option":"objectivec","correct":false}]},{"q":"<p>What is the output to the following code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#import &lt;Foundation/Foundation.h&gt;\n \nconst int maximum = 3;\n \nint main () {\n   int  a[] = {10, 100, 200};\n   int i, *ptr[maximum];\n \n   for ( i = 0; i &lt; maximum; i++) {\n      ptr[i] = &amp;a[i];  \n   }\n   for ( i = 0; i &lt; maximum; i++) {\n      NSLog(@\"value of a[%d] = %d\\n\", i, *ptr[i] );\n   }\n   return 0;\n}</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<p>Value of a[0] = 10<br>\n&nbsp;Value of a[1] = 100<br>\n&nbsp;Value of a[2] = 200</p>\n\n<p><strong>2.</strong></p>\n\n<p>Value of a[0] = 10<br>\n&nbsp;Value of a[1] = 10<br>\n&nbsp;Value of a[2] = 200</p>\n\n<p><strong>3.</strong></p>\n\n<p>Value of a[2] = 10<br>\n&nbsp;Value of a[1] = 100<br>\n&nbsp;Value of a[0] = 200</p>\n\n<p><strong>4.</strong></p>\n\n<p>No output</p>","a":[{"id":1769399,"option":"1","correct":true},{"id":1769400,"option":"2","correct":false},{"id":1769401,"option":"3","correct":false},{"id":1769402,"option":"4","correct":false}]},{"q":"<p>What is the output to the following code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#import &lt;Foundation/Foundation.h&gt;\n@interface Box:NSObject\n{ double l;   \n        double b; \n        double h;   }\n@property(nonatomic, readwrite) double hei;\n-(double) volume;\n@end\n@implementation Box\n@synthesize hei; \n-(id)init\n{   self = [super init];\n        l= 1.0;\n        b = 1.0;\n        return self; }\n-(double) volume\n{return l*b*h;}\n@end\nint main()\n{ NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init];    \n        Box *box = [[Box alloc]init];\n        double vol = 0.0; \n        box1.h= 5.0; \n        vol = [box1 vol];\n        NSLog(@\"Volume of box = %f\", vol);\n        [pool drain];\n        return 0; }</code></pre>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>","a":[{"id":1769403,"option":"Volume of box1 = NULL","correct":false},{"id":1769404,"option":"Volume of box1 = 5.000000","correct":true},{"id":1769405,"option":"Syntax error","correct":false},{"id":1769406,"option":"Volume of box1 = 1.000000","correct":false}]},{"q":"<p>What is the output to the following code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#import &lt;Foundation/Foundation.h&gt;\n\nint main () {\n   NSString *str1 = @\"ObjectiveC\";\n   \n  int len = [str1 length];\n   NSLog(@\"Length of Str3 :  %@\\n\", len );\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1769375,"option":"10","correct":false},{"id":1769376,"option":"Compilation error","correct":true},{"id":1769377,"option":"6","correct":false},{"id":1769378,"option":"5","correct":false}]},{"q":"<p>What is the output to the following code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#import &lt;Foundation/Foundation.h&gt;\n \nint main () {\n   int  num;\n   int  *pointer;\n   int  **ppointer;\n\n   num = 5000;\n\n   \n   pointer = &amp;num;\n\n   \n   ppointer = &amp;pointer;\n\n  \n   NSLog(@\"Value of num = %d\\n\", num );\n   NSLog(@\"Value available at *pointer = %d\\n\", *pointer );\n   NSLog(@\"Value available at **ppointer= %d\\n\", **ppointer);\n\n   return 0;\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1769371,"option":"Value of num = 5000\r\n Value available at *pointer = 5000\r\nValue available at **ppointer= 5000","correct":true},{"id":1769372,"option":"Syntax error","correct":false},{"id":1769373,"option":"Value of num = 5000 \r\nValue available at *pointer = null\r\n Value available at **ppointer= 5000","correct":false},{"id":1769374,"option":"Compilation error","correct":false}]},{"q":"<p>What is the output to the following code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#import &lt;Foundation/Foundation.h&gt;\nint main(void){\n    NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];\n    \n  \n   NSString *s = @\"Hello\";\n    NSString *g = @\"Hep\";\n\n   NSLog(@\" %@ \\n\", g,s);\n\n  \n    [pool release];\n    return 0;\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1769367,"option":"Hello Hep","correct":false},{"id":1769368,"option":"Hep Hello","correct":false},{"id":1769369,"option":"Hep","correct":true},{"id":1769370,"option":"Hello  ","correct":false}]},{"q":"<p>What is the output of the following code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#import &lt;Foundation/Foundation.h&gt;\n \nint main () {\n   \n    while( 0==0) {\n      \n   }\n   return 0;\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1769363,"option":"It will run forever","correct":true},{"id":1769364,"option":"Syntax error","correct":false},{"id":1769365,"option":"Compilation error","correct":false},{"id":1769366,"option":"0","correct":false}]},{"q":"<p>What is the output to the following code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#import &lt;Foundation/Foundation.h&gt;\n\nint main () {\n   NSString *s1 = @\"objective\";\n   NSString *s2 = @\"C\";\n   NSString *string3;\n  \n\n   NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init];\n\n   string3 = [s2 uppercaseString];\n   NSLog(@\"uppercase string :  %@\\n\", string3 );\n\n   string3 = [s1 stringByAppendingFormat:@\"C\"];\n   NSLog(@\"concatenated string:   %@\\n\", string3 );\n\n \n   [pool drain];\n\n   return 0;\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1769359,"option":"uppercase string : c \r\nconcatenated string: objectivec","correct":false},{"id":1769360,"option":"Compilation error","correct":false},{"id":1769361,"option":"uppercase string : C\r\n concatenated string: objectiveC","correct":true},{"id":1769362,"option":"uppercase string :OBJECTIVE C \r\nconcatenated string: objectiveC","correct":false}]},{"q":"<p>What is the output to the following code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#import &lt;Foundation/Foundation.h&gt;\n\nvoid d (int);\n\nint main (int argc, const char * argv[])\n{\n    {\n        int s;\n\n        for (s=0; s&lt;5; s++)\n        {\n                d (s );\n        }\n\n   }\n   return 0;\n}\n\nvoid d (int s)\n{\n        int y = 0;\n\n        y += s;\n\n        NSLog (@\"y + s = %i\", y);\n}</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<p>y + s = 0<br>\n&nbsp;y + s= 1<br>\n&nbsp;y + s= 2<br>\n&nbsp;y + s= 3<br>\n&nbsp;y + s= 4</p>\n\n<p><strong>2.</strong></p>\n\n<p>No output</p>\n\n<p><strong>3.</strong></p>\n\n<p>y + s = 1<br>\n&nbsp;y + s= 2<br>\n&nbsp;y + s= 3<br>\n&nbsp;y + s= 4<br>\n&nbsp;y + s= 5</p>\n\n<p><strong>4.</strong></p>\n\n<p>Compilation error</p>","a":[{"id":1769355,"option":"1","correct":true},{"id":1769356,"option":"2","correct":false},{"id":1769357,"option":"3","correct":false},{"id":1769358,"option":"4","correct":false}]},{"q":"<p>What is the output to the following code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#import &lt;Foundation/Foundation.h&gt;\n \nint main () {\n   \n   /* an array with 5 rows and 2 columns*/\n   int array[1][2] = {{5,5}};\n   int s, k;\n \n   /* output each array element's value */\n   for ( s = 0; s &lt; 1; s++ ) {\n      for ( k = 0; k &lt; 2; k++ ) {\n         NSLog(@\"array[%d][%d] = %d\\n\", s,k, array[s][k] );\n      }\n   }\n   \n   return 0;\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1769351,"option":"array[0][0] = 5\r\narray[0][1] = 5","correct":true},{"id":1769352,"option":"Syntax error","correct":false},{"id":1769353,"option":"array[0][0]=5 5","correct":false},{"id":1769354,"option":"array[0]=5\r\narray[0]=5","correct":false}]},{"q":"<p>What is the output to the following code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#import &lt;Foundation/Foundation.h&gt;\n\nint main (int argc, const char * argv[])\n{\n  NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init];\n NSString *l = @\"111\";\nNSInteger length = l.length;\nNSInteger half = (length / 2);\nint i;\n NSLog (@\"yes\");\nfor ( i = 0; i &lt; half; i++) {\n     if ([l characterAtIndex:i] != [l characterAtIndex:length - i - 1]) {\n       NSLog (@\"no\");\n        break;    }\n}\n [pool drain];\n   return 0;\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1769347,"option":"yes","correct":true},{"id":1769348,"option":"no","correct":false},{"id":1769349,"option":"111","correct":false},{"id":1769350,"option":"syntax error","correct":false}]},{"q":"<p>What is the output to the following code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#import &lt;Foundation/Foundation.h&gt;\n @interface SampleClass:NSObject\n-(double) getAverage:(int []) arr andSize:(int) size;\n@end\n@implementation SampleClass-(double) getAverage:(int []) Array andSize:(int) S {\n   int    d;\n   double average, SUM =0;;\n   for (d = 0; d &lt; S; ++d) {\n      SUM += Array[d];  }\n   average = SUM/ S;\n   return average;  }\n@end\nint main () {\n   int b[5] = {1, 500, 370, 58, 24};\n   double average;\n   SampleClass *sampleClass = [[SampleClass alloc]init];\n  average = [sampleClass getAverage:b andSize: 5] ;\n   NSLog( @\"Average value is: %f \", average );\n  return 0; }</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1769343,"option":"Average value is: 190.600000","correct":true},{"id":1769344,"option":"Syntax error","correct":false},{"id":1769345,"option":"Compilation error","correct":false},{"id":1769346,"option":"Average value is: 1.00000","correct":false}]},{"q":"<p>What is the output to the following code:</p>\n\n<p>'<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#import &lt;Foundation/Foundation.h&gt;\n@interface SampleClass:NSObject\n- (int)max:(int)numberone andNum2:(int)numbertwo;\n@end\n@implementation SampleClass\n- (int)max:(int)numberone andNum2:(int)numbertwo {\n int output;\n    if (numberone &gt; numbertwo) {\n      output = numberone;\n   } else {\n      output = numbertwo;\n   }\n \n   return output; \n}\n@end\nint main () {\n    int i = 45;\n   int j = 60;\n   int m;\n   \n   SampleClass *sampleClass = [[SampleClass alloc]init];\n  m = [sampleClass max:i andNum2:j];\n  NSLog(@\"Max value is : %d\\n\", m );\n   return 0;\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1769339,"option":"Min value is:45","correct":false},{"id":1769340,"option":"Max value is : 60","correct":true},{"id":1769341,"option":"No output","correct":false},{"id":1769342,"option":"Syntax error","correct":false}]},{"q":"<p>What is the output to the following code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#import &lt;Foundation/Foundation.h&gt;\n\nint main (int argc, const char * argv[])\n{\n   NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init];\n   int i;\n  for( i=0;i&lt;4;i++)  {\n      \n  \n   NSLog (@\"hello world\"+1);\n   }\n   [pool drain];\n   return 0;\n}</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<p>\"hello world\"1</p>\n\n<p><strong>2.</strong></p>\n\n<p>hello world<br>\nhello world<br>\nhello world<br>\nhello world</p>\n\n<p><strong>3.</strong></p>\n\n<p>Error</p>\n\n<p><strong>4.</strong></p>\n\n<p>hello world1<br>\nhello world1<br>\nhello world1<br>\nhello world1</p>","a":[{"id":1769335,"option":"1","correct":false},{"id":1769336,"option":"2","correct":false},{"id":1769337,"option":"3","correct":true},{"id":1769338,"option":"4","correct":false}]},{"q":"<p>You have been asked to write a code on logical operators that compare two integers. You want your input to execute the statement \"THIS: Condition is true\" for any input. You realized that this code doesn't execute that particular statement. How will you edit the code?</p>\n\n<pre class=\"prettyprint\"><code>#import &lt;Foundation/Foundation.h&gt;\nint main() {\nint a = 0; \nint b = 10; \nif ( a &amp;&amp; b ) \n{ \n  NSLog(@\"THIS:Condition is true\\n\" ); \n} \nelse \n{ \n  NSLog(@\"Condition is not true\\n\" ); \n} \nif ( !(a &amp;&amp; b) ) \n{ \n  NSLog(@\" Condition is true\\n\" ); \n} \n}</code></pre>","a":[{"id":1769732,"option":"By initializing a ≠ 0 and keeping b value unchanged.","correct":true},{"id":1769733,"option":"By initializing a <0 and keeping b value unchanged.","correct":false},{"id":1769734,"option":"By initializing a > 0 and keeping b value unchanged.","correct":false},{"id":1769735,"option":"By initializing a ≠ 0 and and b=0.","correct":false}]},{"q":"<p>What is the output to the following code if number=2.55:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#import\nint main (int argc, const char * argv[])\n{\n  NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init];\n  int number;\n  printf (\"Enter a number between 0 and 3: \");\n  scanf (\"%i\", &amp;number);\n  switch (number)\n  {\n   case 0:\n          NSLog (@\"it is zero\");\n          break;\n   case 1:\n          NSLog (@\"it is one\");\n          break;\n   case 2:\n          NSLog (@\"it is two\");\n          break;\n   case 3:\n          NSLog (@\"it is three\");\n          break;\n   default:\n          NSLog (@\"Integer out of range\");\n          break; \n  }\n  [pool drain];\n  return 0;\n }</code></pre>","a":[{"id":1769728,"option":"it is three","correct":false},{"id":1769729,"option":"it is two","correct":true},{"id":1769730,"option":"Integer out of range","correct":false},{"id":1769731,"option":"it is zero","correct":false}]},{"q":"<p>You have been asked to write an Objective C code to check whether a given number is a prime or not. An optimum solution is to iterate through all numbers from 2 to and for every number check if it divides d. If we get any number that divides, we return false. Mention the different types of operators that you have to use in your code.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#import\nint main(int argc, const char * argv[])\n{\n  @autoreleasepool\n  {\n   int p, d;\n   BOOL isPrime;\n   for (p = 2; p &lt;= 50; p++)\n   {\n    isPrime = true;\n    for (d = 2; d &lt; p; d++)\n    {\n     if (p % d == 0)\n     isPrime = false;\n    }\n    if (isPrime == true)\n    NSLog(@\"%i\", p);\n    }\n   return 0;\n}</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p>1.&nbsp;Arithmetic Operator<br>\n&nbsp; &nbsp; Relational Operator<br>\n&nbsp; &nbsp; Logical Operator</p>\n\n<p>2.&nbsp;Arithmetic Operator<br>\n&nbsp; &nbsp; Relational Operator<br>\n&nbsp; &nbsp; Assignment Operator</p>\n\n<p>3.&nbsp;Arithmetic Operator<br>\n&nbsp; &nbsp; Relational Operator<br>\n&nbsp; &nbsp; Bitwise Operator</p>\n\n<p>4.&nbsp;Arithmetic Operator<br>\n&nbsp; &nbsp; Bitwise Operator<br>\n&nbsp; &nbsp; Logical Operator</p>","a":[{"id":1769724,"option":"1","correct":false},{"id":1769725,"option":"2","correct":true},{"id":1769726,"option":"3","correct":false},{"id":1769727,"option":"4","correct":false}]},{"q":"<p>You have been given a sample code where it uses conditional statements to achieve a particular array as a result. What output would you expect for the following input?<br>\n<br>\n<em>Input: 64, 34, 25, 12, 22, 11, 90</em></p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#import\n#include\nint main()\n{\n -(NSArray *)arrayBubbleSort:(NSArray *)targetArray\n{\n  NSMutableArray *resultArray = [targetArray mutableCopy];\n  for (int s = 0; s &lt; resultArray.count; s++)\n  {\n   for (int e = 0; e&lt; resultArray.count; e++)\n    {\n     if ([resultArray[s] intValue] &lt; [resultArray[e] intValue])\n     {\n      [resultArray exchangeObjectAtIndex:k withObjectAtIndex:l];\n     }\n    }\n   }\n return resultArray;\n}\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1769720,"option":"11 12 25 22 34 64 90","correct":false},{"id":1769721,"option":"11 12 22 34 24 64 90 ","correct":false},{"id":1769722,"option":"11 12 22 25 34 64 90","correct":true},{"id":1769723,"option":"90 64 34 25 22 12 11","correct":false}]},{"q":"<p>You have been given a code to work with files that contain images. The code isn't getting compiled . You have to recognize the error and fix the bug in the following code. What is the reason the following code is not being compiled correctly?</p>\n\n<pre class=\"prettyprint\"><code>#import\n#include\nint main(int argc, const char * argv[]){\n@autoreleasepool{\nif (_imageView,image==NULL)\n{\n  NSString *files = @\"NOFILE\";\n}\nelse\n{\n  NSString *files= @\"FILESET\";\n}\nNSLog(@\"%@\",files);\nreturn 0;\n}\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1769716,"option":"Syntax error","correct":false},{"id":1769717,"option":"isFileSet cant be accessed outside of if-else loop","correct":true},{"id":1769718,"option":"The given file cant be accessed in the loop","correct":false},{"id":1769719,"option":"Infinite loop leading to compilation error.","correct":false}]},{"q":"<p>What is the output to the following code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#import\n#include\n#include\nstd::iostream &amp;operator&lt;&lt;(std::ostream &amp;os, NSString *s) \n{\n os &lt;&lt; [s UTF8String];\n return os;\n}\nint main(int argc, const char * argv[])\n{\n @autoreleasepool \n{\n  int a = 20;\n  int b = 10;\n  int c = 15;\n  int d = 5;\n  int e;\n  e = (a + b) * c / d;\n  NSLog(@\"The value of e is %d\");\n}\n  return 0;\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1769712,"option":"The value of e is 90","correct":true},{"id":1769713,"option":"The value of e is 35","correct":false},{"id":1769714,"option":"The value of e is 40","correct":false},{"id":1769715,"option":"The value of 65","correct":false}]},{"q":"<p>Consider the code-snippet given alongside. The following Objective C code checks whether the given string is empty or not. But this code is unsuccessful while executing. What should be changed/added in the given code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#import\nint main() {\nNSString *String = @\"Hello!\";\nif ([String length] == 0)\n  //NSLog(@\"This is an empty string\");\nelse\n //NSLog(@\"This is not an empty string.\");\n}</code></pre>","a":[{"id":1769708,"option":"{} curly braces needs to added in conditional statements.","correct":true},{"id":1769709,"option":"Error in the initialization of a string.","correct":false},{"id":1769710,"option":"Syntax error","correct":false},{"id":1769711,"option":"Compilation error","correct":false}]},{"q":"<p>You have executed the following C code to check whether the two integers are equal or not. If they are equal you use an if-else statement to print the same. You need to ensure the given code executes correctly for the input given but the fifth line is producing an error. What should be changed/added in the below code to make it work?</p>\n\n<pre class=\"prettyprint\"><code>#import\nint main() {\nNSInteger int1 = 13;\nNSInteger int2 = 6;\nif (int1 = int2)\n{\n  NSLog(@\"Integers are equal.\");\n} \nelse \n{\n  NSLog(@\"Integers are not equal.\");\n}\n}</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p>1.&nbsp;The code should use comparison operators(==).<br>\n&nbsp; &nbsp; So line 7 should be rectified as &nbsp;if(int1 == int2)</p>\n\n<p>2.&nbsp;The code should initialize int1 and int2 &nbsp;properly</p>\n\n<p>3.&nbsp;The code is expected to have ; at the end of the statement</p>\n\n<p>4.&nbsp;The code has unnecessary use of curly braces</p>","a":[{"id":1769704,"option":"1","correct":true},{"id":1769705,"option":"2","correct":false},{"id":1769706,"option":"3","correct":false},{"id":1769707,"option":"4","correct":false}]},{"q":"<p>You have created an array and later you were given a task to reverse it. You have to execute the objective C code by using conditional statements that are provided in the code. You have to use a built-in function to reverse the array.<br>\n&nbsp;&nbsp;&nbsp;&nbsp;<br>\nSelect the correct code which fulfills the task.</p>\n\n<p><strong>Options</strong></p>\n\n<p>1.&nbsp;</p>\n\n<pre class=\"prettyprint\"><code>#import &lt;Foundation/Foundation.h&gt;\nint main() {\n@implementation NSMutableArray (Reverse)\n- (void)reverse {\n if ([self count] &lt;= 1)\n  return;\n NSUInteger s = 0;\n NSUInteger p = [self count] - 1;\n while (s &lt; p) {\n  [self reverseObjectAtIndex:iwithObjectAtIndex:j];\n   s++;\n   p--;\n }\n}\n@end\n}</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>#import &lt;Foundation/Foundation.h&gt;\nint main() {\n@implementation NSMutableArray (Reverse)\n- (void)reverse {\n if ([self count] &lt;= 1)\n  return;\n NSUInteger s = 0;\n NSUInteger p = [self count] - 1;\n while (s &lt; p) {\n  [self exchangeObjectAtIndex:i\n   withObjectAtIndex:j];\n   s++;\n   p--;\n }\n}\n@end\n}</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>[self alterObjectAtIndex:i withObjectAtIndex:j];\n#import &lt;Foundation/Foundation.h&gt;\nint main() {\n@implementation NSMutableArray (Reverse)\n- (void)reverse {\n    if ([self count] &lt;= 1)\n        return;\n    NSUInteger s = 0;\n    NSUInteger p = [self count] - 1;\n    while (s &lt; p) {\n     [self alterObjectAtIndex:i withObjectAtIndex:j];\n        s++;\n        p--;\n    }\n}\n@end\n}</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>#import &lt;Foundation/Foundation.h&gt;\nint main() {\n@implementation NSMutableArray (Reverse)\n- (void)reverse {\n    if ([self count] &lt;= 1)\n        return;\n    NSUInteger s = 0;\n    NSUInteger p = [self count] - 1;\n    while (s &lt; p) {\n    [self converseObjectAtIndex:i withObjectAtIndex:j];\n        s++;\n        p--;\n    }\n}\n@end\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1769700,"option":"1","correct":false},{"id":1769701,"option":"2","correct":true},{"id":1769702,"option":"3","correct":false},{"id":1769703,"option":"4","correct":false}]},{"q":"<p>What is the output to the following code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#import\nint main (int argc, const char * argv[])\n{\n  NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init];\n  int i;\n  for( i=0;i&lt;4;i++) {\n   NSLog (@\"%@ objective\");\n  }\n   [pool drain];\n return 0;\n}</code></pre>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>","a":[{"id":1769696,"option":"\"%@\" throws an error in line 7 ","correct":true},{"id":1769697,"option":"error at line 4","correct":false},{"id":1769698,"option":"no error","correct":false},{"id":1769699,"option":"objective","correct":false}]},{"q":"<p>You have been asked to create an object and you need to check the ownership and claim it. You have to use the given three methods. Select the correct methods which fulfill the function of the given three methods where you know if you can own the object</p>\n\n<ul>\n\t<li>alloc - create an object and claim ownership of it.</li>\n\t<li>copy-copy object and claim ownership of it</li>\n\t<li>retain- claim ownership of the existing object</li>\n</ul>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>SomeClass* obj=[[ SomeClass alloc] init];\nSomeClass* obj=[[ SomeClass copy] ;\nSomeClass* obj=[[ SomeClass new] ;</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>SomeClass* obj=[[ SomeClass alloc] init];\nSomeClass* obj=[[ SomeClass copy] ;\nSomeClass* obj=[[ SomeClass retain] ;</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>Syntax error</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>SomeClass* obj=[[ SomeClass alloc] init];\nSomeClass* obj=[[ SomeClass copy] ;\nSomeClass* obj=[[ SomeClass renew] ;</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1769692,"option":"1","correct":true},{"id":1769693,"option":"2","correct":false},{"id":1769694,"option":"3","correct":false},{"id":1769695,"option":"4","correct":false}]},{"q":"<p>You have to write a code that implements a certain task implementation whereby it inserts the correct memory management method at the time of compilation. Select the most appropriate option which describes how the system implements the same reference counting system in the given code.&nbsp;</p>\n\n<pre class=\"prettyprint\"><code>(void)contrived \n{\n  Person *person = [[Person alloc] init];\n  [person setFirstName:@\"objective\"];\n  [person setLastName:@\"C\"];\n  [person setYearOfBirth:[[NSNumber alloc] initWithInteger:2002]];\n  NSLog(@\"person: %@\", person);\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1769688,"option":"Automatic Reference Counting makes sure that  the Person and the NSNumber objects are leaked.","correct":false},{"id":1769689,"option":"Automatic Reference Counting makes sure it retains the information about person and NSNumber","correct":false},{"id":1769690,"option":"Automatic Reference Counting  makes sure that neither the Person nor the NSNumber objects are leaked.","correct":true},{"id":1769691,"option":"Automatic Reference Counting  makes sure it copies the information about person and NSNumber","correct":false}]},{"q":"<p>What is the output to the following code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#import\n@interface Adder : NSObject {\n            NSInteger t; }\n- (id)initWithInitialNumber:(NSInteger)initialNumber;\n- (void)addNumber:(NSInteger)newNumber;\n- (NSInteger)total;\n@end\n@implementation Adder\n-(id)initWithInitialNumber:(NSInteger)initial {\n  t = initial;\n  return self;}\n- (void)addNumber:(NSInteger)n {\n  t= t + n;}\n- (NSInteger)total {\n  return t;}\n@end\nint main(int argc, const char * argv[]) {\n   NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init];\n   Adder *add = [[Adder alloc]initWithInitialNumber:277];\n   [add addNumber:6];\n   [add addNumber:99];\n   NSLog(@\"The total is %ld\",[add total]);\n   [pool drain];\n   return 0;\n}</code></pre>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>","a":[{"id":1769680,"option":"The total is 382","correct":true},{"id":1769681,"option":"The total is 104","correct":false},{"id":1769682,"option":"The total is 6","correct":false},{"id":1769683,"option":"No error","correct":false}]},{"q":"<p>What is the output to the following code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#import\n@interface SampleClass:NSObject\n- (void)sampleMethod;\n@end\n@implementation SampleClass\n- (void)sampleMethod {\n            NSLog(@\"objectiveC \\n\");\n}\n- (void)dealloc {\n        NSLog(@\"Object deallocated\");\n        [super dealloc];\n}\n@end\nint main() {\n SampleClass *sampleClass = [[SampleClass alloc]init];\n [sampleClass sampleMethod];\n  NSLog(@\"Retain Count after initial allocation: %d\",\n [sampleClass retainCount]);\n [sampleClass retain];\n  sampleClass = nil;\nreturn 0;\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1769676,"option":"objectiveC\r\nRetain Count after initial allocation: 2","correct":false},{"id":1769677,"option":"objectiveC\r\nRetain Count after initial allocation: 1","correct":true},{"id":1769678,"option":"Retain Count after initial allocation: 1\r\nobjectiveC","correct":false},{"id":1769679,"option":"No error","correct":false}]},{"q":"<p>What is the output to the following code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#import\n@interface SampleClass:NSObject\n-(NSString *) \ngetEmployeeNameForID:(int) id withError:(NSError **)errorPtr;\n@end\n@implementation SampleClass\n-(NSString *) getEmployeeNameForID:(int) id withError:(NSError **)errorPtr {\nif(id == 1) \n{\n return @\"Employee Test Name\";\n}\n@end\nint main() \n{\n  NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init];\n  SampleClass *sampleClass = [[SampleClass alloc]init];\n  NSError *error = nil;\n  NSString *name1 = [sampleClass getEmployeeNameForID:1 withError:&amp;error];\n  if(error) {\n   NSLog(@\"Error finding Name1: %@\",error);\n }\n else {\n  NSLog(@\"Name1: %@\",name1); }\n   error = nil;\n  SString *name2 = [sampleClass getEmployeeNameForID:2 withError:&amp;error];\n   if(error) {\n   NSLog(@\"Error finding Name2: %@\",error);\n    }{\nelse{\n NLog(@\"Name2: %@\",name2);\n }\n[pool drain];\nreturn 0;\n}</code></pre>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>","a":[{"id":1769672,"option":"Name1: Employee Test Name\r\n Error finding Name2: Unable to complete the process","correct":false},{"id":1769673,"option":"syntax error","correct":true},{"id":1769674,"option":"no  output","correct":false},{"id":1769675,"option":"compilation error","correct":false}]},{"q":"<p>What is the output to the following code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#import\n@interface Box:NSObject {\n //Instance variables\n double length;\n double breadth;\n}\n@property(nonatomic, readwrite) double height;\n@end\nint main() {\n  NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init];\n  double volume = 0.0;\n  box1.breadth = 5.0;\n  NSLog(@\"breadth of the box : %f\", breadth);\n  return 0;\n}</code></pre>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>","a":[{"id":1769668,"option":"breadth of the box=5.0","correct":false},{"id":1769669,"option":"breadth of the box=0.0","correct":false},{"id":1769670,"option":"error","correct":true},{"id":1769671,"option":"no output","correct":false}]},{"q":"<p>What is the output to the following code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#import\n@interface SampleClass:NSObject\n- (void)sampleMethod;\n@end\n@implementation SampleClass\n- (void)sampleMethod {\n NSLog(@\"objectiveC! \\n\");\n}\n- (void)dealloc {\n NSLog(@\"Object deallocated\");\n}\n@end\nint main() {\n  @autoreleasepool {\n   SampleClass *sampleClass = [[SampleClass alloc]init];\n   [sampleClass sampleMethod];\n   sampleClass = nil;\n  }\n return 0;\n}</code></pre>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>","a":[{"id":1769664,"option":"Object deallocated","correct":false},{"id":1769665,"option":"objectiveC","correct":false},{"id":1769666,"option":"objectiveC\r\nObject deallocated","correct":true},{"id":1769667,"option":"Syntax error","correct":false}]},{"q":"<p>You have to create a code and have to make sure that the items created in the code refer to detection and resolution of errors so that the end-user of your code uses it correctly.<br>\nFind the correct option from the following options which will better explain the implementation of the given particular code.</p>\n\n<pre class=\"prettyprint\"><code>NSString *domain = @\"com.MyCompany.MyApplication.ErrorDomain\";\nNSString *desc = NSLocalizedString(@\"Unable to complete the process\", @\"\");\nNSDictionary *userInfo = @{ NSLocalizedDescriptionKey : desc };\nNSError *error = [NSError errorWithDomain:domain code:-101 userInfo:userInfo];</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1769660,"option":"It shows how to create a custom error","correct":true},{"id":1769661,"option":"It shows how to remove a custom error","correct":false},{"id":1769662,"option":"It shows how to prevent a custom error","correct":false},{"id":1769663,"option":"It shows how to implement a custom error","correct":false}]},{"q":"<p>What is the output to the following code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#import\nconst int maximum= 3;\nint main () {\n int a[] = {10, 100, 200};\n int i, *pointer;\n pointer= a;\n i = 0;\n while ( ptr &lt;= &amp;a[maximum - 1] ) {\n  NSLog(@\"Address of a[%d] = %x\\n\", i, pointer );\n  NSLog(@\"Value of a[%d] = %d\\n\", i, *pointer );\n  pointer++;\n  i++;\n }\nreturn 0;\n}</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>Address of a[0] = b65123a0\nValue of a[0] = 10\n Address of a[1] =b65123a4\nValue of a[1] = 100\nAddress of a[2] = b65123a8\n Value of a[2] = 200</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>syntax error</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>Address of a[0] = b65123a0 \nValue of a[0] = 20\n Address of a[1] =b65123a4 \nValue of a[1] = 10 \nAddress of a[2] = b65123a8 \nValue of a[2] = 200</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1769656,"option":"1","correct":true},{"id":1769657,"option":"2","correct":false},{"id":1769658,"option":"3","correct":false},{"id":1769659,"option":"Compilation error","correct":false}]}]
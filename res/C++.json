[{"q":"<p>What is the output of the following C++ Code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\n\nclass HackClass1 \n{\n  public:\n    void hackfunc() \n    {\n      cout &lt;&lt; \"I love C++\" ;\n    }\n};\n\n\nclass HackClass2 : public HackClass1 \n{\n  public:\n    void hackfunc() \n    {\n      cout &lt;&lt; \"Hello World!\" ;\n    }\n};\n\nclass HackClass3 : public HackClass1 \n{\n  public:\n    void hackfunc() \n    {\n      cout &lt;&lt; \"Hi HackerEarth!\" ;\n    }\n};\n\nint main() \n{\n  HackClass3 myHackObj;\n  myHackObj.hackfunc();\n  return 0;\n}</code></pre>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>I love C++</code></pre>\n\n\t<p>&nbsp;</p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hello World!</code></pre>\n\n\t<p>&nbsp;</p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hi HackerEarth!</code></pre>\n\n\t<p>&nbsp;</p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>I love C++\nHello World!\nHi HackerEarth!</code></pre>\n\t</li>\n</ol>","a":[{"id":1758561,"option":"1","correct":false},{"id":1758562,"option":"2","correct":false},{"id":1758563,"option":"3","correct":true},{"id":1758564,"option":"4","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt; \nusing namespace std; \nclass hack_base \n{ \n    public: \n        void hack_func1() \n        { \n            cout &lt;&lt; \"One\\n\"; \n            \n        } \n        virtual void hack_func2() \n        { \n            cout &lt;&lt; \"Two\\n\"; \n            \n        } \n        virtual void hack_func3() \n        { \n            cout &lt;&lt; \"Three\\n\"; \n            \n        } \n        virtual void hack_func4() \n        { \n            cout &lt;&lt; \"Four\\n\"; \n            \n        } \n}; \n  \nclass hack_derived : public hack_base \n{ \n    public: \n        void hack_func1() \n        { \n            cout &lt;&lt; \"1\\n\"; \n            \n        } \n        void hack_func2() \n        { \n            cout &lt;&lt; \"2\\n\"; \n        } \n}; \n  \nint main() \n{ \n    hack_base* p; \n    hack_derived obj1; \n    p = &amp;obj1; \n    p-&gt;hack_func1(); \n    p-&gt;hack_func2(); \n    p-&gt;hack_func3(); \n    p-&gt;hack_func4(); \n}</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>1\n2\nThree\nFour</code></pre>\n\n<p>2.&nbsp;</p>\n\n<pre class=\"prettyprint\"><code>1\nTwo\nThree\nFour</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>One\n2\nThree\nFour</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>One\n1\nTwo\n2\nThree\nFour</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1408082,"option":"1","correct":false},{"id":1408083,"option":"2","correct":false},{"id":1408084,"option":"3","correct":true},{"id":1408085,"option":"4","correct":false}]},{"q":"<p>What is the output of the following C++ code</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nstruct HackNode{\nint key;\nHackNode *left, *right;\nHackNode(int val)\n{\n    key=val;\n    left=NULL;\n    right=NULL;\n}\n};\nbool HackPath(HackNode *root,vector&lt;HackNode *&gt;&amp;p1,int n){\n    if(root==NULL)\n        return false;\n    p1.push_back(root);\n    if(root-&gt;key==n)\n        return true;\n    if(HackPath(root-&gt;left,p1,n)||HackPath(root-&gt;right,p1,n))\n        return true;\n    p1.pop_back();\n    return false;   \n}\nHackNode *HackAncestor(HackNode *root,int n1,int n2){\n    vector&lt;HackNode *&gt;Hpath1,Hpath2;\n    if(HackPath(root,Hpath1,n1)==false || HackPath(root,Hpath2,n2)==false)\n        return NULL;\n    for(unsigned int i=0;i&lt;Hpath1.size()-1 &amp;&amp; i&lt;Hpath2.size()-1;i++)\n        if(Hpath1[i+1]!=Hpath2[i+1])\n        return Hpath1[i];\n        return NULL;\n}\nint main()\n{\n    HackNode *root=new HackNode(10);\n    root-&gt;left=new HackNode(20);\n    root-&gt;left-&gt;right=new HackNode(15);\n    root-&gt;right=new HackNode(30);\n    root-&gt;right-&gt;left=new HackNode(40);\n    root-&gt;right-&gt;right=new HackNode(50);\n    root-&gt;right-&gt;right-&gt;right=new HackNode(60);\n    HackNode *ancestor=HackAncestor(root,40,60);\n    cout&lt;&lt;ancestor-&gt;key;\n}</code></pre>\n\n<p> </p>","a":[{"id":1632661,"option":"20","correct":false},{"id":1632662,"option":"10","correct":false},{"id":1632663,"option":"30","correct":true},{"id":1632664,"option":"15","correct":false}]},{"q":"<p>What is the output of the following C++ code</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nstruct HackNode\n{\n    char key;\n    HackNode *left;\n    HackNode *right;\n    HackNode(char val)\n    {\n        key = val;\n        left = NULL;\n        right = NULL;\n    }\n};\nint HackerEarth(HackNode *root)\n{\n    if (root == NULL)\n        return 0;\n    queue&lt;HackNode *&gt; HackQueue;\n    HackQueue.push(root);\n    int Hresult = 0;\n    while (!HackQueue.empty())\n    {\n        int count = HackQueue.size();\n        Hresult = max(Hresult, count);\n        for (int i = 0; i &lt; count; i++)\n        {\n            HackNode *curr = HackQueue.front();\n            HackQueue.pop();\n            if (curr-&gt;left != NULL)\n                HackQueue.push(curr-&gt;left);\n            if (curr-&gt;right != NULL)\n                HackQueue.push(curr-&gt;right);\n        }\n    }\n    return Hresult;\n}\nint main()\n{\n    HackNode *root = new HackNode(0);\n    root-&gt;left = new HackNode(1);\n    root-&gt;left-&gt;left = new HackNode(6);\n    root-&gt;left-&gt;right = new HackNode(3);\n    root-&gt;right = new HackNode(4);\n    root-&gt;right-&gt;left = new HackNode(2);\n    root-&gt;right-&gt;right = new HackNode(5);\n    root-&gt;right-&gt;right-&gt;right = new HackNode(9);\n    root-&gt;right-&gt;right-&gt;right-&gt;left = new HackNode(8);\n    root-&gt;right-&gt;right-&gt;right-&gt;right = new HackNode(7);\n    cout &lt;&lt; HackerEarth(root);\n}</code></pre>\n\n<p> </p>","a":[{"id":1632569,"option":"2","correct":false},{"id":1632570,"option":"1","correct":false},{"id":1632571,"option":"4","correct":true},{"id":1632572,"option":"3","correct":false}]},{"q":"<p>What is the output of the following C++ code</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nstruct HackNode\n{\n    char key;\n    HackNode *left;\n    HackNode *right;\n    HackNode(char val)\n    {\n        key = val;\n        left = NULL;\n        right = NULL;\n    }\n};\nvoid HackPrint(HackNode *root){\n    if (root == NULL)\n        return;\n    stack&lt;HackNode *&gt; HackStack;\n    HackNode *curr = root;\n    while (curr != NULL || HackStack.empty() == false){\n        while (curr != NULL){\n            cout &lt;&lt; (int)(curr-&gt;key) &lt;&lt; \" \";\n            if (curr-&gt;right != NULL)\n                HackStack.push(curr-&gt;right);\n            curr = curr-&gt;left;\n        }\n        if (HackStack.empty() == false){\n            curr = HackStack.top();\n            HackStack.pop();\n        }\n    }\n}\nint main()\n{\n    HackNode *root = new HackNode('q');\n    root-&gt;left = new HackNode('w');\n    root-&gt;right = new HackNode('e');\n    root-&gt;right-&gt;left = new HackNode('r');\n    root-&gt;right-&gt;right = new HackNode('t');\n    root-&gt;right-&gt;right-&gt;right = new HackNode('y');\n    root-&gt;right-&gt;right-&gt;right-&gt;left = new HackNode('u');\n    root-&gt;right-&gt;right-&gt;right-&gt;right = new HackNode('i');\n    HackPrint(root);\n}</code></pre>\n\n<p><strong>Output</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>119 113 104 101 116 121 117 105</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>113 119 101 114 116 121 117 105</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>119 113 104 101 116 121 117 105</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>113 119 101 104 116 121 117 105</code></pre>","a":[{"id":1632561,"option":"1","correct":false},{"id":1632562,"option":"2","correct":true},{"id":1632563,"option":"3","correct":false},{"id":1632564,"option":"4","correct":false}]},{"q":"<p>What is the output of the following C++ code</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nstruct HackNode{\n    int value;\n    struct HackNode *left, *right;\n};\nHackNode *newHackNode(int value){\n    HackNode *hack = new HackNode;\n    hack-&gt;value = value;\n    hack-&gt;left = hack-&gt;right = NULL;\n    return hack;\n}\nvoid printHackerTree(HackNode *root, int hd, map&lt;int, int&gt;&amp;HackMap){\n    if(root==NULL)\n    return;\n    printHackerTree(root-&gt;left, hd-1, HackMap);\n    HackMap[hd]+=root-&gt;value;\n    printHackerTree(root-&gt;right, hd+1, HackMap);\n}\nint main(){\n    HackNode *root = newHackNode(100);\n    root-&gt;left = newHackNode(80);\n    root-&gt;right = newHackNode(90);\n    root-&gt;left-&gt;left = newHackNode(70);\n    root-&gt;left-&gt;right = newHackNode(60);\n    root-&gt;left-&gt;left = newHackNode(50);\n    root-&gt;left-&gt;left-&gt;left = newHackNode(30);\n    root-&gt;left-&gt;right-&gt;right = newHackNode(40);\n    root-&gt;left-&gt;right-&gt;right-&gt;right = newHackNode(60);\n    map&lt;int, int&gt;HackMap;\n    printHackerTree(root, 0, HackMap);\n    for(auto it:HackMap)\n        cout&lt;&lt;it.second&lt;&lt;\" \";\n}</code></pre>\n\n<p><strong>Output</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>30 50 80 160 130 80</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>40 35 15 30 100 80</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>30 50 80 160 130 60 </code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>40 50 80 160 130 60</code></pre>","a":[{"id":1632253,"option":"1","correct":false},{"id":1632254,"option":"2","correct":false},{"id":1632255,"option":"3","correct":true},{"id":1632256,"option":"4","correct":false}]},{"q":"<p>What is the output of the following C++ code</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nstruct HackNode{\n    int value;\n    struct HackNode *left, *right;\n};\nHackNode *newHackNode(int value){\n    HackNode *hack = new HackNode;\n    hack-&gt;value = value;\n    hack-&gt;left = hack-&gt;right = NULL;\n    return hack;\n}\nvoid printHackerTree(HackNode *root){\n    map&lt;int, int&gt;HackMap;\n    queue&lt;pair&lt;HackNode *, int&gt;&gt;HackQueue;\n    HackQueue.push({root, 0});\n    while(HackQueue.empty()==false){\n        auto hack=HackQueue.front();\n        int hd=hack.second;\n        HackNode *curr=hack.first;\n        if(HackMap.count(hd)==0)\n        HackMap[hd]=curr-&gt;value;\n        if(curr-&gt;left!=NULL)\n        HackQueue.push(make_pair(curr-&gt;left, hd-1));\n        if(curr-&gt;right!=NULL)\n        HackQueue.push(make_pair(curr-&gt;right, hd+1));\n        HackQueue.pop();\n    }\n    for(auto it:HackMap)\n        cout&lt;&lt;it.second&lt;&lt;\" \";\n}\nint main(){\n    HackNode *root = newHackNode(100);\n    root-&gt;left = newHackNode(80);\n    root-&gt;right = newHackNode(90);\n    root-&gt;left-&gt;right = newHackNode(70);\n    root-&gt;right-&gt;left = newHackNode(60);\n    root-&gt;left-&gt;right-&gt;left = newHackNode(50);\n    root-&gt;right-&gt;left-&gt;left = newHackNode(40);\n    root-&gt;left-&gt;right-&gt;left-&gt;left = newHackNode(30);\n    root-&gt;right-&gt;left-&gt;left-&gt;left = newHackNode(20);\n    printHackerTree(root);\n}</code></pre>\n\n<p><strong>Output</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>20 80 100 90</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>30 80 100 90</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>30 50 100 90</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>20 50 100 90</code></pre>","a":[{"id":1632105,"option":"1","correct":false},{"id":1632106,"option":"2","correct":true},{"id":1632107,"option":"3","correct":false},{"id":1632108,"option":"4","correct":false}]},{"q":"<p>What is the output of the following C++ code.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nstruct HackNode{\n    char value;\n    struct HackNode *left, *right;\n};\nHackNode *newHackNode(char value){\n    HackNode *hack = new HackNode;\n    hack-&gt;value = value;\n    hack-&gt;left = hack-&gt;right = NULL;\n    return hack;\n}\nvoid printHackerTree(HackNode *root){\n    map&lt;int, char&gt;HackMap;\n    queue&lt;pair&lt;HackNode *, int&gt;&gt;HackQueue;\n    HackQueue.push({root, 0});\n    while(HackQueue.empty()==false){\n        auto hack=HackQueue.front();\n        int hd=hack.second;\n        HackNode *curr=hack.first;\n        if(HackMap.count(hd)==0)\n        HackMap[hd]=curr-&gt;value;\n        if(curr-&gt;left!=NULL)\n        HackQueue.push(make_pair(curr-&gt;left, hd-1));\n        if(curr-&gt;right!=NULL)\n        HackQueue.push(make_pair(curr-&gt;right, hd+1));\n        HackQueue.pop();\n    }\n    for(auto it:HackMap)\n        cout&lt;&lt;it.second&lt;&lt;\" \";\n}\nint main(){\n    HackNode *root = newHackNode('A');\n    root-&gt;left = newHackNode('B');\n    root-&gt;right = newHackNode('C');\n    root-&gt;left-&gt;left = newHackNode('D');\n    root-&gt;left-&gt;right = newHackNode('E');\n    root-&gt;right-&gt;left = newHackNode('F');\n    root-&gt;right-&gt;right = newHackNode('G');\n    printHackerTree(root);\n}</code></pre>\n\n<p><strong>Output</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>D B F C G </code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>D C F B G</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>D C A B G</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>D B A C G</code></pre>","a":[{"id":1632101,"option":"1","correct":false},{"id":1632102,"option":"2","correct":false},{"id":1632103,"option":"3","correct":false},{"id":1632104,"option":"4","correct":true}]},{"q":"<p>What is the output of the following C++ code.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nstruct HackNode\n{\n    char key;\n    HackNode *left;\n    HackNode *right;\n    HackNode(char val)\n    {\n        key = val;\n        left = NULL;\n        right = NULL;\n    }\n};\nvoid PrintHackerEarth(HackNode *root)\n{\n    if (root == NULL)\n        return;\n    queue&lt;HackNode *&gt; HackQueue;\n    HackQueue.push(root);\n    HackQueue.push(NULL);\n    while (HackQueue.size() &gt; 1)\n    {\n        HackNode *hack = HackQueue.front();\n        HackQueue.pop();\n        if (hack == NULL)\n        {\n            cout &lt;&lt; endl;\n            HackQueue.push(NULL);\n            continue;\n        }\n        cout &lt;&lt; hack-&gt;key &lt;&lt; \" \";\n        if (hack-&gt;left != NULL)\n            HackQueue.push(hack-&gt;left);\n        if (hack-&gt;right != NULL)\n            HackQueue.push(hack-&gt;right);\n    }\n}\nint main()\n{\n    HackNode *root = new HackNode('!');\n    root-&gt;left = new HackNode('@');\n    root-&gt;right = new HackNode('#');\n    root-&gt;left-&gt;left = new HackNode('$');\n    root-&gt;left-&gt;right = new HackNode('%');\n    root-&gt;right-&gt;right = new HackNode('^');\n    root-&gt;right-&gt;right-&gt;left = new HackNode('&amp;');\n    root-&gt;right-&gt;right-&gt;right = new HackNode('(');\n    PrintHackerEarth(root);\n}</code></pre>\n\n<p><strong>Output</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>!\n@ #\n$ % ^\n&amp; (</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>! \n@ $\n% # ^\n&amp; (\n</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>!\n# ^\n&amp; ( @\n$ %</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>None of these</code></pre>","a":[{"id":1631777,"option":"1","correct":true},{"id":1631778,"option":"2","correct":false},{"id":1631779,"option":"3","correct":false},{"id":1631780,"option":"4","correct":false}]},{"q":"<p>What is the output of the following C++ code.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nstruct HackNode{\n    char value;\n    struct HackNode *left, *right;\n};\nHackNode *newHackNode(char value){\n    HackNode *hack = new HackNode;\n    hack-&gt;value = value;\n    hack-&gt;left = hack-&gt;right = NULL;\n    return hack;\n}\nvoid printHackerTree(HackNode *root){\n    map&lt;int, char&gt;HackMap;\n    queue&lt;pair&lt;HackNode *, int&gt;&gt;HackQueue;\n    HackQueue.push({root, 0});\n    while(HackQueue.empty()==false){\n        auto hack=HackQueue.front();\n        int hd=hack.second;\n        HackNode *curr=hack.first;\n        HackMap[hd]=curr-&gt;value;\n        if(curr-&gt;left!=NULL)\n        HackQueue.push(make_pair(curr-&gt;left, hd-1));\n        if(curr-&gt;right!=NULL)\n        HackQueue.push(make_pair(curr-&gt;right, hd+1));\n        HackQueue.pop();\n    }\n    for(auto it:HackMap)\n        cout&lt;&lt;it.second&lt;&lt;\" \";\n}\nint main(){\n    HackNode *root = newHackNode('A');\n    root-&gt;left = newHackNode('B');\n    root-&gt;right = newHackNode('C');\n    root-&gt;left-&gt;left = newHackNode('D');\n    root-&gt;left-&gt;right = newHackNode('E');\n    root-&gt;right-&gt;left = newHackNode('F');\n    root-&gt;right-&gt;right = newHackNode('G');\n    printHackerTree(root);\n}</code></pre>\n\n<p><strong>Output</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>D B F C G </code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>D B E C G</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>D C F B G</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>D B A C G</code></pre>\n\n<p> </p>","a":[{"id":1631769,"option":"1","correct":true},{"id":1631770,"option":"2","correct":false},{"id":1631771,"option":"3","correct":false},{"id":1631772,"option":"4","correct":false}]},{"q":"<p>What is the output of the following C++ code.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nstruct HackNode\n{\n    int key;\n    HackNode *left;\n    HackNode *right;\n    HackNode(int val)\n{\n        key = val;\n        left = NULL;\n        right = NULL;\n    }\n};\nvoid PrintHacker(HackNode *root, int k)\n{\nif (root == NULL)\n        return;\n    if (k == 0)\n        cout &lt;&lt; root-&gt;key &lt;&lt; \" \";\n    else\n    {\n        PrintHacker(root-&gt;left, k - 2);\n        PrintHacker(root-&gt;right, k - 1);\n    }\n}\nint main()\n{\n    HackNode *root = new HackNode(10);\n    root-&gt;left = new HackNode(5);\n    root-&gt;right = new HackNode(25);\n    root-&gt;left-&gt;left = new HackNode(2);\n    root-&gt;left-&gt;right = new HackNode(8);\n    root-&gt;right-&gt;right = new HackNode(40);\n    root-&gt;right-&gt;right-&gt;right = new HackNode(45);\n    PrintHacker(root, 2);\n}</code></pre>\n\n<p><strong>Output:</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>8 40</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>8 25</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>5 40</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>5 25</code></pre>","a":[{"id":1631773,"option":"1","correct":false},{"id":1631774,"option":"2","correct":false},{"id":1631775,"option":"3","correct":true},{"id":1631776,"option":"4","correct":false}]},{"q":"<p>What is the output of the following C++ code.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nstruct HackNode{\n    int value;\n    struct HackNode *left, *right;\n};\nvector&lt;int&gt; HackTree(HackNode *root){\n    queue&lt;HackNode *&gt; hackQueue;\n    vector&lt;int&gt; vec;\n    if (root == NULL)\n        return vec;\n    hackQueue.push(root);\n    while (hackQueue.empty() == false){\n        HackNode *hack = hackQueue.front();\n        vec.push_back(hack-&gt;value);\n        hackQueue.pop();\n\n        if (hack-&gt;left != NULL)\n            hackQueue.push(hack-&gt;left);\n\n        if (hack-&gt;right != NULL)\n            hackQueue.push(hack-&gt;right);\n    }\n    return vec;\n}\nint hackVal(vector&lt;int&gt; result, int n){\n    vector&lt;int&gt; vec;\n    while (n &gt; 3){\n        int hackVal = floor(result[n - 1] * result[n - 2] /result[n - 3]);\n        vec.push_back(hackVal);\n        vec[0] += result[n - 4];\n        n = n - 4;\n    }\n    if (n == 3)\n        vec.push_back(result[2] * result[1] / result[0]);\n    if (n == 2)\n        vec.push_back(result[1] * result[0]);\n    if (n == 1)\n        vec.push_back(result[0]);\n    int ans = vec[0];\n    for (int i = 1; i &lt; vec.size(); i++)\n        ans -= vec[i];\n    return ans;\n}\nHackNode *newHackNode(int value){\n    HackNode *hack = new HackNode;\n    hack-&gt;value = value;\n    hack-&gt;left = hack-&gt;right = NULL;\n    return hack;\n}\nint main()\n{   HackNode *root = newHackNode(1);\n    root-&gt;left = newHackNode(2);\n    root-&gt;right = newHackNode(3);\n    root-&gt;left-&gt;left = newHackNode(4);\n    root-&gt;left-&gt;right = newHackNode(5);\n    root-&gt;right-&gt;left = newHackNode(7);\n    root-&gt;right-&gt;right = newHackNode(8);\n    vector&lt;int&gt; result;\n    result = HackTree(root);\n    int n = result.size();\n    int answer = hackVal(result, n);\n    cout &lt;&lt; answer &lt;&lt; \"\\n\";\n    return 0;\n}</code></pre>\n\n<p> </p>","a":[{"id":1631141,"option":"6","correct":false},{"id":1631142,"option":"5","correct":false},{"id":1631143,"option":"9","correct":true},{"id":1631144,"option":"12","correct":false}]},{"q":"<p>What will be the output for the following C++ code?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass test\n{\n\tint num[5];\n\npublic:\n\n\ttest(int p, int q, int r, int s, int t)\n\t\t: num{ p, q, r, t} {};\n\t\t\n\tvoid modify()\n\t{\n\t\t\n\t\tfor (int j = 0; j &lt; 4; j++)\n\t\t\t*(num+j)+=2;\n\t}\n\n\tvoid display()\n\t{\n\t\t\n\t\tfor (int j = 0; j &lt; 4; j++)\n\t\t\tcout &lt;&lt; *(num + j) &lt;&lt;\"\\n\";\n\t}\n};\n\n\nint main()\n{\n\ttest t(8, 13, 15, 6, 1);\n\tt.modify();\n\tt.display();\n\treturn 0;\n}</code></pre>\n\n<p> </p>\n\n<p> </p>\n\n<p><strong>Output:</strong></p>\n\n<p>1. </p>\n\n<pre class=\"prettyprint\"><code>10\n15\n17\n3</code></pre>\n\n<p> </p>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>8\n13\n15\n1</code></pre>\n\n<p> </p>\n\n<p>3. </p>\n\n<pre class=\"prettyprint\"><code>10\n15\n17\n8</code></pre>\n\n<p> </p>","a":[{"id":1488700,"option":"1","correct":true},{"id":1488701,"option":"2","correct":false},{"id":1488702,"option":"3","correct":false},{"id":1488703,"option":"none of these","correct":false}]},{"q":"<p>What will be the output for the following C++ code?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass test \n{\t\n\tint a;\n\tint b;\n\t\t\n\tpublic:\n\ttest(int A, int B)\n\t: a(B)\n\t, b(A)\n\t{\n\t\t    \n\t}\n\t\n\tvoid modify()\n\t{\n\t    int *t = &amp;a;\n\t    int *s = &amp;b;\n\t    \n\t    a = a + *s;\n\t    b = *t - b;\n\t}\n\t\n\tvoid display() \n\t{ \n\t    cout &lt;&lt; a &lt;&lt; \" \" &lt;&lt; b; \n\t    \n\t}\n};\n\ntest func(int a, int b)\n{\n\t\n\treturn { a, b };\n}\n\nint main()\n{\n\ttest t = func(21, 22);\n\tt.modify();\n\tt.display();\n\treturn 0;\n}</code></pre>\n\n<p> </p>\n\n<p> </p>\n\n<p><strong>Output</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>43 22</code></pre>\n\n<p><br>\n2.</p>\n\n<pre class=\"prettyprint\"><code>21 22\n</code></pre>\n\n<p><br>\n3.</p>\n\n<pre class=\"prettyprint\"><code>22 43</code></pre>\n\n<p> </p>","a":[{"id":1488755,"option":"1","correct":true},{"id":1488756,"option":"2","correct":false},{"id":1488757,"option":"3","correct":false},{"id":1488758,"option":"None of these","correct":false}]},{"q":"<p>Which of the following statements is correct if you execute the following C++ code?<br>\n<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\n \ntemplate &lt;typename T&gt;\nstruct func \n{\n   void x() \n   { \n       cout &lt;&lt; \"hi\" &lt;&lt; endl; \n       \n   }\n   void y() \n   { \n       cout &lt;&lt; \"hello\" &lt;&lt; endl; \n       \n   }\n};\n\ntemplate &lt;&gt;\nvoid func&lt;int&gt;::x()\n{ \n   cout &lt;&lt; \"hello world\" &lt;&lt; endl; \n}\nint main() \n{\n   func&lt;int&gt; t;\n   t.x();         \n   t.y();         \n}</code></pre>\n\n<p> </p>\n\n<p><strong>Statements:</strong><br>\n </p>\n\n<p>1. The code produces the following output-</p>\n\n<pre class=\"prettyprint\"><code>hi\nhello</code></pre>\n\n<p> </p>\n\n<p>2. The code produces the following output-</p>\n\n<pre class=\"prettyprint\"><code>hello world\nhello</code></pre>\n\n<p> <br>\n<br>\n3. The code produces the following output-</p>\n\n<pre class=\"prettyprint\"><code>hello world\nhi   \nhello</code></pre>\n\n<p><br>\n<br>\n4. The code does not give any runtime error</p>","a":[{"id":1488439,"option":"1 and 4","correct":false},{"id":1488440,"option":"2 and 4","correct":true},{"id":1488441,"option":"3 and 4","correct":false},{"id":1488442,"option":"None of these","correct":false}]},{"q":"<p>What will be the output for the following C++ code?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass F\n{\n    \n};\n  \nclass S : public F\n{\n    \n};\n\ntemplate&lt;typename X, typename Y&gt;\nclass check\n{\n    class F { };\n    static F find( ... ); \n    \n    class T { F f[2]; };\n    static T find( Y* );\n    \n    public:\n    enum \n    { \n        m = sizeof(T) == sizeof(find(static_cast&lt;X*&gt;(0)))\n        \n    };\n    \n};\n\ntemplate &lt;class Q, class R&gt; \n\nbool checkIf() \n{\n    return check&lt;Q, R&gt;::m;\n}\n\n\nint main()\n{\n    \n    check &lt;class F, class S&gt; t (F,S);\n    cout &lt;&lt; checkIf&lt;class F, class S&gt;() &lt;&lt;endl;\n    return 0;\n    \n}</code></pre>\n\n<p> </p>","a":[{"id":1488095,"option":"0","correct":true},{"id":1488096,"option":"1","correct":false},{"id":1488097,"option":"NULL","correct":false},{"id":1488098,"option":"cannot determine the output","correct":false}]},{"q":"<p>What will be the output of the following C++ code if -</p>\n\n<ol>\n\t<li>a=10, b=9 </li>\n\t<li>a=5, b=6    </li>\n\t<li>a=14, b=16  </li>\n\t<li>a=3, b=4  </li>\n</ol>\n\n<p><br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\n\n\nint main()\n{\n    unsigned char a, b;\n    \n    a = a &amp; b;\n    b = b | a;\n    a = a ^ b;\n    b = b&lt;&lt;1;\n    a = a&lt;&lt;1;\n    \n    unsigned  ans = a &amp;  b;\n    \n    cout &lt;&lt; ans ;\n    \n    return 0;\n}</code></pre>\n\n<p> </p>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>1. 2    2. 4    3. 32   4. 8</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>1. 3    2. 6    3. 16   4. 6</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>1. 0    2. 8    3. 4   4. 4</code></pre>\n\n\t<p><br>\n\t </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>1. 2    2. 12    3. 24   4. 2</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1487664,"option":"1","correct":true},{"id":1487665,"option":"2","correct":false},{"id":1487666,"option":"3","correct":false},{"id":1487667,"option":"4","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    int i = 3;\n    int l = i / -2;\n    int k = i % -2;\n    cout &lt;&lt; l &lt;&lt; ' ' &lt;&lt; k;\n    return 0;\n}\n</code></pre>","a":[{"id":147617,"option":"Compilation error","correct":false},{"id":147618,"option":"-1 1","correct":true},{"id":147619,"option":"1 1","correct":false},{"id":147620,"option":"It is implementation defined","correct":false}]},{"q":"<p>In C++, which of the following data types is accepted by the <strong>numeric_limits</strong> function?</p>","a":[{"id":147498,"option":"Character types","correct":false},{"id":147499,"option":"Mixed types","correct":false},{"id":147500,"option":"Arithmetic types","correct":true},{"id":147501,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    double i = 12.0f;\n    cout &lt;&lt; i &lt;&lt; endl;\n    return 0;\n}\n</code></pre>","a":[{"id":132613,"option":"12.0","correct":false},{"id":132614,"option":"12","correct":true},{"id":132615,"option":"12.0f","correct":false},{"id":132616,"option":"None of these","correct":false}]},{"q":"<p>In C++, which of the following statements about <strong>preprocessor directives</strong> is correct?</p>","a":[{"id":157272,"option":"They begin with a hash symbol.","correct":true},{"id":157273,"option":"They are processed by a pre-processor.","correct":false},{"id":157274,"option":"They form an integral part of the code.","correct":false},{"id":157275,"option":"They end with a semicolon.","correct":false}]},{"q":"<p>In C++, which of the following statements is true?</p>","a":[{"id":134099,"option":"An instance cannot be created for an abstract base class","correct":true},{"id":134100,"option":"An instance can be created for an abstract base class","correct":false},{"id":134101,"option":"Instances for abstract base classes do not exist","correct":false},{"id":134102,"option":"None of these","correct":false}]},{"q":"<p>In C++, which of the following is the size of<strong> </strong>the<strong> generic pointer</strong>?</p>","a":[{"id":146360,"option":"2 bits","correct":false},{"id":146361,"option":"4 bits","correct":true},{"id":146362,"option":"8 bits","correct":false},{"id":280717,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\nvoid fun(int a) \n{ \n\tcout&lt;&lt;a;\n} \n\nint main ()\n{\n    void (*fun_ptr)(int) = &amp;fun; \n\t(*fun_ptr)(10); \n\treturn 0; \n}</code></pre>\n\n<p> </p>","a":[{"id":146587,"option":"10","correct":false},{"id":146588,"option":"0","correct":false},{"id":146589,"option":"Compilation error","correct":true},{"id":146590,"option":"Runtime error","correct":false}]},{"q":"<p>In C++, which of the following is not a S<strong>tandard Library header</strong>?</p>","a":[{"id":143426,"option":"<algorithm>","correct":false},{"id":143427,"option":"<regex>","correct":false},{"id":143428,"option":"<iterators>","correct":false},{"id":143429,"option":"<process>","correct":true}]},{"q":"<p>In C++, which of the following types of access is provided by <strong>sequence containers</strong>?</p>","a":[{"id":143498,"option":"Linear access","correct":false},{"id":143499,"option":"Parallel access","correct":false},{"id":143500,"option":"Random access","correct":true},{"id":143501,"option":"None of these","correct":false}]},{"q":"<p>In C++, which of the following can be used to convert a <strong>basic</strong> datatype to <strong>class</strong> datatype?</p>","a":[{"id":157715,"option":"Using a constructor","correct":true},{"id":157716,"option":"Using an object of a class","correct":false},{"id":157717,"option":"By overloading casting operator","correct":false},{"id":157718,"option":"None of these","correct":false}]},{"q":"<p>In C++, which of the following statements defines an <strong>orthogonal base class</strong>?</p>","a":[{"id":133158,"option":"If two base classes have no overlapping methods or data, then they are said to be independent of or orthogonal to each other.","correct":true},{"id":133159,"option":"If two base classes have one or more overlapping methods or data, then they are said to be dependent on each other.","correct":false},{"id":133160,"option":"If two classes operate in the same dimension, then they are said to be orthogonal to each other. ","correct":false},{"id":133161,"option":"None of these","correct":false}]},{"q":"<p>In C++, is the pointer to a block of memory equivalent to an array?</p>","a":[{"id":154324,"option":"Yes","correct":true},{"id":154325,"option":"No","correct":false},{"id":154326,"option":"It depends on the compiler.","correct":false},{"id":289351,"option":"It depends on the block of memory.","correct":false}]},{"q":"<p>In C++, does the <strong>cin</strong> extraction stop execution as soon as it intercepts a white space?</p>","a":[{"id":154036,"option":"Yes","correct":true},{"id":154037,"option":"No","correct":false},{"id":154038,"option":"Not applicable in C++","correct":false},{"id":154039,"option":"None of these","correct":false}]},{"q":"<p>What is the value of 'i' in the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code> c=i++\n</code></pre>","a":[{"id":157488,"option":"Assigned to c first and then incremented by 1","correct":true},{"id":157489,"option":"Incremented by 1 and then assigned to c","correct":false},{"id":157490,"option":"Assigned to c","correct":false},{"id":157491,"option":"Incremented by 1","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include&lt;iostream&gt;\nusing namespace std;\n     int x;\n     int main()\n    {\n        int y;\n        std::cout &lt;&lt; x &lt;&lt; std::endl;\n        std::cout &lt;&lt; y &lt;&lt; std::endl;\n        return 0;\n    }\n\n\n  \n</code></pre>\n\n<p> </p>","a":[{"id":159534,"option":"Double max","correct":false},{"id":159535,"option":"0\r\n0","correct":true},{"id":159536,"option":"Undefined","correct":false},{"id":159537,"option":"None of these","correct":false}]},{"q":"<p>In C++, which of the following can be used as separators?</p>","a":[{"id":154124,"option":"Space","correct":false},{"id":154125,"option":"Tab character","correct":false},{"id":154126,"option":"New line character","correct":false},{"id":154127,"option":"All of these","correct":true}]},{"q":"<p>What can one redefine the way when used with objects?</p>","a":[{"id":133791,"option":"White space characters","correct":false},{"id":133792,"option":"Standard operators","correct":true},{"id":133793,"option":"Pre-processor directives","correct":false},{"id":133794,"option":"Undefined variables","correct":false}]},{"q":"<p>In C++, which of the following is an <strong>integral</strong> data type?</p>","a":[{"id":157939,"option":"void","correct":false},{"id":157940,"option":"char","correct":true},{"id":157941,"option":"float","correct":false},{"id":157942,"option":"double","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    int a = 5, b = 1;\n    int k;\n    bool x = true;\n    bool y = true;\n    k = ((a + (++b)) + (x || y));\n    cout &lt;&lt; k;\n}\n</code></pre>","a":[{"id":132377,"option":"5","correct":false},{"id":132378,"option":"7","correct":false},{"id":132379,"option":"6","correct":false},{"id":132380,"option":"8","correct":true}]},{"q":"<p>In C++, which of the following describes the <strong>Garbage collection?</strong></p>","a":[{"id":133470,"option":"Manual memory management  ","correct":false},{"id":133471,"option":"Automatic memory management  ","correct":true},{"id":133472,"option":"Variable replacing technique","correct":false},{"id":133473,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    int x = 8;\n    x = x &lt;&lt; 7;\n    x = x &gt;&gt; 7;\n    cout &lt;&lt; x;\n}\n</code></pre>","a":[{"id":132593,"option":"2","correct":false},{"id":132594,"option":"4","correct":false},{"id":132595,"option":"8","correct":true},{"id":132596,"option":"1024","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main(){\n\n  int x,y=10,z=10;\n  x = (y ==z);\n  cout&lt;&lt;x;\n  return 0;\n}\n\n</code></pre>","a":[{"id":133745,"option":"10","correct":false},{"id":133746,"option":"0","correct":false},{"id":133747,"option":"1","correct":true},{"id":133748,"option":"Compilation fails","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\n\n\nint main (int argc, const char * argv[]){\n    int a = 20, b = 0, c = 8, i=0;\n    i = b &lt; a &lt; c;\n    cout &lt;&lt; i &lt;&lt; endl;\n    return 0;\n}\n</code></pre>","a":[{"id":131961,"option":"0","correct":false},{"id":131962,"option":"1","correct":true},{"id":131963,"option":"8","correct":false},{"id":131964,"option":"20","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    int a = 7;\n    int&amp; b = a;\n    b = 5;\n    cout &lt;&lt; a &lt;&lt; \" \" &lt;&lt; b;\n    return 0;\n}\n</code></pre>","a":[{"id":132173,"option":"7 7","correct":false},{"id":132174,"option":"7 5","correct":false},{"id":132175,"option":"7 8 ","correct":false},{"id":132176,"option":"5  5","correct":true}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include&lt;iostream&gt;\nusing namespace std;\n\nint &amp;fun(){\n    static int x = 10;\n    return x;\n}\n\nint main(){\n    fun() = 50;\n    cout &lt;&lt; fun() &lt;&lt; endl;\n    return 0;\n}\n</code></pre>","a":[{"id":132161,"option":"Compilation error","correct":false},{"id":132162,"option":"10","correct":false},{"id":132163,"option":"50","correct":true},{"id":132164,"option":"Runtime error","correct":false}]},{"q":"<p>In C++, which of the following operators is an <strong>extraction</strong> operator?</p>","a":[{"id":154032,"option":"^","correct":false},{"id":154033,"option":"v","correct":false},{"id":154034,"option":"<<","correct":false},{"id":154035,"option":">>","correct":true}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt; \nusing namespace std; \n\nint main() \n{ \n\tfor (int i = 1; i &lt;= 10; i++) { \n\t\tif (i == 6) \n\t\t\tcontinue; \n\t\telse\n\t\t\tcout &lt;&lt; i &lt;&lt; \" \"; \n\t} \n\treturn 0; \n} \n</code></pre>\n\n<p> </p>","a":[{"id":157600,"option":"1 2 3 4 5 6","correct":false},{"id":157601,"option":"1 2 3 4 5","correct":false},{"id":157602,"option":"1 2 3 4 5 6 7 8 9 10","correct":true},{"id":157603,"option":"Compilation error","correct":false}]},{"q":"<p>Which of these is equivalent from line 1 to line 4 in the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n{\n    int x = 5;\n    int flag =0;\n    if(x&lt;0) //line 1\n       flag=0; // line 2\n    else //line 3\n       flag=1; //line 4\n    cout&lt;&lt;flag;\n}\n\n\n</code></pre>\n\n<p> </p>","a":[{"id":133622,"option":"flag=(x<0)?1:0;","correct":false},{"id":133623,"option":"flag=(x>0)?0:1;","correct":false},{"id":133624,"option":"flag=(x<0)?0:1;","correct":true},{"id":133625,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main(){\n    float  f1 = 0.01;\n    double f2 = 0.01f;\n    if (f1 == f2){\n        cout &lt;&lt; \"Hacker\";\n    }\n    else{\n        cout &lt;&lt; \"Earth\";\n    }\n    return 0;\n}\n</code></pre>","a":[{"id":132025,"option":"Earth","correct":false},{"id":132026,"option":"Hacker","correct":true},{"id":132027,"option":"Run-time Error","correct":false},{"id":132028,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include&lt;iostream&gt;\nusing namespace std;\n\nint main(){\n    int a = 7;\n    int &amp;b = a;\n    cout &lt;&lt; &amp;a &lt;&lt; \" \" &lt;&lt; &amp;b &lt;&lt; endl;\n    return 0;\n}\n</code></pre>","a":[{"id":132169,"option":"It will print different address for a and b","correct":false},{"id":132170,"option":"It will print the same address for a and b","correct":true},{"id":132171,"option":"7 7","correct":false},{"id":132172,"option":"Compilation error","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n{\n    int a, b;\n    a = 10, 20, 30;\n    b = (30, 20, 10);\n\n    cout &lt;&lt; a + b;\n    return 0;\n}\n</code></pre>","a":[{"id":251791,"option":"10","correct":false},{"id":251792,"option":"20","correct":true},{"id":251793,"option":"30","correct":false},{"id":251794,"option":"50","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n{\n        int* p = new int[10];\n        for ( int i = 0; i &lt; 10; i++ )\n        {\n                p[i] = i;\n        }\n\n        for ( int i = 0; i &lt; 10; i++ )\n        {\n                cout &lt;&lt; p[i] &lt;&lt;\" \";\n        }\n        return 0;\n}\n</code></pre>","a":[{"id":251775,"option":"Compilation error","correct":false},{"id":251776,"option":"0 1 2 3 4 5 6 7 8 ","correct":false},{"id":251777,"option":"1 2 3 4 5 6 7 8 9 10","correct":false},{"id":251778,"option":"0 1 2 3 4 5 6 7 8 9","correct":true}]},{"q":"<p>In C++, which of the following specifiers is used if a function does not have a return type?</p>","a":[{"id":154084,"option":"void","correct":true},{"id":154085,"option":"int","correct":false},{"id":154086,"option":"string","correct":false},{"id":154087,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\nint main()\n{\n    cout &lt;&lt; max(121, 132) &lt;&lt; \" \";\n    cout &lt;&lt; min('t', 'u');\n    return 0;\n}\n</code></pre>","a":[{"id":143322,"option":"121 t","correct":false},{"id":143323,"option":"132 t","correct":true},{"id":143324,"option":"132 u","correct":false},{"id":143325,"option":"121 u","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    int x = 0;\n    switch (x) {\n    case 0:\n        cout &lt;&lt; \"Hacker\";\n    case 1:\n        cout &lt;&lt; \"Earth\";\n    }\n}\n</code></pre>","a":[{"id":132241,"option":"Hacker","correct":false},{"id":132242,"option":"HackerEarth","correct":true},{"id":132243,"option":"Earth","correct":false},{"id":132244,"option":"Compilation error","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    cout &lt;&lt; (5 &gt; 4 &amp;&amp; 3 &gt; 1) &lt;&lt; endl;\n    return 0;\n}\n</code></pre>","a":[{"id":132009,"option":"0","correct":false},{"id":132010,"option":"1","correct":true},{"id":132011,"option":"true","correct":false},{"id":132012,"option":"false","correct":false}]},{"q":"<p>In C++, which of the following results from storing two consecutive input values into the same variable?</p>","a":[{"id":154048,"option":"Both the inputs are stored in the same variable.","correct":false},{"id":154049,"option":"The second input overwrites the first.","correct":true},{"id":154050,"option":"The second input fails to overwrite.","correct":false},{"id":154051,"option":"The same variable cannot be used for two getline statements.","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    int x = 0;\n    switch (x) {\n    case 1:\n        cout &lt;&lt; \"Hacker\";\n    case 0:\n        cout &lt;&lt; \"Earth\";\n    }\n}\n</code></pre>","a":[{"id":132245,"option":"Hacker","correct":false},{"id":132246,"option":"HackerEarth","correct":false},{"id":132247,"option":"Earth","correct":true},{"id":132248,"option":"Compilation error","correct":false}]},{"q":"<p>In C++, what does the following statement do?</p>\n\n<pre class=\"prettyprint\"><code>scanf(\"%d\", &amp;i);</code></pre>","a":[{"id":153708,"option":"Assigns an integer value read from stdin to a variable i","correct":true},{"id":153709,"option":"Throws an error message","correct":false},{"id":153710,"option":"Prints the value of i","correct":false},{"id":153711,"option":"Assigns a float value read from stdin to a variable i","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>    #include &lt;iostream&gt;\n    using namespace std;\n    int&amp; call ()\n    {\n        int x (100);\n        return (x);\n    }\n    int main ()\n    {\n        call ();\n        return (0);\n    }\n</code></pre>","a":[{"id":157903,"option":"Compilation Error","correct":false},{"id":157904,"option":"0","correct":false},{"id":157905,"option":"Executes successfully, but prints nothing","correct":true},{"id":157906,"option":"None of these","correct":false}]},{"q":"<p>In C++, what is <strong>next_permutation</strong> used for?</p>","a":[{"id":147338,"option":"To rearrange the elements in the range [first, last) into the previous lexicographically greater permutation.","correct":false},{"id":147339,"option":"To rearrange the elements in the range [first, last) into the next lexicographically greater permutation.","correct":true},{"id":147340,"option":"To rearrange the elements in the range [first, last) into the next lexicographically smaller permutation.","correct":false},{"id":147341,"option":"None of these","correct":false}]},{"q":"<p>In C++, which of the following is equivalent to *<strong>ptr++</strong>?</p>","a":[{"id":157308,"option":"ptr++","correct":false},{"id":157309,"option":"*ptr","correct":false},{"id":157310,"option":"++*ptr","correct":false},{"id":157311,"option":"None of these","correct":true}]},{"q":"<p>In C++, which of the following is a function of the <strong>getche()</strong> library function?</p>","a":[{"id":159118,"option":"Returns a character read from the keyboard","correct":true},{"id":159119,"option":"Returns a character read from the keyboard, when ENTER is pressed","correct":false},{"id":159120,"option":"Displays a character on the screen when any key is pressed","correct":false},{"id":159121,"option":"Does not display a character on the screen","correct":false}]},{"q":"<p>In C++, which of the following is the range of the <strong>unsigned char</strong> datatype?</p>","a":[{"id":132021,"option":"-127 to 128","correct":false},{"id":132022,"option":"0 to 128","correct":false},{"id":132023,"option":"0 to 255","correct":true},{"id":132024,"option":"0 to 256","correct":false}]},{"q":"<p>In C++, which of the following prefix is used to declare a <strong>wide</strong> character in a string literal?</p>","a":[{"id":133979,"option":"L prefix ","correct":true},{"id":133980,"option":"l prefix ","correct":false},{"id":133981,"option":"W prefix ","correct":false},{"id":133982,"option":"None of these ","correct":false}]},{"q":"<p>In C++, which of the following about the valid syntax of a dynamic_cast operator is correct?</p>","a":[{"id":146435,"option":"dynamic_cast < type-id > ( expression )","correct":true},{"id":146436,"option":"dynamic_cast (expression)","correct":false},{"id":146437,"option":"dynamic_cast<type-id> ( expression, reference_parameters, pointer_values)","correct":false},{"id":146438,"option":"None of these","correct":false}]},{"q":"<p>In C++, which of the following characters is used to separate multiple data?</p>","a":[{"id":157767,"option":"Space","correct":false},{"id":157768,"option":"Tab character","correct":false},{"id":157769,"option":"New line character","correct":false},{"id":157770,"option":"All of these","correct":true}]},{"q":"<p>In C++, which of the following is the range of the <strong>short int </strong>data type?</p>","a":[{"id":146268,"option":"-32,768 to 32,767","correct":true},{"id":146269,"option":"-35666 to 35667","correct":false},{"id":146270,"option":"-32 to 33","correct":false},{"id":146271,"option":"None of these","correct":false}]},{"q":"<p>What is the value of <strong>y</strong> in the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>    #include&lt;iostream&gt;\n    using namespace std;\n\n    const int x = 5;\n\n    int main(int argc, char** argv)\n    {\n        int x[x];\n\n        int y = sizeof(x) / sizeof(int);\n\n        cout &lt;&lt; y;\n\n        return 0;\n    }\n</code></pre>\n\n<p> </p>","a":[{"id":159486,"option":"5","correct":true},{"id":159487,"option":"20","correct":false},{"id":159488,"option":"15","correct":false},{"id":1303414,"option":"Compilation error","correct":false}]},{"q":"<p>In C++, which of the following is the best <strong>looping</strong> construct that can be used when the number of iterations is known?</p>","a":[{"id":153716,"option":"for","correct":true},{"id":153717,"option":"while","correct":false},{"id":153718,"option":"do-while","correct":false},{"id":153719,"option":"All the looping constructs require the number of iterations to be known ","correct":false}]},{"q":"<p>In C++, which of the following is the result of a <strong>relational</strong> operation?</p>","a":[{"id":154004,"option":"Boolean value","correct":true},{"id":154005,"option":"Integer value","correct":false},{"id":154006,"option":"String value","correct":false},{"id":154007,"option":"None of these","correct":false}]},{"q":"<p>In C++, which of the following types of inheritances is used to create a <strong>derived</strong> class inheriting properties from more than one <strong>base</strong> class?</p>","a":[{"id":157460,"option":"Multilevel","correct":false},{"id":157461,"option":"Multiple","correct":true},{"id":157462,"option":"Hybrid","correct":false},{"id":157463,"option":"Hierarchical","correct":false}]},{"q":"<p>In C++, which of the following is the standard <strong>input</strong> stream that reads input from the keyboard?</p>","a":[{"id":157532,"option":"cin","correct":true},{"id":157533,"option":"cout","correct":false},{"id":157534,"option":"stin","correct":false},{"id":157535,"option":"stout","correct":false}]},{"q":"<p>In C++, which of the following is the process by which objects of a class acquire the attributes of another class?</p>","a":[{"id":157695,"option":"Inheritance","correct":true},{"id":157696,"option":"Type casting","correct":false},{"id":157697,"option":"Data connectivity","correct":false},{"id":157698,"option":"Binding","correct":false}]},{"q":"<p>In C++, if <code>T</code> and <code>F</code> represent true and false respectively, what is the result of the statement <code>T&amp;&amp;T||F&amp;&amp;T</code>?</p>","a":[{"id":158389,"option":"true","correct":true},{"id":158390,"option":"false","correct":false},{"id":158391,"option":"Error","correct":false},{"id":158392,"option":"Not a valid statement ","correct":false}]},{"q":"<p>In C++, which of the following statements about the differences between \"endl\"' and \"\\n\" are correct:</p>\n\n<ol>\n\t<li>endl is a character while \\n is a manipulator.</li>\n\t<li>endl doesn’t occupy any memory whereas \\n is a character so that it occupies 1 byte of memory.</li>\n\t<li>We cannot write endl in between double quotation while we can write \\n in between double quotation.</li>\n</ol>\n\n<p> </p>","a":[{"id":158532,"option":"1 and 2","correct":false},{"id":158533,"option":"2 and 3","correct":true},{"id":158534,"option":"1 and 3","correct":false},{"id":158535,"option":"All of these","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\nint main()\n{\n    vector&lt;int&gt; v;\n    v.assign(2, 3);\n    for (int i = 0; i &lt; v.size(); i++) {\n        cout &lt;&lt; v[i] &lt;&lt; \" \";\n    }\n}\n</code></pre>","a":[{"id":143422,"option":"2 3","correct":false},{"id":143423,"option":"2 2 2 ","correct":false},{"id":143424,"option":"3 3 ","correct":true},{"id":143425,"option":"3 2","correct":false}]},{"q":"<p>In C++, which of the following syntaxes for typecasting an <strong>integer</strong> variable namely, <code>amount</code> to a <strong>double</strong> type is correct?</p>","a":[{"id":154100,"option":"(double) amount","correct":true},{"id":154101,"option":"(int to double) amount","correct":false},{"id":154102,"option":"int to double(amount)","correct":false},{"id":154103,"option":"int (amount) to double","correct":false}]},{"q":"<p>In C++, which of the following statements about an <strong>anonymous</strong> class is true?</p>","a":[{"id":133178,"option":"It cannot have a destructor.  ","correct":false},{"id":133179,"option":"It cannot have a constructor.  ","correct":true},{"id":133180,"option":"It cannot be created.","correct":false},{"id":133181,"option":"All of these","correct":false}]},{"q":"<p>In C++, which of the following mechanisms is also called as the compile-time <strong>polymorphism</strong>?</p>","a":[{"id":157687,"option":"Late interpretation","correct":false},{"id":157688,"option":"Late binding","correct":false},{"id":157689,"option":"Early binding","correct":true},{"id":157690,"option":"Overloading","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include&lt;iostream&gt;\nusing namespace std;\n\nint main(){\n    int a = 7;\n    int &amp;b = a;\n    cout &lt;&lt; a &lt;&lt; \" \" &lt;&lt; b &lt;&lt; endl;\n    return 0;\n}\n</code></pre>","a":[{"id":132165,"option":"Run-time error","correct":false},{"id":132166,"option":"7 7","correct":true},{"id":132167,"option":"Compilation error","correct":false},{"id":132168,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt; \nusing namespace std; \nclass Test \n{ \n    static int x; \npublic: \n    Test() { x++; } \n    static int getX() {return x;} \n}; \nint Test::x = 0; \n  \nint main() \n{ \n    cout &lt;&lt; Test::getX() &lt;&lt; \" \"; \n    Test t[5]; \n    cout &lt;&lt; Test::getX(); \n}</code></pre>\n\n<p> </p>","a":[{"id":133689,"option":"0 5","correct":true},{"id":133690,"option":"0 0 ","correct":false},{"id":133691,"option":"5 5","correct":false},{"id":133692,"option":"None of these","correct":false}]},{"q":"<p>In C++, if class X is a <strong>friend</strong> of class Y and class Y is a <strong>friend</strong> of class Z, which of the following is true?</p>","a":[{"id":153604,"option":"Class Y and Class Z do not have a friend relationship","correct":false},{"id":153605,"option":"Class X is a friend of class Z","correct":true},{"id":153606,"option":"Class X and Class Z do not have a friend relationship","correct":false},{"id":153607,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    int x = -1;\n    unsigned int y = 2;\n\n    if (x &gt; y) {\n        cout &lt;&lt; \"x is greater\";\n    }\n    else {\n        cout &lt;&lt; \"y is greater\";\n    }\n}\n</code></pre>","a":[{"id":147609,"option":"x is greater","correct":true},{"id":147610,"option":"y is greater","correct":false},{"id":147611,"option":"Error","correct":false},{"id":147612,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\n#include &lt;queue&gt;\nusing namespace std;\n\nint main ()\n{\n    priority_queue &lt;int&gt; pq;      \n    pq.push(10);\n    pq.push(30);\n    pq.push(20);\n\n     cout &lt;&lt; pq.top() &lt;&lt; \" \";\n}\n\n\n</code></pre>\n\n<p> </p>","a":[{"id":728572,"option":"10","correct":false},{"id":728573,"option":"20","correct":false},{"id":728574,"option":"30","correct":true},{"id":728575,"option":"Cannot be determined","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt; \nusing namespace std; \n\ntemplate &lt;typename T&gt; \nT myMax(T x, T y) \n{ \n    return (x &gt; y)? x: y; \n} \n\nint main() \n{ \n    cout &lt;&lt; myMax&lt;int&gt;(3, 7) &lt;&lt; endl; \n    cout &lt;&lt; myMax&lt;double&gt;(3.0, 7.0) &lt;&lt; endl; \n    cout &lt;&lt; myMax&lt;char&gt;('g', 'e') &lt;&lt; endl; \n    return 0; \n}\n</code></pre>\n\n<p> </p>","a":[{"id":143494,"option":"7\r\n3\r\ne","correct":false},{"id":143495,"option":"3\r\n3\r\ne","correct":false},{"id":143496,"option":"7\r\n7\r\ng","correct":true},{"id":143497,"option":"7\r\n3\r\ng","correct":false}]},{"q":"<p>In C++, which of the following keywords is used for<strong> internal linkage</strong>?</p>","a":[{"id":7909,"option":"static","correct":true},{"id":7910,"option":"extern","correct":false},{"id":7911,"option":"Both of these","correct":false},{"id":7912,"option":"None of these","correct":false}]},{"q":"<p>In C++, which of the following is the use of a <strong>pointer</strong>?</p>","a":[{"id":132781,"option":"Generating a multidimensional array   ","correct":false},{"id":132782,"option":"Changing the address of a variable to point at another location   ","correct":false},{"id":132783,"option":"Both of these","correct":true},{"id":132784,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\nint main()\n{\n    int hck[] = { 1, 2, 3 };\n    sort(hck, hck + 3);\n    do {\n    } while (next_permutation(hck, hck + 3));\n    cout &lt;&lt; hck[2] &lt;&lt; ' ' &lt;&lt; hck[1] &lt;&lt; ' ' &lt;&lt; hck[0] &lt;&lt; '\\n';\n    return 0;\n}\n</code></pre>","a":[{"id":143294,"option":"1 2 3","correct":false},{"id":143295,"option":"3 2 1","correct":true},{"id":143296,"option":"1 3 2","correct":false},{"id":143297,"option":"3 1 2","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include&lt;iostream&gt;\nusing namespace std;\n\nint main(int argc, char** argv)\n{\n   std::cout &lt;&lt; sizeof(int) &lt;&lt; std::endl;\n   int x = 0x1000;\n   x = x &lt;&lt; 32;\n   std::cout &lt;&lt; std::hex &lt;&lt; x &lt;&lt; std::endl;\n   return 0;\n}</code></pre>","a":[{"id":157983,"option":"4\r\n0\r\n16","correct":false},{"id":157984,"option":"16","correct":false},{"id":157985,"option":"4\r\n0\r\n32","correct":false},{"id":157986,"option":"4\r\n0","correct":true}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include&lt;iostream&gt;\nusing namespace std;\n\nint main(){\n    int x = 10;\n    int &amp;ptr = x;\n    int &amp;ptr1 = ptr;\n    cout &lt;&lt; ptr1 &lt;&lt; endl;\n}\n</code></pre>","a":[{"id":132185,"option":"Compilation error","correct":false},{"id":132186,"option":"10","correct":true},{"id":132187,"option":"Run-time error","correct":false},{"id":132188,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    int a = -1;\n    cout &lt;&lt; a &amp;&amp; true;\n    return 0;\n}\n</code></pre>","a":[{"id":132581,"option":"0","correct":false},{"id":132582,"option":"1","correct":false},{"id":132583,"option":"-1","correct":true},{"id":132584,"option":"Error code","correct":false}]},{"q":"<p>In C++, which of the following are the types of polymorphism?</p>","a":[{"id":134165,"option":"Run-time polymorphism ","correct":false},{"id":134166,"option":"Compile time polymorphism ","correct":false},{"id":134167,"option":"Both of these ","correct":true},{"id":134168,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\n#include &lt;queue&gt;\nusing namespace std;\nint main ()\n{\n    priority_queue&lt;int&gt; mypq;\n    mypq.push(10);\n    mypq.push(20);\n    mypq.push(15);\n    cout  &lt;&lt; mypq.top() &lt;&lt; endl;\n    return 0;\n}\n</code></pre>\n\n<p> </p>","a":[{"id":143518,"option":"14","correct":false},{"id":143519,"option":"15","correct":false},{"id":143520,"option":"20","correct":true},{"id":143521,"option":"Error","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main(){\n    int num = 0x20 + 020 + 20;\n    cout &lt;&lt; num &lt;&lt; endl;\n    return 0;\n}\n</code></pre>","a":[{"id":132633,"option":"64","correct":false},{"id":132634,"option":"68","correct":true},{"id":132635,"option":"70","correct":false},{"id":132636,"option":"80","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\nint change(int&amp; y)\n{\n    y = 20;\n}\nint main()\n{\n    int x = 10;\n    change(x);\n    cout &lt;&lt; x;\n}\n</code></pre>","a":[{"id":132177,"option":"10","correct":false},{"id":132178,"option":"Compilation error","correct":false},{"id":132179,"option":"20","correct":true},{"id":132180,"option":"Run-time error","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main (){\n    int x, y;\n    x = 5;\n    y = ++x * x--;\n\n    cout &lt;&lt; x &lt;&lt; \", \" &lt;&lt; y &lt;&lt; endl;\n    return 0;\n}\n</code></pre>","a":[{"id":132125,"option":"5, 20","correct":false},{"id":132126,"option":"5, 30","correct":true},{"id":132127,"option":"4, 30","correct":false},{"id":132128,"option":"6, 25","correct":false}]},{"q":"<p>In C++, which of the following is used to begin a <strong>single-line comment</strong>?</p>","a":[{"id":157540,"option":"//","correct":true},{"id":157541,"option":"<!--...-->","correct":false},{"id":157542,"option":"/*","correct":false},{"id":157543,"option":"All of these","correct":false}]},{"q":"<p>In C++, which of the following errors is displayed when a program tries to access an <strong>illegal</strong> memory location?</p>","a":[{"id":132889,"option":"Segmentation fault  ","correct":true},{"id":132890,"option":"Runtime error  ","correct":false},{"id":132891,"option":"All of these","correct":false},{"id":132892,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    int x;\n    x = !(1 &amp;&amp; !(0 || 1));\n    cout &lt;&lt; x;\n}\n</code></pre>","a":[{"id":132209,"option":"true","correct":false},{"id":132210,"option":"false","correct":false},{"id":132211,"option":"1","correct":true},{"id":132212,"option":"0","correct":false}]},{"q":"<p>In C++, which of the following operators cannot be overloaded?</p>","a":[{"id":153728,"option":". (dot or member access operator)","correct":false},{"id":153729,"option":"?: (conditional operator)","correct":false},{"id":153730,"option":"sizeof ","correct":false},{"id":153731,"option":"All of these","correct":true}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main(){\n    int x = 1;\n    x = x &lt;&lt; 7;\n    x = x &gt;&gt; 6;\n    cout&lt;&lt;x;\n}\n</code></pre>","a":[{"id":132589,"option":"4","correct":false},{"id":132590,"option":"2","correct":true},{"id":132591,"option":"-2","correct":false},{"id":132592,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    char* ptr;\n    char Str[] = \"HackerEarth\";\n    ptr = Str;\n    ptr += 5;\n    cout &lt;&lt; ptr;\n    return 0;\n}\n</code></pre>","a":[{"id":143167,"option":"Hacker","correct":false},{"id":143168,"option":"EarthH","correct":false},{"id":143169,"option":"rEarth","correct":true},{"id":143170,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code> #include &lt;iostream&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\nint main ()\n{\n    cout &lt;&lt;min(1, 2) &lt;&lt; \" \"&lt;&lt;max('a', 'z');\n    return 0;\n}</code></pre>","a":[{"id":143326,"option":"1 a","correct":false},{"id":143327,"option":"1 z","correct":true},{"id":143328,"option":"2 z","correct":false},{"id":143329,"option":"2 a","correct":false}]},{"q":"<p>In C++, which of the following pairs of functions is used to allocate <strong>dynamic memory</strong>?</p>","a":[{"id":133685,"option":"memalloc() and faralloc()   ","correct":false},{"id":133686,"option":"malloc() and calloc()   ","correct":true},{"id":133687,"option":"alloc() and memalloc()   ","correct":false},{"id":133688,"option":"malloc() and memalloc()   ","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\n\n\nint main(){\n\n    for(int i=1; i&lt;=100;i++){\n        if( i &amp; 1 ){\n            cout &lt;&lt; i &lt;&lt; endl;\n        }\n    }\n}\n</code></pre>","a":[{"id":131941,"option":"All the prime numbers from 1 to 100 are printed","correct":false},{"id":131942,"option":"All the even numbers 1 to 100  are printed","correct":false},{"id":131943,"option":"All the odd numbers 1 to 100  are printed","correct":true},{"id":131944,"option":"All the natural numbers 1 to 100  are printed","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    int a = 5;\n    float b;\n    cout &lt;&lt; sizeof(++a + ++b);\n    return 0;\n}\n</code></pre>","a":[{"id":132029,"option":"6","correct":false},{"id":132030,"option":"8","correct":false},{"id":132031,"option":"Run-time error","correct":false},{"id":132032,"option":"4","correct":true}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main(){\n    int i = 5;\n    int l = i / -2;\n    int k = i % -2;\n    cout &lt;&lt; l &lt;&lt; \" \" &lt;&lt; k &lt;&lt; endl;\n    return 0;\n}\n</code></pre>","a":[{"id":132573,"option":"2 1","correct":false},{"id":132574,"option":"-2 1","correct":true},{"id":132575,"option":"-1 -1","correct":false},{"id":132576,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\nmain()\n{\n    int count = 0;\n    for (;; count++) {\n        if (count == 3)\n            break;\n        else if (count &lt; 4)\n            cout &lt;&lt; \"1\";\n        else\n            cout &lt;&lt; \"2\";\n    }\n}\n</code></pre>","a":[{"id":251795,"option":"111222","correct":false},{"id":251796,"option":"111","correct":true},{"id":251797,"option":"222111","correct":false},{"id":251798,"option":"1212","correct":false}]},{"q":"<p>]In C++, which of the following terms is used for the binding of data and functions?</p>","a":[{"id":131985,"option":"Abstraction","correct":false},{"id":131986,"option":"Polymorphism","correct":false},{"id":131987,"option":"Encapsulation","correct":true},{"id":131988,"option":"Inheritance","correct":false}]},{"q":"<p>In C++, which of the following statements about the <strong>function template</strong> is true?</p>","a":[{"id":146874,"option":"Function templates are special functions that can operate with integer data types","correct":false},{"id":146875,"option":"Function templates are special functions that can operate with character data types","correct":false},{"id":146876,"option":"Function templates are special functions that can operate with generic types","correct":true},{"id":146877,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>\n#include &lt;iostream&gt;\nusing namespace std;\n\nclass construct \n{\npublic:\n\tint a, b;\n\tconstruct()\n\t{\n\t\ta = 10;\n\t\tb = 20;\n\t}\n};\n\nint main()\n{\n\tconstruct c;\n\tcout &lt;&lt; c.a &lt;&lt;\" \"&lt;&lt; c.b;\n\treturn 1;\n}\n</code></pre>\n\n<p> </p>","a":[{"id":153668,"option":"10 ","correct":false},{"id":153669,"option":"20","correct":false},{"id":153670,"option":"10 20","correct":true},{"id":153671,"option":"Compilation error","correct":false}]},{"q":"<p>In C++, how many arguments does a destructor take?</p>","a":[{"id":132433,"option":"One","correct":false},{"id":132434,"option":"Two","correct":false},{"id":132435,"option":"Unlimited","correct":false},{"id":132436,"option":"Zero","correct":true}]},{"q":"<p>In C++, which of the following options is not an <strong>access modifier</strong>? </p>","a":[{"id":157328,"option":"public","correct":false},{"id":157329,"option":"private","correct":false},{"id":157330,"option":"protected","correct":false},{"id":157331,"option":"external","correct":true}]},{"q":"<p>In C++, a <strong>do-while</strong> loop is an ________________.</p>","a":[{"id":159038,"option":"Entry control","correct":false},{"id":159039,"option":"Exit control","correct":true},{"id":159040,"option":"Entry enrolled","correct":false},{"id":159041,"option":"None of these","correct":false}]},{"q":"<p>In C++, which of the following data structures is used to store elements without any duplicate entries?</p>","a":[{"id":133006,"option":"Array ","correct":false},{"id":133007,"option":"Set ","correct":true},{"id":133008,"option":"List ","correct":false},{"id":133009,"option":"Queue ","correct":false}]},{"q":"<p>In C++, which of the following keywords is used to specify a function that does not return any value?</p>","a":[{"id":132037,"option":"null","correct":false},{"id":132038,"option":"empty","correct":false},{"id":132039,"option":"void","correct":true},{"id":132040,"option":"None of these","correct":false}]},{"q":"<p>In C++, which of the following statements about <strong>pure virtual</strong> functions is true?</p>","a":[{"id":154415,"option":"They have a complete function body.","correct":false},{"id":154416,"option":"They are never called.","correct":false},{"id":154417,"option":"They will be called only when an object has to be deleted.","correct":false},{"id":154418,"option":"They are defined only in the derived class.","correct":true}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    char *ptr;\n    ptr = \"hello\";\n    cout&lt;&lt;*ptr;\n}</code></pre>","a":[{"id":157963,"option":"h","correct":true},{"id":157964,"option":"hello","correct":false},{"id":157965,"option":"Error","correct":false},{"id":157966,"option":"None of these","correct":false}]},{"q":"<p>In C++, which of the following statements about the <strong>conversion constructor</strong> is correct:</p>\n\n<ol>\n\t<li>It is a single-parameter constructor that is declared without specifying the function explicitly.</li>\n\t<li>It is a multi-parameter constructor that is declared without specifying the function explicitly.</li>\n</ol>","a":[{"id":133426,"option":"Only 1","correct":true},{"id":133427,"option":"Only 2","correct":false},{"id":133428,"option":"Both 1 and 2","correct":false},{"id":133429,"option":"None of these","correct":false}]},{"q":"<p>In C++, which of the following statements about the <strong>copy </strong>constructor is correct?</p>","a":[{"id":132321,"option":"A copy constructor is a member function which initializes an object using another object of the same class.","correct":false},{"id":132322,"option":"A copy constructor can be made private. ","correct":false},{"id":132323,"option":"Both of these","correct":true},{"id":132324,"option":"None of these","correct":false}]},{"q":"<p>In C++, which of the following defines <strong>polymorphism</strong>?</p>","a":[{"id":132073,"option":"A class having two forms\r\n","correct":false},{"id":132074,"option":"A class having only a single form\r\n","correct":false},{"id":132075,"option":"A class having many forms\r\n\r\n","correct":true},{"id":132076,"option":"None of these","correct":false}]},{"q":"<p>In C++, which of the following requirements is necessary for building a <strong>container</strong>?</p>","a":[{"id":143454,"option":"Container interface requirements","correct":false},{"id":143455,"option":"Allocate interface requirements","correct":false},{"id":143456,"option":"Iterator requirements","correct":false},{"id":143457,"option":"All of these","correct":true}]},{"q":"<p>In C++, which of the following values represents <strong>an integer</strong> value?</p>","a":[{"id":159398,"option":"66","correct":false},{"id":159399,"option":"1","correct":false},{"id":159400,"option":"-1","correct":false},{"id":159401,"option":"All of these","correct":true}]},{"q":"<p>In C++, which of the following is not a datatype?</p>","a":[{"id":159422,"option":"float","correct":false},{"id":159423,"option":"double","correct":false},{"id":159424,"option":"int","correct":false},{"id":159425,"option":"real","correct":true}]},{"q":"<p>In C++, when can a class be declared <strong>abstract</strong>?</p>","a":[{"id":153640,"option":"If it has at least one pure virtual method","correct":true},{"id":153641,"option":"If it has at least one abstract method","correct":false},{"id":153642,"option":"By using the keyword abstract","correct":false},{"id":153643,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\nint main ( )\n{\n    int a = !(1 &amp;&amp; !(0 || 1));\n    cout&lt;&lt;a&lt;&lt;endl;\n    return 0;\n}</code></pre>","a":[{"id":157536,"option":"1","correct":true},{"id":157537,"option":"0","correct":false},{"id":157538,"option":"Both of these","correct":false},{"id":157539,"option":"None of these","correct":false}]},{"q":"<p>In C++, which of the following statements about the <strong>looping</strong> is correct?</p>","a":[{"id":158604,"option":"It is used to jump to a specified branch of a program.","correct":false},{"id":158605,"option":"It is used to repeat the specified lines of the code.","correct":true},{"id":158606,"option":"It is used to skip the specified lines of the code.","correct":false},{"id":158607,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\nint&amp; fun()\n{\n    static int a = 20;\n    return a;\n}\nint main()\n{\n    int&amp; y = fun();\n    y = y + (-10);\n    cout &lt;&lt; fun();\n    return 0;\n}\n</code></pre>","a":[{"id":132157,"option":"-10","correct":false},{"id":132158,"option":"10","correct":true},{"id":132159,"option":"20","correct":false},{"id":132160,"option":"Compilation error","correct":false}]},{"q":"<p>In C++, which of the following statements about the <strong>hybrid inheritance </strong>is true?</p>","a":[{"id":157723,"option":"It is multiple inheritance.","correct":false},{"id":157724,"option":"It is multilevel inheritance.","correct":false},{"id":157725,"option":"It is multipath inheritance.","correct":false},{"id":157726,"option":"It is a combination of one or more inheritances within a single program.","correct":true}]},{"q":"<p>In C or C++, which of the following statements is the valid definition of <strong>pointers</strong>?</p>","a":[{"id":597108,"option":"Pointers are variables that stores the address of another variable.","correct":true},{"id":597109,"option":"Pointers are variables that stores the value of another variable.","correct":false},{"id":597110,"option":"Pointers are variables that stores the data type of another variable.","correct":false},{"id":597111,"option":"Pointers are variables that stores the state of another variable.","correct":false}]},{"q":"<p>In C++, which of the following is the correct syntax to declare a pointer?</p>","a":[{"id":597124,"option":"datatype *pointer_name;","correct":true},{"id":597125,"option":"datatype &pointer_name;","correct":false},{"id":597126,"option":"datatype #pointer_name;","correct":false},{"id":597127,"option":"None of these","correct":false}]},{"q":"<p>In C and C++, which of the following statements about the function <strong>memcpy() </strong>are true?</p>\n\n<ol>\n\t<li>It is used to copy a memory block from one location to another.</li>\n\t<li>It is declared in the string.h header file.</li>\n\t<li>It does not check for overflow.</li>\n</ol>","a":[{"id":606662,"option":"1 and 2","correct":false},{"id":606663,"option":"1 and 3","correct":false},{"id":606664,"option":"2 and 3","correct":false},{"id":606665,"option":"All of these","correct":true}]},{"q":"<p>In C++, which of the following is indicated in the declaration with the syntax<strong> \" = 0\"</strong> in the member function's declaration in the <strong>abstract </strong>class?</p>","a":[{"id":132797,"option":"Member function  ","correct":false},{"id":132798,"option":"Pure virtual function  ","correct":true},{"id":132799,"option":"Derived class  ","correct":false},{"id":132800,"option":"Main class","correct":false}]},{"q":"<p>In C++, which of the following is a valid type of <strong>inheritance</strong>?</p>","a":[{"id":132549,"option":"Single ","correct":false},{"id":132550,"option":"Multiple ","correct":false},{"id":132551,"option":"Multilevel ","correct":false},{"id":132552,"option":"All of these","correct":true}]},{"q":"<p>In C++, which of the following defines the <strong>Standard Template Library (STL</strong><strong>)</strong>?</p>","a":[{"id":143430,"option":"Collection of class definitions for standard data structures and algorithms","correct":true},{"id":143431,"option":"Vector of all library files with with all the standard traversing algorithms","correct":false},{"id":143432,"option":"Collection of function definitions","correct":false},{"id":143433,"option":"None of these","correct":false}]},{"q":"<p>In C++, which of these statements about<strong> exception handling </strong>is correct:</p>\n\n<ol>\n\t<li>When an object is created inside a try block, the destructor for the object is called before control is transferred to catch block.</li>\n\t<li>The catch(…) must be the last block in the code.</li>\n\t<li>If both base and derived classes are caught as exceptions then the catch block of the derived class must appear before the base class.</li>\n</ol>\n\n<p> </p>","a":[{"id":728544,"option":"1 and 3","correct":false},{"id":728545,"option":"2 and 3","correct":false},{"id":728546,"option":"1 and 2","correct":false},{"id":728547,"option":"All of these","correct":true}]},{"q":"<p>Determine the output of the following C++ code for the input 1 2 3 4 5 6 7 8 9:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\nint main() \n{\nvector&lt;vector&lt;int&gt; &gt; vec;\n int var1, var2;\n\nfor( var1 = 0; var1 &lt; 3; var1++) \n{\n       for( var2 = 0; var2 &lt; 3; var2++) \n             cin &gt;&gt; vec[var1][var2];\n              cout &lt;&lt;  vec[var1][0] &lt;&lt; endl;               \n}\n}</code></pre>\n\n<p> </p>","a":[{"id":728568,"option":"1\r\n4\r\n7","correct":false},{"id":728569,"option":"1\r\n1\r\n1","correct":false},{"id":728570,"option":"No output","correct":false},{"id":728571,"option":"Compilation error","correct":true}]},{"q":"<p>What is the output of the following C++ code where a function is called for incrementing the actual arguments:</p>\n\n<pre class=\"prettyprint\"><code>#include&lt;iostream&gt;\nusing namespace std;\nvoid inc(int *x, int &amp;y){\n*x++; y++;\n}\nint main(){\n        int a=5,b=5;\n        inc(&amp;a,b);\n        cout&lt;&lt;a&lt;&lt;\" \"&lt;&lt;b;\n}</code></pre>\n\n<p> </p>","a":[{"id":728540,"option":"5 5","correct":false},{"id":728541,"option":"5 6","correct":true},{"id":728542,"option":"6 5","correct":false},{"id":728543,"option":"6 6","correct":false}]},{"q":"<p>In C++, which of the following classes is used to design a <strong>base</strong> class?</p>","a":[{"id":147697,"option":"Abstract class","correct":true},{"id":147698,"option":"Derived class","correct":false},{"id":147699,"option":"Parent class","correct":false},{"id":147700,"option":"None of these","correct":false}]},{"q":"<p>In C++, which of the following statements about the <strong>this</strong> pointer is correct?</p>","a":[{"id":132313,"option":"It points to the object for which the member function is called","correct":false},{"id":132314,"option":"Static member functions do not have a this pointer","correct":false},{"id":132315,"option":"It is a pointer accessible only within the non-static member functions of a class, struct, or union type","correct":false},{"id":132316,"option":"All of these","correct":true}]},{"q":"<p>In C++, when is the <strong>copy </strong>constructor called?</p>","a":[{"id":132325,"option":"An object of the class is returned by value","correct":false},{"id":132326,"option":"A compiler generates a temporary object","correct":false},{"id":132327,"option":"An object is constructed based on another object of the same class","correct":false},{"id":132328,"option":"All of these","correct":true}]},{"q":"<p>In C++, which of the following operators can be overloaded?</p>","a":[{"id":132525,"option":"->","correct":false},{"id":132526,"option":"->*","correct":false},{"id":132527,"option":"+","correct":false},{"id":132528,"option":"All of these","correct":true}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n{\n      int a;\n      a=(false||true) &amp;&amp; false || true;\n      cout&lt;&lt;a;\n}\n</code></pre>","a":[{"id":132393,"option":"false","correct":false},{"id":132394,"option":"0","correct":false},{"id":132395,"option":"1","correct":true},{"id":132396,"option":"Compilation fails","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\n\n\nint main(){\n    for(int i=1; i&lt;=100; i++){\n        if(~ i &amp; 1 ){\n            cout &lt;&lt;i&lt;&lt;endl;\n        }\n    }\n}\n</code></pre>","a":[{"id":131945,"option":"All the odd numbers  from 1 to 100 are printed","correct":false},{"id":131946,"option":"All the prime numbers from 1 to 100  are printed","correct":false},{"id":131947,"option":"All the even numbers from 1 to 100  are printed","correct":true},{"id":131948,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\n#include &lt;new&gt;\nusing namespace std;\n\nint main (){\n    int i, n;\n    int * p;\n    i = 2;\n    p= new (nothrow) int[i];\n    if (p == 0){\n        cout &lt;&lt; \"Error: memory could not be allocated\";\n    }\n    else{\n        for (n=0; n&lt;i; n++){\n            p[n] = 5;\n        }\n        for (n=0; n&lt;i; n++){\n            cout &lt;&lt; p[n];\n        }\n        delete[] p;\n    }\n    return 0;\n}\n</code></pre>","a":[{"id":132893,"option":"5   ","correct":false},{"id":132894,"option":"55   ","correct":true},{"id":132895,"option":"555   ","correct":false},{"id":132896,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt; \nusing namespace std; \n\nint i; \n\nclass A \n{ \npublic: \n\t~A() \n\t{ \n\t\ti = 10; \n\t} \n}; \n\nint foo() \n{ \n\ti = 3; \n\t{ \n\t\tA ob; \n\t} \n\treturn i; \n} \n\nint main() \n{ \n\tcout &lt;&lt;foo() ; \n\treturn 0; \n} \n</code></pre>\n\n<p> </p>","a":[{"id":132305,"option":"3","correct":false},{"id":132306,"option":"10","correct":true},{"id":132307,"option":"Nothing will be printed as an output","correct":false},{"id":132308,"option":"Compilation error","correct":false}]},{"q":"<p>In C++, which of the following is a type of constructor?</p>","a":[{"id":132485,"option":"Copy","correct":false},{"id":132486,"option":"Default","correct":false},{"id":132487,"option":"Parameterized","correct":false},{"id":132488,"option":"All of these","correct":true}]},{"q":"<p>Which of the following defines <strong>throwing</strong> and <strong>handling</strong> exceptions in C++?</p>","a":[{"id":7781,"option":"Throw by a value and catch by a reference","correct":true},{"id":7782,"option":"Throw by a reference and catch by a reference","correct":false},{"id":7783,"option":"Throw by a value and catch by a value","correct":false},{"id":7784,"option":"Throw the pointer value and provide a catch for the pointer type","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include&lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    int a = 5, b = 1;\n    int k;\n    bool x = true;\n    bool y= true;\n    k =((a * b) + (x||y));\n    cout &lt;&lt; k;\n}</code></pre>","a":[{"id":132373,"option":"5","correct":false},{"id":132374,"option":"Compilation fails","correct":false},{"id":132375,"option":"7","correct":false},{"id":132376,"option":"6","correct":true}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    int x = 4, y = 3, c;\n    c = (x &gt; y) ? x : y;\n    cout &lt;&lt; c;\n    return 0;\n}\n</code></pre>","a":[{"id":132121,"option":"3","correct":false},{"id":132122,"option":"4","correct":true},{"id":132123,"option":"Compilation error","correct":false},{"id":132124,"option":"Run-time error","correct":false}]},{"q":"<p>In C++, which of the following operators is used for the <strong>dynamic memory allocation</strong>?</p>","a":[{"id":157863,"option":"new","correct":true},{"id":157864,"option":"this","correct":false},{"id":157865,"option":"malloc","correct":false},{"id":157866,"option":"delete","correct":false}]},{"q":"<p>In C++, which of the following statements about a <strong>destructor</strong> is correct?</p>","a":[{"id":132329,"option":"There can only be one destructor in a class","correct":false},{"id":132330,"option":"Destructor is a member function which destructs or deletes an object","correct":false},{"id":132331,"option":"Both of these","correct":true},{"id":132332,"option":"None of these","correct":false}]},{"q":"<p>In C++, what is the following operator called?</p>\n\n<pre class=\"prettyprint\"><code>&amp;&amp;</code></pre>","a":[{"id":146431,"option":"Logical","correct":true},{"id":146432,"option":"Binary","correct":false},{"id":146433,"option":"Arithmetic","correct":false},{"id":146434,"option":"None of these","correct":false}]},{"q":"<p>In C++, which of the following statements about the class and objects is true?</p>","a":[{"id":132569,"option":"Class is an instance of data type","correct":false},{"id":132570,"option":"Class is an instance of object","correct":false},{"id":132571,"option":"Object is an instance of data type","correct":false},{"id":132572,"option":"Object is an instance of a class","correct":true}]},{"q":"<p>In C or C++, which of the following characters is used to declare a <strong>pointer</strong> variable?</p>","a":[{"id":597116,"option":"&","correct":false},{"id":597117,"option":"*","correct":true},{"id":597118,"option":"#","correct":false},{"id":597119,"option":"%","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt; \nusing namespace std; \nint main () \n{ \n\tint n = 5; \n\tint *q = new(nothrow) int[n];\n\tif (!q) \n\t\tcout &lt;&lt; \"Allocation of memory failed\\n\"; \n\telse\n\t{ \n\t\tfor (int i = 0; i &lt; n; i++) \n\t\t\tq[i] = i+1; \n\t\tfor (int i = 0; i &lt; n; i++) \n\t\t\tcout &lt;&lt; q[i] &lt;&lt; \" \"; \n\t} \n\tdelete[] q; \n\treturn 0; \n} \n</code></pre>\n\n<p> </p>","a":[{"id":604371,"option":"1 2 3 4 5","correct":true},{"id":604372,"option":"Allocation of memory failed","correct":false},{"id":604373,"option":"Compilation error","correct":false},{"id":604374,"option":"Runtime error","correct":false}]},{"q":"<p>In C or C++, which of the following statements about <strong>pointers </strong>are correct:</p>\n\n<ol>\n\t<li>It is used to store the value of another variable.</li>\n\t<li>It is used to allocate memory dynamically to parameters.</li>\n\t<li>It can point to only integer variables.</li>\n\t<li>The value of a null pointer is 0</li>\n</ol>\n\n<p> </p>","a":[{"id":597112,"option":"2 and 4","correct":true},{"id":597113,"option":"1, 2, and 3\r\n","correct":false},{"id":597114,"option":"1, 3, and 4","correct":false},{"id":597115,"option":"1 and 3","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\nint main(void)\n{\n cout &lt;&lt; \"Begin\" &lt;&lt; endl;\n try {\n cout &lt;&lt; \"Statement 1\" &lt;&lt; endl;\n throw 10;\n cout &lt;&lt; \"Statement 2\";\n }\n catch(double d) {\n cout &lt;&lt; \"Statement 3 \";\n cout &lt;&lt; d &lt;&lt; endl;\n }\n cout &lt;&lt; \"Finish\";\n return 0;\n}\n\n</code></pre>\n\n<p> </p>","a":[{"id":728548,"option":"Begin \r\nStatement 1\r\nStatement 2\r\nFinish","correct":false},{"id":728549,"option":"Begin \r\nStatement 2\r\nEnd","correct":false},{"id":728550,"option":"Begin \r\nStatement 1\r\nStatement 2","correct":false},{"id":728551,"option":"Begin\r\nStatement 1","correct":true}]},{"q":"<p>What is the output of the following C++ code assuming that <em>Tree</em> is the child class of the <em>Graph</em> class:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\nclass Graph {};\nclass Tree: public Graph {};\nint main()\n{    Tree obj;   int i;\n      try {  throw obj;  }\n     catch(Graph b) {  i = 7;  }\n     catch(Tree d) {  i = 3;   }\n     cout &lt;&lt; (i*i) &lt;&lt; endl;\n  }</code></pre>\n\n<p> </p>","a":[{"id":728576,"option":"Error","correct":false},{"id":728577,"option":"49","correct":true},{"id":728578,"option":"21","correct":false},{"id":728579,"option":"9","correct":false}]},{"q":"<p>What could be the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\nint main() {\nfor(auto it = se.begin(); it!=se.end();++it)\n{\n  for(int i = 0; i &lt; (it-&gt;second).size(); i++)\n  {\n    int g = (it-&gt;second)[i].first + (it-&gt;first);\n    if(se.find(-(it-&gt;first)) != se.end() &amp;&amp; (it-&gt;first) &gt; 0)\n    {\n      auto pt = lower_bound(se[- (it-&gt;first)].begin(),se[ - (it-&gt;first)].end(),make_pair(g,-1));\n      if(pt != se[-(it-&gt;first)].end())\n      {\n        int m = (it-&gt;second)[i].second+pt-&gt;second;\n      }\n    }\n  }\n}  \n}\n</code></pre>\n\n<p> </p>","a":[{"id":728616,"option":"vector<pair<int,vector<pair<int,int> > > >","correct":false},{"id":728617,"option":"map<int,pair<int,int> >","correct":false},{"id":728618,"option":"vector<pair<int,map<int,pair<int,int> > > > ","correct":false},{"id":728619,"option":"Compilation error","correct":true}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\nusing namespace std;\nint main ( )\n{\nint setl[5]= {1, 2, 3, 4, 5};\nint set2[5]= {2, 3, 3, 4, 5};\nif(includes(setl, setl+5, set2, set2+5))\n    cout&lt;&lt;\"Set2 is subset of Set1\"&lt;&lt;endl;\nelse\n    cout&lt;&lt;\"Set2 is not subset of Set1\"&lt;&lt;endl;\nreturn 0;\n}</code></pre>\n\n<p> </p>","a":[{"id":728628,"option":"set2 is not a subset of set1","correct":true},{"id":728629,"option":"set2 is a subset of setl","correct":false},{"id":728630,"option":"Run-time error","correct":false},{"id":728631,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\ntypedef struct h { int k ;} node;\n int main()\n {\n  node temp[10];\n  for(int i = 0; i &lt; 10; i++) temp[i].k = 5 - i;\n  getw&lt;node&gt; s;\n  for(int i = 0; i &lt; 10; i++) s.insert(temp[i]);\n  cout&lt;&lt;(*s.begin()).k&lt;&lt;\"\\n\";\n }\n</code></pre>\n\n<p> </p>","a":[{"id":728636,"option":"-5","correct":false},{"id":728637,"option":"-4","correct":false},{"id":728638,"option":"5","correct":false},{"id":728639,"option":"Compilation error","correct":true}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass myhackclass1 {\npublic:\n\tvoid myhackfunc1() \n\t{ \n\t    cout &lt;&lt; \"Hi HackerEarth\\n\"; \n\t    \n\t}\n\tvirtual void myhackfunc2() \n\t{ \n\t    cout &lt;&lt; \"Hello World\\n\"; \n\t    \n\t}\n};\n\nclass myhackclass2 : public myhackclass1 {\npublic:\n\tvoid myhackfunc1() \n\t{ \n\t    cout &lt;&lt; \"Welcome to HackerEarth\\n\"; \n\t    \n\t}\n\tvoid myhackfunc2() \n\t{ \n\t    cout &lt;&lt; \"Welcome to World\\n\"; \n\t}\n};\n\nint main()\n{\n\tmyhackclass1* p;\n\tmyhackclass2 obj1;\n\tp = &amp;obj1;\n\tp-&gt;myhackfunc1();\n\tp-&gt;myhackfunc2();\n}\n</code></pre>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>Hi HackerEarth\nHello World</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>Welcome to HackerEarth\nWelcome to World</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>Hi HackerEarth\nWelcome to World</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>Hello World\nWelcome to HackerEarth</code></pre>\n\n<p> </p>","a":[{"id":131965,"option":"1","correct":false},{"id":131966,"option":"2","correct":false},{"id":131967,"option":"3","correct":true},{"id":131968,"option":"4","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main(){\n    int a = -1;\n    cout &lt;&lt; a||true;\n    return 0;\n}\n</code></pre>","a":[{"id":132585,"option":"0","correct":false},{"id":132586,"option":"true","correct":false},{"id":132587,"option":"-1","correct":true},{"id":132588,"option":"Error code","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\nostream&amp; operator&lt;&lt;(ostream&amp; i, int n)\n{\n    return i;\n}\nint main()\n{\n    cout &lt;&lt; 5 &lt;&lt; endl;\n    cin.get();\n    return 0;\n}\n</code></pre>","a":[{"id":147781,"option":"5","correct":false},{"id":147782,"option":"6","correct":false},{"id":147783,"option":"Compilation error","correct":true},{"id":147784,"option":"Run-time error","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\nclass myclass {\npublic:\n    int i;\n    myclass* operator-&gt;()\n    {\n        return this;\n    }\n};\nint main()\n{\n    myclass ob;\n    ob-&gt;i = 10;\n    cout &lt;&lt; ob.i &lt;&lt; \" \" &lt;&lt; ob-&gt;i;\n    return 0;\n}\n</code></pre>","a":[{"id":147777,"option":"10 10","correct":true},{"id":147778,"option":"11 11","correct":false},{"id":147779,"option":"Compilation error","correct":false},{"id":147780,"option":"Run-time error","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\nint val = 20;\nvoid testhack()\n{\n    int val = 2;\n    {\n        int val = 1;\n        cout &lt;&lt; ::val &lt;&lt; endl;\n    }\n}\nint main()\n{\n    testhack();\n    return 0;\n}\n</code></pre>","a":[{"id":277296,"option":"1","correct":false},{"id":277297,"option":"2","correct":false},{"id":277298,"option":"20","correct":true},{"id":691116,"option":"10","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include&lt;iostream&gt; \nusing namespace std; \n\nclass Program { \n\tint value; \npublic: \n\tProgram(int v = 0) {value = v;} \n\tint getValue() const {return value;} \n}; \nint main() { \n\tProgram t(20); \n\tcout&lt;&lt;t.getValue(); \n\treturn 0; \n} </code></pre>\n\n<p> </p>","a":[{"id":147430,"option":"20","correct":true},{"id":147431,"option":"0","correct":false},{"id":147432,"option":"Compiation error","correct":false},{"id":147433,"option":"Runtime error","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\nclass Test {\nprivate:\n    int x = 10;\n\npublic:\n    int x = 20;\n    Test()\n    {\n        cout &lt;&lt; x;\n    }\n};\nint main()\n{\n    Test t;\n}\n</code></pre>","a":[{"id":132341,"option":"10","correct":false},{"id":132342,"option":"20","correct":false},{"id":132343,"option":"Compilation fails","correct":true},{"id":132344,"option":"Run-time error","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\n\n#define SquareOf(x) x * x\n\nint main(){\n    cout &lt;&lt; SquareOf(1+4);\n    return 0;\n}\n</code></pre>","a":[{"id":132101,"option":"18","correct":false},{"id":132102,"option":"9","correct":true},{"id":132103,"option":"36","correct":false},{"id":132104,"option":"25","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;algorithm&gt; \n#include &lt;iostream&gt; \n#include &lt;vector&gt; \nusing namespace std; \n\nint main() \n{ \n\tvector&lt;int&gt; v{ 10, 30, 30, 10, 30, 30 }; \n\tint target = 30; \n\tint res = count(v.begin(), v.end(), target); \n\tcout &lt;&lt;res; \n\treturn 0; \n} </code></pre>\n\n<p> </p>","a":[{"id":143278,"option":"10","correct":false},{"id":143279,"option":"30","correct":false},{"id":143280,"option":"4","correct":true},{"id":143281,"option":"Compilation error","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\nnamespace first {\nint y = 8;\n}\nnamespace second {\ndouble y = 2.1715;\n}\nint main()\n{\n    int a;\n    a = first::y - second::y;\n    cout &lt;&lt; a;\n    return 0;\n}\n</code></pre>","a":[{"id":251766,"option":"5.8285","correct":false},{"id":251767,"option":"6","correct":false},{"id":251768,"option":"5","correct":true},{"id":251769,"option":"0","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\n#include &lt;functional&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\nint main()\n{\n    int numbers[] = { 3, -4, -5 };\n    transform(numbers, numbers + 5, numbers, negate&lt;int&gt;());\n    for (int i = 0; i &lt; 3; i++)\n        cout &lt;&lt; numbers[i] &lt;&lt; \" \";\n}\n</code></pre>","a":[{"id":143250,"option":"-3\r\n","correct":false},{"id":143251,"option":"3 4 5\r\n","correct":false},{"id":143252,"option":"3 -4 5\r\n","correct":false},{"id":143253,"option":"-3 4 5","correct":true}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n{\n    int i = 16;\n    for (; i; i &gt;&gt;= 1) {\n        if (i = 5) {\n            cout &lt;&lt; \"world \";\n            break;\n        }\n        cout &lt;&lt; i &lt;&lt; \" \";\n    }\n}\n</code></pre>","a":[{"id":251642,"option":"16 8 world","correct":false},{"id":251643,"option":"16 8 world 4 2 1","correct":false},{"id":251644,"option":"16 8 world 5 4 2 1","correct":false},{"id":251645,"option":"world","correct":true}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include&lt;iostream&gt;\nusing namespace std;\n\nclass point \n{\n    private:\n        double x, y;\n    public:\n        point (double px, double py) \n        {\n            x = px, y = py;\n        }\n};\n\nint main(void) \n{\n    point a[10];\n    point b = point(5, 6);\n}\n</code></pre>\n\n<p> </p>","a":[{"id":134079,"option":"5 6","correct":false},{"id":134080,"option":"0","correct":false},{"id":134081,"option":"Prints nothing","correct":false},{"id":134082,"option":"Compilation error","correct":true}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\n\n\nint main (){\n     cout &lt;&lt; ( 5&gt;5 &amp;&amp; 3&gt;1 ) &lt;&lt; endl;\n     return 0;\n}\n</code></pre>","a":[{"id":132013,"option":"1","correct":false},{"id":132014,"option":"0","correct":true},{"id":132015,"option":"null","correct":false},{"id":132016,"option":"None","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>    #include &lt;iostream&gt;\n    #include &lt;string&gt;\n    #include &lt;algorithm&gt;\n    using namespace std;\n    int main()\n    {\n        string s = \"Hacker Earth\";\n        s.erase(remove(s.begin(), s.end(), ' ' ), s.end() ) ;\n        cout &lt;&lt; s &lt;&lt; endl;\n    }\n</code></pre>","a":[{"id":143478,"option":"Hacker","correct":false},{"id":143479,"option":"Earth","correct":false},{"id":143480,"option":"HackerEarth","correct":true},{"id":143481,"option":"Error code","correct":false}]},{"q":"<p>In C++, which of the following statements define the<strong> conversion constructor</strong>?</p>","a":[{"id":134007,"option":"A single non-default parameter constructor declared without the function-specifier explicit ","correct":true},{"id":134008,"option":"A multi non-default parameter constructor declared without the function-specifier explicit","correct":false},{"id":134009,"option":"A multi non-default parameter constructor declared with the function-specifier explicit","correct":false},{"id":134010,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include&lt;iostream&gt;\nusing namespace std;\nint main()\n{\nint arr[10];\n\nint *i = &amp;arr[2], *j = &amp;arr[6];\nint d = j-i;\ncout&lt;&lt;d;\n}</code></pre>","a":[{"id":600322,"option":"4","correct":true},{"id":600323,"option":"-4","correct":false},{"id":600324,"option":"A memory address","correct":false},{"id":600325,"option":"Runtime error","correct":false}]},{"q":"<p>In C++, which of the following statements differentiate between <strong>delete</strong> and <strong>free:</strong></p>\n\n<ol>\n\t<li>The delete is an operator that de-allocates the memory dynamically while the free() is a function that destroys the memory at the runtime.</li>\n\t<li>The delete operator is used to delete the pointer, which is either allocated using new operator or a NULL pointer, whereas the free() function is used to delete the pointer that is either allocated using malloc(), calloc() or realloc() function or NULL pointer.</li>\n\t<li>When the delete operator destroys the allocated memory, then it calls the destructor of the class in C++, whereas the free() function does not call the destructor; it only frees the memory from the heap.</li>\n\t<li>The free() operator is faster than the delete() function.</li>\n</ol>","a":[{"id":133126,"option":"1, 2, and 3","correct":false},{"id":133127,"option":"2, 3, and 4","correct":true},{"id":133128,"option":"1, 3, and 4","correct":false},{"id":133129,"option":"All of these","correct":false}]},{"q":"<p>What is the output of the following C++ code which is used for inserting and iterating maps:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\n#include &lt;map&gt;\nusing namespace std;\n\nint main() {                \nmap&lt;int,int&gt; mp; \n        \n mp.insert(pair &lt;int, int&gt; (23, 1));\n mp.insert(pair &lt;int, int&gt; (37, 1));\n mp.insert(pair &lt;int, int&gt; (41, 1));\n     \n  map&lt;int,int&gt;::iterator it = mp.begin();\n      \n   it++; it++;\n   cout &lt;&lt; it-&gt;first;      \n}\n</code></pre>\n\n<p> </p>","a":[{"id":728560,"option":"37","correct":false},{"id":728561,"option":"41","correct":true},{"id":728562,"option":"23","correct":false},{"id":728563,"option":"Any random value","correct":false}]},{"q":"<p>Which of these lines is a <em>dead code</em> in the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\nint main() {\n  int a = 5; \n   try {\n       try {\n              throw a;      // L1\n              cout &lt;&lt; \"Inside inner try \\n\"; // L2\n             } catch (int e) {\n               cout &lt;&lt; \"Inner exception caught \\n\"; // L3\n               throw e;                                    // L4\n               cout &lt;&lt; \"Inside inner catch \\n\"; }  // L5\n           }catch (int e) {                              \n                 cout &lt;&lt; \"Inside outer catch \\n\";    // L6\n         }       \n}\n  </code></pre>\n\n<p> </p>","a":[{"id":728580,"option":"Inside inner try\r\nInside outer catch ","correct":false},{"id":728581,"option":"Inner exception caught \r\nInside inner catch ","correct":false},{"id":728582,"option":"Inner exception caught \r\nInside outer catch ","correct":true},{"id":728583,"option":"Inside inner try\r\nInside inner catch ","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\nint main() {\n     int Var1 = 10; \n        char Var2 = 'd';\n\n                Var1 = Var1 + Var2;\n        \n        \n        float Var3  = Var1 + 7.0;\n        cout&lt;&lt;\"Var1 = \"&lt;&lt;Var1&lt;&lt;\", Var3 =\"&lt;&lt;Var3;\n\n        return 0;    \n}\n  \n  \n</code></pre>\n\n<p> </p>","a":[{"id":728588,"option":"Var1 = 110, Var3 =117 ","correct":true},{"id":728589,"option":"Var1 = 10d, Var3 = 117.000000","correct":false},{"id":728590,"option":"Var1 = 110, Var3 = 117.000000","correct":false},{"id":728591,"option":"Var1 = 10d, Var3 = 117","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n int main()\n{\n    int a[] ={ 3, 5, 1, 2, 7, 9, 8, 4};\n   int n = sizeof(a)/sizeof(a[0]);\nsort(a, a+n, greater&lt;int&gt;());\n    for (int i = 0; i &lt; n; ++i)\n        cout &lt;&lt; a[i] &lt;&lt; \" \";\n \n    return 0;\n}</code></pre>\n\n<p> </p>","a":[{"id":728624,"option":"9 8 7 5 4 3 2 1 ","correct":true},{"id":728625,"option":"1 2 3 4 5 6 7 8 9","correct":false},{"id":728626,"option":"9 8 7 6 5 4 3 2 1","correct":false},{"id":728627,"option":"Compilation error","correct":false}]},{"q":"<p>In C++, if the <strong>search</strong> operation is implemented in an unsorted vector that is using the <strong>find()</strong> function, then what is the time complexity of the <strong>search</strong> operation? </p>","a":[{"id":728608,"option":"O(n)","correct":true},{"id":728609,"option":"O(logn)","correct":false},{"id":728610,"option":"O(nlogn)","correct":false},{"id":728611,"option":"O(1)","correct":false}]},{"q":"<p>In C++, assume that you are working with lists. You have two containers <em>c1 </em>and<em> c2</em> which contains the sorted elements as per the sorting criteria <em>op()</em>. Which of these operations will you use to move all elements of <em>c2</em> into <em>c1 </em>such that all elements are merged and still sorted according to <em>op()</em>?</p>","a":[{"id":728632,"option":"c2.merge(c1,op) ","correct":false},{"id":728633,"option":"c2.unique(c1,op) ","correct":false},{"id":728634,"option":"c1.merge(c2,op) ","correct":true},{"id":728635,"option":"c1.unique(c2,op) ","correct":false}]},{"q":"<p>In C++, which of these methods can be used to merge two sorted linked lists:</p>\n\n<ol>\n\t<li>Using dummy nodes</li>\n\t<li>Using local references</li>\n\t<li>Using recursion</li>\n</ol>","a":[{"id":728596,"option":"1 and 3","correct":false},{"id":728597,"option":"1 and 2","correct":false},{"id":728598,"option":"2 and 3","correct":false},{"id":728599,"option":"All of these","correct":true}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;vector&gt;\nusing namespace std;\nint main()\n{\n    int myints[] = { 10, 20, 30, 30, 20, 10, 10, 20 };\n    vector&lt;int&gt; v(myints, myints + 8);\n    sort(v.begin(), v.end());\n    vector&lt;int&gt;::iterator low, up;\n    low = lower_bound(v.begin(), v.end(), 20);\n    up = upper_bound(v.begin(), v.end(), 20);\n    cout &lt;&lt; (low - v.begin()) &lt;&lt; ' ';\n    cout &lt;&lt; (up - v.begin());\n    return 0;\n}\n</code></pre>","a":[{"id":143342,"option":"3 6","correct":true},{"id":143343,"option":"2 5","correct":false},{"id":143344,"option":"5 2","correct":false},{"id":143345,"option":"1 6","correct":false}]},{"q":"<p>In C++, which of the following statements is true when a base class pointer points to a derived class object?</p>","a":[{"id":154172,"option":"It can access only the base class members.","correct":true},{"id":154173,"option":"It can access only the derived virtual class members.","correct":false},{"id":154174,"option":"Both of these","correct":false},{"id":154175,"option":"None of these","correct":false}]},{"q":"<p>In C++, which of the following statements about the <strong>multiple</strong> inheritance is correct:</p>\n\n<ol>\n\t<li>One class can inherit one class</li>\n\t<li>One class can inherit more than one class.</li>\n\t<li>The constructors of inherited classes are called in the same order in which they are inherited.</li>\n</ol>\n\n<p> </p>","a":[{"id":134063,"option":"1 and 2","correct":false},{"id":134064,"option":"2 and 3","correct":true},{"id":134065,"option":"1 and 3","correct":false},{"id":134066,"option":"All of these","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\nint operate(int a, int b)\n{\n    return (a * b);\n}\nfloat operate(float a, float b)\n{\n    return (a / b);\n}\nint main()\n{\n    int x = 5, y = 2;\n    float n = 5.0, m = 2.0;\n    cout &lt;&lt; operate(x, y) &lt;&lt; ' ';\n    cout &lt;&lt; operate(n, m);\n    return 0;\n}\n</code></pre>","a":[{"id":154092,"option":"10.0 5.0","correct":false},{"id":154093,"option":"5.0 2.5","correct":false},{"id":154094,"option":"10.0 5","correct":false},{"id":154095,"option":"10 2.5","correct":true}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\nint main()\n{\n    vector&lt;int&gt; val1(3, 1);\n    vector&lt;int&gt; val2(1, 5);\n    val2 = val1;\n    val1 = vector&lt;int&gt;();\n    cout &lt;&lt; \"Size of val1 \" &lt;&lt; int(val1.size()) &lt;&lt; '\\n';\n    cout &lt;&lt; \"Size of val2 \" &lt;&lt; int(val2.size()) &lt;&lt; '\\n';\n    return 0;\n}\n</code></pre>","a":[{"id":132065,"option":"Size of val1 3\r\nSize of val2 5","correct":false},{"id":132066,"option":"Size of val1 0\r\nSize of val2 3","correct":true},{"id":132067,"option":"Size of val1 3\r\nSize of val2 1","correct":false},{"id":132068,"option":"None of these","correct":false}]},{"q":"<p>In C++, if an array is declared as <strong>int a[4] = {3, 0, 1, 2}</strong>, then whiich of these values will be assigned to <strong>a[0]</strong> and <strong>a[4] </strong>respectively?</p>","a":[{"id":159214,"option":"3 and 2","correct":false},{"id":159215,"option":"0 and 2","correct":false},{"id":159216,"option":"3 and 0","correct":true},{"id":159217,"option":"0 and 4","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\nvoid swap(int&amp; a, int&amp; b);\nint main()\n{\n    int a = 5, b = 10;\n    swap(a, b);\n    cout &lt;&lt;a &lt;&lt; b;\n    return 0;\n}\nvoid swap(int&amp; a, int&amp; b)\n{\n    int temp;\n    temp = a;\n    a = b;\n    b = temp;\n    cout &lt;&lt; a &lt;&lt; b ;\n}\n</code></pre>","a":[{"id":147557,"option":"105105","correct":true},{"id":147558,"option":"510510","correct":false},{"id":147559,"option":"510105","correct":false},{"id":147560,"option":"105510","correct":false}]},{"q":"<p>In C++, which of the following is the index of the <strong>first element</strong> and <strong>last element </strong>of an array of size<strong> n</strong> respectively?</p>","a":[{"id":157907,"option":"0 and n-1","correct":true},{"id":157908,"option":"1 and n-1","correct":false},{"id":157909,"option":"0 and n","correct":false},{"id":157910,"option":"1 and n","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt; \nusing namespace std; \n\nstruct Point { \n\tint x, y; \n}; \n\nint main() \n{ \n\tstruct Point arr[10]; \n\tarr[0].x = 10; \n\tarr[0].y = 20; \n\tcout &lt;&lt; arr[0].x &lt;&lt; \" \" &lt;&lt; arr[0].y; \n\treturn 0; \n} \n</code></pre>\n\n<p> </p>","a":[{"id":133911,"option":"10","correct":false},{"id":133912,"option":"10 10","correct":false},{"id":133913,"option":"10 20","correct":true},{"id":133914,"option":"Compilation error","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\nvoid func(int x)\n{\n    cout &lt;&lt; x;\n}\nint main()\n{\n    void (*n)(int);\n    n = &amp;func;\n    (*n)(1);\n    n(1);\n    return 0;\n}\n</code></pre>","a":[{"id":132113,"option":"22","correct":false},{"id":132114,"option":"12","correct":false},{"id":132115,"option":"11","correct":true},{"id":132116,"option":"1","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\n using namespace std;\n int main()\n{\n  int hack = 060 + 40 + 0x40;\n  cout &lt;&lt; sizeof(hack)&lt;&lt;'\\n';\n  return 0;\n}\n</code></pre>","a":[{"id":132629,"option":"10","correct":false},{"id":132630,"option":"8","correct":false},{"id":132631,"option":"4","correct":true},{"id":132632,"option":"6","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\n\ntemplate &lt;typename T, int count&gt;\nvoid foo(T x)\n{\n    T val[count];\n    for (int i = 0; i &lt; count; i++) {\n        val[i] = x++;\n        cout &lt;&lt; val[i] &lt;&lt; \" \";\n    }\n};\nint main()\n{\n    float y = 2.1;\n    foo&lt;float, 3&gt;(y);\n}\n</code></pre>","a":[{"id":251779,"option":"2.1","correct":false},{"id":251780,"option":"2.1 3.1 4.1 ","correct":true},{"id":251781,"option":"3.1","correct":false},{"id":251782,"option":"4.1 ","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass A {\npublic:\n    int data;\n    virtual void fun()\n    {\n    }\n    virtual void fun1()\n    {\n    }\n    virtual void fun2()\n    {\n    }\n};\nint main()\n{\n    A a;\n    cout &lt;&lt; sizeof(a) &lt;&lt; endl;\n    return 0;\n}\n</code></pre>","a":[{"id":251630,"option":"4","correct":false},{"id":251631,"option":"8","correct":false},{"id":251632,"option":"16","correct":true},{"id":251633,"option":"32","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    int a = 5, b = 10, c = 15;\n    int* arr[] = { &amp;a, &amp;b, &amp;c };\n    cout &lt;&lt; arr[1];\n    return 0;\n}\n</code></pre>","a":[{"id":143147,"option":"5\r\n","correct":false},{"id":143148,"option":"10","correct":false},{"id":143149,"option":"15","correct":false},{"id":143150,"option":"Memory address of b is returned\r\n","correct":true}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt; \nusing namespace std; \n\nint main() \n{ \n\tint arr[5]; \n\tarr[0] = 5; \n\tarr[2] = -10; \n\tarr[3 / 2] = 2; \n\tarr[3] = arr[0]; \n\tcout &lt;&lt; arr[0] &lt;&lt; \" \" &lt;&lt; arr[1] \n\t\t&lt;&lt; \" \" &lt;&lt; arr[2] &lt;&lt; \" \" &lt;&lt; arr[3]; \n\treturn 0; \n} \n</code></pre>\n\n<p> </p>","a":[{"id":154012,"option":"5 -10","correct":false},{"id":154013,"option":"5 -10 2 5","correct":false},{"id":154014,"option":"5 2 -10 5","correct":true},{"id":154015,"option":"Compilation error","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include&lt;iostream&gt; \nusing namespace std; \n\nclass Test \n{ \n    private: \n    int x; \n    public: \n    void setX (int x) \n    { \n        this-&gt;x = x; \n    } \n    void print() \n    { \n        cout &lt;&lt;x &lt;&lt; endl; \n    } \n}; \n\nint main() \n{ \n    Test obj; \n    int x = 20; \n    obj.setX(x); \n    obj.print(); \n    return 0; \n} \n</code></pre>\n\n<p> </p>","a":[{"id":153888,"option":"20","correct":true},{"id":153889,"option":"0","correct":false},{"id":153890,"option":"Compilation error","correct":false},{"id":153891,"option":"Compiles successfully but nothing is printed","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\nlong factorial(long a)\n{\n    if (a &gt; 1)\n        return (a * factorial(a + 1));\n    else\n        return (1);\n}\nint main()\n{\n    long num = 3;\n    cout &lt;&lt; num &lt;&lt; \"! = \" &lt;&lt; factorial(num);\n    return 0;\n}\n</code></pre>","a":[{"id":147789,"option":"3! = 6","correct":false},{"id":147790,"option":"3! = 24","correct":false},{"id":147791,"option":"Segmentation fault error","correct":true},{"id":147792,"option":"Syntax error","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    int num[2][3]={ {1,2}, {3,4}, {5, 6} };\n    cout&lt;&lt;num[1][2];\n}\n</code></pre>","a":[{"id":132909,"option":"2","correct":false},{"id":132910,"option":"4","correct":false},{"id":132911,"option":"3","correct":false},{"id":132912,"option":"Compilation error","correct":true}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\nint main()\n{\n    string s = \" Welcome to Hacker Erath\";\n    s.erase(remove(s.begin(), s.end(), ' '), s.end());\n    cout &lt;&lt; s &lt;&lt; endl;\n}\n</code></pre>","a":[{"id":143482,"option":"Compilation error","correct":false},{"id":143483,"option":"HackerEarth","correct":false},{"id":143484,"option":"Welcometo","correct":false},{"id":143485,"option":"WelcometoHackerEarth","correct":true}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\nint mult(int x, int y)\n{\n    int result;\n    result = 0;\n    while (y != 0) {\n        result = result + x;\n        y = y - 1;\n    }\n    return (result);\n}\nint main()\n{\n    int x = 9, y = 6;\n    cout &lt;&lt; mult(x, y);\n    return (0);\n}\n</code></pre>","a":[{"id":146180,"option":"45","correct":false},{"id":146181,"option":"54","correct":true},{"id":146182,"option":"63","correct":false},{"id":146183,"option":"9","correct":false}]},{"q":"<p>In C++, which of the following is a function call mechanism that passes arguments to a function by passing a copy of the values of the arguments?</p>","a":[{"id":154439,"option":"Call by name","correct":false},{"id":154440,"option":"Call by value","correct":true},{"id":154441,"option":"Call by key","correct":false},{"id":154442,"option":"None of these","correct":false}]},{"q":"<p>In C++, which of the following members of the class can be accessed by a <strong>friend</strong> function in which it is defined?</p>","a":[{"id":132973,"option":"Private only","correct":false},{"id":132974,"option":"Protected only","correct":false},{"id":132975,"option":"Both of these","correct":true},{"id":132976,"option":"None of these","correct":false}]},{"q":"<p>In C++, which of the following is called <strong>multiple inheritance</strong>?</p>","a":[{"id":154176,"option":"Deriving a class from a base class which derives from another class","correct":false},{"id":154177,"option":"Deriving a class from a base class","correct":false},{"id":154178,"option":"Deriving a class from more than one base classes","correct":true},{"id":154179,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include&lt;iostream&gt; \nusing namespace std; \n\nclass Myclass\n{ \n\tprivate: \n\t\tint x; \n\tpublic: \n\t\tvoid set(int a) \n\t\t{ \n\t\t\tx =a; \n\t\t} \n\t\tint get() \n\t\t{ \n\t\t\treturn x; \n\t\t} \n}; \nint main() \n{ \n\tMyclass obj; \n\tobj.set(5); \n\tcout&lt;&lt;obj.get(); \n\treturn 0; \n} \n</code></pre>\n\n<p> </p>","a":[{"id":133338,"option":"5","correct":true},{"id":133339,"option":"0","correct":false},{"id":133340,"option":"Compilation error","correct":false},{"id":133341,"option":"Runtime error","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\nint main()\n{\n    int numbers[] = { 10, -20, 130, 40, 150 };\n    int cx;\n    cx = count_if(numbers, numbers + 5, bind2nd(less&lt;int&gt;(), 0));\n    cout &lt;&lt; cx;\n    return 0;\n}\n</code></pre>","a":[{"id":143262,"option":"1","correct":true},{"id":143263,"option":"2","correct":false},{"id":143264,"option":"3","correct":false},{"id":143265,"option":"4","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\nint main()\n{\n    int numbers[] = { 10, -20, -30, 40, -50 };\n    int cx;\n    cx = count_if(numbers, numbers + 5, bind2nd(less&lt;int&gt;(), 0));\n    cout &lt;&lt; cx;\n    return 0;\n}\n</code></pre>","a":[{"id":143258,"option":"1","correct":false},{"id":143259,"option":"3","correct":true},{"id":143260,"option":"4","correct":false},{"id":143261,"option":"2","correct":false}]},{"q":"<p>Which of these statements about the following C++ code is true:</p>\n\n<pre class=\"prettyprint\"><code>int num[10];  \nnum[10]=13;   \n</code></pre>\n\n<p> </p>","a":[{"id":133741,"option":"In the first statement, 10 denotes a particular element, whereas in the second statement it denotes a type.","correct":false},{"id":133742,"option":"In the first statement, 10 denotes the array size, whereas in the second statement it denotes a particular element of the array.","correct":true},{"id":133743,"option":"In the first statement, 10 denotes a particular element, whereas in the second statement it denotes the array size.","correct":false},{"id":133744,"option":"In both the statements, 10 denotes the array size.","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include&lt;iostream&gt;\nusing namespace std;\n\n\nclass Base {\n    public:\n    Base(){\n        cout &lt;&lt; \"Base called \"&lt;&lt; endl;\n    }\n};\n\nclass Base1{\n    public:\n    Base1(){\n        cout &lt;&lt; \"Base1 called\"&lt;&lt; endl;\n    }\n};\n\nclass Derived: public Base, public Base1{\n    public:\n    Derived(){\n        cout &lt;&lt; \"Derived called\" &lt;&lt; endl; \n    }\n};\n\nint main(){\n    Derived d ;\n    return 0;\n}\n</code></pre>\n\n<p><strong>Output </strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Base called\nBase1 called</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Derived called\nBase1 called \nBase called</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Base called\nBase1 called\nDerived called</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Base called\nDerived Called</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":132149,"option":"1","correct":false},{"id":132150,"option":"2","correct":false},{"id":132151,"option":"3","correct":true},{"id":132152,"option":"4","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    int x, y, z;\n    x = 5;\n    y = ++x * x--;\n    z = ++y + --y;\n    cout &lt;&lt; x &lt;&lt; \", \"\n         &lt;&lt; y &lt;&lt; \", \"\n         &lt;&lt; z;\n    return 0;\n}\n</code></pre>","a":[{"id":132129,"option":"5, 35, 60","correct":false},{"id":132130,"option":"4, 25, 65","correct":false},{"id":132131,"option":"5, 30, 60","correct":true},{"id":132132,"option":"5, 35, 65","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include&lt;iostream&gt; \nusing namespace std; \n\nclass Base \n{ \n    int x; \n    public: \n        virtual void fun() = 0; \n        int getX() \n        { \n            return x; \n        } \n}; \n\nclass Derived: public Base \n{ \n\tint y; \n    public: \n\tvoid fun() \n    { \n        cout &lt;&lt; \"Hello HackerEarth!\"; \n    } \n}; \nint main(void) \n{ \n\tDerived d; \n\td.fun(); \n\treturn 0; \n} \n</code></pre>\n\n<p> </p>","a":[{"id":133314,"option":"Hello HackerEarth!","correct":true},{"id":133315,"option":"Prints nothing as an output","correct":false},{"id":133316,"option":"Compilation error","correct":false},{"id":133317,"option":"Runtime error","correct":false}]},{"q":"<p>In C++, which of the following statements about the Polymorphism technique are correct:</p>\n\n<ol>\n\t<li>Compile-time polymorphism is achieved by the function overloading or the operator overloading.</li>\n\t<li>Runtime polymorphism is achieved by the function overriding.</li>\n\t<li>Compile-time polymorphism is achieved by both function overloading and function overriding.</li>\n</ol>\n\n<p> </p>","a":[{"id":157855,"option":"1 and 2","correct":true},{"id":157856,"option":"2 and 3","correct":false},{"id":157857,"option":"1 and 3","correct":false},{"id":157858,"option":"All of these","correct":false}]},{"q":"<p>In C++, which of the following statements about the Friend class are correct?</p>\n\n<p> </p>","a":[{"id":154244,"option":"It can access only protected and public members of other class in which it is derived as a class.","correct":false},{"id":154245,"option":"It can access private and protected members of other class in which it is declared as a friend.","correct":true},{"id":154246,"option":"It can access only private members of other class in which it is derived as a friend","correct":false},{"id":154247,"option":"None of these","correct":false}]},{"q":"<p>In C++, if class <strong>C</strong> is derived from class <strong>B </strong>that is derived from class <strong>A </strong>through public inheritance, then which of the following data can be accessed by class <strong>C</strong>?</p>","a":[{"id":134119,"option":"Protected and Private data of B","correct":false},{"id":134120,"option":"Protected and Public data of A","correct":false},{"id":134121,"option":"Protected and Private data of A and B","correct":false},{"id":134122,"option":"Protected data of A and B","correct":true}]}]
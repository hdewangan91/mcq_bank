[{"q":"<p>Determine the output of the given code snippet:</p>\n\n<p><strong>Code snippet</strong></p>\n\n<pre class=\"prettyprint\"><code>abstract class School {\npublic School() {\nSystem.out.println(\"School\");\nmyMethod();\n}\nabstract void myMethod();\n}\nclass Teacher extends School {\npublic Teacher() {\nSystem.out.println(\"Teacher\");\nnew School();\n}\n@Override\nvoid myMethod() {\nSystem.out.println(\"Abstract\");\n}\n}\npublic class Main {\npublic static void main(String[] args) {\nSchool sch = new Teacher();\nsch.myMethod();\n}\n}</code></pre>","a":[{"id":1655817,"option":"Teacher School Abstract","correct":false},{"id":1655818,"option":"School Teacher School Abstract","correct":false},{"id":1655819,"option":"Teacher School Abstract Abstract","correct":false},{"id":1655820,"option":"Compilation Error","correct":true}]},{"q":"<p>A Java program has the following three classes:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>private class A{\n.....\n}\nprivate class B{\nstatic class C{\n...}\n}\npublic class D{\n....\n}</code></pre>\n\n<p>What is the name of this Java file?</p>","a":[{"id":1655797,"option":"B.java","correct":false},{"id":1655798,"option":"C.java","correct":false},{"id":1655799,"option":"D.java","correct":true},{"id":1655800,"option":"A.java","correct":false}]},{"q":"<p>Which of the below given methods will be called when you execute the following line of code?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>add(1,2);</code></pre>\n\n<p><strong>Options:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>void add(float a, double b)\n{\ndouble sum = a+b;\n}</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>void add(double a, float b)\n{\ndouble sum = a+b;\n}</code></pre>\n\t</li>\n</ol>","a":[{"id":1655901,"option":"Only 1","correct":false},{"id":1655902,"option":"Only 2","correct":false},{"id":1655903,"option":"Both 1 and 2","correct":false},{"id":1655904,"option":"Both methods are equally compatible/ambiguous, so it will give a compilation error","correct":true}]},{"q":"<p>Which of the following lines of code represents the correct syntax to use extends keyword?</p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>class Run {\n .....\n}\nclass Sun extends Run {\n .....\n .....\n}</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>class Run {\n .....\n}\nclass Sun {\n extends Run\n .....\n}</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>class Run extends Run {\n .....\n}\nclass Sun extends Run {\n .....\n .....\n}</code></pre>","a":[{"id":1655897,"option":"1","correct":true},{"id":1655898,"option":"2","correct":false},{"id":1655899,"option":"3","correct":false},{"id":1655900,"option":"None of these","correct":false}]},{"q":"<p>What will be the output of the following code snippet given below?<br>\n<strong>Code -</strong></p>\n\n<pre class=\"prettyprint\"><code>abstract class School \n{\n    int i = 0;\n    public School() \n    {\n        display();\n        i=2;\n    }\n    abstract void myMethod();\n    void display()\n    {\n        System.out.println(i);\n    }\n}\ninterface Student\n{\n    abstract void myMethod();\n}\nclass Teacher extends School implements Student \n{\n    public Teacher() \n    {\n        super();\n        i=1;\n    }\n    @Override\n    public void myMethod() \n    {\n        new Teacher();\n    }\n}\nclass Marks extends Teacher\n{\n    public Marks()\n    {\n        i=5;\n        myMethod();\n    }\n}\npublic class Main \n{\n    public static void main(String[] args) \n    {\n        Marks stu = new Marks();\n    }\n}</code></pre>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>0\n0</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>2</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>5\n0</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>2\n2</code></pre>\n\t</li>\n</ol>","a":[{"id":1655821,"option":"1","correct":true},{"id":1655822,"option":"2","correct":false},{"id":1655823,"option":"3","correct":false},{"id":1655824,"option":"4","correct":false}]},{"q":"<p>In Object-Oriented Programming, determine the output of the following pseudocode:</p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>Public Class Main:\n    Public Function Main:\n        Invoke Obj.Method1(0) // Object for Class Q\n    END\n    \nClass P:\n    PRIVATE INTEGER FUNCTION Method1(INTEGER Var):\n        RETURN POST_INCR(Var)\n    END\n    PUBLIC INTEGER FUNCTION Method2(INTEGER Var):\n        Print(Var)\n        RETURN POST_INCR(Var)\n    END\n    \nClass Q Inherits Class P and defines:\n    INTEGER FUNCTION Method1(INTEGER Var):\n        RETURN FUNCTION Method2(PRE_INCR(Var))\n    END</code></pre>\n\n<p><em>Notes</em></p>\n\n<ol>\n\t<li>The method POST_INCR(VARIABLE x) computes the post-increment value of the variable x.</li>\n\t<li>The method PRE_INCR(VARIABLE x) computes the pre-increment value of the variable x.</li>\n</ol>\n\n<p><strong>Output</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>0\n0</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>1\n1</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>-1\n-1</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>1\n-1</code></pre>","a":[{"id":1627170,"option":"1","correct":false},{"id":1627171,"option":"2","correct":true},{"id":1627172,"option":"3","correct":false},{"id":1627173,"option":"4","correct":false}]},{"q":"<p>What is the output of the following Pseudocode:</p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>ABSTRACT CLASS Myclass1:\n    ABSTRACT STATIC CLASS Myclass2:\n        SET STATIC VAR INTEGER i = 0\n        PUBLIC VOID FUNCTION func1:\n            //Nothing new is added here\n        END\n        STATIC VOID FUNCTION func2:\n            PRINT i //Myclass1.Myclass2.i\n        END\n            \nPUBLIC CLASS Main inherits CLASS Myclass1.Myclass2 and defines:\n    PUBLIC VOID FUNCTION func1:\n        SET VAR i = 1 \n        PUBLIC FUNCTION Main:\n        SET OBJECT obj as new Object for Class Main() /*This is the object created for the class \n                                                      Myclass1.Myclass2 */\n        INVOKE obj.func1\n        INVOKE Myclass1.func2\n    END</code></pre>","a":[{"id":1700790,"option":"1","correct":true},{"id":1700791,"option":"0","correct":false},{"id":1700792,"option":"Garbage value","correct":false},{"id":1700793,"option":"Compilation error","correct":false}]},{"q":"<p>What is the output of the following pseudocode:</p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>INTERFACE HACKEREARTH:\n    SET VAR STRING hack = \"Hi HackerEarth!\"\n    INVOKE FUNCTION func\nEND\n\nPUBLIC CLASS Main inherits INTERFACE HACKEREARTH and defines:\n    SET VAR STRING hack = \"Hello World!\"\n    \n    PUBLIC VOID FUNCTION func:\n        PRINT VAR hack\n    END\n        \n    PUBLIC FUNCTION Main:\n        SET Object obj as new Object for Class Main() /*This is the object created for the interface \n                                                        HACKEREARTH*/\n        INVOKE obj.func()\n    END\n</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1700786,"option":"Hi HackerEarth!","correct":false},{"id":1700787,"option":"Hello World!","correct":true},{"id":1700788,"option":"Compilation error","correct":false},{"id":1700789,"option":"None of these","correct":false}]},{"q":"<p>If you are required to execute the following pseudocode, then determine the technique from Object-Oriented programming that is implemented in this scenario:</p>\n\n<p><strong>Pseudocode</strong></p>\n\n<pre class=\"prettyprint\"><code>CLASS HACKEREARTH:\n    PRIVATE VAR STRING name\n    PRIVATE VAR INTEGER age\n\n    PUBLIC INTEGER FUNCTION GET_AGE:\n        RETURN age\n    END\n        \n    PUBLIC STRING FUNCTION GET_NAME:\n        RETURN name\n    END\n        \n    PUBLIC VOID FUNCTION SET_NAME(STRING VAR name1):\n        SET name = name1\n    END\n        \n    PUBLIC VOID FUNCTION SET_AGE(INTEGER VAR age1):\n        SET age = age1\n    END\nEND CLASS HACKEREARTH\n\n\nPUBLIC FUNCTION Main:\n    INVOKE obj.SET_NAME(\"Alice\")\n    INVOKE obj.SET_AGE(25)\n    PRINT \"Programmer is \" and obj.GET_NAME\n    PRINT \"Age is \" and obj.GET AGE\nEND</code></pre>","a":[{"id":1700782,"option":"Abstraction","correct":false},{"id":1700783,"option":"Encapsulation","correct":true},{"id":1700784,"option":"Polymorphism","correct":false},{"id":1700785,"option":"Inheritance","correct":false}]},{"q":"<p>What is the output of the given Ruby code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>class Class1\n\n    def initialize\n        @name = \"Class1\"\n    end\n\n    private\n\n     def func2\n         puts \"result1\"\n     end\n\n    protected\n\n     def func3\n         puts \"result2\"\n     end\n\n    public\n\n     def get_name\n         return @name\n     end\nend\n\n\nclass Class2 &lt; Class1\n\n    def func1\n        func2\n        func3\n    end\nend\n\nd = Class2.new\nd.func1\nputs d.get_name</code></pre>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>result2\nresult1\nClass1</code></pre>\n\n\t<p>&nbsp;</p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Class1\nresult1\nresult2</code></pre>\n\n\t<p>&nbsp;</p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>result1\nresult2\nClass1</code></pre>\n\t</li>\n</ol>","a":[{"id":1770811,"option":"Error/Exception","correct":false},{"id":1770812,"option":"1","correct":false},{"id":1770813,"option":"2","correct":false},{"id":1770814,"option":"3","correct":true}]},{"q":"<p>What is the output of the given Ruby code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>class Class1\n\n    @@temp = 0\n\n    def initialize\n        @@temp += 1\n        puts \"Class1\"\n    end\n\n    def show_count\n        \"#{@@temp}\"\n    end\n\nend\n\nclass Class2 &lt; Class1\n\n   def initialize\n       super\n       puts \"Class2\"\n   end\nend\n\nclass Class3 &lt; Class1\n\n   def initialize\n       super\n       puts \"Class3\"\n   end\nend\n\nclass Class4 &lt; Class3\n\n   def initialize\n       super\n       puts \"Class4\"\n   end\nend\n\nClass2.new\nd = Class4.new\nputs d.show_count</code></pre>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Class1\nClass2\nClass1\nClass3\nClass4\n2</code></pre>\n\n\t<p>&nbsp;</p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Class1\nClass2\nClass3\nClass4\n1</code></pre>\n\n\t<p>&nbsp;</p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Class1\nClass2\nClass3\nClass4\n2</code></pre>\n\n\t<p>&nbsp;</p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Class1\nClass1\nClass2\nClass1\nClass3\nClass3\nClass4\n3</code></pre>\n\t</li>\n</ol>","a":[{"id":1770807,"option":"1","correct":true},{"id":1770808,"option":"2","correct":false},{"id":1770809,"option":"3","correct":false},{"id":1770810,"option":"4","correct":false}]},{"q":"<p>What is the output of the given Ruby code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>class Class1   \n  \n    def initialize   \n        puts \"Class1\"   \n    end   \nend   \n  \nclass Class2 &lt; Class1   \n  \n   def initialize   \n       super   \n       puts \"Class2\"   \n   end   \nend   \n  \nClass1.new   \nClass2.new  </code></pre>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Class1\nClass2</code></pre>\n\n\t<p>&nbsp;</p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Class1\nClass1\nClass2</code></pre>\n\n\t<p>&nbsp;</p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Class1\nClass1</code></pre>\n\n\t<p>&nbsp;</p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Class2\nClass1\nClass2</code></pre>\n\t</li>\n</ol>","a":[{"id":1770799,"option":"1","correct":false},{"id":1770800,"option":"2","correct":true},{"id":1770801,"option":"3","correct":false},{"id":1770802,"option":"4","correct":false}]},{"q":"<p>What is the output to the following code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#import &lt;Foundation/Foundation.h&gt;\n@interface Box:NSObject\n{ double l;   \n        double b; \n        double h;   }\n@property(nonatomic, readwrite) double hei;\n-(double) volume;\n@end\n@implementation Box\n@synthesize hei; \n-(id)init\n{   self = [super init];\n        l= 1.0;\n        b = 1.0;\n        return self; }\n-(double) volume\n{return l*b*h;}\n@end\nint main()\n{ NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init];    \n        Box *box = [[Box alloc]init];\n        double vol = 0.0; \n        box1.h= 5.0; \n        vol = [box1 vol];\n        NSLog(@\"Volume of box = %f\", vol);\n        [pool drain];\n        return 0; }</code></pre>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>","a":[{"id":1769403,"option":"Volume of box1 = NULL","correct":false},{"id":1769404,"option":"Volume of box1 = 5.000000","correct":true},{"id":1769405,"option":"Syntax error","correct":false},{"id":1769406,"option":"Volume of box1 = 1.000000","correct":false}]},{"q":"<p>What is the output to the following code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#import\n@interface Adder : NSObject {\n            NSInteger t; }\n- (id)initWithInitialNumber:(NSInteger)initialNumber;\n- (void)addNumber:(NSInteger)newNumber;\n- (NSInteger)total;\n@end\n@implementation Adder\n-(id)initWithInitialNumber:(NSInteger)initial {\n  t = initial;\n  return self;}\n- (void)addNumber:(NSInteger)n {\n  t= t + n;}\n- (NSInteger)total {\n  return t;}\n@end\nint main(int argc, const char * argv[]) {\n   NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init];\n   Adder *add = [[Adder alloc]initWithInitialNumber:277];\n   [add addNumber:6];\n   [add addNumber:99];\n   NSLog(@\"The total is %ld\",[add total]);\n   [pool drain];\n   return 0;\n}</code></pre>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>","a":[{"id":1769680,"option":"The total is 382","correct":true},{"id":1769681,"option":"The total is 104","correct":false},{"id":1769682,"option":"The total is 6","correct":false},{"id":1769683,"option":"No error","correct":false}]},{"q":"<p>What is the output to the following code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#import\n@interface Box:NSObject {\n //Instance variables\n double length;\n double breadth;\n}\n@property(nonatomic, readwrite) double height;\n@end\nint main() {\n  NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init];\n  double volume = 0.0;\n  box1.breadth = 5.0;\n  NSLog(@\"breadth of the box : %f\", breadth);\n  return 0;\n}</code></pre>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>","a":[{"id":1769668,"option":"breadth of the box=5.0","correct":false},{"id":1769669,"option":"breadth of the box=0.0","correct":false},{"id":1769670,"option":"error","correct":true},{"id":1769671,"option":"no output","correct":false}]},{"q":"<p>You have written a code for creating two classes Class1 and Class2. Class2 is child of/derived from Class1. There is a variable \"x\" in Class1 which should only be accessible in that class and another variable \"y\" in Class2 should be accessible anywhere inside the module. But, in the given code, x and y are accessible in the wrong way.</p>\n\n<pre class=\"prettyprint\"><code>open class Class1{\n   var x = 10\n}\nclass Class2{\n   private var y = 20\n}\nfun main(){\n   val class1=Class1()\n   val class2=Class2()\n}</code></pre>\n\n<p><br>\nAs the code is giving the wrong output, which of the following option is the correct code?</p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1</strong></p>\n\n<pre class=\"prettyprint\"><code>open class Class1{\n   public var x = 10\n}\nclass Class2{\n   internal var y = 20\n}\nfun main(){\n   val class1=Class1()\n   val class2=Class2()\n}</code></pre>\n\n<p><strong>2</strong></p>\n\n<pre class=\"prettyprint\"><code>open class Class1{\n   internal var x = 10\n}\nclass Class2{\n   private var y = 20\n}\nfun main(){\n   val class1=Class1()\n   val class2=Class2()\n}</code></pre>\n\n<p><strong>3</strong></p>\n\n<pre class=\"prettyprint\"><code>open class Class1{\n   private var x = 10\n}\nclass Class2{\n   internal var y = 20\n}\nfun main(){\n   val class1=Class1()\n   val class2=Class2()\n}</code></pre>\n\n<p><strong>4</strong></p>\n\n<pre class=\"prettyprint\"><code>open class Class1{\n   protected var x = 10\n}\nclass Class2{\n   private var y = 20\n}\nfun main(){\n   val class1=Class1()\n   val class2=Class2()\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1764921,"option":"1","correct":false},{"id":1764922,"option":"2","correct":false},{"id":1764923,"option":"3","correct":true},{"id":1764924,"option":"4","correct":false}]},{"q":"<p>What is the output of the given code snippet:</p>\n\n<p><strong>Code snippet</strong></p>\n\n<pre class=\"prettyprint\"><code>import kotlin.properties.Delegates\nclass Class1{\n    var name: String by Delegates.observable(\"Hello\"){\n       prop, temp1, temp2 -&gt; println(\"$temp1 $temp2\")\n    }\n    val temp: String by lazy{\n       \"Hello\"\n    }\n}\nfun main(args: Array&lt;String&gt;){\n    val class1=Class1()\n    class1.name=\"Alice\"\n    class1.name=\"Smith\"\n    println(class1.temp)\n}</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1764945,"option":"Error","correct":false},{"id":1764946,"option":"Hello -> Alice Smith\r\nHello","correct":false},{"id":1764947,"option":"Hello -> Alice\r\nAlice -> Smith\r\nHello","correct":true},{"id":1764948,"option":"Hello -> Alice\r\nHello -> Smith\r\nHello","correct":false}]},{"q":"<p>What is the output of the following C++ Code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\n\nclass HackClass1 \n{\n  public:\n    void hackfunc() \n    {\n      cout &lt;&lt; \"I love C++\" ;\n    }\n};\n\n\nclass HackClass2 : public HackClass1 \n{\n  public:\n    void hackfunc() \n    {\n      cout &lt;&lt; \"Hello World!\" ;\n    }\n};\n\nclass HackClass3 : public HackClass1 \n{\n  public:\n    void hackfunc() \n    {\n      cout &lt;&lt; \"Hi HackerEarth!\" ;\n    }\n};\n\nint main() \n{\n  HackClass3 myHackObj;\n  myHackObj.hackfunc();\n  return 0;\n}</code></pre>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>I love C++</code></pre>\n\n\t<p>&nbsp;</p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hello World!</code></pre>\n\n\t<p>&nbsp;</p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Hi HackerEarth!</code></pre>\n\n\t<p>&nbsp;</p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>I love C++\nHello World!\nHi HackerEarth!</code></pre>\n\t</li>\n</ol>","a":[{"id":1758561,"option":"1","correct":false},{"id":1758562,"option":"2","correct":false},{"id":1758563,"option":"3","correct":true},{"id":1758564,"option":"4","correct":false}]},{"q":"<p>What is the output of the following C++ code:</p>\n\n<pre class=\"prettyprint\"><code>#include &lt;iostream&gt; \nusing namespace std; \nclass hack_base \n{ \n    public: \n        void hack_func1() \n        { \n            cout &lt;&lt; \"One\\n\"; \n            \n        } \n        virtual void hack_func2() \n        { \n            cout &lt;&lt; \"Two\\n\"; \n            \n        } \n        virtual void hack_func3() \n        { \n            cout &lt;&lt; \"Three\\n\"; \n            \n        } \n        virtual void hack_func4() \n        { \n            cout &lt;&lt; \"Four\\n\"; \n            \n        } \n}; \n  \nclass hack_derived : public hack_base \n{ \n    public: \n        void hack_func1() \n        { \n            cout &lt;&lt; \"1\\n\"; \n            \n        } \n        void hack_func2() \n        { \n            cout &lt;&lt; \"2\\n\"; \n        } \n}; \n  \nint main() \n{ \n    hack_base* p; \n    hack_derived obj1; \n    p = &amp;obj1; \n    p-&gt;hack_func1(); \n    p-&gt;hack_func2(); \n    p-&gt;hack_func3(); \n    p-&gt;hack_func4(); \n}</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>1\n2\nThree\nFour</code></pre>\n\n<p>2.&nbsp;</p>\n\n<pre class=\"prettyprint\"><code>1\nTwo\nThree\nFour</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>One\n2\nThree\nFour</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>One\n1\nTwo\n2\nThree\nFour</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1408082,"option":"1","correct":false},{"id":1408083,"option":"2","correct":false},{"id":1408084,"option":"3","correct":true},{"id":1408085,"option":"4","correct":false}]},{"q":"<p>What is the output of the given code snippet:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>fun main() {\n    val class1 = class1(5.0)\n    class1.shapeName(\"class1\")\n    val class2 = class2(2.0,3.0,4.0)\n    class2.shapeName(\"class2\")\n}\nabstract class Master{\n    abstract fun area() : Double\n    abstract fun perimeter() : Double\n    fun shapeName(name:String){\n        println(\"The name of Master is $name\")  }\n}\nclass class1 (var radius : Double): Master(){\n    private val pi = 3.14\n    init {\n        println(\"The area of class1 is ${area()}\")\n        println(\"The perimeter of class1 is ${perimeter()}\") }\n    override fun area() = radius * radius * pi\n    override fun perimeter() = 2 * radius * pi\n}\nclass class2 (var a : Double, var b : Double,var c : Double): Master (){\n    init {\n        println(\"The area of class2 is ${area()}\")\n        println(\"The perimeter of perimeter is ${perimeter()}\") }\n    override fun area(): Double = Math.sqrt((perimeter() / 2) * (perimeter() / 2 - a) * (perimeter() / 2 - b) * (perimeter() / 2 - c))\n    override fun perimeter() = a + b + c\n}</code></pre>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>The area of class1 is 78.5\nThe perimeter of class1 is 31.400000000000002\nThe name of Master is class1\nThe area of class2 is 2.9047375096555625\nThe perimeter of perimeter is 9.0\nThe name of Master is class2</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>The area of class1 is 9.0\nThe perimeter of class1 is 2.9047375096555625\nThe name of Master is class2\nThe area of class2 is 31.400000000000002\nThe perimeter of perimeter is 78.5\nThe name of Master is class1</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>The area of class1 is 23.5\nThe perimeter of class1 is 55.400000000000002\nThe name of Master is class1\nThe area of class2 is 6.9047375096555625\nThe perimeter of perimeter is 6.0\nThe name of Master is class2</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>The area of class1 is 23.5\nThe perimeter of class1 is 31.400000000000002\nThe name of Master is class1\nThe area of class2 is 6.9047375096555625\nThe perimeter of perimeter is 9.0\nThe name of Master is class2</code></pre>\n\t</li>\n</ol>","a":[{"id":1747282,"option":"1","correct":true},{"id":1747283,"option":"2","correct":false},{"id":1747284,"option":"3","correct":false},{"id":1747285,"option":"4","correct":false}]},{"q":"<p>You were asked to create a class with the name \"Student\" in Kotlin. In that class, you need to declare one primary constructor and one secondary constructor.<br>\nWhich of the following statement is true about the primary constructor?</p>\n\n<ol>\n\t<li>It should not contain any code.<br>\n\tclass ClassName constructor{}</li>\n\t<li>If it doesn't have any annotations, the constructor keyword can be omitted.<br>\n\tclass ClassName(variable: String){}</li>\n</ol>","a":[{"id":1747278,"option":"Only 1","correct":false},{"id":1747279,"option":"Only 2","correct":false},{"id":1747280,"option":"Both 1 and 2","correct":true},{"id":1747281,"option":"None of these","correct":false}]},{"q":"<p>Predict the output of the following code snippet.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>    abstract class Student {\n    protected abstract int marks(int a, int b);\n    public void percentage() {\n    }\n    }\n    class School extends Student {\n    int marks(int a, int b) {\n    return a/b;\n    }\n    }\n    public class Main {\n    public static void main(String[] args) {\n    School s = new School();\n    System.out.println(s.marks(10,1));\n    }\n    }</code></pre>\n\n<p> </p>","a":[{"id":1655777,"option":"10","correct":false},{"id":1655778,"option":"Compilation Error","correct":true},{"id":1655779,"option":"Runtime Error","correct":false},{"id":1655780,"option":"No Output","correct":false}]},{"q":"<p>Consider the two class definitions given alongside. Which of the following statements about the respective segment of code describes it correctly?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>public abstract class Diagram {\npublic String name;\n \npublic Diagram (String d) {\nname = d;\n}\npublic String toString( ) {\nreturn name;\n}\npublic abstract double calculatePerimeter( ); \npublic abstract double calculateArea( );\n} \n \n public class Circle extends Diagram {\nprivate double radius;\nprivate final double PI = 3.14;\n \npublic Circle (double r, String name){\nsuper(name);\nradius = r;\n} \npublic String toString( ) {\nreturn \"A circle of radius\" + radius; \n}\npublic double getPerimeter( ) {\nreturn 2*PI*radius;\n}\npublic double calculateArea( ) {\nreturn PI*radius*radius;\n}\n}</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<p>The class Circle cannot be instantiated, as it inherits from an abstract class</p>\n\n<p><strong>2.</strong></p>\n\n<p>The class Circle is a subclass of Diagram, and thus all the methods in Diagram are automatically implemented in Circle</p>\n\n<p><strong>3.</strong></p>\n\n<p>The class Circle does not need to implement the method calculatePerimeter( ) as it already has a getPerimeter( ) method</p>\n\n<p><strong>4.</strong></p>\n\n<p>This code will not compile</p>","a":[{"id":1656009,"option":"1","correct":false},{"id":1656010,"option":"2","correct":false},{"id":1656011,"option":"3","correct":false},{"id":1656012,"option":"4","correct":true}]},{"q":"<p>Consider the code snippet given alongside where two classes \"D1\" and \"D2\" are derived from a common class \"Base.\" Which of these options representing the association that is achieved through this design is true?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>class Base{\n}\nclass D1 extends Base{\n}\nclass D2 extends Base{\n}</code></pre>\n\n<p> </p>","a":[{"id":1656005,"option":"Generalization","correct":false},{"id":1656006,"option":"Aggregation","correct":false},{"id":1656007,"option":"Specialization","correct":false},{"id":1656008,"option":"Both 1 and 3","correct":true}]},{"q":"<p>Predict the output of the code snippet given alongside.</p>\n\n<pre class=\"prettyprint\"><code>class Class1 {\n public static void show() {\n System.out.println(\"In Class1::show()\");\n }\n}\n \nclass Class2 extends Class1 {\n public static void show() {\n System.out.println(\"In Class2::show()\");\n }\n}\n \nclass Main {\n public static void main(String[] args) {\n Class1 b = new Class2();\n b.show();\n }\n}</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<p>In Class1::show()</p>\n\n<p><strong>2.</strong></p>\n\n<p>In Class2::show()</p>\n\n<p><strong>3.</strong></p>\n\n<p>Runtime error</p>\n\n<p><strong>4.</strong></p>\n\n<p>Compile error</p>","a":[{"id":1656001,"option":"1","correct":true},{"id":1656002,"option":"2","correct":false},{"id":1656003,"option":"3","correct":false},{"id":1656004,"option":"4","correct":false}]},{"q":"<p>Predict the output of the code snippet given alongside.</p>\n\n<pre class=\"prettyprint\"><code>public class Test{\npublic static void main(String[] args){\nTeacher t = new Student();\nSystem.out.println(t.name);\n}}\nclass Teacher{\nString name=\"Sam\";\n}\nclass Student{\nString name=\"Kevin\";\n}</code></pre>\n\n<p> </p>","a":[{"id":1655993,"option":"Sam","correct":false},{"id":1655994,"option":"Kevin","correct":false},{"id":1655995,"option":"Compilation error","correct":true},{"id":1655996,"option":"Run-time error","correct":false}]},{"q":"<p>You want to enable the automatic conversion of a checked RemoteException to an unchecked RemoteException while performing remoting in Spring. Which of the following would you need to do to achieve this?</p>\n\n<p> </p>","a":[{"id":1655985,"option":"a non-Rmi interface needs to be provided","correct":true},{"id":1655986,"option":"a HTTPInvoker session needs to be supplied","correct":false},{"id":1655987,"option":"a Dispatcher servlet config file needs to be setup","correct":false},{"id":1655988,"option":"None of these","correct":false}]},{"q":"<p>Predict the output of the code snippet given alongside.</p>\n\n<p><strong>code:</strong></p>\n\n<pre class=\"prettyprint\"><code>public class Student{\nstatic{\nmain(new String[0]);}\npublic static void main(String[] args){\nSystem.out.println(\"Class-X\");\n}}</code></pre>\n\n<p> </p>","a":[{"id":1655813,"option":"Class-X","correct":false},{"id":1655814,"option":"Class-X Class-X","correct":true},{"id":1655815,"option":"Compilation error","correct":false},{"id":1655816,"option":"Run-time error","correct":false}]},{"q":"<p>Predict the output of the code snippet given alongside.</p>\n\n<p><strong>code:</strong></p>\n\n<pre class=\"prettyprint\"><code>public class Test{\npublic static void main(String[] args){\nStudent s0=new Student ();\nStudent s1= new Student ();\ns0.marks(s1);\n}}\nclass Student {\npublic void marks(Student s1){\nSystem.out.println(this==s1);\n}}</code></pre>\n\n<p> </p>","a":[{"id":1655809,"option":"1","correct":false},{"id":1655810,"option":"0","correct":true},{"id":1655811,"option":"Compilation error","correct":false},{"id":1655812,"option":"Run-time error","correct":false}]},{"q":"<p>Determine the output of the given code snippet.<br>\n<strong>  code:</strong></p>\n\n<pre class=\"prettyprint\"><code>    abstract class School{\n    abstract static class Student{\n    static int i = 0;\n    public void marks() {};\n    }\n    static void display(){\n    System.out.println(School.Student.i);\n    }\n    }\n    public class Main extends School.Student{\n    public void marks() {\n    i = 1;\n    }\n    public static void main(String[] args) {\n    School.Student stu = new Main();\n    stu.marks();\n    School.display();\n    }\n    }</code></pre>\n\n<p> </p>","a":[{"id":1655805,"option":"0","correct":false},{"id":1655806,"option":"1","correct":true},{"id":1655807,"option":"Compilation error","correct":false},{"id":1655808,"option":"Runtime Error","correct":false}]},{"q":"<p>What will the given code snippet produce as output when you execute it?</p>\n\n<p><strong>code:</strong></p>\n\n<pre class=\"prettyprint\"><code>\n    abstract class Teacher{\n    private void show() {\n    System.out.print(\" Teacher\");\n    }}\n    public class Student extends Teacher{\n    protected void show() { // line 5\n    System.out.print(\" Student\");\n    }\n    public static void main(String[] args) {\n    Teacher teacher = new Student();\n    teacher.show(); // line 10\n    } }</code></pre>\n\n<p> </p>","a":[{"id":1655801,"option":"Teacher","correct":false},{"id":1655802,"option":"Student","correct":false},{"id":1655803,"option":"Compilation error at line 5","correct":false},{"id":1655804,"option":"Compilation error at line 10","correct":true}]},{"q":"<p>Two scenarios are given:<br>\nA.</p>\n\n<pre class=\"prettyprint\"><code> public class A extends B, C {.....}</code></pre>\n\n<p>B.</p>\n\n<pre class=\"prettyprint\"><code> public interface P extends Q,R{......}</code></pre>\n\n<p>Here, B and C are classes while Q and R are interfaces. here is an issue in one of the scenarios. Identify the class along with the issue?</p>","a":[{"id":1655793,"option":"The issue is in scenario A. A class cannot inherit from more than one class in Java.","correct":false},{"id":1655794,"option":"The issue is in scenario B. A public interface cannot inherit from more than one interface in Java.","correct":true},{"id":1655795,"option":"The issue is in scenario A. The syntax of inheritance is incorrect as the access specifier of B and C is specified.","correct":false},{"id":1655796,"option":"The issue is in B. The syntax of inheritance is incorrect as access specifier of Q and R is not specified.","correct":false}]},{"q":"<p>Class A has the following members:<br>\nint amount = 12;<br>\nString str = \"Welcome to PNB\";<br>\nfinal float rate = 4.5;<br>\nClass B has the following members:<br>\nfinal String name = \"Goodbye!\";<br>\nOut of A and B, identify the class which is an interface?</p>","a":[{"id":1655789,"option":"A","correct":false},{"id":1655790,"option":"B","correct":true},{"id":1655791,"option":"Neither A nor B","correct":false},{"id":1655792,"option":"Both A and B","correct":false}]},{"q":"<p>Determine the output of the given code snippet?<br>\n<strong> code:</strong></p>\n\n<pre class=\"prettyprint\"><code>interface Foo {\nString name = \"Foo\";\nvoid print();\n}\nclass Bar implements Foo {\nString name = \"Bar\";\n\npublic void print() {\n    System.out.println(name); // Line 1\n}\npublic static void main(String[] args) {\nFoo foo = new Bar(); // Line 2\nfoo.print(); // Line 3\n}\n}</code></pre>\n\n<p> </p>","a":[{"id":1655785,"option":"Foo","correct":false},{"id":1655786,"option":"Bar","correct":true},{"id":1655787,"option":"Compilation failure at Line 1","correct":false},{"id":1655788,"option":"Compilation failure at Line 2","correct":false}]},{"q":"<p>Which of these lines in the below-given code snippet will throw a compilation error when executed?</p>\n\n<p><strong>code:</strong></p>\n\n<pre class=\"prettyprint\"><code> abstract class Student {   \n    private abstract void marks(); // Line 1\n    abstract void calculate(); //Line 2\n    public void percentage(){} //Line 3\n    }\n    public class School extends Student{ // Line 4   \n    void calculate() { // Line 5\n    }\n    }</code></pre>\n\n<p><br>\n    <br>\n   </p>","a":[{"id":1655781,"option":"Line 1","correct":true},{"id":1655782,"option":"Line 2","correct":false},{"id":1655783,"option":"Line 3","correct":false},{"id":1655784,"option":"Line 4","correct":false}]},{"q":"<p>Which of the following class declarations can be used to represent aggregation in java?</p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>class A{\n}\nclass B{\nA obj;\n}</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>class A{\n}\nclass B extends A{\n}</code></pre>\n\n<p><strong>3.</strong></p>\n\n<pre class=\"prettyprint\"><code>class A{\n}\nclass B extends A{\n}\nclass C extends A{\n}</code></pre>\n\n<p><strong>4.</strong></p>\n\n<pre class=\"prettyprint\"><code>class A{\n}\nclass B extends A{\n}\nclass C extends B{\n}</code></pre>\n\n<p> </p>","a":[{"id":1655917,"option":"1","correct":true},{"id":1655918,"option":"2","correct":false},{"id":1655919,"option":"3","correct":false},{"id":1655920,"option":"4","correct":false}]},{"q":"<p>Which of the following code snippet should be appended to the code snippet given alongside to print all the client names along with their clientids?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>Map&lt;String, Integer&gt; clientid = new HashMap&lt;&gt;();\nclientid.put(\"John\", 2);\nclientid.put(\"Don\", 4);\nclientid.put(\"Ron\", 30);</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<pre class=\"prettyprint\"><code>clientid.forEach((name, clientid) -&gt; System.out.println(name + \" is \" + clientid + \" id\"));</code></pre>\n\n<p><strong>2.</strong></p>\n\n<pre class=\"prettyprint\"><code>clientid.forAll((name, clientid) ). System.out.println(name + \"\" is \"\" + clientid + \"\" id\"\"));</code></pre>\n\n<p> </p>","a":[{"id":1655913,"option":"1","correct":true},{"id":1655914,"option":"2","correct":false},{"id":1655915,"option":"Either 1 or 2","correct":false},{"id":1655916,"option":"None of these","correct":false}]},{"q":"<p>You have the following class in your Java program:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>public class Super {\npublic static float calc(int p, int r, int t){\nreturn (p*r*t)/100;\n}\n}</code></pre>\n\n<p><br>\nWhat can you do to create a class 'Sub' that inherits from class 'Super' and has the method 'calc' as well?</p>\n\n<p><strong>Options</strong></p>\n\n<p><strong>1.</strong></p>\n\n<p>Simply override the calc function in Sub class</p>\n\n<p><strong>2.</strong></p>\n\n<p>Change the return type of calc function in Sub class</p>\n\n<p><strong>3.</strong></p>\n\n<p>Change the order of arguments in calc function on Sub class</p>\n\n<p><strong>4.</strong></p>\n\n<p>The function cannot be overridden.</p>","a":[{"id":1655909,"option":"1","correct":false},{"id":1655910,"option":"2","correct":false},{"id":1655911,"option":"3","correct":false},{"id":1655912,"option":"4","correct":true}]},{"q":"<p>Predict the output of the given code snippet.<br>\n<strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>public class Test{\npublic static void main(String[] args){\nStudent s =new Student();\nSystem.out.println(s.marks);\n}}\nclass Student{\npublic int marks;\n}</code></pre>\n\n<p> </p>","a":[{"id":1655905,"option":"0","correct":true},{"id":1655906,"option":"Null","correct":false},{"id":1655907,"option":"Garbage value","correct":false},{"id":1655908,"option":"Error","correct":false}]},{"q":"<p>Given, alongside are two pseudo-class definitions in an Object-Oriented Programming language.<br>\nWhich of the following statements is true regarding the return type of Dog’s seekFood() function?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>public class Animal {\n\n protected Food seekFood() {\n\n return new Food();\n }\n}\n\npublic class Dog extends Animal {\n\n protected Food seekFood() {\n\n return new DogFood();\n }\n}</code></pre>\n\n<p> </p>","a":[{"id":1655893,"option":"It is an example of the use of covariant return type.","correct":true},{"id":1655894,"option":"It is an example of the use of abstract return type.","correct":false},{"id":1655895,"option":"It is an example of the use of contravariant return type.","correct":false},{"id":1655896,"option":"It is an example of the use of virtual return type.","correct":false}]},{"q":"What output will be produced once you execute the code snippet given alongside?","a":[{"id":1655997,"option":"Students are good","correct":true},{"id":1655998,"option":"Teacher teaches student","correct":false},{"id":1655999,"option":"Compilation error at line 2","correct":false},{"id":1656000,"option":"Compilation error at line 5","correct":false}]},{"q":"<p>What is the output of the following Java code:</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>interface IntNumber \n{\n    void ins(int item); \n    int delt();\n}\n\nclass HackerEarth implements IntNumber \n{\n    private int stck[];\n    private int pos;\n\nHackerEarth(int size)\n{\n    stck = new int[size];\n    pos = -1;\n}\n\npublic void ins(int item) \n{\n    if(pos==stck.length-1)  \n        System.out.println(\"Overflow\");\n    else\n        stck[++pos] = item;\n}\n\npublic int delt() \n{\n    if(pos &lt; 0)\n    {\n        System.out.println(\"Underflow\");\n        return 0;\n    }\n    else\n    return stck[pos--];\n}\n}\n\nclass Hacker \n{\npublic static void main(String args[]) \n{\n    HackerEarth obj = new HackerEarth(3);\n    for(int i=0; i&lt;4; i++) obj.ins(i);\n    for(int i=0; i&lt;=3; i++)\n    System.out.println(obj.delt());\n}\n}   \n</code></pre>\n\n<p><strong>Output</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Overflow\n2\n1\n0\nUnderflow\n0</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>2\n1\n0\n0</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Overflow\n2\n1\n0\n0</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>2\n1\n0\nUnderflow\n0</code></pre>\n\t</li>\n</ol>","a":[{"id":691086,"option":"1","correct":true},{"id":691087,"option":"2","correct":false},{"id":691088,"option":"3","correct":false},{"id":691089,"option":"4","correct":false}]},{"q":"<p>What is the output of the following Python code:</p>\n\n<pre class=\"prettyprint\"><code>class sample:\n    def __init__(self):\n        return 'HackerEarth'\n    def display(self):\n        print 'HackeEarth'\na = sample()\nprint a\n</code></pre>","a":[{"id":149197,"option":"AttributeError","correct":false},{"id":149198,"option":"NameError","correct":false},{"id":149199,"option":"TypeError","correct":true},{"id":149200,"option":"SyntaxError","correct":false}]},{"q":"<p>Determine the output of the following Swift code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>class MyHackClass1 {\n   var myhackvar1 = 2.42\n   var myhackvar2: String {\n     return \"\\(myhackvar1)\"\n   }\n}\n\nclass MyHackclass2: MyHackClass1 {\n   var myhackvar3 = 2\n   override var myhackvar2: String {\n      return super.myhackvar2 + \"\\(myhackvar3)\"\n   }\n}\n\nlet myhackobj = MyHackclass2()\nmyhackobj.myhackvar1 = 2.4\nmyhackobj.myhackvar3 = Int(myhackobj.myhackvar1)+Int(myhackobj.myhackvar1)*Int(myhackobj.myhackvar1)\nprint(myhackobj.myhackvar2)\n</code></pre>\n\n<p><strong>Output</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>2.42</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>2</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>2.46</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>4.8</code></pre>\n\n<p> </p>","a":[{"id":573537,"option":"1","correct":false},{"id":573538,"option":"2","correct":false},{"id":573539,"option":"3","correct":true},{"id":573540,"option":"4","correct":false}]},{"q":"<p>Three car companies manufacture a specific set of cars every quarter.</p>\n\n<p><strong>Company1</strong> is the parent company of <strong>company2</strong> and <strong>company3</strong>. If <strong>company2</strong> and <strong>company3</strong> want to sign a partnership, then they require information about the ratio of cars manufactured by <strong>company2</strong> to the ratio of cars manufactured by <strong>company3</strong>.</p>\n\n<p>Determine the required ratio based on the output of the following Python 3 code.</p>\n\n<pre class=\"prettyprint\"><code>class company1:\n    cars_manuf = 100\n    def x(self): \n        company1.cars_manuf = 150\n       \nclass company2(company1): \n    cars_manuf = 1000\n    def x(self): \n        print(company2.cars_manuf*company1.cars_manuf)\n  \nclass company3(company1):\n    def x(self): \n        cars_manuf = 10\n      \nclass Partner(company2, company3): \n    def x(self): \n        partner_car_val = company2.cars_manuf/company3.cars_manuf   \n        return partner_car_val\nobj = Partner() \na = obj.x()\nprint(a)</code></pre>\n\n<p> </p>","a":[{"id":1208704,"option":"1.0","correct":false},{"id":1208705,"option":"0.1","correct":false},{"id":1208706,"option":"10.0","correct":true},{"id":1208707,"option":"100.0","correct":false}]},{"q":"<p>In OOP, which of the following is organized by packages?</p>","a":[{"id":51088,"option":"Classes","correct":false},{"id":51089,"option":"Interfaces","correct":false},{"id":51090,"option":"Objects","correct":false},{"id":51091,"option":"Namespaces ","correct":true}]},{"q":"<p>You are required to perform some calculations to determine the profit difference between the various departments in a company. The calculations to be performed are provided in the following Python 3 code. If <strong>ID_num</strong> is 201 and <strong>dept</strong> is 1, then determine the output.</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>class company:\n    def __init__(self):\n        #ID = {ID_num: [Dept_num, dept_profit]}\n        self.ID = {101:[1, 8000],102:[1,6000],201:[1,6000],\n            202:[1,5500]}\n        self.dept_num = {1:[101,102,201,202]}\n        \n    def data(self):\n        d = self.ID.copy()\n        d.update(self.dept_num)\n        return d\n     \n    def data_profit(self, a, ID_num, dept):\n        val = a[ID_num][dept]-a[ID_num+1][dept]\n        return val\n               \ns = company()\na = s.data()\nID_num, dept = map(int, input().split(\",\"))\nb = s.data_profit(a, ID_num, dept)\nprint(b)</code></pre>\n\n<p> </p>","a":[{"id":1207815,"option":"2500","correct":false},{"id":1207816,"option":"500","correct":true},{"id":1207817,"option":"1000","correct":false},{"id":1207818,"option":"ValueError","correct":false}]},{"q":"<p>What is the output of the following Python code:</p>\n\n<pre class=\"prettyprint\"><code>class Rectangle(object):\n    def __init__(self, w, h):\n        self.width = w\n        self.height = h\n    def area(self):\n        return self.width * self.height\n    def __str__(self):\n        return '(Rectangle: %s, %s)' %(self.width, self.height)\n\nr1 = Rectangle(12,24)\nprint r1\n</code></pre>","a":[{"id":150575,"option":"(Rectangle: 12,  24)","correct":true},{"id":150576,"option":"288","correct":false},{"id":150577,"option":"(Rectangle: 24, 12)","correct":false},{"id":150578,"option":"144","correct":false}]},{"q":"<p>How many methods does the<strong> HackerCoder </strong>interface have in the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>public interface Hacker\n{\n    void NotCoding();\n    void setRate(double rate);\n    double getRate();\n}\n\npublic interface Coder \n{\n    void Coding();\n    void setRate(double rate);\n    double getRate();\n}\n\npublic interface HackerCoder extends Hacker, Coder \n{\n    ......\n    ......\n}\n</code></pre>\n\n<p> </p>","a":[{"id":676578,"option":"3","correct":false},{"id":676579,"option":"4","correct":false},{"id":676580,"option":"5","correct":false},{"id":676581,"option":"6","correct":true}]},{"q":"<p>What is the output of the following Java code?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>import java.util.*;\nimport java.lang.*;\n\nclass Language \n{\n    public String name;\n}\n\npublic class HackerEarth1\n{\n    public static void main(String[] args)\n    {\n        Language p = new Language();\n        p.name = \"EJava\";\n        func1(p);\n        System.out.println(p.name);\n        func2(p);\n        System.out.println(p.name);\n    }\n    static void func2(Language p)\n    {\n        p.name = \"Python\";\n        System.out.println(p.name);\n    }\n    static void func1(Language p) \n    {\n        p = new Language();\n        p.name = \"Angular\";\n        System.out.println(p.name);\n    }\n}</code></pre>\n\n<p><strong>Output:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Python\nPython\nAngular\nEjava</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Angular\nEJava\nPython\nPython</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Python\nAngular\nEJava\nPython</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>EJava\nAngular\nPython\nPython</code></pre>\n\t</li>\n</ol>","a":[{"id":693612,"option":"1","correct":false},{"id":693613,"option":"2","correct":true},{"id":693614,"option":"3","correct":false},{"id":693615,"option":"4","correct":false}]},{"q":"<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>import java.util.*;\nimport java.lang.*;\n\npublic class Main \n{\n\tpublic static void main(String[] args)\n\t{\n\t\tStringBuilder sb = new StringBuilder();\n\t\tsb.append(\"aaa\").insert(1, \"bb\").insert(4, \"ccc\");\n\t\tSystem.out.println(sb); \n\t}\n}</code></pre>\n\n<p> </p>","a":[{"id":678172,"option":"bbaaaccc","correct":false},{"id":678173,"option":"bbcccaaa","correct":false},{"id":678174,"option":"abbaaccc","correct":false},{"id":678175,"option":"abbaccca","correct":true}]},{"q":"<p>You are leading a group of students for a sports event. Some students have registered for the event and some have not. You are given the following Python 3 code. Determine the output that checks if Alice and Bob have registered for the event using the code. </p>\n\n<pre class=\"prettyprint\"><code>class Sports(object):\n\n        def __init__(boy, why):\n                boy.why = \"Sports 2020:\"\n\n        def Identity(boy):\n                return boy.why\n\n        def isBoy(boy):\n                return False\n\nclass Check(Sports):\n    \n        def isBoy(boy):\n                return True\n                \nx= Sports(\"Alice\")\nprint(x.Identity(), x.isBoy())\n\nx = Check(\"Bob\") \nprint(x.Identity(), x.isBoy())</code></pre>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Sports 2020: True\nSports 2020: False</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Sports 2020: False\nSports 2020: True</code></pre>\n\t<strong>  </strong></li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Alice: False\nBob: True</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Alice: True\nBob: False</code></pre>\n\t</li>\n</ol>","a":[{"id":730520,"option":"1","correct":false},{"id":730521,"option":"2","correct":true},{"id":730522,"option":"3\r\n","correct":false},{"id":730523,"option":"4","correct":false}]},{"q":"<p>In C++, which of the following statements about the Polymorphism technique are correct:</p>\n\n<ol>\n\t<li>Compile-time polymorphism is achieved by the function overloading or the operator overloading.</li>\n\t<li>Runtime polymorphism is achieved by the function overriding.</li>\n\t<li>Compile-time polymorphism is achieved by both function overloading and function overriding.</li>\n</ol>\n\n<p> </p>","a":[{"id":157855,"option":"1 and 2","correct":true},{"id":157856,"option":"2 and 3","correct":false},{"id":157857,"option":"1 and 3","correct":false},{"id":157858,"option":"All of these","correct":false}]},{"q":"<p>In C++, which of the following statements about the Friend class are correct?</p>\n\n<p> </p>","a":[{"id":154244,"option":"It can access only protected and public members of other class in which it is derived as a class.","correct":false},{"id":154245,"option":"It can access private and protected members of other class in which it is declared as a friend.","correct":true},{"id":154246,"option":"It can access only private members of other class in which it is derived as a friend","correct":false},{"id":154247,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>import java.util.*;\nimport java.lang.*;\n\nclass Java\n{\n    public void Skills() \n    {\n        System.out.println(\"Java\");\n    }\n}\nclass Scala\n{\n    public void Skills()\n    {\n        System.out.println(\"Scala\"); \n}\n    }\nclass Python \n{\n    public void Skills() \n    {\n        System.out.println(\"Python\"); \n    }\n}\nclass Program\n{\n    public static void main(String args[])\n    {\n        Java f1 = new Java();\n        Python f2 = new Python();\n        f1.Skills();\n    }\n}</code></pre>\n\n<p> </p>","a":[{"id":693715,"option":"Java","correct":true},{"id":693716,"option":"Scala","correct":false},{"id":693717,"option":"Python","correct":false},{"id":693718,"option":"Compilation error","correct":false}]},{"q":"<p>In object-oriented programming, which of the following statements about <strong>instance variables</strong> are correct:</p>\n\n<ol>\n\t<li>An instance variable of the type <strong>boolean </strong>defaults to false.</li>\n\t<li>An instance variable of the type <strong>boolean </strong>defaults to true.</li>\n\t<li>An instance variable of the type <strong>int </strong>defaults to 0.</li>\n\t<li>An instance variable of the type <strong>int </strong>defaults to null.</li>\n</ol>\n\n<p> </p>","a":[{"id":677519,"option":"1 and 3","correct":true},{"id":677520,"option":"1 and 4","correct":false},{"id":677521,"option":"2 and 3","correct":false},{"id":677522,"option":"2 and 4","correct":false}]},{"q":"<p>In object-oriented programming, which of these concepts is represented in the following two code statements:</p>\n\n<pre class=\"prettyprint\"><code>double max2 = MathUtil.max(10.34, 2.89);</code></pre>\n\n<pre class=\"prettyprint\"><code>int max1 = MathUtil.max(10, 23);</code></pre>\n\n<p> </p>","a":[{"id":669793,"option":"Method overloading","correct":true},{"id":669794,"option":"Inheritence","correct":false},{"id":669795,"option":"Method overriding","correct":false},{"id":669796,"option":"Abstraction","correct":false}]},{"q":"<p>In C++, if class <strong>C</strong> is derived from class <strong>B </strong>that is derived from class <strong>A </strong>through public inheritance, then which of the following data can be accessed by class <strong>C</strong>?</p>","a":[{"id":134119,"option":"Protected and Private data of B","correct":false},{"id":134120,"option":"Protected and Public data of A","correct":false},{"id":134121,"option":"Protected and Private data of A and B","correct":false},{"id":134122,"option":"Protected data of A and B","correct":true}]},{"q":"<p>In OOP, which of these helps the compiler process objects differently based on their data type or class?</p>\n\n<p>In Object-Oriented Programming, which of the following is used by the compiler process objects based on the data type or class?</p>","a":[{"id":51092,"option":"Inheritance","correct":false},{"id":51093,"option":"Polymorphism","correct":true},{"id":51094,"option":"Abstraction\t","correct":false},{"id":51095,"option":"Encapsulation","correct":false}]},{"q":"<p>In Java, which of the following is inherited by a subinterface from its superinterface?</p>\n\n<ol>\n\t<li>Abstract methods</li>\n\t<li>Default methods</li>\n\t<li>Constant fields</li>\n\t<li>Static methods</li>\n</ol>","a":[{"id":676574,"option":"1, 2, and 3","correct":true},{"id":676575,"option":"1, 2, and 4","correct":false},{"id":676576,"option":"1, 3, and 4","correct":false},{"id":676577,"option":"All of these","correct":false}]}]
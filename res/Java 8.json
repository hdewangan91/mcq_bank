[{"q":"<p>What is the output of the following Java code?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth {\n\n    int getValue() {\n        int returnValue = 10;\n        try {\n            String[] Languages = {\n                \"Java\",\n                \"Ruby\"\n            };\n            System.out.println(Languages[5]);\n        } catch (Exception e) {\n            System.out.println(\"Catch Block :\" + returnValue);\n            return returnValue;\n        } finally {\n            returnValue += 10;\n            System.out.println(\"Finally Block :\" + returnValue);\n        }\n        return returnValue;\n    }\n\n    public static void main(String args[]) {\n        HackerEarth\n        var = new HackerEarth();\n        System.out.println(\"Main Block:\" +\n            var.getValue());\n    }\n}</code></pre>\n\n<p><strong>Options:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Java\nRuby\nFinally Block :20\nMain Block:10</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Catch Block :10\nFinally Block :20\nMain Block:10</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Catch Block :10\nFinally Block :20\nMain Block:20</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Compilation error</code></pre>\n\t</li>\n</ol>","a":[{"id":693719,"option":"1","correct":false},{"id":693720,"option":"2","correct":true},{"id":693721,"option":"3","correct":false},{"id":693722,"option":"4","correct":false}]},{"q":"<p>What is the output of the following Java 8 code:</p>\n\n<pre class=\"prettyprint\"><code>import java.util.stream.IntStream;\nimport java.util.stream.Stream;\n\npublic class HackerEarth\n {\n  public static void main(String args[])\n  {\n    Stream&lt;double[]&gt; HackValue = IntStream.rangeClosed(1, 100)\n    .boxed().flatMap(a -&gt;IntStream.rangeClosed(a, 10)\n    .mapToObj(\n    b -&gt; new double[] {a,b, Math.sqrt(a * a + b * b)})\n    .filter (t -&gt; t[2] % 1 == 0));\n \nHackValue.limit(5)\n    .forEach(t-&gt; System.out.println(t[0] + \", \" + t[1] + \", \" + t[2]));\n   }\n}</code></pre>\n\n<p><strong>Output</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>3.0, 4.0, 5.0             \n6.0, 8.0, 10.0</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>3.0, 4.0, 5.0             \n6.0, 8.0, 10.0         \n5.0, 12.0, 13.0</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>3.0, 4.0, 5.0</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>6.0, 8.0, 10.0         \n5.0, 12.0, 13.0</code></pre>","a":[{"id":552948,"option":"1","correct":true},{"id":552949,"option":"2","correct":false},{"id":552950,"option":"3","correct":false},{"id":552951,"option":"4","correct":false}]},{"q":"<p>In Java, which of the following interfaces are implemented by a <strong>HashMap</strong>?</p>\n\n<ol>\n\t<li>Serializable</li>\n\t<li>Map</li>\n\t<li>Cloneable</li>\n</ol>","a":[{"id":579334,"option":"1","correct":true},{"id":579335,"option":"1 and 2","correct":false},{"id":579336,"option":"2 and 3","correct":false},{"id":579337,"option":"4","correct":false}]},{"q":"<p>In Java 8, what type of bit values does an array holds that is created by the <strong>BitSet </strong>class?</p>","a":[{"id":552912,"option":"integer","correct":false},{"id":552913,"option":"double","correct":false},{"id":552914,"option":"boolean","correct":true},{"id":552915,"option":"None of these","correct":false}]},{"q":"<p>Which of the following classes or interfaces have been recently introduced in Java 8?<br>\n<br>\n1. PrimitiveIterator<br>\n2. StringJoiner<br>\n3. StringFilter<br>\n4. UncheckedIOException</p>","a":[{"id":552956,"option":"1 and 2","correct":false},{"id":552957,"option":"1, 2, and 4","correct":true},{"id":552958,"option":"2 and 3","correct":false},{"id":552959,"option":"1, 3, and 4","correct":false}]},{"q":"<p>Among the following Java annotations, which is newly introduced in Java 8?</p>","a":[{"id":552680,"option":"@Override","correct":false},{"id":552681,"option":"@Deprecated","correct":false},{"id":552682,"option":"@Repeatable","correct":true},{"id":552683,"option":"@SuppressWarnings","correct":false}]},{"q":"<p>In Java 8, which of the following interfaces are defined by the Stream API for handling primitive type streams?</p>\n\n<p><strong>Options:</strong><br>\n1. IntStream<br>\n2. DoubleStream<br>\n3. FloatStream<br>\n4. LongStream</p>","a":[{"id":552920,"option":"1 and 2","correct":false},{"id":552921,"option":"3 and 4","correct":false},{"id":552922,"option":"1, 2, and 4","correct":true},{"id":552923,"option":"1, 2, 3 and 4","correct":false}]},{"q":"<p>What is the output of the following Java 8 code?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>import java.util.*;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\n\npublic class HackerEarth\n{\n   public static void main(String args[])\n   {\n       List&lt;String&gt; Languages = Arrays.asList(\"Python\",\"Java\",\"python\");\n       Map&lt;String, Integer&gt; LanguagesLength = \n       Languages.stream().collect(Collectors.toMap(Function.identity(), String::length));\n       System.out.println(\"list: \" + Languages);\n   }\n}</code></pre>","a":[{"id":552944,"option":"[Python, Java, python]","correct":true},{"id":552945,"option":"[Python, Java]","correct":false},{"id":552946,"option":"[Java,python]","correct":false},{"id":552947,"option":"Returns exception in thread \"main\" java.lang.IllegalStateException: Duplicate key Python","correct":false}]},{"q":"<p>Which of the following options represents a valid functional interface?</p>\n\n<p><strong>Options:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>public interface Hackerearth\n{\n  int getInput(int a, int b);\n}\n</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>public interface Hiring extends Hackerearth\n{\n  int getInput(double a, double b);\n}</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>public interface Competitors\n{\n}</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>interface Hackerearth\n{\n  int getInput(int num1, int num2);\n  default int getValue()\n  {\n    return 0;\n  }\n}</code></pre>\n\t</li>\n</ol>","a":[{"id":552700,"option":"1 and 4","correct":true},{"id":552701,"option":"1 and 2","correct":false},{"id":552702,"option":"All of these","correct":false},{"id":552703,"option":"None of these ","correct":false}]},{"q":"<p>Mike has written the following code Java 8 -<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>import java.lang.annotation.*;\n\n public class HackerEarth\n{\n\n @Target({ElementType.TYPE_PARAMETER, ElementType.TYPE_USE})\n @interface MyAnnotation { }\n\n @Retention(RetentionPolicy.RUNTIME)\n @interface Hints \n {\n  Hint[] value();\n }\n\n @Repeatable(Hints.class)\n @Retention(RetentionPolicy.RUNTIME)\n @interface Hint\n {\n  String value();\n }\n\n @Hint(\"hint1\")\n @Hint(\"hint2\")\n\n class Person { }\n\n public static void main(String[] args) \n  {\n  Hint hint = Person.class.getAnnotation(Hint.class);\n  System.out.println(hint);\n  Hints hints1 = Person.class.getAnnotation(Hints.class);\n  System.out.println(hints1.value().length);\n  Hint[] hints2 = Person.class.getAnnotationsByType(Hint.class);\n  System.out.println(hints2.length);\n  }\n}</code></pre>\n\n<p>What is going to be the output of the aforementioned code snippet?<br>\n<strong>Options:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>2\n2\nnull</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>2\nnull\n2</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>null\n2\n2</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Compilation error</code></pre>\n\t</li>\n</ol>","a":[{"id":552964,"option":"1","correct":false},{"id":552965,"option":"2","correct":false},{"id":552966,"option":"3","correct":true},{"id":552967,"option":"4","correct":false}]},{"q":"<p>In Java 8, which of the following interface is implemented by the <strong>DateTimeException</strong> class?</p>","a":[{"id":552676,"option":"Comparable","correct":false},{"id":552677,"option":"Serializable","correct":true},{"id":552678,"option":"Chronology","correct":false},{"id":552679,"option":"TemporalAmount","correct":false}]},{"q":"<p>What is the output of the following Java 8 code:</p>\n\n<pre class=\"prettyprint\"><code>\"hackerearth\".chars().distinct().peek(ch-&gt;System.out.print(ch)).sorted();</code></pre>","a":[{"id":552732,"option":"a,c,e,h,k,r,t","correct":false},{"id":552733,"option":"t,r,k,h,e,c,a","correct":false},{"id":552734,"option":"Compilation error","correct":false},{"id":552735,"option":"No output","correct":true}]},{"q":"<p>In Java 8, which of the following statements is used to define a predicate?</p>","a":[{"id":552724,"option":"Predicate is an anonymous function that accepts one argument and produces a result","correct":true},{"id":552725,"option":"Predicate is an anonymous function that accepts no argument and produces a result","correct":false},{"id":552726,"option":"Predicate is an anonymous function that accepts an argument and produces no result","correct":false},{"id":552727,"option":"None of these","correct":false}]},{"q":"<p>In Java 8, which of the following statements about the garbage collection process is correct?</p>\n\n<ol>\n\t<li>Unused package in a program automatically gets deleted.</li>\n\t<li>The memory occupied by objects with no reference is automatically reclaimed for deletion.</li>\n\t<li>Java deletes all unused java files on the system.</li>\n\t<li>The JVM cleans output of Java program.</li>\n</ol>\n\n<p> </p>","a":[{"id":612501,"option":"2","correct":true},{"id":612502,"option":"1 and 3","correct":false},{"id":612503,"option":"1 and 4","correct":false},{"id":612504,"option":"2 and 4","correct":false}]},{"q":"<p>In Java, which of the following is used by a linked list?</p>","a":[{"id":583864,"option":"Variables","correct":false},{"id":583865,"option":"Objects","correct":false},{"id":583866,"option":"Nodes","correct":true},{"id":583867,"option":"Structures","correct":false}]},{"q":"<p>What is the output of the following Java code: </p>\n\n<pre class=\"prettyprint\"><code>import java.util.HashMap;\nimport java.util.Set;\n \nclass charCount\n{\n    static void charNum(String inputString)\n    {\n        HashMap&lt;Character, Integer&gt; charMap = new HashMap&lt;Character, Integer&gt;();\n        char[] strArray = inputString.toCharArray();\n        for (char c : strArray)\n        {\n            if(charMap.containsKey(c))\n            {\n                charMap.put(c, charMap.get(c)+1);\n            }\n            else\n            {\n                charMap.put(c, 1);\n            }\n        }\n        Set&lt;Character&gt; charsInString = charMap.keySet();\n        for (Character ch : charsInString)\n        {\n            if(charMap.get(ch) &gt; 1)\n            {\n               System.out.println(ch +\" : \"+ charMap.get(ch));\n            }\n        }\n    }\n \n    public static void main(String[] args)\n    {\n       charNum(\"JavaJ2Ee\");\n    }\n}</code></pre>\n\n<p> </p>","a":[{"id":579354,"option":"a : 2\r\nE : 2\r\nJ : 2","correct":false},{"id":579355,"option":"a : 2\r\nJ : 2","correct":true},{"id":579356,"option":"J : 2 \r\na : 2\r\nE : 1\r\ne : 1\r\nv : 1","correct":false},{"id":579357,"option":"Compilation error","correct":false}]},{"q":"<p>What is the output of the following Java code: </p>\n\n<pre class=\"prettyprint\"><code>import java.util.Collections;\nimport java.util.*;\n\npublic class MyString \n{\n\tpublic MyString(String val) \n\t{\n\tthis.val = val;\n\t}\nprivate String val;\n\npublic static void main(String args[]) \n{\n\tMap&lt;String, Integer&gt; map1 = new HashMap&lt;String, Integer&gt;();\n\tString str1 = new String(\"Java OOPs!\");\n\tString str2 = new String(\"Java OOPs\");\n\tmap1.put(str1, new Integer(10));\n\tmap1.put(str2, new Integer(20));\n\tMap&lt;MyString, Integer&gt; map2 = new HashMap&lt;MyString, Integer&gt;();\n\tMyString str3 = new MyString(str1);\n\tMyString str4 = new MyString(str2);\n\tmap2.put(str3, new Integer(10));\n\tmap2.put(str4, new Integer(20));\n\tSystem.out.println(map1.get(str1));\n\tSystem.out.println(map2.get(str3));\n}\n}</code></pre>\n\n<p> </p>","a":[{"id":579269,"option":"10\r\n20","correct":false},{"id":579270,"option":"20\r\n10","correct":false},{"id":579271,"option":"10\r\n10 ","correct":true},{"id":579272,"option":"20\r\n20","correct":false}]},{"q":"<p>In Java 8, what is the component of functional interfaces?</p>","a":[{"id":552652,"option":"Exactly one abstract method","correct":true},{"id":552653,"option":"Multiple abstract methods","correct":false},{"id":552654,"option":"Abstract as well as concrete methods","correct":false},{"id":552655,"option":"None of these","correct":false}]},{"q":"<p>In Java 8, you can pass references of methods using the__________keyword.</p>","a":[{"id":552688,"option":"colon (:)","correct":false},{"id":552689,"option":"arrow (->)","correct":false},{"id":552690,"option":"Double colon (::)","correct":true},{"id":552691,"option":"dot (.)","correct":false}]},{"q":"<p>In Java 8, which of the following operations are related to the <strong>Map</strong> interface?</p>","a":[{"id":552904,"option":"insert() and delete()","correct":false},{"id":552905,"option":"get() and put()","correct":true},{"id":552906,"option":"add() and remove()","correct":false},{"id":552907,"option":"None of these","correct":false}]},{"q":"<p>Which of the following functional interfaces were currently introduced in Java 8:</p>\n\n<ol>\n\t<li>Runnable </li>\n\t<li>List </li>\n\t<li>Callable </li>\n\t<li>Collection</li>\n</ol>","a":[{"id":552660,"option":"1 and 3","correct":true},{"id":552661,"option":"3 and 4","correct":false},{"id":552662,"option":"1, 2, and 4","correct":false},{"id":552663,"option":"2, 3, and 4","correct":false}]},{"q":"<p>In Java, the forEach() method takes the ______________ object as an argument.</p>","a":[{"id":552684,"option":"java.util.function.Consumer","correct":true},{"id":552685,"option":"java.util.Consumer","correct":false},{"id":552686,"option":"java.lang.function.Consumer","correct":false},{"id":552687,"option":"java.lang.Consumer","correct":false}]},{"q":"<p>In Java 8, which of the following methods are used to store and load information from the Properties object to a disk?</p>","a":[{"id":552908,"option":"store() and keep()","correct":false},{"id":552909,"option":"store() and load()","correct":true},{"id":552910,"option":"stored() and loaded()","correct":false},{"id":552911,"option":"keep() and load()","correct":false}]},{"q":"<p>What is the output of the following Java 8 code:</p>\n\n<pre class=\"prettyprint\"><code>interface Climb\n {\n  boolean isTooHigh(int height, int limit);\n }\n\npublic class Climber\n {\n  public static void main(String[] args)\n {\n  check((h, l) -&gt; h.append(l).isEmpty(), 5);\n }\n\nprivate static void check(Climb climb, int height)\n {\n  if (climb.isTooHigh(height, 10))\n  System.out.println(\"too high\");\n  else\n  System.out.println(\"OK\");\n }\n}</code></pre>\n\n<p> </p>","a":[{"id":552932,"option":"too high","correct":false},{"id":552933,"option":"OK","correct":false},{"id":552934,"option":"Runtime error","correct":false},{"id":552935,"option":"Compilation error","correct":true}]},{"q":"<p>What is the output of the following Java 8 code?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>import java.util.*;\nimport java.util.stream.*;\n\nclass HackerEarth {\n    public static void main(String[] args) {\n        ArrayList &lt; Integer &gt; myList = new ArrayList &lt; &gt; ();\n        myList.add(7);\n        myList.add(4);\n        myList.add(10);\n        myList.add(3);\n        myList.add(17);\n        Stream &lt; Integer &gt; myStream = myList.stream();\n\n        Stream &lt; Integer &gt; myVals = myList.stream().sorted().filter((n) -&gt; (n % 2) == 1);\n        myVals = myList.stream().filter((n) -&gt; (n % 2) == 1)\n            .filter((n) -&gt; n &gt; 5);\n        myVals.forEach((n) -&gt; System.out.print(n + \" \"));\n    }\n}</code></pre>","a":[{"id":552924,"option":"3 7 17","correct":false},{"id":552925,"option":"7 17","correct":true},{"id":552926,"option":"7 10 17","correct":false},{"id":552927,"option":"3 4","correct":false}]},{"q":"<p>Which of the given options is the equivalent lambda version of the following Java 8 code snippet?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>Collections.sort(users, new Comparator&lt;Author&gt;()\n{\n  public int compare(Author a1, Author a2)\n  {\n    return a1.compareTo(a2.id);\n  }\n}</code></pre>","a":[{"id":552952,"option":"Collections.sort(authors, (Author a1, Author a2) -> a1.compareTo(a2));\r\n","correct":true},{"id":552953,"option":"Collections.sort(authors, (Author a1, Author a2) => a1.compareTo(a2));\r\n","correct":false},{"id":552954,"option":"Collections.sort { authors, (Author a1, Author a2) -> a1.compareTo(a2) };","correct":false},{"id":552955,"option":"Collections.sort( (Author a1, Author a2) -> a1.compareTo(a2));","correct":false}]},{"q":"<p>What is the output of the following Java 8 code?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>import java.util.*;\n\nclass HackerEarth\n{\n  public static void main(String[] args)\n  {\n    int[] array = {6,9,8};\n    List&lt;Integer&gt; arraylist = new ArrayList&lt;&gt;();\n    arraylist.add(array[0]);\n    arraylist.add(array[2]);\n    arraylist.set(1, array[1]);\n    arraylist.remove(0);\n    System.out.println(arraylist);\n  }\n}</code></pre>","a":[{"id":552876,"option":"8","correct":false},{"id":552877,"option":"[9]","correct":true},{"id":552878,"option":"Compilation error","correct":false},{"id":552879,"option":"[8]","correct":false}]},{"q":"<p>What is the output of the following Java 8 code?<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth{\n  public static void main(String[] args)\n  {\n    int a = 0;\n    int b = 3;\n    while(++a &lt; 3)\n    {\n    int c = --a + b++;\n    switch(b)\n      {\n        default:\n        case 0: a = ++a + a--;\n        case 1: a += a-- + ++b;\n      }\n    }\n    System.out.println(a);\n  }\n}</code></pre>","a":[{"id":552872,"option":"6","correct":true},{"id":552873,"option":"10","correct":false},{"id":552874,"option":"14","correct":false},{"id":552875,"option":"Runtime Error  ","correct":false}]},{"q":"<p>What is the output of the following Java 8 code?<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>import java.lang.*;\npublic class Hackerearth\n{\n  final int num = 10;\n  public void display()\n  {\n    int num =15;\n    Runnable r = new Runnable()\n    {\n      final int num = 20;\n      public void run(){\n        int num = 25;\n        System.out.println(this.num);\n      }\n    };\n    r.run();\n  }\n  public static void main(String args[])\n  {\n    Hackerearth sv = new Hackerearth();\n    sv.display();\n  }\n}</code></pre>","a":[{"id":552704,"option":"10","correct":false},{"id":552705,"option":"25","correct":false},{"id":552706,"option":"15","correct":false},{"id":552707,"option":"20","correct":true}]},{"q":"<p>What is the output of the following Java 8 code?<br>\n<strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>class Hackerearth\n{\n  public static void main (String[] args) \n  {\n    String Fruits = new String(\"Mango,Banana,Apple\");\n    Fruits = Fruits.replaceAll(\",\", \":\");\n    System.out.println(Fruits);\n  }  \n}</code></pre>","a":[{"id":552696,"option":"Mango : Banana : Apple","correct":false},{"id":552697,"option":"Mango:Banana:Apple","correct":true},{"id":552698,"option":"Runtime Error","correct":false},{"id":552699,"option":"Syntax Error","correct":false}]},{"q":"<p>John has written the following code in Java 7 and he wants to convert it to Java 8, then which of the given option is the correct Java 8 alternative?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>Arrays.sort(testStrings, new Comparator&lt;String&gt;() {\n  @Override\n  public int compare(String s1, String s2) {\n    return(s1.length() - s2.length());\n  }\n});</code></pre>\n\n<p><strong>Options:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Arrays.sort(testStrings, (s1, s2) -&gt; s1.length() - s2.length());</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Array.sort(testStrings, s1, s2 :: s1.length() - s2.length())</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Arrays.sort(((s1, s2),testStrings) -&gt; s1.length() - s2.length());</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Array.sort((s1, s2), testStrings -&gt; s1.size() - s2.size());</code></pre>\n\t</li>\n</ol>","a":[{"id":552672,"option":"1","correct":true},{"id":552673,"option":"2","correct":false},{"id":552674,"option":"3","correct":false},{"id":552675,"option":"4","correct":false}]},{"q":"<p>Which of the following statements about the <strong>default </strong>methods<strong> </strong>in<strong> </strong>Java are true:</p>\n\n<ol>\n\t<li>It provides a default implementation for a method.</li>\n\t<li>It is declared by using the keyword <strong>default.</strong></li>\n\t<li>It can be declared as static or abstract.</li>\n\t<li>A default method does not have access to the instance of variables of a class that is used to implement the interface.</li>\n</ol>","a":[{"id":674508,"option":"1, 2, and 3","correct":false},{"id":674509,"option":"1, 2, and 4","correct":true},{"id":674510,"option":"1 and 2","correct":false},{"id":674511,"option":"2 and 3","correct":false}]},{"q":"<p>In Java, which of the following <strong>method</strong> declarations are valid:</p>\n\n<ol>\n\t<li>final public void Hacker( ) { }</li>\n\t<li>public void final Hacker( ) { }</li>\n\t<li>public modifier void Hacker( ) { }</li>\n\t<li>public static final void Hacker( ) { }</li>\n</ol>","a":[{"id":678376,"option":"1 and 4","correct":true},{"id":678377,"option":"2 and 3","correct":false},{"id":678378,"option":"1 and  3","correct":false},{"id":678379,"option":"2 and 4","correct":false}]},{"q":"<p>What is the output of the following Java 8 code:</p>\n\n<pre class=\"prettyprint\"><code>import java.util.*;\nimport java.lang.*;\n\ninterface StrFunc\n{\n  String disp(String n);\n}\nclass Main\n{\n    public static void main(String args[])\n    {\n        StrFunc output = (str) -&gt; {\n        String result = \"\";\n        int a;\n        for(a = str.length()-1; a &gt;= 0; a--)\n            result += str.charAt(a);\n        return result;\n        };\n    System.out.println(output.disp(\"HACKEREARTH\"));\n    }\n}</code></pre>\n\n<p> </p>","a":[{"id":552892,"option":"HTRAEREKCAH","correct":true},{"id":552893,"option":"HACKEREARTH","correct":false},{"id":552894,"option":"HCERAT","correct":false},{"id":552895,"option":"Compilation error","correct":false}]},{"q":"<p>What is the output of the following Java 8 code:<br>\n </p>\n\n<pre class=\"prettyprint\"><code>import java.util.HashMap;\nimport java.util.Map;\nimport java.util.Map.Entry;\n\npublic class HackerEarth\n  {\n   public static void main(String a[]) {\n\n   Map&lt;String, String&gt; Hacker = new HashMap&lt;&gt;();\n   Hacker.put(\"Key 1\", \"Value 1\");\n   Hacker.put(\"Key 2\", \"Value 2\");\n   HackerEarth.iterateMap(Hacker);\n}\n\npublic static void iterateMap(Map&lt;String, String&gt; Hacker)\n   {\n    for(Entry&lt;String, String&gt; entry:Hacker.entrySet())\n     {\n      System.out.print(entry.getValue()+\", \"+entry.getKey());\n     }\n   }\n }\n</code></pre>\n\n<p> </p>","a":[{"id":552940,"option":"Key 1 Value 1, Key 2 Value 2","correct":false},{"id":552941,"option":"Value 1 Key 1, Value 2, Key 2","correct":false},{"id":552942,"option":"Value 1, Key 1Value 2, Key 2","correct":true},{"id":552943,"option":"Key 1, Value 1Key 2, Value 2","correct":false}]},{"q":"<p>In Java, which of the following statements about the synchronized methods is correct?</p>\n\n<ol>\n\t<li>A synchronized method is used to lock an object for any shared resource.</li>\n\t<li>When a thread invokes a synchronized method, it automatically acquires the lock for all the objects and releases it when the thread completes its task.</li>\n</ol>","a":[{"id":613785,"option":"1","correct":false},{"id":613786,"option":"2","correct":false},{"id":613787,"option":"Both of these","correct":true},{"id":613788,"option":"None of these","correct":false}]},{"q":"<p>In Java, which of the following statements about a generic constructor is correct?</p>","a":[{"id":613777,"option":"A constructor is generic if it declares one or more type variables.","correct":false},{"id":613778,"option":"A constructor can be declared generic irrespective of whether the class is declared generic.","correct":false},{"id":613779,"option":"A constructor contains the formal type parameters as its type variables.","correct":false},{"id":613780,"option":"All of these","correct":true}]},{"q":"<p>What is the output of the following Java code:  </p>\n\n<pre class=\"prettyprint\"><code>import java.util.*;\n\nclass HackerEarth\n{\n\tpublic static void main(String args[])\n\t {\n\t\tArrayList&lt;Double&gt; vals = new ArrayList&lt;&gt;();\n\t\tvals.add(1.0);\n\t\tvals.add(4.0);\n\t\tvals.add(16.0);\n\t\tSpliterator&lt;Double&gt; spltitr = vals.spliterator();\n\t\twhile(spltitr.tryAdvance((n) -&gt; System.out.print(\" \"+n)));\n\t\tSystem.out.println();\n\t\tspltitr = vals.spliterator();\n\t\tArrayList&lt;Double&gt; sqrs = new ArrayList&lt;&gt;();\n\t\twhile(spltitr.tryAdvance((n) -&gt; sqrs.add(Math.sqrt(n))));\n\t\tspltitr = sqrs.spliterator();\n\t\tspltitr.forEachRemaining((n) -&gt; System.out.print(\" \"+n));\n\t}\n}</code></pre>\n\n<p> </p>","a":[{"id":574684,"option":"1.0 4.0 16.0\r\n1.0 2.0 4.0","correct":true},{"id":574685,"option":"1.0 2.0 4.0\r\n1.0 4.0 16.0","correct":false},{"id":574686,"option":"1 4 16\r\n1 2 4","correct":false},{"id":574687,"option":"Compilation error","correct":false}]},{"q":"<p>In Java, which of the following methods is used to return the size of a collection?</p>","a":[{"id":583740,"option":"size()","correct":true},{"id":583741,"option":"getSize()","correct":false},{"id":583742,"option":"getCollectionSize()","correct":false},{"id":583743,"option":"collectionSize()","correct":false}]},{"q":"<p>Which of the following statements about <strong>hashCode </strong>in Java are true?</p>\n\n<ol>\n\t<li>If two objects are declared equal using the <em>equals()</em> method, then they must have the same hash codes.</li>\n\t<li>If two objects are declared equal using the <em>equals() </em>method, they may or may not have the same hash codes.</li>\n\t<li>During the execution of a Java application, if the <em>hashCode()</em> method is called on the same object multiple times, then the method must return the same integer value.</li>\n\t<li>The Object class has a <em>hashCode()</em> method that returns only positive integers.</li>\n</ol>","a":[{"id":582790,"option":"1 and 3","correct":true},{"id":582791,"option":"2 and 4","correct":false},{"id":582792,"option":"2, 3, and 4","correct":false},{"id":582793,"option":"1, 3 and 4","correct":false}]},{"q":"<p>What is the output of the following Java code: </p>\n\n<pre class=\"prettyprint\"><code>\n class HackerEarth\n{\n\tstatic String strVal;\n\tpublic static void main(String[] args) \n\t{\n\t\tHackerEarth h1 = new HackerEarth();\n\t\tstrVal = h1.getString(\"Program\");\n\t\tSystem.out.print(\" \"+strVal);\n\t}\n\npublic static String getString(String str){\n\n   StringBuffer strBuf = new StringBuffer(str.length());\n\n   for(int i=str.length() -1 ; i&gt;0;i--)\n   {\n     strBuf.append(str.charAt(i));\n   } \n   return strBuf.toString();\n}\t\n}</code></pre>\n\n<p> </p>","a":[{"id":579330,"option":"margor","correct":true},{"id":579331,"option":"margorP","correct":false},{"id":579332,"option":"margo","correct":false},{"id":579333,"option":"Runtime error","correct":false}]},{"q":"<p>In Java, which of the following statements about the <strong>Comparator Interface</strong> is correct?</p>\n\n<ol>\n\t<li>It must be implemented by all the elements in a SortedSet.</li>\n\t<li>It defines a function that is used to compare two objects.</li>\n\t<li>It can be used to design the custom-ordering scheme.</li>\n\t<li>It is used to order the objects of user-defined classes.</li>\n</ol>","a":[{"id":578450,"option":"1, 2, and 4","correct":false},{"id":578451,"option":"2 and 4","correct":false},{"id":578452,"option":"2, 3, and 4","correct":true},{"id":578453,"option":"1 and 4","correct":false}]},{"q":"<p>In Java 8, which of the following methods defined by collection is used to obtain a parallel stream?</p>","a":[{"id":552928,"option":"parallel()","correct":false},{"id":552929,"option":"parallelInput()","correct":false},{"id":552930,"option":"getParallelStream()","correct":false},{"id":552931,"option":"parallelStream()","correct":true}]},{"q":"<p>What is the output of the following Java 8 code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth\n  {\n\t\tpublic static void main(String[] args)\n\t{\n\t\tint val = 10;\n\t\tif((val&gt;10 ? val++: --val)&lt;10)\n\t{\n\t\tSystem.out.print(\"MAC\");\n\t}\n\t\tif(val&lt;10)\n\t\tSystem.out.print(\"PC\");\n\t}\n  }</code></pre>\n\n<p> </p>","a":[{"id":552960,"option":"MAC","correct":false},{"id":552961,"option":"PC","correct":false},{"id":552962,"option":"MACPC","correct":true},{"id":552963,"option":"Runtime error","correct":false}]},{"q":"<p>In Java 8, which of the following representations of the <strong>lambda </strong>operator is correct?</p>","a":[{"id":552888,"option":"=>","correct":false},{"id":552889,"option":"->","correct":true},{"id":552890,"option":":","correct":false},{"id":552891,"option":"::","correct":false}]},{"q":"<p>What is the output of the following Java 8 code:<br>\n </p>\n\n<pre class=\"prettyprint\"><code>interface LangFunction \n {\n   void callMe();\n }\n\nclass HackerEarth{\n public static void main(String args[])\n {\n  String str = \"Hacking\";\n  LangFunction Lf = ()-&gt; System.out.println(str+\"java\");\n  str=\"ay\";\n  Lf.callMe();\n }\n}</code></pre>\n\n<p> </p>","a":[{"id":552736,"option":"HelloWorldjava","correct":false},{"id":552737,"option":"HelloWorlday ","correct":false},{"id":552738,"option":"ayjava","correct":false},{"id":552739,"option":"Compilation error","correct":true}]},{"q":"<p>In Java 8, which of the following statements about the <em>lambda expressions</em> are true:</p>\n\n<ol>\n\t<li>It enables you to treat functionality as a method argument.</li>\n\t<li>It allows you to write functions that do not belong to a class.</li>\n\t<li>You should create a functional interface for calling a lambda expression.</li>\n\t<li>Lambda expressions cannot have empty bodies.</li>\n</ol>","a":[{"id":552656,"option":"1, 2, and 4","correct":false},{"id":552657,"option":"2 and 4","correct":false},{"id":552658,"option":"1, 2, and 3","correct":true},{"id":552659,"option":"1 and 3","correct":false}]},{"q":"<p>What is the output of the following Java 8 code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth \n {\n   public static void main(String[] args) \n {\n   int sum = 0;\n   int a = 3;\n    while(sum++ &lt; 3)\n {\n    int b = (1 + 2 * sum) % 3;\n      switch(b) \n     {\n     default:\n     case 0:\n       a -= 1; \n       break;\n     case 1: \n       a += 5;\n     }\n }\n    System.out.println(a);\n }\n }</code></pre>\n\n<p> </p>","a":[{"id":552744,"option":"1","correct":false},{"id":552745,"option":"6","correct":true},{"id":552746,"option":"3","correct":false},{"id":552747,"option":"4","correct":false}]},{"q":"<p>What is the output of the following Java 8 code?</p>\n\n<p><strong>Code:</strong></p>\n\n<pre class=\"prettyprint\"><code>import java.util.*;\n\nenum Fruit\n{\n   Mango, apple, Grapes, Apple\n}\n\nclass HackerEarth\n{\n   public static void main (String args[]) \n   {\n      Set&lt;Fruit&gt; obj = new TreeSet&lt;Name&gt;();\n      obj.add(Fruit.Mango);\n      obj.add(Fruit.Apple);\n      obj.add(Fruit.Grapes);\n      obj.add(Fruit.Mango);\n      obj.add(Fruit.apple);\n      for(Fruit f: obj)\n\t  {\n         System.out.println(f);\n      }\n   }\n}</code></pre>\n\n<p><strong>Options:</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Mango\nApple\nGrapes\napple</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Mango apple Grapes Apple</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Mango\nApple\nGrapes\nMango\napple</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>apple\nApple\nMango\nMango\nGrapes</code></pre>\n\t</li>\n</ol>","a":[{"id":552692,"option":"1","correct":true},{"id":552693,"option":"2","correct":false},{"id":552694,"option":"3","correct":false},{"id":552695,"option":"4","correct":false}]},{"q":"<p>In Java, which of the following statements about a <strong>singleton </strong>application is correct?</p>","a":[{"id":613789,"option":"It has a design solution where an application has only one instance of a class in all the possible scenarios without any exceptional conditions.","correct":true},{"id":613790,"option":"It has a design solution where an application has one or more instances of any class in all the possible scenarios without any exceptional conditions.","correct":false},{"id":613791,"option":"Both of these","correct":false},{"id":613792,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following Java code: </p>\n\n<pre class=\"prettyprint\"><code>import java.util.*;\npublic class Program\t\n{\npublic static void main(String[] args)\n{\n\tList&lt;Integer&gt; numbers = Arrays.asList(1, 2, 3);\n\tnumbers.stream().map(Program::divideByZero).forEach(System.out::println);\n}\n\npublic static int divideByZero(int n)\n{\n\treturn n / 0;\n}\n}</code></pre>\n\n<p> </p>","a":[{"id":583868,"option":"0","correct":false},{"id":583869,"option":"Compilation error","correct":false},{"id":583870,"option":"Exception: java.lang.nullpointerexception","correct":false},{"id":583871,"option":"Exception: java.lang.ArithmeticException: / by zero","correct":true}]},{"q":"<p>What is the output of the following Java code: </p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth\n{\n\tprivate boolean[] arr = new boolean[2]; // An instance variable\n\tpublic HackerEarth() \n\t{\n\t\tfor (int i = 0; i &lt; arr.length; i++) \n\t\t{\n\t\t\tSystem.out.println(\" \"+arr[i]);\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) \n\t{\n\t\tnew HackerEarth();\n\t\tString[] str = new String[2]; \n\t\tfor (int i = 0; i &lt; str.length; i++) \n\t\t{\n\t\t\tSystem.out.println(\" \" + str[i]);\n\t\t}\n\t}\n}</code></pre>\n\n<p> </p>","a":[{"id":582794,"option":"false\r\nfalse\r\nnull\r\nnull","correct":true},{"id":582795,"option":"true\r\ntrue\r\nnull\r\nnull","correct":false},{"id":582796,"option":"0\r\n0\r\nnull\r\nnull","correct":false},{"id":582797,"option":"null\r\nnull\r\n0\r\n0","correct":false}]},{"q":"<p>In Java, which of the following methods is used to retrieve a portion of an <strong>ArrayList</strong>?</p>","a":[{"id":579338,"option":"subSection()","correct":false},{"id":579339,"option":"subPortion()","correct":false},{"id":579340,"option":"subList()","correct":true},{"id":579341,"option":"subArray()","correct":false}]},{"q":"<p>In Java, which of the following methods are declared by the <strong>Set </strong>interface:</p>\n\n<ol>\n\t<li>add()</li>\n\t<li>remove()</li>\n\t<li>delete()</li>\n\t<li>contains()</li>\n</ol>","a":[{"id":578174,"option":"1 and 2","correct":false},{"id":578175,"option":"1, 2, and 4","correct":true},{"id":578176,"option":"1, 3, and 4","correct":false},{"id":578177,"option":"1 and 4","correct":false}]}]
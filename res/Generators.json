[{"q":"<p>In Python 3, which of the following statements about the generator expression and list comprehension are correct:</p>\n\n<ol>\n\t<li>The generator expression yields one item only when required. </li>\n\t<li>List comprehension reserves the memory for the entire list.</li>\n</ol>","a":[{"id":1121893,"option":"1","correct":false},{"id":1121894,"option":"2","correct":false},{"id":1121895,"option":"Both of these","correct":true},{"id":1121896,"option":"None of these","correct":false}]},{"q":"<p>In Python 3, which of the following statements represent the difference between the generator function and normal function:</p>\n\n<ol>\n\t<li>In generators, when the function yields, it is paused and the control is given to the caller.</li>\n\t<li>Local variables and their states are remembered between successive calls unlike in normal functions.</li>\n\t<li>Generator functions can contain multiple yield similar to a normal function that can have multiple return statements.</li>\n</ol>\n\n<p> </p>","a":[{"id":1121885,"option":"1 and 2","correct":true},{"id":1121886,"option":"2 and 3","correct":false},{"id":1121887,"option":"1 and 3","correct":false},{"id":1121888,"option":"All of these","correct":false}]},{"q":"<p>You are a balloon vendor and you buy balloons from two balloon makers, John and Alice. You are given the following details in the Python 3 code:</p>\n\n<ol>\n\t<li>List of colors that the balloon makers use while making balloons</li>\n\t<li>Class <strong>balloons</strong></li>\n\t<li>Subclass <strong>balloon_maker</strong></li>\n</ol>\n\n<p>You are required to print a brand name that contains the color of the balloon and the balloon maker's name.</p>\n\n<p><strong>Example</strong></p>\n\n<ul>\n\t<li>Output: Red **Alice </li>\n\t<li>Explanation: Here, red is the color used by Alice to make balloons. Therefore, Red **Alice is the output.</li>\n</ul>\n\n<p><strong>Python 3 code</strong></p>\n\n<pre class=\"prettyprint\"><code>class balloons:\n    def __init__(self, color='red'):\n        self.color = color\n    class balloon_maker:\n        def __init__(self, name = ''):\n            self.name = name\n        def maker_details(self):\n            self.name = 'John'\n            self.name = 'Alice'\n            return \"**\"+self.name\n    def balloon_details(self, color_list):\n        for _ in color_list[1]:\n            self.color = _\n        return self.color\ncolor_list = [['Red', \"Yellow\"], (\"White\", \"Black\"), [\"Pink\",\"Green\"]]\nb = balloons('yellow')\nc = balloons().balloon_maker()\nbrand = b.balloon_details(color_list)\nname = c.maker_details()\nprint(brand, name)</code></pre>\n\n<p> </p>","a":[{"id":1121905,"option":"Red **John","correct":false},{"id":1121906,"option":"Black **Alice","correct":true},{"id":1121907,"option":"Black **John","correct":false},{"id":1121908,"option":"Green **Alice","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>def Generator1(n):\n    for i in range(n):\n        yield i\ndef Generator2(x, y):\n    for j in range(x, y):\n        yield j\ndef Generator3(n, m):\n    yield from Generator1(n)\n    yield from Generator2(n, m+3)\nprint(tuple(Generator2(4, 10)))\n</code></pre>\n\n<p> </p>","a":[{"id":1121929,"option":"(4, 5, 6, 7, 8, 9)","correct":true},{"id":1121930,"option":"(4, 7, 10, 13, 16, 19)","correct":false},{"id":1121931,"option":"(4, 5, 6, 7, 8, 9, 10)","correct":false},{"id":1121932,"option":"TypeError","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>def numbers(n):\n    for i in n:\n        yield (i**2)\ncubes = numbers([2, 6, 1, 9, 5])\nprint(list(sorted(cubes)))\n</code></pre>\n\n<p> </p>","a":[{"id":1121845,"option":"[4, 36, 1, 81, 25]  ","correct":false},{"id":1121846,"option":"[1, 4, 25, 36, 81] ","correct":true},{"id":1121847,"option":"[2, 6, 1, 9, 5]","correct":false},{"id":1121848,"option":"TypeError","correct":false}]},{"q":"<p>In Python 3, which of the following statements about the <strong>yield </strong>keyword is correct:</p>\n\n<ol>\n\t<li>It turns a regular function into a generator.</li>\n\t<li>It can generate a sequence of values without destroying the local variable state.</li>\n</ol>","a":[{"id":1121841,"option":"1","correct":false},{"id":1121842,"option":"2","correct":false},{"id":1121843,"option":"Both of these","correct":true},{"id":1121844,"option":"None of these","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>def mul(f): \n    def Cal(*args, **kwargs): \n        result = f(*args, **kwargs) \n        return result \n    return Cal \n@mul\ndef mul(a, b): \n    return a * b  \nprint(mul(3, b = 6)) \n</code></pre>\n\n<p> </p>","a":[{"id":1121945,"option":"9","correct":false},{"id":1121946,"option":"18","correct":true},{"id":1121947,"option":"TypeError","correct":false},{"id":1121948,"option":"None","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>def Task(p, i):\n    i = iter(i)\n    for x in i:\n        if not p(x):\n            yield x\n            break\n    for x in i:\n        yield x\na = Task(lambda x: x&lt;5, [4,-2, 0, 1, 3, -1, 10, 33])\nfor i in range(2):\n    print(next(a), end=' ')\n</code></pre>\n\n<p> </p>","a":[{"id":1121937,"option":"10 33","correct":true},{"id":1121938,"option":"43865","correct":false},{"id":1121939,"option":"33 10 4 -2","correct":false},{"id":1121940,"option":"StopIteration","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>def MainProgram(iterable, x):\n    sample = tuple(iterable)\n    n = len(sample)\n    if not n and x:\n        return\n    indices = [1] * x\n    yield tuple(sample[i] for i in indices)\n    while True:\n        for i in reversed(range(x)):\n            if indices[i] != n - 1:\n                break\n        else:\n            return\n        indices[i:] = [indices[i] + 1] * (x - i)\n        yield tuple(sample[i] for i in indices)\na = MainProgram('PYTHON', 3) \nprint(next(a))\n</code></pre>\n\n<p> </p>","a":[{"id":1121933,"option":"(‘P’, ‘P’, ‘P’)","correct":false},{"id":1121934,"option":"(‘P’, ‘Y’, ‘T’)","correct":false},{"id":1121935,"option":"(‘Y’, ‘Y’, ‘Y’)","correct":true},{"id":1121936,"option":"((‘P’, ‘Y’, ‘T’), (‘P’, ‘Y’, ‘T’), (‘P’, ‘Y’, ‘T’))","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>import itertools\ndef MainProg(items):\n    n = len(items)\n    count = 0\n    if n==0: yield []\n    else:\n        for i in range(len(items)):\n            for cc in MainProg(items[:i]+items[i+3:]):\n                yield [items[i]]+cc\n                count += 1\nfor i in MainProg(list(\"red\")): print(''.join(i) + \", \", end=\"\")\nresult = MainProg(['t','a','n'])\nnext(result)\nprint(next(result))  \n</code></pre>\n\n<p> </p>","a":[{"id":1121925,"option":"r, er, dr, der, ['t']","correct":false},{"id":1121926,"option":"r, er, dr, der, ['a', 't']","correct":true},{"id":1121927,"option":"r, er, dr, der, ['n', 'a', 't']","correct":false},{"id":1121928,"option":"StopIteration","correct":false}]},{"q":"<p>In Python 3, consider the following expressions. Which of these statements about these expressions are correct:</p>\n\n<p><strong>Expressions</strong></p>\n\n<pre class=\"prettyprint\"><code>a = [i*3 for n in range(150)]\nb = (i*3 for n in range(150))</code></pre>\n\n<p><strong>Statements</strong></p>\n\n<ol>\n\t<li>type(a) is a list and type(b) is a generator</li>\n\t<li>print(a[0:5:-2]) is [0] and print(b[0:5:-2]) is (18, 15, 12, 6, 3)</li>\n\t<li>a[4] gives 12 and b[4] throws a TypeError</li>\n\t<li>Expression 1 executes the operations immediately and returns a list whereas expression 2 returns an object that can be iterated over</li>\n</ol>","a":[{"id":1121913,"option":"1, 2, and 3","correct":false},{"id":1121914,"option":"2, 3, and 4","correct":false},{"id":1121915,"option":"1, 3, and 4","correct":true},{"id":1121916,"option":"All of these","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>def cycle(i):\n    sample = []\n    for element in i:\n        yield element\n        sample.append(element)\n        print(sample)\n    while sample:\n        for element in sample:\n              yield element\na = cycle({10, -3, 70, 27, 'ABC'})\nfor n in a:\n    print(n, end=' ')\n    break\n</code></pre>\n\n<p> </p>","a":[{"id":1121921,"option":"27","correct":false},{"id":1121922,"option":"10 -3 70 27  ‘ABC’","correct":false},{"id":1121923,"option":"-3","correct":false},{"id":1121924,"option":"None of these","correct":true}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>def Filter1(nums):\n    for num in nums:\n        if num % 2 == 0:\n            yield num\ndef Filter2(nums):\n    for num in nums:\n        yield num * 3\ndef Filter3(nums):\n    for num in nums:\n        yield num\nnums = [0, -1, -4, -9, -16, -25, -36, -49]\nresult = Filter3(Filter2(Filter1(nums)))\nfor num in result:\n    print(num, end=' ')\n</code></pre>\n\n<p> </p>","a":[{"id":1121917,"option":"0 -12 -48 -108 ","correct":true},{"id":1121918,"option":"0 -48 -12 -108 ","correct":false},{"id":1121919,"option":"12 -48 0 -108 ","correct":false},{"id":1121920,"option":"TypeError ","correct":false}]},{"q":"<p>What is the output of the following Python 3 code:</p>\n\n<pre class=\"prettyprint\"><code>def Fun(x):\n    while(x!=0):\n        if x % 3 == 0:\n            yield x\n        x-=1\nfor i in Fun(9):\n    print(i, end=' ')\n</code></pre>\n\n<p> </p>","a":[{"id":1121873,"option":"8 4 2  ","correct":false},{"id":1121874,"option":"3 6 9  ","correct":false},{"id":1121875,"option":"9 6 3","correct":true},{"id":1121876,"option":"9 6 4 2","correct":false}]}]
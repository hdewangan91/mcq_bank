[{"q":"<p>Suppose you are working on a Linux environment. You have listed out all the processes running by using “jobs -l” command. In the list, there is a task called “systemp” whose state is running. But, the process id (PID) is not mentioned in the output. Now, your task is to find the process id of the “systemp” process. Using that process id, you need to kill the process. You can also kill the process by using the process name i.e.; “systemp”. Assume the process id as “2409” (for further use).<br>\nWhich of the given set of command(s) can do this task?</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code> pidof systemp\n kill -9 2409</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>pgrep systemp\nkill -9 2409\n</code></pre>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>pid systemp\npkill systemp</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>pgrep systemp\npkill systemp</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1656425,"option":"1, 2, 3, and 4","correct":false},{"id":1656426,"option":"1, 3, and 4","correct":false},{"id":1656427,"option":"1, 2, and 4","correct":true},{"id":1656428,"option":"2, 3, and 4","correct":false}]},{"q":"<p>Suppose you are working on a Linux environment. There are a few processes running both in the foreground and background. Now, you are required to create two processes among them: one process has to run in the foreground and the other in the background. So, you need to start them in that way. The process that should run in the foreground is “sleep 2000” and in the background is “sleep 8000”.<br>\nOn completing this, you also need to get the list of all processes in running or stopped state.</p>\n\n<p>Choose the best suitable set of commands from the options given to successfully complete the given task.</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>sleep 2000 \nsleep 8000 &amp;\njobs -l</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>sleep 2000 &amp;\nsleep 8000\njobs -l</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>sleep 2000 \nsleep 8000 \njobs -l</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>sleep 2000 &amp;\nsleep 8000 &amp;\njobs -l</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1656421,"option":"1","correct":true},{"id":1656422,"option":"2","correct":false},{"id":1656423,"option":"3","correct":false},{"id":1656424,"option":"4","correct":false}]},{"q":"<p>In Linux OS, suppose that you are working on processes. You want to learn about the commands that are available in this domain. ps is used to list all the processes. Consider a user “ABC” whose account is available in the system. This user has started a few processes in the terminal.<br>\nNow, your task is to find those processes. After retrieving, kill all the processes belonging to that user.</p>\n\n<p>What are the commands which can be used to do the mentioned process?</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>pgrep -l -u ABC\npkill -u ABC</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>pgrep -u ABC\npkill -u ABC</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>pgrep -l ABC\npkill ABC</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>pgrep ABC\npkill ABC</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1656417,"option":"1","correct":true},{"id":1656418,"option":"2","correct":false},{"id":1656419,"option":"3","correct":false},{"id":1656420,"option":"4","correct":false}]},{"q":"<p>In Linux OS, assume that you are working on processes. The system will have the records of all processes running and stopped from user login. To view the processes, you use “ps” command. Among all the processes, some may take a huge amount of CPU utilization and memory. Your task is to get the list of processes along with their memory consumption and CPU utilization. It should be sorted in descending order i.e. sorting should be done from high to low memory. What is the command that will be used to get the given task done?</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>ps pid,ppid,cmd,%mem,%cpu --sort=-%mem</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>ps -eo pid,ppid,cmd,%mem,%cpu --sort=-%mem</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>ps -eo pid,ppid,cmd,%mem,%cpu</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>Cannot be done.</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1656413,"option":"1","correct":false},{"id":1656414,"option":"2","correct":true},{"id":1656415,"option":"3","correct":false},{"id":1656416,"option":"4","correct":false}]},{"q":"<p>In a Linux environment, there are two kinds of processes based on their nature of running, one is foreground and the other is background. Now, you have logged in as the root user. Also, there is an XYZ user who is parallelly working on the system. Now, you want to view all the processes started and currently running in the system by XYZ, along with their respective details.<br>\nFrom the given options, choose the correct one to do this task.</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>ps -u XYZ</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>top -p XYZ</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>top -u XYZ</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>get -u XYZ</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1656406,"option":"1","correct":false},{"id":1656407,"option":"2","correct":false},{"id":1656408,"option":"3","correct":true},{"id":1657946,"option":"4","correct":false}]},{"q":"<p>In Linux OS, assume that you are working on processes. As you know, there are two types of processes: foreground and background. For instance, consider a process that will run forever as a service, i.e it will not die.<br>\nWhat is such a process known as?</p>","a":[{"id":1656401,"option":"Background","correct":false},{"id":1656402,"option":"Foreground","correct":false},{"id":1656403,"option":"Daemon","correct":true},{"id":1656404,"option":"Zombie","correct":false}]},{"q":"<p>In Linux, you consider each executed command in the terminal as a process. Suppose, you logged in as root user and started few processes.<br>\nNow, you have to get their details like PID, UID, PPID, TTY, STIME, CMD, TIME by their PIDs.</p>\n\n<p>Which command is used to retrieve the details for processes with pids 1200, 1500, 1800?</p>\n\n<p><strong>Options</strong></p>\n\n<ol>\n\t<li>\n\t<pre class=\"prettyprint\"><code>ps -ax 1200,1500,1800</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>ps -f -p 1200, 1500, 1800</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>ps -ppid 1200,1500,1800</code></pre>\n\n\t<p> </p>\n\t</li>\n\t<li>\n\t<pre class=\"prettyprint\"><code>ps -u -pid 1200,1500,1800</code></pre>\n\n\t<p> </p>\n\t</li>\n</ol>","a":[{"id":1656397,"option":"1","correct":false},{"id":1656398,"option":"2","correct":true},{"id":1656399,"option":"3","correct":false},{"id":1656400,"option":"4","correct":false}]},{"q":"Scenario:<br>In Linux OS, every application is a process if it gets executed. In general, process is considered as an instance of some program. So, in Linux we use different types of system calls to create a process. Among all, fork and exec methods are the most popular ones. <br>Problem Statement:<br>Based on the concept of fork and exec, which of the following statements are correct?<br>1. Parent and child process execute parallelly using fork().<br>2. Control will return to parent program only after an error using exec().","a":[{"id":1656409,"option":"Only statement 1 is correct.","correct":false},{"id":1656410,"option":"Only statement 2 is correct.","correct":false},{"id":1656411,"option":"Both statements are correct.","correct":true},{"id":1656412,"option":"None of the statements are correct.","correct":false}]},{"q":"In Shell Scripting, you are working on the Orphan process of the process management. Determine the output of the following C code:<br><pre class=\"prettyprint\"><code><br>#include<stdio.h> <br>#include <sys/types.h> <br>#include <unistd.h> <br>int main() <br>{  <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int pid = fork(); <br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (pid > 0) <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(\"Hello HackerEarth!\"); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (pid == 0) <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sleep(30); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(\"Hello Shell Scripting!\"); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 0; <br>}<br></code></pre> <br>","a":[{"id":1124254,"option":"Hello HackerEarth!","correct":true},{"id":1124255,"option":"Hello Shell Scripting!","correct":false},{"id":1124256,"option":"Compile-time error","correct":false},{"id":1124257,"option":"Run time error","correct":false}]},{"q":"In Shell Scripting, you are working on the Daemon processes of the process management. Which of these sequence of columns(left to right) that are visible after executing the ps command on the terminal are correct:<br>1) Command String<br>2) User ID<br>3) Terminal Name<br>4) Process ID<br>5) Session ID<br>6) Parent Process ID<br>7) Process Group ID","a":[{"id":1124262,"option":"1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7","correct":false},{"id":1124263,"option":"7 -> 6 -> 5 -> 4 -> 3 -> 2 -> 1","correct":false},{"id":1124264,"option":"2 -> 4 -> 6 -> 7 -> 5 -> 3 -> 1","correct":true},{"id":1124265,"option":"5 -> 3 -> 1 -> 2 -> 4 -> 6 -> 7","correct":false}]},{"q":"In Shell Scripting, you are working on process management. Which of the following statements about the zombie processes are called:<br>1) The exit status of the zombie process is recorded by the parent process by using the wait() system call.<br>2) If the parent process does not use the wait() system call, the zombie process will be terminated automatically from the process table.<br>3) The zombie processes can be removed from the system by sending the SIGCHLD signal to the parent.<br>4) If the zombie process is not eliminated through the SIGCHLD signal to the parent, then the parent process is terminated.","a":[{"id":1124246,"option":"1, 2, and 3","correct":false},{"id":1124247,"option":"2, 3, and 4","correct":false},{"id":1124248,"option":"1, 2, and 4","correct":false},{"id":1124249,"option":"1, 3, and 4","correct":true}]},{"q":"In Shell Scripting, you are working on the process management. Which of these processes is represented in the following C code:<br><pre class=\"prettyprint\"><code><br>#include <sys/wait.h><br>#include <stdlib.h><br>#include <unistd.h><br><br>int main(void)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pid_t pids[10];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int i;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 9; i >= 0; --i) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pids[i] = fork();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (pids[i] == 0) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sleep(i+1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_exit(0);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 9; i >= 0; --i)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;waitpid(pids[i], NULL, 0);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 0;<br>}<br></code></pre><br>1) Zombie process<br>2) Orphan process<br>3) Deamon process","a":[{"id":1124250,"option":"1","correct":true},{"id":1124251,"option":"2","correct":false},{"id":1124252,"option":"3","correct":false},{"id":1124253,"option":"None of these","correct":false}]},{"q":"In Shell Scripting, you are working on the Daemon processes of the process management. Which of these statements about the Daemon characteristics in  the following terminal command are correct:<br><pre class=\"prettyprint\"><code><br>ps - axj <br></code></pre> <br>1) The ‘- a’ option displays the status of the active processes that are owned by other users.<br>2) The ‘- x’ option displays the processes that don’t have a controlling terminal.<br>3) The ‘- j’ option displays information such as Session ID, Process group ID, Controlling terminal, and Terminal Process group ID.","a":[{"id":1124258,"option":"1 and 2","correct":false},{"id":1124259,"option":"2 and 3","correct":true},{"id":1124260,"option":"1 and 3","correct":false},{"id":1124261,"option":"All of these","correct":false}]}]
[{"q":"<p>John is working in ASP.NET for his clients and dealing with handling of errors. He are required&nbsp;to handover the control to the error handling endpoint (which is provided in the URL template) when there is some HTTP error. Then, which of these extensions should he use to perform the mentioned task?</p>\n\n<p>&nbsp;</p>","a":[{"id":738201,"option":"UseStatusCodePagesWithRedirects","correct":true},{"id":738202,"option":"UseStatusCodePagesWithReExecute","correct":false},{"id":738203,"option":"UseStatusCodePagesWithReplaces","correct":false},{"id":738204,"option":"UseStatusCodePagesWithRemit","correct":false}]},{"q":"<p>What is the output to the following code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#import\nint main (int argc, const char * argv[])\n{\n  NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init];\n  int i;\n  for( i=0;i&lt;4;i++) {\n   NSLog (@\"%@ objective\");\n  }\n   [pool drain];\n return 0;\n}</code></pre>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>","a":[{"id":1769696,"option":"\"%@\" throws an error in line 7 ","correct":true},{"id":1769697,"option":"error at line 4","correct":false},{"id":1769698,"option":"no error","correct":false},{"id":1769699,"option":"objective","correct":false}]},{"q":"<p>What is the output to the following code:</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>#import\n@interface SampleClass:NSObject\n-(NSString *) \ngetEmployeeNameForID:(int) id withError:(NSError **)errorPtr;\n@end\n@implementation SampleClass\n-(NSString *) getEmployeeNameForID:(int) id withError:(NSError **)errorPtr {\nif(id == 1) \n{\n return @\"Employee Test Name\";\n}\n@end\nint main() \n{\n  NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init];\n  SampleClass *sampleClass = [[SampleClass alloc]init];\n  NSError *error = nil;\n  NSString *name1 = [sampleClass getEmployeeNameForID:1 withError:&amp;error];\n  if(error) {\n   NSLog(@\"Error finding Name1: %@\",error);\n }\n else {\n  NSLog(@\"Name1: %@\",name1); }\n   error = nil;\n  SString *name2 = [sampleClass getEmployeeNameForID:2 withError:&amp;error];\n   if(error) {\n   NSLog(@\"Error finding Name2: %@\",error);\n    }{\nelse{\n NLog(@\"Name2: %@\",name2);\n }\n[pool drain];\nreturn 0;\n}</code></pre>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>","a":[{"id":1769672,"option":"Name1: Employee Test Name\r\n Error finding Name2: Unable to complete the process","correct":false},{"id":1769673,"option":"syntax error","correct":true},{"id":1769674,"option":"no  output","correct":false},{"id":1769675,"option":"compilation error","correct":false}]},{"q":"<p>You have to create a code and have to make sure that the items created in the code refer to detection and resolution of errors so that the end-user of your code uses it correctly.<br>\nFind the correct option from the following options which will better explain the implementation of the given particular code.</p>\n\n<pre class=\"prettyprint\"><code>NSString *domain = @\"com.MyCompany.MyApplication.ErrorDomain\";\nNSString *desc = NSLocalizedString(@\"Unable to complete the process\", @\"\");\nNSDictionary *userInfo = @{ NSLocalizedDescriptionKey : desc };\nNSError *error = [NSError errorWithDomain:domain code:-101 userInfo:userInfo];</code></pre>\n\n<p>&nbsp;</p>","a":[{"id":1769660,"option":"It shows how to create a custom error","correct":true},{"id":1769661,"option":"It shows how to remove a custom error","correct":false},{"id":1769662,"option":"It shows how to prevent a custom error","correct":false},{"id":1769663,"option":"It shows how to implement a custom error","correct":false}]},{"q":"<p>In SAP FICO,&nbsp;you try to post intercompany posting, but the company code pair has not been set up for cross-company code posting<em>.</em> You have received the following error. Now, which of the following actions can be a solution for this scenario:</p>\n\n<p><strong>Error message</strong></p>\n\n<pre class=\"prettyprint\"><code>No clearing accounts specified for company codes NNNN/MMMM</code></pre>\n\n<p><strong>Actions</strong></p>\n\n<ol>\n\t<li>Make a configuration change in OBYA. Company Codes must be on the different Withholding Tax settings</li>\n\t<li>Make a configuration change in OBOA. Company Codes must be on the same Withholding Tax setting (Classic or Extended)</li>\n\t<li>Make a configuration change in OBYA. Company Codes must be on the same Withholding Tax setting (Classic or Extended)</li>\n</ol>","a":[{"id":1723265,"option":"1","correct":false},{"id":1723266,"option":"2","correct":false},{"id":1723267,"option":"3","correct":true},{"id":1723268,"option":"None of these","correct":false}]},{"q":"<p>In SAP FICO,&nbsp;you try to post an Invoice and the tax code has not been maintained in Configuration. You have received the following error. Now, which of the following actions can be a solution for this scenario:</p>\n\n<p><strong>Error message</strong></p>\n\n<pre class=\"prettyprint\"><code>Transaction key XXX YY Chart of Accounts ZZZZ not defined in table T030K</code></pre>\n\n<p><strong>Actions</strong></p>\n\n<ol>\n\t<li>Go to Tcode OB42, remove Chart of Account (ZZZZ), Transaction (XXX), and unassign G/L to the tax code (YY)</li>\n\t<li>Go to Tcode OB40, Provide Chart of Account (ZZZZ), Transaction (XXX), and assign G/L to the tax code (YY)</li>\n\t<li>Go to Tcode OB40, remove Chart of Account (ZZZZ), Transaction (XXX), and reassign G/L to the tax code (YY)</li>\n</ol>","a":[{"id":1723257,"option":"1","correct":false},{"id":1723258,"option":"2","correct":true},{"id":1723259,"option":"3","correct":false},{"id":1723260,"option":"None of these","correct":false}]},{"q":"<p>What is the output for the following code?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>enum BankError: Error {\n    case insufficientFunds\n    case insufficientInvestors(needed: Int)\n    case unknownError\n}\nfunc launchbanks(funds: Int, investors: Int) throws\n{\n    if funds &lt; 999 {\n    throw BankError.insufficientFunds\n    }\n    else if investors &lt; 3 {\n    throw BankError.insufficientInvestors(needed: 3)\n    }   \n    print(\"3... 2... 1...LAUNCH!!!\")\n}\ndo {\n    try launchbanks(funds: 5000, investors: 1)\n} catch {\n    print(error)\n}</code></pre>\n\n<p> </p>","a":[{"id":1656697,"option":"insufficientInvestors(needed: 3)","correct":true},{"id":1656698,"option":"3... 2... 1...LAUNCH!!!","correct":false},{"id":1656699,"option":"insufficientFunds","correct":false},{"id":1656700,"option":"error","correct":false}]},{"q":"<p>What is the correct code block to write in place of “//write here” statement among the following options to print output as “Software Engineer\".</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>let employee = [\"Name\": \"Arushi\", \"Role\": \"Software Engineer\"]\nenum Errors: Error {\ncase NoName\ncase NoRole\n}\n\n//write here\n\ndo {\nlet user = try EmployeeDetails(names: employee)\nprint(\"Result: \\(user)\")\n} catch Errors.NoName {\nprint(\"Name doesn't exists\")\n} catch Errors.NoRole {\nprint(\"Role doesn't exists\")\n}</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>func EmployeeDetails(names: [String: String]) throws -&gt; String {\nguard let getdetails = names[\"\"] else {\nthrow Errors.NoName\n}\nreturn getdetails\n}</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>func EmployeeDetails(names: [String: String]) throws -&gt; String {\nguard let getdetails = names[\"Role\"] else {\nthrow Errors.NoName\n}\nreturn getdetails\n}</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>func EmployeeDetails(names: [String: String]) throws -&gt; String {\nreturn names[\"Name\"]\n}</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>func EmployeeDetails(names: [String: String]) throws -&gt; String {\nguard let getdetails = names[\"Name\"] else {\nthrow Errors.NoName\n}\nreturn getdetails\n}</code></pre>\n\n<p> </p>","a":[{"id":1656665,"option":"1","correct":false},{"id":1656666,"option":"2","correct":true},{"id":1656667,"option":"3","correct":false},{"id":1656668,"option":"4","correct":false}]},{"q":"<p>Identify whether or not the below code gives an error as the output. If it does not, then by using which of the following options it will produce one?</p>\n\n<p><strong>Code</strong></p>\n\n<pre class=\"prettyprint\"><code>enum List {\n    case node(T, List)\n}</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p>1.</p>\n\n<pre class=\"prettyprint\"><code>enum List&lt;T&gt; {\n direct case node(T, List&lt;T&gt;)\n}</code></pre>\n\n<p>2.</p>\n\n<pre class=\"prettyprint\"><code>enum List&lt;T&gt; {\n case node(T)\n}</code></pre>\n\n<p>3.</p>\n\n<pre class=\"prettyprint\"><code>enum List&lt;T&gt; {\ncase Nil\nindirect case node(T, List&lt;T&gt;)\n}</code></pre>\n\n<p>4.</p>\n\n<pre class=\"prettyprint\"><code>None of the above</code></pre>\n\n<p> </p>","a":[{"id":1656553,"option":"1","correct":false},{"id":1656554,"option":"2","correct":false},{"id":1656555,"option":"3","correct":true},{"id":1656556,"option":"4","correct":false}]},{"q":"<p>You just started trying out node.js and realized that the Node is terminated whenever you have an unhandled exception in the program. This is different than the normal server container that you have been exposed to where, when an unhandled exception occurs, the container would still be able to receive the request. What is the effective way to catch an unhandled exception during the execution of asynchronous processes?</p>","a":[{"id":1654321,"option":"For asynchronous code, if an error happens, return the error.","correct":false},{"id":1654322,"option":"For asynchronous code, where the error is occurring, we can wrap that section in a node.js domain.","correct":true},{"id":1654323,"option":"For asynchronous code, where the error may happen anywhere, instead of throwing the error, fire the error event instead.","correct":false},{"id":1654324,"option":"For asynchronous, we can use the try-catch statement.","correct":false}]},{"q":"<p>You are working on the node.js domains to catch exceptions. While implementing this, there is one instance where you can not get domains to catch the exception. \"exception2\" in the callback is caught and handled in the domain.on('error') handler, but \"exception1\" is not caught. Also, when exception1 is thrown, it does not shut down the Node as expected. What is the best possible way to handle such exceptions with node js domains using express?</p>","a":[{"id":1654313,"option":"You should use \"Connect-domain\" that allows you to catch all errors for connecting modules.","correct":false},{"id":1654314,"option":"You need to use 'domain.active' to get the currently active domain and emit the error event on that.","correct":false},{"id":1654315,"option":"The exception may be handled inside of Express so that it never reaches your outer layer for the domains to handle.","correct":true},{"id":1654316,"option":"You should wrap your code into setImmediate block.","correct":false}]},{"q":"<p>While handling an HTTP request, an uncaught exception occurs, the server hangs forever and never fulfills the request as you have no opportunity to call the end() method on the http.ServerResponse object. What should you do in such a situation where the server hangs forever and never fulfills the request?</p>","a":[{"id":1654309,"option":"You can use the forever() function. It will restart your process as soon as it dies.","correct":true},{"id":1654310,"option":"If an error is thrown asynchronously, there is still a way to recover from it by calling next.","correct":false},{"id":1654311,"option":"You can use try/catch/finally.","correct":false},{"id":1654312,"option":"If an error is thrown synchronously, there is still a way to recover from it by calling next.","correct":false}]},{"q":"<p>In SAP FICO, you are working on Automatic posting. While this is happening, you will not be able to assign the Cost objects manually. Now, which of the following actions is required to perform to resolve this issue in this scenario?</p>","a":[{"id":1723261,"option":"The system is going to need a Cost Object in the posting as a posting needs to be automatically done in SAP Controlling.","correct":false},{"id":1723262,"option":"You will need to assign a default cost object to the account (OKB9).","correct":true},{"id":1723263,"option":"If multiple lines need to be inserted, then multiple tax types must be created.","correct":false},{"id":1723264,"option":"None of these","correct":false}]},{"q":"<p>Your node server stops working when it is unable to parse JSON in the following line.<br>\nvar json = JSON.parse(message);<br>\nYou need to look for a proper way to wrap a try and catch block around this statement. How would you catch the exception and log an error to the console, and keep the server alive?</p>","a":[{"id":1654317,"option":"You can put JASON.parse under try/catch.","correct":false},{"id":1654318,"option":"JSON.parse runs asynchronous and does not know anything about an error parameter. You can catch the error using http.request.","correct":false},{"id":1654319,"option":"JSON.parse runs synchronous and does not know anything about an error parameter. You can catch the error using http.request.","correct":false},{"id":1654320,"option":"JSON.parse returns an object; that you can catch with try/catch.","correct":true}]},{"q":"<p>Anita is working on error handling in her PHP Laravel web application. If she is required to view the errors and exceptions related to a webpage, then which of the following class paths can contain this information in this scenario?</p>","a":[{"id":1604542,"option":"App\\Public\\Handler","correct":false},{"id":1604543,"option":"App\\Config\\Handler","correct":false},{"id":1604544,"option":"App\\Errors\\Handler","correct":false},{"id":1604545,"option":"App\\Exceptions\\Handler","correct":true}]},{"q":"<p>In Laravel, you are working on error handling. Your application is set in debug mode. Detailed error messages with stack traces will be shown on every error that occurs within your web application. Now, if you have set the debug mode from <em>false</em><strong> </strong>to <em>true</em>, which of the following can occur in this scenario?</p>\n\n<p> </p>","a":[{"id":1604522,"option":"It will enable the user to view all errors","correct":true},{"id":1604523,"option":"It will disable the errors and warnings in the application","correct":false},{"id":1604524,"option":"It will display errors in the webpage and will not allow user to access that page","correct":false},{"id":1604525,"option":"None of these","correct":false}]},{"q":"<p>In PL/SQL, you are working on the error handling. Which of the following statements about the internally defined exception are correct:<br>\n1. It does not have a name unless either PL/SQL gives it one .<br>\n2. The syntax to associate the name with the error code of the internally defined exception is PRAGMA EXCEPTION_INIT (error_code)<br>\n3. The exception_name EXCEPTION syntax is used to declare the exception</p>","a":[{"id":1139975,"option":"1 and 2","correct":false},{"id":1139976,"option":"2 and 3","correct":true},{"id":1139977,"option":"1 and 3","correct":false},{"id":1139978,"option":"All of these","correct":false}]},{"q":"<p>In PL/SQL, you are working on the exception handling. Which of the folwoing exception with their corresponding error codes are correct:<br>\n1. The exception ACCESS_INTO_NULL is associated with its error code -6952.<br>\n2. The exception COLLECTION_Is_NULL is associated with its error code -6531.<br>\n3. The exception INVALID_NUMBER is associated with its error code -1722.<br>\n4. The exception NOT_LOGGED_ON is associated with its error code -1012</p>","a":[{"id":1139979,"option":"1, 2, and 3","correct":false},{"id":1139980,"option":"2, 3, and 4","correct":true},{"id":1139981,"option":"1, 2, and 4","correct":false},{"id":1139982,"option":"1, 3, and 4","correct":false}]},{"q":"<p>In Express.js, assume that you have written multiple error-handling middleware functions. In the penultimate middleware function. you end up not calling the<em> next </em>function and also do not send the response. What will happen to your request in this case?</p>","a":[{"id":724491,"option":"The function next will automatically be called.","correct":false},{"id":724492,"option":"The request will be garbage collected.","correct":false},{"id":724493,"option":"The request will not be completed.","correct":true},{"id":724494,"option":"The final error-handling middleware response would be sent.","correct":false}]},{"q":"<p>In Express.js, if you encounter an error while streaming the response to the client and proceed to call<em> next()</em> with the error, then which of the following behavior is most likely to be exhibited?</p>","a":[{"id":724487,"option":"It will close the connection and the request will be failed.","correct":true},{"id":724488,"option":"It will cut-off the stream, but it will show that the request has succeeded.","correct":false},{"id":724489,"option":"It will finish sending the response, but the request will be failed.","correct":false},{"id":724490,"option":"It will continue with the expected behavior.","correct":false}]},{"q":"<p>In Flask, which of the following methods is used to display a customized error page instead of the traditional error page?</p>","a":[{"id":129772,"option":"errorhandle() ","correct":false},{"id":129773,"option":"errorhandler() ","correct":true},{"id":129774,"option":"handleerror() ","correct":false},{"id":129775,"option":"error()","correct":false}]},{"q":"<p>In MS SSIS, which of the following is not a property of the package protection level?</p>","a":[{"id":400510,"option":"DontSaveSensitive","correct":false},{"id":400511,"option":"SaveSensitive","correct":false},{"id":400512,"option":"EncryptSensitiveWithUserKey","correct":false},{"id":400513,"option":"ServerStorage","correct":true}]},{"q":"<p>In MS SSIS, if the data is being transformed over a data pipeline from a source to a destination, which of the following errors occurs?</p>","a":[{"id":400711,"option":"Data Connection ","correct":false},{"id":400712,"option":"Data Transformation ","correct":true},{"id":400713,"option":"Expression Evaluation ","correct":false},{"id":400714,"option":"Data Conversion","correct":false}]}]